/*
Package ygotsros is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.20.0/genutil/names.go
using the following YANG input files:
	- nokia/YANG/nokia-combined/nokia-conf.yang
Imported modules were sourced from:
	- nokia/YANG/...
*/
package ygotsros

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NokiaConf_Configure_Qos_SapIngress_Prec represents the /nokia-conf/configure/qos/sap-ingress/prec YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_Prec struct {
	ApplyGroups        []string                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Fc                 *string                  `path:"fc" module:"nokia-conf"`
	PrecValue          *int32                   `path:"prec-value" module:"nokia-conf"`
	Priority           E_NokiaTypesQos_Priority `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_Prec implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_Prec) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_SapIngress_Prec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Prec) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_SapIngress_Prec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Prec) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Qos_SapIngress_Prec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Prec) GetFc() string {
	if t == nil || t.Fc == nil {
		return ""
	}
	return *t.Fc
}

// GetPrecValue retrieves the value of the leaf PrecValue from the NokiaConf_Configure_Qos_SapIngress_Prec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrecValue is set, it can
// safely use t.GetPrecValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrecValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Prec) GetPrecValue() int32 {
	if t == nil || t.PrecValue == nil {
		return 0
	}
	return *t.PrecValue
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Qos_SapIngress_Prec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Prec) GetPriority() E_NokiaTypesQos_Priority {
	if t == nil || t.Priority == 0 {
		return NokiaTypesQos_Priority_auto
	}
	return t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_Prec
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_Prec) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Priority == 0 {
		t.Priority = NokiaTypesQos_Priority_auto
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_SapIngress_Prec struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_SapIngress_Prec) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PrecValue == nil {
		return nil, fmt.Errorf("nil value for key PrecValue")
	}

	return map[string]interface{}{
		"prec-value": *t.PrecValue,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Prec) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_Prec"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Prec) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_Prec) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_Prec.
func (*NokiaConf_Configure_Qos_SapIngress_Prec) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_Queue represents the /nokia-conf/configure/qos/sap-ingress/queue YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_Queue struct {
	AdaptationRule     *NokiaConf_Configure_Qos_SapIngress_Queue_AdaptationRule  `path:"adaptation-rule" module:"nokia-conf"`
	AdvConfigPolicy    *string                                                   `path:"adv-config-policy" module:"nokia-conf"`
	ApplyGroups        []string                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	BurstLimit         NokiaConf_Configure_Qos_SapIngress_Queue_BurstLimit_Union `path:"burst-limit" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Qos_SapIngress_Queue_Cbs_Union        `path:"cbs" module:"nokia-conf"`
	CirNonProfiling    *bool                                                     `path:"cir-non-profiling" module:"nokia-conf"`
	DropTail           *NokiaConf_Configure_Qos_SapIngress_Queue_DropTail        `path:"drop-tail" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Qos_SapIngress_Queue_Mbs_Union        `path:"mbs" module:"nokia-conf"`
	Multipoint         *bool                                                     `path:"multipoint" module:"nokia-conf"`
	PacketByteOffset   *int32                                                    `path:"packet-byte-offset" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Qos_SapIngress_Queue_PercentRate     `path:"percent-rate" module:"nokia-conf"`
	QueueId            *int32                                                    `path:"queue-id" module:"nokia-conf"`
	QueueMode          E_NokiaConf_Configure_Qos_SapIngress_Queue_QueueMode      `path:"queue-mode" module:"nokia-conf"`
	QueueType          E_NokiaTypesQos_QueueType                                 `path:"queue-type" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Qos_SapIngress_Queue_Rate            `path:"rate" module:"nokia-conf"`
	SchedulerParent    *NokiaConf_Configure_Qos_SapIngress_Queue_SchedulerParent `path:"scheduler-parent" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_Queue) IsYANGGoStruct() {}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Qos_SapIngress_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Qos_SapIngress_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Qos_SapIngress_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Qos_SapIngress_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue) GetOrCreatePercentRate() *NokiaConf_Configure_Qos_SapIngress_Queue_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Qos_SapIngress_Queue_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue) GetOrCreateRate() *NokiaConf_Configure_Qos_SapIngress_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Qos_SapIngress_Queue_Rate{}
	return t.Rate
}

// GetOrCreateSchedulerParent retrieves the value of the SchedulerParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue) GetOrCreateSchedulerParent() *NokiaConf_Configure_Qos_SapIngress_Queue_SchedulerParent {
	if t.SchedulerParent != nil {
		return t.SchedulerParent
	}
	t.SchedulerParent = &NokiaConf_Configure_Qos_SapIngress_Queue_SchedulerParent{}
	return t.SchedulerParent
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Qos_SapIngress_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue) GetAdaptationRule() *NokiaConf_Configure_Qos_SapIngress_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Qos_SapIngress_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue) GetDropTail() *NokiaConf_Configure_Qos_SapIngress_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Qos_SapIngress_Queue. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue) GetPercentRate() *NokiaConf_Configure_Qos_SapIngress_Queue_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Qos_SapIngress_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue) GetRate() *NokiaConf_Configure_Qos_SapIngress_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetSchedulerParent returns the value of the SchedulerParent struct pointer
// from NokiaConf_Configure_Qos_SapIngress_Queue. If the receiver or the field SchedulerParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue) GetSchedulerParent() *NokiaConf_Configure_Qos_SapIngress_Queue_SchedulerParent {
	if t != nil && t.SchedulerParent != nil {
		return t.SchedulerParent
	}
	return nil
}

// GetAdvConfigPolicy retrieves the value of the leaf AdvConfigPolicy from the NokiaConf_Configure_Qos_SapIngress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvConfigPolicy is set, it can
// safely use t.GetAdvConfigPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvConfigPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue) GetAdvConfigPolicy() string {
	if t == nil || t.AdvConfigPolicy == nil {
		return ""
	}
	return *t.AdvConfigPolicy
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_SapIngress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_SapIngress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBurstLimit retrieves the value of the leaf BurstLimit from the NokiaConf_Configure_Qos_SapIngress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BurstLimit is set, it can
// safely use t.GetBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue) GetBurstLimit() NokiaConf_Configure_Qos_SapIngress_Queue_BurstLimit_Union {
	if t == nil || t.BurstLimit == nil {
		return NokiaConf_Configure_Qos_SapIngress_Queue_BurstLimit_Enum_auto
	}
	return t.BurstLimit
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Qos_SapIngress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue) GetCbs() NokiaConf_Configure_Qos_SapIngress_Queue_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return NokiaConf_Configure_Qos_SapIngress_Queue_Cbs_Enum_auto
	}
	return t.Cbs
}

// GetCirNonProfiling retrieves the value of the leaf CirNonProfiling from the NokiaConf_Configure_Qos_SapIngress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirNonProfiling is set, it can
// safely use t.GetCirNonProfiling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirNonProfiling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue) GetCirNonProfiling() bool {
	if t == nil || t.CirNonProfiling == nil {
		return false
	}
	return *t.CirNonProfiling
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Qos_SapIngress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue) GetMbs() NokiaConf_Configure_Qos_SapIngress_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return NokiaConf_Configure_Qos_SapIngress_Queue_Mbs_Enum_auto
	}
	return t.Mbs
}

// GetMultipoint retrieves the value of the leaf Multipoint from the NokiaConf_Configure_Qos_SapIngress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multipoint is set, it can
// safely use t.GetMultipoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multipoint == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue) GetMultipoint() bool {
	if t == nil || t.Multipoint == nil {
		return false
	}
	return *t.Multipoint
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Qos_SapIngress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Qos_SapIngress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue) GetQueueId() int32 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// GetQueueMode retrieves the value of the leaf QueueMode from the NokiaConf_Configure_Qos_SapIngress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueMode is set, it can
// safely use t.GetQueueMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue) GetQueueMode() E_NokiaConf_Configure_Qos_SapIngress_Queue_QueueMode {
	if t == nil || t.QueueMode == 0 {
		return NokiaConf_Configure_Qos_SapIngress_Queue_QueueMode_priority
	}
	return t.QueueMode
}

// GetQueueType retrieves the value of the leaf QueueType from the NokiaConf_Configure_Qos_SapIngress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueType is set, it can
// safely use t.GetQueueType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue) GetQueueType() E_NokiaTypesQos_QueueType {
	if t == nil || t.QueueType == 0 {
		return NokiaTypesQos_QueueType_auto_expedited
	}
	return t.QueueType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BurstLimit == nil {
		t.BurstLimit = NokiaConf_Configure_Qos_SapIngress_Queue_BurstLimit_Enum_auto
	}
	if t.Cbs == nil {
		t.Cbs = NokiaConf_Configure_Qos_SapIngress_Queue_Cbs_Enum_auto
	}
	if t.CirNonProfiling == nil {
		var v bool = false
		t.CirNonProfiling = &v
	}
	if t.Mbs == nil {
		t.Mbs = NokiaConf_Configure_Qos_SapIngress_Queue_Mbs_Enum_auto
	}
	if t.PacketByteOffset == nil {
		var v int32 = 0
		t.PacketByteOffset = &v
	}
	if t.QueueMode == 0 {
		t.QueueMode = NokiaConf_Configure_Qos_SapIngress_Queue_QueueMode_priority
	}
	if t.QueueType == 0 {
		t.QueueType = NokiaTypesQos_QueueType_auto_expedited
	}
	t.AdaptationRule.PopulateDefaults()
	t.DropTail.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
	t.SchedulerParent.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_SapIngress_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueId == nil {
		return nil, fmt.Errorf("nil value for key QueueId")
	}

	return map[string]interface{}{
		"queue-id": *t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_Queue.
func (*NokiaConf_Configure_Qos_SapIngress_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_Queue_AdaptationRule represents the /nokia-conf/configure/qos/sap-ingress/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRule `path:"cir" module:"nokia-conf"`
	Fir E_NokiaTypesQos_AdaptationRule `path:"fir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_Queue_AdaptationRule) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_SapIngress_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Cir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Cir
}

// GetFir retrieves the value of the leaf Fir from the NokiaConf_Configure_Qos_SapIngress_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fir is set, it can
// safely use t.GetFir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_AdaptationRule) GetFir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Fir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Fir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_SapIngress_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == 0 {
		t.Cir = NokiaTypesQos_AdaptationRule_closest
	}
	if t.Fir == 0 {
		t.Fir = NokiaTypesQos_AdaptationRule_closest
	}
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_Queue_AdaptationRule.
func (*NokiaConf_Configure_Qos_SapIngress_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_Queue_DropTail represents the /nokia-conf/configure/qos/sap-ingress/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_Queue_DropTail struct {
	Low *NokiaConf_Configure_Qos_SapIngress_Queue_DropTail_Low `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_Queue_DropTail) IsYANGGoStruct() {}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Qos_SapIngress_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Qos_SapIngress_Queue_DropTail_Low{}
	return t.Low
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Qos_SapIngress_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_DropTail) GetLow() *NokiaConf_Configure_Qos_SapIngress_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_Queue_DropTail.
func (*NokiaConf_Configure_Qos_SapIngress_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_Queue_DropTail_Low represents the /nokia-conf/configure/qos/sap-ingress/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Qos_SapIngress_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_Queue_DropTail_Low) IsYANGGoStruct() {}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Qos_SapIngress_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Qos_SapIngress_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return NokiaTypesQos_BurstPercent_Enum_auto
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentReductionFromMbs == nil {
		t.PercentReductionFromMbs = NokiaTypesQos_BurstPercent_Enum_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_Queue_DropTail_Low.
func (*NokiaConf_Configure_Qos_SapIngress_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_Queue_PercentRate represents the /nokia-conf/configure/qos/sap-ingress/queue/percent-rate YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_Queue_PercentRate struct {
	Cir           *float64                                                             `path:"cir" module:"nokia-conf"`
	Fir           *float64                                                             `path:"fir" module:"nokia-conf"`
	Pir           *float64                                                             `path:"pir" module:"nokia-conf"`
	Police        YANGEmpty                                                            `path:"police" module:"nokia-conf"`
	ReferenceRate E_NokiaConf_Configure_Qos_SapIngress_Queue_PercentRate_ReferenceRate `path:"reference-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_Queue_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_Queue_PercentRate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_SapIngress_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.00
	}
	return *t.Cir
}

// GetFir retrieves the value of the leaf Fir from the NokiaConf_Configure_Qos_SapIngress_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fir is set, it can
// safely use t.GetFir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_PercentRate) GetFir() float64 {
	if t == nil || t.Fir == nil {
		return 0.00
	}
	return *t.Fir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_SapIngress_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// GetPolice retrieves the value of the leaf Police from the NokiaConf_Configure_Qos_SapIngress_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Police is set, it can
// safely use t.GetPolice() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Police == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_PercentRate) GetPolice() YANGEmpty {
	if t == nil || t.Police == false {
		return false
	}
	return t.Police
}

// GetReferenceRate retrieves the value of the leaf ReferenceRate from the NokiaConf_Configure_Qos_SapIngress_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReferenceRate is set, it can
// safely use t.GetReferenceRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReferenceRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_PercentRate) GetReferenceRate() E_NokiaConf_Configure_Qos_SapIngress_Queue_PercentRate_ReferenceRate {
	if t == nil || t.ReferenceRate == 0 {
		return NokiaConf_Configure_Qos_SapIngress_Queue_PercentRate_ReferenceRate_port_limit
	}
	return t.ReferenceRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_Queue_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 0.00
		t.Cir = &v
	}
	if t.Fir == nil {
		var v float64 = 0.00
		t.Fir = &v
	}
	if t.ReferenceRate == 0 {
		t.ReferenceRate = NokiaConf_Configure_Qos_SapIngress_Queue_PercentRate_ReferenceRate_port_limit
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_Queue_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_Queue_PercentRate.
func (*NokiaConf_Configure_Qos_SapIngress_Queue_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_Queue_Rate represents the /nokia-conf/configure/qos/sap-ingress/queue/rate YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_Queue_Rate struct {
	Cir    NokiaConf_Configure_Qos_SapIngress_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Fir    NokiaConf_Configure_Qos_SapIngress_Queue_Rate_Fir_Union `path:"fir" module:"nokia-conf"`
	Pir    NokiaConf_Configure_Qos_SapIngress_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
	Police YANGEmpty                                               `path:"police" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_Queue_Rate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_SapIngress_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_Rate) GetCir() NokiaConf_Configure_Qos_SapIngress_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionInt64(0)
	}
	return t.Cir
}

// GetFir retrieves the value of the leaf Fir from the NokiaConf_Configure_Qos_SapIngress_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fir is set, it can
// safely use t.GetFir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_Rate) GetFir() NokiaConf_Configure_Qos_SapIngress_Queue_Rate_Fir_Union {
	if t == nil || t.Fir == nil {
		return UnionInt64(0)
	}
	return t.Fir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_SapIngress_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_Rate) GetPir() NokiaConf_Configure_Qos_SapIngress_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesQos_QueuePirRateMaximum_Enum_max
	}
	return t.Pir
}

// GetPolice retrieves the value of the leaf Police from the NokiaConf_Configure_Qos_SapIngress_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Police is set, it can
// safely use t.GetPolice() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Police == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_Rate) GetPolice() YANGEmpty {
	if t == nil || t.Police == false {
		return false
	}
	return t.Police
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = UnionInt64(0)
	}
	if t.Fir == nil {
		t.Fir = UnionInt64(0)
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesQos_QueuePirRateMaximum_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_Queue_Rate.
func (*NokiaConf_Configure_Qos_SapIngress_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_Queue_SchedulerParent represents the /nokia-conf/configure/qos/sap-ingress/queue/scheduler-parent YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_Queue_SchedulerParent struct {
	CirLevel      *int32  `path:"cir-level" module:"nokia-conf"`
	CirWeight     *int32  `path:"cir-weight" module:"nokia-conf"`
	Level         *int32  `path:"level" module:"nokia-conf"`
	SchedulerName *string `path:"scheduler-name" module:"nokia-conf"`
	Weight        *int32  `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_Queue_SchedulerParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_Queue_SchedulerParent) IsYANGGoStruct() {}

// GetCirLevel retrieves the value of the leaf CirLevel from the NokiaConf_Configure_Qos_SapIngress_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirLevel is set, it can
// safely use t.GetCirLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_SchedulerParent) GetCirLevel() int32 {
	if t == nil || t.CirLevel == nil {
		return 0
	}
	return *t.CirLevel
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Qos_SapIngress_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_SchedulerParent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 1
	}
	return *t.CirWeight
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Qos_SapIngress_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_SchedulerParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Qos_SapIngress_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_SchedulerParent) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Qos_SapIngress_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_SchedulerParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_Queue_SchedulerParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_SchedulerParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CirLevel == nil {
		var v int32 = 0
		t.CirLevel = &v
	}
	if t.CirWeight == nil {
		var v int32 = 1
		t.CirWeight = &v
	}
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_SchedulerParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_Queue_SchedulerParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_SchedulerParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_Queue_SchedulerParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_Queue_SchedulerParent.
func (*NokiaConf_Configure_Qos_SapIngress_Queue_SchedulerParent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt represents the /nokia-conf/configure/qos/sap-ingress/subscriber-mgmt YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt struct {
	DynamicPolicer *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer `path:"dynamic-policer" module:"nokia-conf"`
	PccRuleEntry   *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry   `path:"pcc-rule-entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt) IsYANGGoStruct() {}

// GetOrCreateDynamicPolicer retrieves the value of the DynamicPolicer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt) GetOrCreateDynamicPolicer() *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer {
	if t.DynamicPolicer != nil {
		return t.DynamicPolicer
	}
	t.DynamicPolicer = &NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer{}
	return t.DynamicPolicer
}

// GetOrCreatePccRuleEntry retrieves the value of the PccRuleEntry field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt) GetOrCreatePccRuleEntry() *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry {
	if t.PccRuleEntry != nil {
		return t.PccRuleEntry
	}
	t.PccRuleEntry = &NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry{}
	return t.PccRuleEntry
}

// GetDynamicPolicer returns the value of the DynamicPolicer struct pointer
// from NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt. If the receiver or the field DynamicPolicer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt) GetDynamicPolicer() *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer {
	if t != nil && t.DynamicPolicer != nil {
		return t.DynamicPolicer
	}
	return nil
}

// GetPccRuleEntry returns the value of the PccRuleEntry struct pointer
// from NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt. If the receiver or the field PccRuleEntry is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt) GetPccRuleEntry() *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry {
	if t != nil && t.PccRuleEntry != nil {
		return t.PccRuleEntry
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DynamicPolicer.PopulateDefaults()
	t.PccRuleEntry.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt.
func (*NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer represents the /nokia-conf/configure/qos/sap-ingress/subscriber-mgmt/dynamic-policer YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer struct {
	ArbiterParent    *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent  `path:"arbiter-parent" module:"nokia-conf"`
	Cbs              NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_Cbs_Union       `path:"cbs" module:"nokia-conf"`
	Mbs              NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_Mbs_Union       `path:"mbs" module:"nokia-conf"`
	PacketByteOffset *int32                                                                           `path:"packet-byte-offset" module:"nokia-conf"`
	PolicerIdRange   *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange `path:"policer-id-range" module:"nokia-conf" yangPresence:"true"`
	StatMode         E_NokiaTypesQos_IngressPolicerStatMode                                           `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer) IsYANGGoStruct() {}

// GetOrCreateArbiterParent retrieves the value of the ArbiterParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer) GetOrCreateArbiterParent() *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent {
	if t.ArbiterParent != nil {
		return t.ArbiterParent
	}
	t.ArbiterParent = &NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent{}
	return t.ArbiterParent
}

// GetOrCreatePolicerIdRange retrieves the value of the PolicerIdRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer) GetOrCreatePolicerIdRange() *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange {
	if t.PolicerIdRange != nil {
		return t.PolicerIdRange
	}
	t.PolicerIdRange = &NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange{}
	return t.PolicerIdRange
}

// GetArbiterParent returns the value of the ArbiterParent struct pointer
// from NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer. If the receiver or the field ArbiterParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer) GetArbiterParent() *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent {
	if t != nil && t.ArbiterParent != nil {
		return t.ArbiterParent
	}
	return nil
}

// GetPolicerIdRange returns the value of the PolicerIdRange struct pointer
// from NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer. If the receiver or the field PolicerIdRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer) GetPolicerIdRange() *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange {
	if t != nil && t.PolicerIdRange != nil {
		return t.PolicerIdRange
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer) GetCbs() NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer) GetMbs() NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer) GetStatMode() E_NokiaTypesQos_IngressPolicerStatMode {
	if t == nil || t.StatMode == 0 {
		return NokiaTypesQos_IngressPolicerStatMode_minimal
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cbs == nil {
		t.Cbs = NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	if t.Mbs == nil {
		t.Mbs = NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	if t.PacketByteOffset == nil {
		var v int32 = 0
		t.PacketByteOffset = &v
	}
	if t.StatMode == 0 {
		t.StatMode = NokiaTypesQos_IngressPolicerStatMode_minimal
	}
	t.ArbiterParent.PopulateDefaults()
	t.PolicerIdRange.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer.
func (*NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent represents the /nokia-conf/configure/qos/sap-ingress/subscriber-mgmt/dynamic-policer/arbiter-parent YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent struct {
	ArbiterName *string `path:"arbiter-name" module:"nokia-conf"`
	Level       *int32  `path:"level" module:"nokia-conf"`
	Weight      *int32  `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent) IsYANGGoStruct() {
}

// GetArbiterName retrieves the value of the leaf ArbiterName from the NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ArbiterName is set, it can
// safely use t.GetArbiterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ArbiterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent) GetArbiterName() string {
	if t == nil || t.ArbiterName == nil {
		return ""
	}
	return *t.ArbiterName
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent.
func (*NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange represents the /nokia-conf/configure/qos/sap-ingress/subscriber-mgmt/dynamic-policer/policer-id-range YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange.
func (*NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry represents the /nokia-conf/configure/qos/sap-ingress/subscriber-mgmt/pcc-rule-entry YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry struct {
	Range *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry) GetOrCreateRange() *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry) GetRange() *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry.
func (*NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range represents the /nokia-conf/configure/qos/sap-ingress/subscriber-mgmt/pcc-rule-entry/range YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range.
func (*NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SchedulerPolicy represents the /nokia-conf/configure/qos/scheduler-policy YANG schema element.
type NokiaConf_Configure_Qos_SchedulerPolicy struct {
	ApplyGroups          []string                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	Description          *string                                                 `path:"description" module:"nokia-conf"`
	FrameBasedAccounting *bool                                                   `path:"frame-based-accounting" module:"nokia-conf"`
	SchedulerPolicyName  *string                                                 `path:"scheduler-policy-name" module:"nokia-conf"`
	Tier                 map[int32]*NokiaConf_Configure_Qos_SchedulerPolicy_Tier `path:"tier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SchedulerPolicy) IsYANGGoStruct() {}

// NewTier creates a new entry in the Tier list of the
// NokiaConf_Configure_Qos_SchedulerPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy) NewTier(TierId int32) (*NokiaConf_Configure_Qos_SchedulerPolicy_Tier, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tier == nil {
		t.Tier = make(map[int32]*NokiaConf_Configure_Qos_SchedulerPolicy_Tier)
	}

	key := TierId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Tier[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Tier", key)
	}

	t.Tier[key] = &NokiaConf_Configure_Qos_SchedulerPolicy_Tier{
		TierId: &TierId,
	}

	return t.Tier[key], nil
}

// RenameTier renames an entry in the list Tier within
// the NokiaConf_Configure_Qos_SchedulerPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy) RenameTier(oldK, newK int32) error {
	if _, ok := t.Tier[newK]; ok {
		return fmt.Errorf("key %v already exists in Tier", newK)
	}

	e, ok := t.Tier[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Tier", oldK)
	}
	e.TierId = &newK

	t.Tier[newK] = e
	delete(t.Tier, oldK)
	return nil
}

// GetOrCreateTier retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SchedulerPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy) GetOrCreateTier(TierId int32) *NokiaConf_Configure_Qos_SchedulerPolicy_Tier {

	key := TierId

	if v, ok := t.Tier[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTier(TierId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTier got unexpected error: %v", err))
	}
	return v
}

// GetTier retrieves the value with the specified key from
// the Tier map field of NokiaConf_Configure_Qos_SchedulerPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy) GetTier(TierId int32) *NokiaConf_Configure_Qos_SchedulerPolicy_Tier {

	if t == nil {
		return nil
	}

	key := TierId

	if lm, ok := t.Tier[key]; ok {
		return lm
	}
	return nil
}

// DeleteTier deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SchedulerPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy) DeleteTier(TierId int32) {
	key := TierId

	delete(t.Tier, key)
}

// AppendTier appends the supplied NokiaConf_Configure_Qos_SchedulerPolicy_Tier struct to the
// list Tier of NokiaConf_Configure_Qos_SchedulerPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_SchedulerPolicy_Tier already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy) AppendTier(v *NokiaConf_Configure_Qos_SchedulerPolicy_Tier) error {
	if v.TierId == nil {
		return fmt.Errorf("invalid nil key received for TierId")
	}

	key := *v.TierId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tier == nil {
		t.Tier = make(map[int32]*NokiaConf_Configure_Qos_SchedulerPolicy_Tier)
	}

	if _, ok := t.Tier[key]; ok {
		return fmt.Errorf("duplicate key for list Tier %v", key)
	}

	t.Tier[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFrameBasedAccounting retrieves the value of the leaf FrameBasedAccounting from the NokiaConf_Configure_Qos_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrameBasedAccounting is set, it can
// safely use t.GetFrameBasedAccounting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrameBasedAccounting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy) GetFrameBasedAccounting() bool {
	if t == nil || t.FrameBasedAccounting == nil {
		return false
	}
	return *t.FrameBasedAccounting
}

// GetSchedulerPolicyName retrieves the value of the leaf SchedulerPolicyName from the NokiaConf_Configure_Qos_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerPolicyName is set, it can
// safely use t.GetSchedulerPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerPolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy) GetSchedulerPolicyName() string {
	if t == nil || t.SchedulerPolicyName == nil {
		return ""
	}
	return *t.SchedulerPolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FrameBasedAccounting == nil {
		var v bool = false
		t.FrameBasedAccounting = &v
	}
	for _, e := range t.Tier {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_SchedulerPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SchedulerPolicyName == nil {
		return nil, fmt.Errorf("nil value for key SchedulerPolicyName")
	}

	return map[string]interface{}{
		"scheduler-policy-name": *t.SchedulerPolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SchedulerPolicy.
func (*NokiaConf_Configure_Qos_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SchedulerPolicy_Tier represents the /nokia-conf/configure/qos/scheduler-policy/tier YANG schema element.
type NokiaConf_Configure_Qos_SchedulerPolicy_Tier struct {
	ApplyGroups        []string                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	ParentLocation     E_NokiaConf_Configure_Qos_SchedulerPolicy_Tier_ParentLocation      `path:"parent-location" module:"nokia-conf"`
	Scheduler          map[string]*NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler `path:"scheduler" module:"nokia-conf"`
	TierId             *int32                                                             `path:"tier-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SchedulerPolicy_Tier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SchedulerPolicy_Tier) IsYANGGoStruct() {}

// NewScheduler creates a new entry in the Scheduler list of the
// NokiaConf_Configure_Qos_SchedulerPolicy_Tier struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier) NewScheduler(SchedulerName string) (*NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler)
	}

	key := SchedulerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler{
		SchedulerName: &SchedulerName,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the NokiaConf_Configure_Qos_SchedulerPolicy_Tier struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier) RenameScheduler(oldK, newK string) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.SchedulerName = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SchedulerPolicy_Tier. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier) GetOrCreateScheduler(SchedulerName string) *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler {

	key := SchedulerName

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(SchedulerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of NokiaConf_Configure_Qos_SchedulerPolicy_Tier. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier) GetScheduler(SchedulerName string) *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler {

	if t == nil {
		return nil
	}

	key := SchedulerName

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SchedulerPolicy_Tier. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier) DeleteScheduler(SchedulerName string) {
	key := SchedulerName

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler struct to the
// list Scheduler of NokiaConf_Configure_Qos_SchedulerPolicy_Tier. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier) AppendScheduler(v *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler) error {
	if v.SchedulerName == nil {
		return fmt.Errorf("invalid nil key received for SchedulerName")
	}

	key := *v.SchedulerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_SchedulerPolicy_Tier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_SchedulerPolicy_Tier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetParentLocation retrieves the value of the leaf ParentLocation from the NokiaConf_Configure_Qos_SchedulerPolicy_Tier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ParentLocation is set, it can
// safely use t.GetParentLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ParentLocation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier) GetParentLocation() E_NokiaConf_Configure_Qos_SchedulerPolicy_Tier_ParentLocation {
	if t == nil || t.ParentLocation == 0 {
		return NokiaConf_Configure_Qos_SchedulerPolicy_Tier_ParentLocation_auto
	}
	return t.ParentLocation
}

// GetTierId retrieves the value of the leaf TierId from the NokiaConf_Configure_Qos_SchedulerPolicy_Tier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TierId is set, it can
// safely use t.GetTierId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TierId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier) GetTierId() int32 {
	if t == nil || t.TierId == nil {
		return 0
	}
	return *t.TierId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SchedulerPolicy_Tier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ParentLocation == 0 {
		t.ParentLocation = NokiaConf_Configure_Qos_SchedulerPolicy_Tier_ParentLocation_auto
	}
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_SchedulerPolicy_Tier struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TierId == nil {
		return nil, fmt.Errorf("nil value for key TierId")
	}

	return map[string]interface{}{
		"tier-id": *t.TierId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SchedulerPolicy_Tier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SchedulerPolicy_Tier.
func (*NokiaConf_Configure_Qos_SchedulerPolicy_Tier) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler represents the /nokia-conf/configure/qos/scheduler-policy/tier/scheduler YANG schema element.
type NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler struct {
	ApplyGroups          []string                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	Description          *string                                                                 `path:"description" module:"nokia-conf"`
	LimitUnusedBandwidth *bool                                                                   `path:"limit-unused-bandwidth" module:"nokia-conf"`
	PercentRate          *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate     `path:"percent-rate" module:"nokia-conf"`
	PortParent           *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PortParent      `path:"port-parent" module:"nokia-conf" yangPresence:"true"`
	Rate                 *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_Rate            `path:"rate" module:"nokia-conf"`
	SchedulerName        *string                                                                 `path:"scheduler-name" module:"nokia-conf"`
	SchedulerParent      *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent `path:"scheduler-parent" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler) IsYANGGoStruct() {}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler) GetOrCreatePercentRate() *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate{}
	return t.PercentRate
}

// GetOrCreatePortParent retrieves the value of the PortParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler) GetOrCreatePortParent() *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PortParent {
	if t.PortParent != nil {
		return t.PortParent
	}
	t.PortParent = &NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PortParent{}
	return t.PortParent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler) GetOrCreateRate() *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_Rate{}
	return t.Rate
}

// GetOrCreateSchedulerParent retrieves the value of the SchedulerParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler) GetOrCreateSchedulerParent() *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent {
	if t.SchedulerParent != nil {
		return t.SchedulerParent
	}
	t.SchedulerParent = &NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent{}
	return t.SchedulerParent
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler) GetPercentRate() *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetPortParent returns the value of the PortParent struct pointer
// from NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler. If the receiver or the field PortParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler) GetPortParent() *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PortParent {
	if t != nil && t.PortParent != nil {
		return t.PortParent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler) GetRate() *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetSchedulerParent returns the value of the SchedulerParent struct pointer
// from NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler. If the receiver or the field SchedulerParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler) GetSchedulerParent() *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent {
	if t != nil && t.SchedulerParent != nil {
		return t.SchedulerParent
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLimitUnusedBandwidth retrieves the value of the leaf LimitUnusedBandwidth from the NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LimitUnusedBandwidth is set, it can
// safely use t.GetLimitUnusedBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LimitUnusedBandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler) GetLimitUnusedBandwidth() bool {
	if t == nil || t.LimitUnusedBandwidth == nil {
		return false
	}
	return *t.LimitUnusedBandwidth
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LimitUnusedBandwidth == nil {
		var v bool = false
		t.LimitUnusedBandwidth = &v
	}
	t.PercentRate.PopulateDefaults()
	t.PortParent.PopulateDefaults()
	t.Rate.PopulateDefaults()
	t.SchedulerParent.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SchedulerName == nil {
		return nil, fmt.Errorf("nil value for key SchedulerName")
	}

	return map[string]interface{}{
		"scheduler-name": *t.SchedulerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler.
func (*NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate represents the /nokia-conf/configure/qos/scheduler-policy/tier/scheduler/percent-rate YANG schema element.
type NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate struct {
	Cir           NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate_Cir_Union       `path:"cir" module:"nokia-conf"`
	Pir           *float64                                                                           `path:"pir" module:"nokia-conf"`
	ReferenceRate E_NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate_ReferenceRate `path:"reference-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate) GetCir() NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate_Cir_Union {
	if t == nil || t.Cir == nil {
		return NokiaTypesQos_SchedCirPercentRate_Enum_sum
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// GetReferenceRate retrieves the value of the leaf ReferenceRate from the NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReferenceRate is set, it can
// safely use t.GetReferenceRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReferenceRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate) GetReferenceRate() E_NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate_ReferenceRate {
	if t == nil || t.ReferenceRate == 0 {
		return NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate_ReferenceRate_reference_port_limit
	}
	return t.ReferenceRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = NokiaTypesQos_SchedCirPercentRate_Enum_sum
	}
	if t.ReferenceRate == 0 {
		t.ReferenceRate = NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate_ReferenceRate_reference_port_limit
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate.
func (*NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PortParent represents the /nokia-conf/configure/qos/scheduler-policy/tier/scheduler/port-parent YANG schema element.
type NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PortParent struct {
	CirLevel  *int32 `path:"cir-level" module:"nokia-conf"`
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Level     *int32 `path:"level" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PortParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PortParent) IsYANGGoStruct() {}

// GetCirLevel retrieves the value of the leaf CirLevel from the NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirLevel is set, it can
// safely use t.GetCirLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PortParent) GetCirLevel() int32 {
	if t == nil || t.CirLevel == nil {
		return 0
	}
	return *t.CirLevel
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PortParent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PortParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PortParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PortParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PortParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CirLevel == nil {
		var v int32 = 0
		t.CirLevel = &v
	}
	if t.CirWeight == nil {
		var v int32 = 0
		t.CirWeight = &v
	}
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PortParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PortParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PortParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PortParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PortParent.
func (*NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_PortParent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_Rate represents the /nokia-conf/configure/qos/scheduler-policy/tier/scheduler/rate YANG schema element.
type NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_Rate struct {
	Cir NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_Rate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_Rate) GetCir() NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return NokiaTypesQos_SchedCirRate_Enum_sum
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_Rate) GetPir() NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesQos_SchedPirRate_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = NokiaTypesQos_SchedCirRate_Enum_sum
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesQos_SchedPirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_Rate.
func (*NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent represents the /nokia-conf/configure/qos/scheduler-policy/tier/scheduler/scheduler-parent YANG schema element.
type NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent struct {
	CirLevel      *int32  `path:"cir-level" module:"nokia-conf"`
	CirWeight     *int32  `path:"cir-weight" module:"nokia-conf"`
	Level         *int32  `path:"level" module:"nokia-conf"`
	SchedulerName *string `path:"scheduler-name" module:"nokia-conf"`
	Weight        *int32  `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent) IsYANGGoStruct() {}

// GetCirLevel retrieves the value of the leaf CirLevel from the NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirLevel is set, it can
// safely use t.GetCirLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent) GetCirLevel() int32 {
	if t == nil || t.CirLevel == nil {
		return 0
	}
	return *t.CirLevel
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 1
	}
	return *t.CirWeight
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CirLevel == nil {
		var v int32 = 0
		t.CirLevel = &v
	}
	if t.CirWeight == nil {
		var v int32 = 1
		t.CirWeight = &v
	}
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent.
func (*NokiaConf_Configure_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SharedQueue represents the /nokia-conf/configure/qos/shared-queue YANG schema element.
type NokiaConf_Configure_Qos_SharedQueue struct {
	ApplyGroups           []string                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	Description           *string                                                             `path:"description" module:"nokia-conf"`
	Fc                    map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_SharedQueue_Fc `path:"fc" module:"nokia-conf"`
	Queue                 map[int32]*NokiaConf_Configure_Qos_SharedQueue_Queue                `path:"queue" module:"nokia-conf"`
	SharedQueuePolicyName *string                                                             `path:"shared-queue-policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SharedQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SharedQueue) IsYANGGoStruct() {}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Qos_SharedQueue struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_SharedQueue) NewFc(FcName E_NokiaTypesSros_FcName) (*NokiaConf_Configure_Qos_SharedQueue_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_SharedQueue_Fc)
	}

	key := FcName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Qos_SharedQueue_Fc{
		FcName: FcName,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Qos_SharedQueue struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_SharedQueue) RenameFc(oldK, newK E_NokiaTypesSros_FcName) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = newK

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SharedQueue. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_SharedQueue) GetOrCreateFc(FcName E_NokiaTypesSros_FcName) *NokiaConf_Configure_Qos_SharedQueue_Fc {

	key := FcName

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Qos_SharedQueue. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_SharedQueue) GetFc(FcName E_NokiaTypesSros_FcName) *NokiaConf_Configure_Qos_SharedQueue_Fc {

	if t == nil {
		return nil
	}

	key := FcName

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SharedQueue. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_SharedQueue) DeleteFc(FcName E_NokiaTypesSros_FcName) {
	key := FcName

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Qos_SharedQueue_Fc struct to the
// list Fc of NokiaConf_Configure_Qos_SharedQueue. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_SharedQueue_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_SharedQueue) AppendFc(v *NokiaConf_Configure_Qos_SharedQueue_Fc) error {
	key := v.FcName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_SharedQueue_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Qos_SharedQueue struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_SharedQueue) NewQueue(QueueId int32) (*NokiaConf_Configure_Qos_SharedQueue_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Qos_SharedQueue_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Qos_SharedQueue_Queue{
		QueueId: &QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Qos_SharedQueue struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_SharedQueue) RenameQueue(oldK, newK int32) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SharedQueue. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_SharedQueue) GetOrCreateQueue(QueueId int32) *NokiaConf_Configure_Qos_SharedQueue_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Qos_SharedQueue. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_SharedQueue) GetQueue(QueueId int32) *NokiaConf_Configure_Qos_SharedQueue_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SharedQueue. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_SharedQueue) DeleteQueue(QueueId int32) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Qos_SharedQueue_Queue struct to the
// list Queue of NokiaConf_Configure_Qos_SharedQueue. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_SharedQueue_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_SharedQueue) AppendQueue(v *NokiaConf_Configure_Qos_SharedQueue_Queue) error {
	if v.QueueId == nil {
		return fmt.Errorf("invalid nil key received for QueueId")
	}

	key := *v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Qos_SharedQueue_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_SharedQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SharedQueue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_SharedQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SharedQueue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_SharedQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SharedQueue) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSharedQueuePolicyName retrieves the value of the leaf SharedQueuePolicyName from the NokiaConf_Configure_Qos_SharedQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SharedQueuePolicyName is set, it can
// safely use t.GetSharedQueuePolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SharedQueuePolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SharedQueue) GetSharedQueuePolicyName() string {
	if t == nil || t.SharedQueuePolicyName == nil {
		return ""
	}
	return *t.SharedQueuePolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SharedQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SharedQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_SharedQueue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_SharedQueue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SharedQueuePolicyName == nil {
		return nil, fmt.Errorf("nil value for key SharedQueuePolicyName")
	}

	return map[string]interface{}{
		"shared-queue-policy-name": *t.SharedQueuePolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SharedQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SharedQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SharedQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SharedQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SharedQueue.
func (*NokiaConf_Configure_Qos_SharedQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SharedQueue_Fc represents the /nokia-conf/configure/qos/shared-queue/fc YANG schema element.
type NokiaConf_Configure_Qos_SharedQueue_Fc struct {
	ApplyGroups        []string                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                `path:"apply-groups-exclude" module:"nokia-conf"`
	BroadcastQueue     *int32                  `path:"broadcast-queue" module:"nokia-conf"`
	FcName             E_NokiaTypesSros_FcName `path:"fc-name" module:"nokia-conf"`
	MulticastQueue     *int32                  `path:"multicast-queue" module:"nokia-conf"`
	Queue              *int32                  `path:"queue" module:"nokia-conf"`
	UnknownQueue       *int32                  `path:"unknown-queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SharedQueue_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SharedQueue_Fc) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_SharedQueue_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SharedQueue_Fc) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_SharedQueue_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SharedQueue_Fc) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBroadcastQueue retrieves the value of the leaf BroadcastQueue from the NokiaConf_Configure_Qos_SharedQueue_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BroadcastQueue is set, it can
// safely use t.GetBroadcastQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BroadcastQueue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SharedQueue_Fc) GetBroadcastQueue() int32 {
	if t == nil || t.BroadcastQueue == nil {
		return 0
	}
	return *t.BroadcastQueue
}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Qos_SharedQueue_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SharedQueue_Fc) GetFcName() E_NokiaTypesSros_FcName {
	if t == nil || t.FcName == 0 {
		return 0
	}
	return t.FcName
}

// GetMulticastQueue retrieves the value of the leaf MulticastQueue from the NokiaConf_Configure_Qos_SharedQueue_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastQueue is set, it can
// safely use t.GetMulticastQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastQueue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SharedQueue_Fc) GetMulticastQueue() int32 {
	if t == nil || t.MulticastQueue == nil {
		return 0
	}
	return *t.MulticastQueue
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Qos_SharedQueue_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SharedQueue_Fc) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// GetUnknownQueue retrieves the value of the leaf UnknownQueue from the NokiaConf_Configure_Qos_SharedQueue_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnknownQueue is set, it can
// safely use t.GetUnknownQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnknownQueue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SharedQueue_Fc) GetUnknownQueue() int32 {
	if t == nil || t.UnknownQueue == nil {
		return 0
	}
	return *t.UnknownQueue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SharedQueue_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SharedQueue_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_SharedQueue_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_SharedQueue_Fc) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"fc-name": t.FcName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SharedQueue_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SharedQueue_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SharedQueue_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SharedQueue_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SharedQueue_Fc.
func (*NokiaConf_Configure_Qos_SharedQueue_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SharedQueue_Queue represents the /nokia-conf/configure/qos/shared-queue/queue YANG schema element.
type NokiaConf_Configure_Qos_SharedQueue_Queue struct {
	ApplyGroups        []string                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	Cbs                *int32                                                `path:"cbs" module:"nokia-conf"`
	DropTail           *NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail   `path:"drop-tail" module:"nokia-conf"`
	Mbs                *int32                                                `path:"mbs" module:"nokia-conf"`
	Multipoint         *bool                                                 `path:"multipoint" module:"nokia-conf"`
	QueueId            *int32                                                `path:"queue-id" module:"nokia-conf"`
	QueueType          E_NokiaConf_Configure_Qos_SharedQueue_Queue_QueueType `path:"queue-type" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Qos_SharedQueue_Queue_Rate       `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SharedQueue_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SharedQueue_Queue) IsYANGGoStruct() {}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SharedQueue_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SharedQueue_Queue) GetOrCreateRate() *NokiaConf_Configure_Qos_SharedQueue_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Qos_SharedQueue_Queue_Rate{}
	return t.Rate
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Qos_SharedQueue_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SharedQueue_Queue) GetDropTail() *NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Qos_SharedQueue_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SharedQueue_Queue) GetRate() *NokiaConf_Configure_Qos_SharedQueue_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_SharedQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SharedQueue_Queue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_SharedQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SharedQueue_Queue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Qos_SharedQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SharedQueue_Queue) GetCbs() int32 {
	if t == nil || t.Cbs == nil {
		return 0
	}
	return *t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Qos_SharedQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SharedQueue_Queue) GetMbs() int32 {
	if t == nil || t.Mbs == nil {
		return 0
	}
	return *t.Mbs
}

// GetMultipoint retrieves the value of the leaf Multipoint from the NokiaConf_Configure_Qos_SharedQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multipoint is set, it can
// safely use t.GetMultipoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multipoint == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SharedQueue_Queue) GetMultipoint() bool {
	if t == nil || t.Multipoint == nil {
		return false
	}
	return *t.Multipoint
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Qos_SharedQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SharedQueue_Queue) GetQueueId() int32 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// GetQueueType retrieves the value of the leaf QueueType from the NokiaConf_Configure_Qos_SharedQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueType is set, it can
// safely use t.GetQueueType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SharedQueue_Queue) GetQueueType() E_NokiaConf_Configure_Qos_SharedQueue_Queue_QueueType {
	if t == nil || t.QueueType == 0 {
		return NokiaConf_Configure_Qos_SharedQueue_Queue_QueueType_auto_expedited
	}
	return t.QueueType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SharedQueue_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SharedQueue_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.QueueType == 0 {
		t.QueueType = NokiaConf_Configure_Qos_SharedQueue_Queue_QueueType_auto_expedited
	}
	t.DropTail.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_SharedQueue_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_SharedQueue_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueId == nil {
		return nil, fmt.Errorf("nil value for key QueueId")
	}

	return map[string]interface{}{
		"queue-id": *t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SharedQueue_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SharedQueue_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SharedQueue_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SharedQueue_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SharedQueue_Queue.
func (*NokiaConf_Configure_Qos_SharedQueue_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail represents the /nokia-conf/configure/qos/shared-queue/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail struct {
	Low *NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail_Low `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail) IsYANGGoStruct() {}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail_Low{}
	return t.Low
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail) GetLow() *NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail.
func (*NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail_Low represents the /nokia-conf/configure/qos/shared-queue/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail_Low) IsYANGGoStruct() {}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return NokiaTypesQos_BurstPercent_Enum_auto
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentReductionFromMbs == nil {
		t.PercentReductionFromMbs = NokiaTypesQos_BurstPercent_Enum_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail_Low.
func (*NokiaConf_Configure_Qos_SharedQueue_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SharedQueue_Queue_Rate represents the /nokia-conf/configure/qos/shared-queue/queue/rate YANG schema element.
type NokiaConf_Configure_Qos_SharedQueue_Queue_Rate struct {
	Cir *int32 `path:"cir" module:"nokia-conf"`
	Fir *int32 `path:"fir" module:"nokia-conf"`
	Pir *int32 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SharedQueue_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SharedQueue_Queue_Rate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_SharedQueue_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SharedQueue_Queue_Rate) GetCir() int32 {
	if t == nil || t.Cir == nil {
		return 0
	}
	return *t.Cir
}

// GetFir retrieves the value of the leaf Fir from the NokiaConf_Configure_Qos_SharedQueue_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fir is set, it can
// safely use t.GetFir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SharedQueue_Queue_Rate) GetFir() int32 {
	if t == nil || t.Fir == nil {
		return 0
	}
	return *t.Fir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_SharedQueue_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SharedQueue_Queue_Rate) GetPir() int32 {
	if t == nil || t.Pir == nil {
		return 100
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SharedQueue_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SharedQueue_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Fir == nil {
		var v int32 = 0
		t.Fir = &v
	}
	if t.Pir == nil {
		var v int32 = 100
		t.Pir = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SharedQueue_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SharedQueue_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SharedQueue_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SharedQueue_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SharedQueue_Queue_Rate.
func (*NokiaConf_Configure_Qos_SharedQueue_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SlopePolicy represents the /nokia-conf/configure/qos/slope-policy YANG schema element.
type NokiaConf_Configure_Qos_SlopePolicy struct {
	ApplyGroups        []string                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                            `path:"description" module:"nokia-conf"`
	ExceedSlope        *NokiaConf_Configure_Qos_SlopePolicy_ExceedSlope   `path:"exceed-slope" module:"nokia-conf"`
	HighSlope          *NokiaConf_Configure_Qos_SlopePolicy_HighSlope     `path:"high-slope" module:"nokia-conf"`
	HighplusSlope      *NokiaConf_Configure_Qos_SlopePolicy_HighplusSlope `path:"highplus-slope" module:"nokia-conf"`
	LowSlope           *NokiaConf_Configure_Qos_SlopePolicy_LowSlope      `path:"low-slope" module:"nokia-conf"`
	SlopePolicyName    *string                                            `path:"slope-policy-name" module:"nokia-conf"`
	TimeAverageFactor  *uint32                                            `path:"time-average-factor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SlopePolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SlopePolicy) IsYANGGoStruct() {}

// GetOrCreateExceedSlope retrieves the value of the ExceedSlope field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SlopePolicy) GetOrCreateExceedSlope() *NokiaConf_Configure_Qos_SlopePolicy_ExceedSlope {
	if t.ExceedSlope != nil {
		return t.ExceedSlope
	}
	t.ExceedSlope = &NokiaConf_Configure_Qos_SlopePolicy_ExceedSlope{}
	return t.ExceedSlope
}

// GetOrCreateHighSlope retrieves the value of the HighSlope field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SlopePolicy) GetOrCreateHighSlope() *NokiaConf_Configure_Qos_SlopePolicy_HighSlope {
	if t.HighSlope != nil {
		return t.HighSlope
	}
	t.HighSlope = &NokiaConf_Configure_Qos_SlopePolicy_HighSlope{}
	return t.HighSlope
}

// GetOrCreateHighplusSlope retrieves the value of the HighplusSlope field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SlopePolicy) GetOrCreateHighplusSlope() *NokiaConf_Configure_Qos_SlopePolicy_HighplusSlope {
	if t.HighplusSlope != nil {
		return t.HighplusSlope
	}
	t.HighplusSlope = &NokiaConf_Configure_Qos_SlopePolicy_HighplusSlope{}
	return t.HighplusSlope
}

// GetOrCreateLowSlope retrieves the value of the LowSlope field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SlopePolicy) GetOrCreateLowSlope() *NokiaConf_Configure_Qos_SlopePolicy_LowSlope {
	if t.LowSlope != nil {
		return t.LowSlope
	}
	t.LowSlope = &NokiaConf_Configure_Qos_SlopePolicy_LowSlope{}
	return t.LowSlope
}

// GetExceedSlope returns the value of the ExceedSlope struct pointer
// from NokiaConf_Configure_Qos_SlopePolicy. If the receiver or the field ExceedSlope is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SlopePolicy) GetExceedSlope() *NokiaConf_Configure_Qos_SlopePolicy_ExceedSlope {
	if t != nil && t.ExceedSlope != nil {
		return t.ExceedSlope
	}
	return nil
}

// GetHighSlope returns the value of the HighSlope struct pointer
// from NokiaConf_Configure_Qos_SlopePolicy. If the receiver or the field HighSlope is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SlopePolicy) GetHighSlope() *NokiaConf_Configure_Qos_SlopePolicy_HighSlope {
	if t != nil && t.HighSlope != nil {
		return t.HighSlope
	}
	return nil
}

// GetHighplusSlope returns the value of the HighplusSlope struct pointer
// from NokiaConf_Configure_Qos_SlopePolicy. If the receiver or the field HighplusSlope is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SlopePolicy) GetHighplusSlope() *NokiaConf_Configure_Qos_SlopePolicy_HighplusSlope {
	if t != nil && t.HighplusSlope != nil {
		return t.HighplusSlope
	}
	return nil
}

// GetLowSlope returns the value of the LowSlope struct pointer
// from NokiaConf_Configure_Qos_SlopePolicy. If the receiver or the field LowSlope is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SlopePolicy) GetLowSlope() *NokiaConf_Configure_Qos_SlopePolicy_LowSlope {
	if t != nil && t.LowSlope != nil {
		return t.LowSlope
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_SlopePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SlopePolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_SlopePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SlopePolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_SlopePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SlopePolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSlopePolicyName retrieves the value of the leaf SlopePolicyName from the NokiaConf_Configure_Qos_SlopePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicyName is set, it can
// safely use t.GetSlopePolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SlopePolicy) GetSlopePolicyName() string {
	if t == nil || t.SlopePolicyName == nil {
		return ""
	}
	return *t.SlopePolicyName
}

// GetTimeAverageFactor retrieves the value of the leaf TimeAverageFactor from the NokiaConf_Configure_Qos_SlopePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimeAverageFactor is set, it can
// safely use t.GetTimeAverageFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimeAverageFactor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SlopePolicy) GetTimeAverageFactor() uint32 {
	if t == nil || t.TimeAverageFactor == nil {
		return 7
	}
	return *t.TimeAverageFactor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SlopePolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SlopePolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.TimeAverageFactor == nil {
		var v uint32 = 7
		t.TimeAverageFactor = &v
	}
	t.ExceedSlope.PopulateDefaults()
	t.HighSlope.PopulateDefaults()
	t.HighplusSlope.PopulateDefaults()
	t.LowSlope.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_SlopePolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_SlopePolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SlopePolicyName == nil {
		return nil, fmt.Errorf("nil value for key SlopePolicyName")
	}

	return map[string]interface{}{
		"slope-policy-name": *t.SlopePolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SlopePolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SlopePolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SlopePolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SlopePolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SlopePolicy.
func (*NokiaConf_Configure_Qos_SlopePolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SlopePolicy_ExceedSlope represents the /nokia-conf/configure/qos/slope-policy/exceed-slope YANG schema element.
type NokiaConf_Configure_Qos_SlopePolicy_ExceedSlope struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	MaxAvg     *uint32                     `path:"max-avg" module:"nokia-conf"`
	MaxProb    *uint32                     `path:"max-prob" module:"nokia-conf"`
	StartAvg   *uint32                     `path:"start-avg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SlopePolicy_ExceedSlope implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SlopePolicy_ExceedSlope) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Qos_SlopePolicy_ExceedSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SlopePolicy_ExceedSlope) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetMaxAvg retrieves the value of the leaf MaxAvg from the NokiaConf_Configure_Qos_SlopePolicy_ExceedSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxAvg is set, it can
// safely use t.GetMaxAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxAvg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SlopePolicy_ExceedSlope) GetMaxAvg() uint32 {
	if t == nil || t.MaxAvg == nil {
		return 0
	}
	return *t.MaxAvg
}

// GetMaxProb retrieves the value of the leaf MaxProb from the NokiaConf_Configure_Qos_SlopePolicy_ExceedSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxProb is set, it can
// safely use t.GetMaxProb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxProb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SlopePolicy_ExceedSlope) GetMaxProb() uint32 {
	if t == nil || t.MaxProb == nil {
		return 0
	}
	return *t.MaxProb
}

// GetStartAvg retrieves the value of the leaf StartAvg from the NokiaConf_Configure_Qos_SlopePolicy_ExceedSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartAvg is set, it can
// safely use t.GetStartAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartAvg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SlopePolicy_ExceedSlope) GetStartAvg() uint32 {
	if t == nil || t.StartAvg == nil {
		return 0
	}
	return *t.StartAvg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SlopePolicy_ExceedSlope
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SlopePolicy_ExceedSlope) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SlopePolicy_ExceedSlope) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SlopePolicy_ExceedSlope"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SlopePolicy_ExceedSlope) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SlopePolicy_ExceedSlope) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SlopePolicy_ExceedSlope.
func (*NokiaConf_Configure_Qos_SlopePolicy_ExceedSlope) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SlopePolicy_HighSlope represents the /nokia-conf/configure/qos/slope-policy/high-slope YANG schema element.
type NokiaConf_Configure_Qos_SlopePolicy_HighSlope struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	MaxAvg     *uint32                     `path:"max-avg" module:"nokia-conf"`
	MaxProb    *uint32                     `path:"max-prob" module:"nokia-conf"`
	StartAvg   *uint32                     `path:"start-avg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SlopePolicy_HighSlope implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SlopePolicy_HighSlope) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Qos_SlopePolicy_HighSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SlopePolicy_HighSlope) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetMaxAvg retrieves the value of the leaf MaxAvg from the NokiaConf_Configure_Qos_SlopePolicy_HighSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxAvg is set, it can
// safely use t.GetMaxAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxAvg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SlopePolicy_HighSlope) GetMaxAvg() uint32 {
	if t == nil || t.MaxAvg == nil {
		return 0
	}
	return *t.MaxAvg
}

// GetMaxProb retrieves the value of the leaf MaxProb from the NokiaConf_Configure_Qos_SlopePolicy_HighSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxProb is set, it can
// safely use t.GetMaxProb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxProb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SlopePolicy_HighSlope) GetMaxProb() uint32 {
	if t == nil || t.MaxProb == nil {
		return 0
	}
	return *t.MaxProb
}

// GetStartAvg retrieves the value of the leaf StartAvg from the NokiaConf_Configure_Qos_SlopePolicy_HighSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartAvg is set, it can
// safely use t.GetStartAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartAvg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SlopePolicy_HighSlope) GetStartAvg() uint32 {
	if t == nil || t.StartAvg == nil {
		return 0
	}
	return *t.StartAvg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SlopePolicy_HighSlope
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SlopePolicy_HighSlope) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SlopePolicy_HighSlope) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SlopePolicy_HighSlope"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SlopePolicy_HighSlope) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SlopePolicy_HighSlope) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SlopePolicy_HighSlope.
func (*NokiaConf_Configure_Qos_SlopePolicy_HighSlope) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SlopePolicy_HighplusSlope represents the /nokia-conf/configure/qos/slope-policy/highplus-slope YANG schema element.
type NokiaConf_Configure_Qos_SlopePolicy_HighplusSlope struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	MaxAvg     *uint32                     `path:"max-avg" module:"nokia-conf"`
	MaxProb    *uint32                     `path:"max-prob" module:"nokia-conf"`
	StartAvg   *uint32                     `path:"start-avg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SlopePolicy_HighplusSlope implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SlopePolicy_HighplusSlope) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Qos_SlopePolicy_HighplusSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SlopePolicy_HighplusSlope) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetMaxAvg retrieves the value of the leaf MaxAvg from the NokiaConf_Configure_Qos_SlopePolicy_HighplusSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxAvg is set, it can
// safely use t.GetMaxAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxAvg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SlopePolicy_HighplusSlope) GetMaxAvg() uint32 {
	if t == nil || t.MaxAvg == nil {
		return 0
	}
	return *t.MaxAvg
}

// GetMaxProb retrieves the value of the leaf MaxProb from the NokiaConf_Configure_Qos_SlopePolicy_HighplusSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxProb is set, it can
// safely use t.GetMaxProb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxProb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SlopePolicy_HighplusSlope) GetMaxProb() uint32 {
	if t == nil || t.MaxProb == nil {
		return 0
	}
	return *t.MaxProb
}

// GetStartAvg retrieves the value of the leaf StartAvg from the NokiaConf_Configure_Qos_SlopePolicy_HighplusSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartAvg is set, it can
// safely use t.GetStartAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartAvg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SlopePolicy_HighplusSlope) GetStartAvg() uint32 {
	if t == nil || t.StartAvg == nil {
		return 0
	}
	return *t.StartAvg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SlopePolicy_HighplusSlope
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SlopePolicy_HighplusSlope) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SlopePolicy_HighplusSlope) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SlopePolicy_HighplusSlope"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SlopePolicy_HighplusSlope) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SlopePolicy_HighplusSlope) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SlopePolicy_HighplusSlope.
func (*NokiaConf_Configure_Qos_SlopePolicy_HighplusSlope) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SlopePolicy_LowSlope represents the /nokia-conf/configure/qos/slope-policy/low-slope YANG schema element.
type NokiaConf_Configure_Qos_SlopePolicy_LowSlope struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	MaxAvg     *uint32                     `path:"max-avg" module:"nokia-conf"`
	MaxProb    *uint32                     `path:"max-prob" module:"nokia-conf"`
	StartAvg   *uint32                     `path:"start-avg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SlopePolicy_LowSlope implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SlopePolicy_LowSlope) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Qos_SlopePolicy_LowSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SlopePolicy_LowSlope) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetMaxAvg retrieves the value of the leaf MaxAvg from the NokiaConf_Configure_Qos_SlopePolicy_LowSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxAvg is set, it can
// safely use t.GetMaxAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxAvg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SlopePolicy_LowSlope) GetMaxAvg() uint32 {
	if t == nil || t.MaxAvg == nil {
		return 0
	}
	return *t.MaxAvg
}

// GetMaxProb retrieves the value of the leaf MaxProb from the NokiaConf_Configure_Qos_SlopePolicy_LowSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxProb is set, it can
// safely use t.GetMaxProb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxProb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SlopePolicy_LowSlope) GetMaxProb() uint32 {
	if t == nil || t.MaxProb == nil {
		return 0
	}
	return *t.MaxProb
}

// GetStartAvg retrieves the value of the leaf StartAvg from the NokiaConf_Configure_Qos_SlopePolicy_LowSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartAvg is set, it can
// safely use t.GetStartAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartAvg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SlopePolicy_LowSlope) GetStartAvg() uint32 {
	if t == nil || t.StartAvg == nil {
		return 0
	}
	return *t.StartAvg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SlopePolicy_LowSlope
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SlopePolicy_LowSlope) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SlopePolicy_LowSlope) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SlopePolicy_LowSlope"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SlopePolicy_LowSlope) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SlopePolicy_LowSlope) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SlopePolicy_LowSlope.
func (*NokiaConf_Configure_Qos_SlopePolicy_LowSlope) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_VlanQosPolicy represents the /nokia-conf/configure/qos/vlan-qos-policy YANG schema element.
type NokiaConf_Configure_Qos_VlanQosPolicy struct {
	ApplyGroups        []string                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	CirWeightProfile   map[uint32]*NokiaConf_Configure_Qos_VlanQosPolicy_CirWeightProfile    `path:"cir-weight-profile" module:"nokia-conf"`
	Description        *string                                                               `path:"description" module:"nokia-conf"`
	Fc                 map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_VlanQosPolicy_Fc `path:"fc" module:"nokia-conf"`
	PacketByteOffset   *NokiaConf_Configure_Qos_VlanQosPolicy_PacketByteOffset               `path:"packet-byte-offset" module:"nokia-conf"`
	Queue              map[int32]*NokiaConf_Configure_Qos_VlanQosPolicy_Queue                `path:"queue" module:"nokia-conf"`
	Scope              E_NokiaTypesQos_ItemScope                                             `path:"scope" module:"nokia-conf"`
	StatMode           E_NokiaConf_Configure_Qos_VlanQosPolicy_StatMode                      `path:"stat-mode" module:"nokia-conf"`
	VlanQosPolicyName  *string                                                               `path:"vlan-qos-policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_VlanQosPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_VlanQosPolicy) IsYANGGoStruct() {}

// NewCirWeightProfile creates a new entry in the CirWeightProfile list of the
// NokiaConf_Configure_Qos_VlanQosPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy) NewCirWeightProfile(CirWeightProfileId uint32) (*NokiaConf_Configure_Qos_VlanQosPolicy_CirWeightProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CirWeightProfile == nil {
		t.CirWeightProfile = make(map[uint32]*NokiaConf_Configure_Qos_VlanQosPolicy_CirWeightProfile)
	}

	key := CirWeightProfileId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CirWeightProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CirWeightProfile", key)
	}

	t.CirWeightProfile[key] = &NokiaConf_Configure_Qos_VlanQosPolicy_CirWeightProfile{
		CirWeightProfileId: &CirWeightProfileId,
	}

	return t.CirWeightProfile[key], nil
}

// RenameCirWeightProfile renames an entry in the list CirWeightProfile within
// the NokiaConf_Configure_Qos_VlanQosPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy) RenameCirWeightProfile(oldK, newK uint32) error {
	if _, ok := t.CirWeightProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in CirWeightProfile", newK)
	}

	e, ok := t.CirWeightProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CirWeightProfile", oldK)
	}
	e.CirWeightProfileId = &newK

	t.CirWeightProfile[newK] = e
	delete(t.CirWeightProfile, oldK)
	return nil
}

// GetOrCreateCirWeightProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_VlanQosPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy) GetOrCreateCirWeightProfile(CirWeightProfileId uint32) *NokiaConf_Configure_Qos_VlanQosPolicy_CirWeightProfile {

	key := CirWeightProfileId

	if v, ok := t.CirWeightProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCirWeightProfile(CirWeightProfileId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCirWeightProfile got unexpected error: %v", err))
	}
	return v
}

// GetCirWeightProfile retrieves the value with the specified key from
// the CirWeightProfile map field of NokiaConf_Configure_Qos_VlanQosPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy) GetCirWeightProfile(CirWeightProfileId uint32) *NokiaConf_Configure_Qos_VlanQosPolicy_CirWeightProfile {

	if t == nil {
		return nil
	}

	key := CirWeightProfileId

	if lm, ok := t.CirWeightProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteCirWeightProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_VlanQosPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy) DeleteCirWeightProfile(CirWeightProfileId uint32) {
	key := CirWeightProfileId

	delete(t.CirWeightProfile, key)
}

// AppendCirWeightProfile appends the supplied NokiaConf_Configure_Qos_VlanQosPolicy_CirWeightProfile struct to the
// list CirWeightProfile of NokiaConf_Configure_Qos_VlanQosPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_VlanQosPolicy_CirWeightProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy) AppendCirWeightProfile(v *NokiaConf_Configure_Qos_VlanQosPolicy_CirWeightProfile) error {
	if v.CirWeightProfileId == nil {
		return fmt.Errorf("invalid nil key received for CirWeightProfileId")
	}

	key := *v.CirWeightProfileId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CirWeightProfile == nil {
		t.CirWeightProfile = make(map[uint32]*NokiaConf_Configure_Qos_VlanQosPolicy_CirWeightProfile)
	}

	if _, ok := t.CirWeightProfile[key]; ok {
		return fmt.Errorf("duplicate key for list CirWeightProfile %v", key)
	}

	t.CirWeightProfile[key] = v
	return nil
}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Qos_VlanQosPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy) NewFc(FcName E_NokiaTypesSros_FcName) (*NokiaConf_Configure_Qos_VlanQosPolicy_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_VlanQosPolicy_Fc)
	}

	key := FcName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Qos_VlanQosPolicy_Fc{
		FcName: FcName,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Qos_VlanQosPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy) RenameFc(oldK, newK E_NokiaTypesSros_FcName) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = newK

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_VlanQosPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy) GetOrCreateFc(FcName E_NokiaTypesSros_FcName) *NokiaConf_Configure_Qos_VlanQosPolicy_Fc {

	key := FcName

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Qos_VlanQosPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy) GetFc(FcName E_NokiaTypesSros_FcName) *NokiaConf_Configure_Qos_VlanQosPolicy_Fc {

	if t == nil {
		return nil
	}

	key := FcName

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_VlanQosPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy) DeleteFc(FcName E_NokiaTypesSros_FcName) {
	key := FcName

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Qos_VlanQosPolicy_Fc struct to the
// list Fc of NokiaConf_Configure_Qos_VlanQosPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_VlanQosPolicy_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy) AppendFc(v *NokiaConf_Configure_Qos_VlanQosPolicy_Fc) error {
	key := v.FcName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_VlanQosPolicy_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Qos_VlanQosPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy) NewQueue(QueueId int32) (*NokiaConf_Configure_Qos_VlanQosPolicy_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Qos_VlanQosPolicy_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Qos_VlanQosPolicy_Queue{
		QueueId: &QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Qos_VlanQosPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy) RenameQueue(oldK, newK int32) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_VlanQosPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy) GetOrCreateQueue(QueueId int32) *NokiaConf_Configure_Qos_VlanQosPolicy_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Qos_VlanQosPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy) GetQueue(QueueId int32) *NokiaConf_Configure_Qos_VlanQosPolicy_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_VlanQosPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy) DeleteQueue(QueueId int32) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Qos_VlanQosPolicy_Queue struct to the
// list Queue of NokiaConf_Configure_Qos_VlanQosPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_VlanQosPolicy_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy) AppendQueue(v *NokiaConf_Configure_Qos_VlanQosPolicy_Queue) error {
	if v.QueueId == nil {
		return fmt.Errorf("invalid nil key received for QueueId")
	}

	key := *v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Qos_VlanQosPolicy_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetOrCreatePacketByteOffset retrieves the value of the PacketByteOffset field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy) GetOrCreatePacketByteOffset() *NokiaConf_Configure_Qos_VlanQosPolicy_PacketByteOffset {
	if t.PacketByteOffset != nil {
		return t.PacketByteOffset
	}
	t.PacketByteOffset = &NokiaConf_Configure_Qos_VlanQosPolicy_PacketByteOffset{}
	return t.PacketByteOffset
}

// GetPacketByteOffset returns the value of the PacketByteOffset struct pointer
// from NokiaConf_Configure_Qos_VlanQosPolicy. If the receiver or the field PacketByteOffset is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy) GetPacketByteOffset() *NokiaConf_Configure_Qos_VlanQosPolicy_PacketByteOffset {
	if t != nil && t.PacketByteOffset != nil {
		return t.PacketByteOffset
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_VlanQosPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_VlanQosPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_VlanQosPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetScope retrieves the value of the leaf Scope from the NokiaConf_Configure_Qos_VlanQosPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scope is set, it can
// safely use t.GetScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scope == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy) GetScope() E_NokiaTypesQos_ItemScope {
	if t == nil || t.Scope == 0 {
		return NokiaTypesQos_ItemScope_template
	}
	return t.Scope
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Qos_VlanQosPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy) GetStatMode() E_NokiaConf_Configure_Qos_VlanQosPolicy_StatMode {
	if t == nil || t.StatMode == 0 {
		return NokiaConf_Configure_Qos_VlanQosPolicy_StatMode_no_stats
	}
	return t.StatMode
}

// GetVlanQosPolicyName retrieves the value of the leaf VlanQosPolicyName from the NokiaConf_Configure_Qos_VlanQosPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanQosPolicyName is set, it can
// safely use t.GetVlanQosPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanQosPolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy) GetVlanQosPolicyName() string {
	if t == nil || t.VlanQosPolicyName == nil {
		return ""
	}
	return *t.VlanQosPolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_VlanQosPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Scope == 0 {
		t.Scope = NokiaTypesQos_ItemScope_template
	}
	if t.StatMode == 0 {
		t.StatMode = NokiaConf_Configure_Qos_VlanQosPolicy_StatMode_no_stats
	}
	t.PacketByteOffset.PopulateDefaults()
	for _, e := range t.CirWeightProfile {
		e.PopulateDefaults()
	}
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_VlanQosPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VlanQosPolicyName == nil {
		return nil, fmt.Errorf("nil value for key VlanQosPolicyName")
	}

	return map[string]interface{}{
		"vlan-qos-policy-name": *t.VlanQosPolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_VlanQosPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_VlanQosPolicy.
func (*NokiaConf_Configure_Qos_VlanQosPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_VlanQosPolicy_CirWeightProfile represents the /nokia-conf/configure/qos/vlan-qos-policy/cir-weight-profile YANG schema element.
type NokiaConf_Configure_Qos_VlanQosPolicy_CirWeightProfile struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	CirWeightProfileId *uint32  `path:"cir-weight-profile-id" module:"nokia-conf"`
	Weight             *uint32  `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_VlanQosPolicy_CirWeightProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_VlanQosPolicy_CirWeightProfile) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_VlanQosPolicy_CirWeightProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_CirWeightProfile) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_VlanQosPolicy_CirWeightProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_CirWeightProfile) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCirWeightProfileId retrieves the value of the leaf CirWeightProfileId from the NokiaConf_Configure_Qos_VlanQosPolicy_CirWeightProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeightProfileId is set, it can
// safely use t.GetCirWeightProfileId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeightProfileId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_CirWeightProfile) GetCirWeightProfileId() uint32 {
	if t == nil || t.CirWeightProfileId == nil {
		return 0
	}
	return *t.CirWeightProfileId
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Qos_VlanQosPolicy_CirWeightProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_CirWeightProfile) GetWeight() uint32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_VlanQosPolicy_CirWeightProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_CirWeightProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Weight == nil {
		var v uint32 = 1
		t.Weight = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_VlanQosPolicy_CirWeightProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_CirWeightProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CirWeightProfileId == nil {
		return nil, fmt.Errorf("nil value for key CirWeightProfileId")
	}

	return map[string]interface{}{
		"cir-weight-profile-id": *t.CirWeightProfileId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_CirWeightProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_VlanQosPolicy_CirWeightProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_CirWeightProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_CirWeightProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_VlanQosPolicy_CirWeightProfile.
func (*NokiaConf_Configure_Qos_VlanQosPolicy_CirWeightProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_VlanQosPolicy_Fc represents the /nokia-conf/configure/qos/vlan-qos-policy/fc YANG schema element.
type NokiaConf_Configure_Qos_VlanQosPolicy_Fc struct {
	ApplyGroups        []string                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                `path:"apply-groups-exclude" module:"nokia-conf"`
	FcName             E_NokiaTypesSros_FcName `path:"fc-name" module:"nokia-conf"`
	Queue              *int32                  `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_VlanQosPolicy_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_VlanQosPolicy_Fc) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_VlanQosPolicy_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Fc) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_VlanQosPolicy_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Fc) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Qos_VlanQosPolicy_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Fc) GetFcName() E_NokiaTypesSros_FcName {
	if t == nil || t.FcName == 0 {
		return 0
	}
	return t.FcName
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Qos_VlanQosPolicy_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Fc) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_VlanQosPolicy_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_VlanQosPolicy_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Fc) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"fc-name": t.FcName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_VlanQosPolicy_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_VlanQosPolicy_Fc.
func (*NokiaConf_Configure_Qos_VlanQosPolicy_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_VlanQosPolicy_PacketByteOffset represents the /nokia-conf/configure/qos/vlan-qos-policy/packet-byte-offset YANG schema element.
type NokiaConf_Configure_Qos_VlanQosPolicy_PacketByteOffset struct {
	Add      *int32 `path:"add" module:"nokia-conf"`
	Subtract *int32 `path:"subtract" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_VlanQosPolicy_PacketByteOffset implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_VlanQosPolicy_PacketByteOffset) IsYANGGoStruct() {}

// GetAdd retrieves the value of the leaf Add from the NokiaConf_Configure_Qos_VlanQosPolicy_PacketByteOffset
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Add is set, it can
// safely use t.GetAdd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Add == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_PacketByteOffset) GetAdd() int32 {
	if t == nil || t.Add == nil {
		return 0
	}
	return *t.Add
}

// GetSubtract retrieves the value of the leaf Subtract from the NokiaConf_Configure_Qos_VlanQosPolicy_PacketByteOffset
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subtract is set, it can
// safely use t.GetSubtract() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subtract == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_PacketByteOffset) GetSubtract() int32 {
	if t == nil || t.Subtract == nil {
		return 0
	}
	return *t.Subtract
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_VlanQosPolicy_PacketByteOffset
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_PacketByteOffset) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_PacketByteOffset) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_VlanQosPolicy_PacketByteOffset"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_PacketByteOffset) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_PacketByteOffset) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_VlanQosPolicy_PacketByteOffset.
func (*NokiaConf_Configure_Qos_VlanQosPolicy_PacketByteOffset) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_VlanQosPolicy_Queue represents the /nokia-conf/configure/qos/vlan-qos-policy/queue YANG schema element.
type NokiaConf_Configure_Qos_VlanQosPolicy_Queue struct {
	AdaptationRule      *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_AdaptationRule       `path:"adaptation-rule" module:"nokia-conf"`
	ApplyGroups         []string                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	CirWeightProfile    *uint32                                                           `path:"cir-weight-profile" module:"nokia-conf"`
	PercentRate         *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_PercentRate          `path:"percent-rate" module:"nokia-conf"`
	PirWeight           *uint32                                                           `path:"pir-weight" module:"nokia-conf"`
	QueueForwardingType E_NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueForwardingType `path:"queue-forwarding-type" module:"nokia-conf"`
	QueueId             *int32                                                            `path:"queue-id" module:"nokia-conf"`
	QueueMgmt           *string                                                           `path:"queue-mgmt" module:"nokia-conf"`
	QueueType           *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType            `path:"queue-type" module:"nokia-conf"`
	SchedulingPriority  *uint32                                                           `path:"scheduling-priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_VlanQosPolicy_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_VlanQosPolicy_Queue) IsYANGGoStruct() {}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Qos_VlanQosPolicy_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue) GetOrCreatePercentRate() *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Qos_VlanQosPolicy_Queue_PercentRate{}
	return t.PercentRate
}

// GetOrCreateQueueType retrieves the value of the QueueType field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue) GetOrCreateQueueType() *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType {
	if t.QueueType != nil {
		return t.QueueType
	}
	t.QueueType = &NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType{}
	return t.QueueType
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Qos_VlanQosPolicy_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue) GetAdaptationRule() *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Qos_VlanQosPolicy_Queue. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue) GetPercentRate() *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetQueueType returns the value of the QueueType struct pointer
// from NokiaConf_Configure_Qos_VlanQosPolicy_Queue. If the receiver or the field QueueType is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue) GetQueueType() *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType {
	if t != nil && t.QueueType != nil {
		return t.QueueType
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_VlanQosPolicy_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_VlanQosPolicy_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCirWeightProfile retrieves the value of the leaf CirWeightProfile from the NokiaConf_Configure_Qos_VlanQosPolicy_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeightProfile is set, it can
// safely use t.GetCirWeightProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeightProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue) GetCirWeightProfile() uint32 {
	if t == nil || t.CirWeightProfile == nil {
		return 1
	}
	return *t.CirWeightProfile
}

// GetPirWeight retrieves the value of the leaf PirWeight from the NokiaConf_Configure_Qos_VlanQosPolicy_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PirWeight is set, it can
// safely use t.GetPirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue) GetPirWeight() uint32 {
	if t == nil || t.PirWeight == nil {
		return 1
	}
	return *t.PirWeight
}

// GetQueueForwardingType retrieves the value of the leaf QueueForwardingType from the NokiaConf_Configure_Qos_VlanQosPolicy_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueForwardingType is set, it can
// safely use t.GetQueueForwardingType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueForwardingType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue) GetQueueForwardingType() E_NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueForwardingType {
	if t == nil || t.QueueForwardingType == 0 {
		return 0
	}
	return t.QueueForwardingType
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Qos_VlanQosPolicy_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue) GetQueueId() int32 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// GetQueueMgmt retrieves the value of the leaf QueueMgmt from the NokiaConf_Configure_Qos_VlanQosPolicy_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueMgmt is set, it can
// safely use t.GetQueueMgmt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueMgmt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue) GetQueueMgmt() string {
	if t == nil || t.QueueMgmt == nil {
		return ""
	}
	return *t.QueueMgmt
}

// GetSchedulingPriority retrieves the value of the leaf SchedulingPriority from the NokiaConf_Configure_Qos_VlanQosPolicy_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulingPriority is set, it can
// safely use t.GetSchedulingPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulingPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue) GetSchedulingPriority() uint32 {
	if t == nil || t.SchedulingPriority == nil {
		return 0
	}
	return *t.SchedulingPriority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_VlanQosPolicy_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CirWeightProfile == nil {
		var v uint32 = 1
		t.CirWeightProfile = &v
	}
	if t.PirWeight == nil {
		var v uint32 = 1
		t.PirWeight = &v
	}
	t.AdaptationRule.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.QueueType.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_VlanQosPolicy_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueId == nil {
		return nil, fmt.Errorf("nil value for key QueueId")
	}

	return map[string]interface{}{
		"queue-id": *t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_VlanQosPolicy_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_VlanQosPolicy_Queue.
func (*NokiaConf_Configure_Qos_VlanQosPolicy_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_VlanQosPolicy_Queue_AdaptationRule represents the /nokia-conf/configure/qos/vlan-qos-policy/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Qos_VlanQosPolicy_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRule `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_VlanQosPolicy_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_VlanQosPolicy_Queue_AdaptationRule) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_VlanQosPolicy_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Cir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_VlanQosPolicy_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_VlanQosPolicy_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == 0 {
		t.Cir = NokiaTypesQos_AdaptationRule_closest
	}
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_VlanQosPolicy_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_VlanQosPolicy_Queue_AdaptationRule.
func (*NokiaConf_Configure_Qos_VlanQosPolicy_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_VlanQosPolicy_Queue_PercentRate represents the /nokia-conf/configure/qos/vlan-qos-policy/queue/percent-rate YANG schema element.
type NokiaConf_Configure_Qos_VlanQosPolicy_Queue_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_VlanQosPolicy_Queue_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_VlanQosPolicy_Queue_PercentRate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_VlanQosPolicy_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.00
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_VlanQosPolicy_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 100.00
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_VlanQosPolicy_Queue_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 0.00
		t.Cir = &v
	}
	if t.Pir == nil {
		var v float64 = 100.00
		t.Pir = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_VlanQosPolicy_Queue_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_VlanQosPolicy_Queue_PercentRate.
func (*NokiaConf_Configure_Qos_VlanQosPolicy_Queue_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType represents the /nokia-conf/configure/qos/vlan-qos-policy/queue/queue-type YANG schema element.
type NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType struct {
	BestEffort *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort `path:"best-effort" module:"nokia-conf"`
	ExpediteHi *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi `path:"expedite-hi" module:"nokia-conf"`
	ExpediteLo *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo `path:"expedite-lo" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType) IsYANGGoStruct() {}

// GetOrCreateBestEffort retrieves the value of the BestEffort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType) GetOrCreateBestEffort() *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort {
	if t.BestEffort != nil {
		return t.BestEffort
	}
	t.BestEffort = &NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort{}
	return t.BestEffort
}

// GetOrCreateExpediteHi retrieves the value of the ExpediteHi field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType) GetOrCreateExpediteHi() *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi {
	if t.ExpediteHi != nil {
		return t.ExpediteHi
	}
	t.ExpediteHi = &NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi{}
	return t.ExpediteHi
}

// GetOrCreateExpediteLo retrieves the value of the ExpediteLo field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType) GetOrCreateExpediteLo() *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo {
	if t.ExpediteLo != nil {
		return t.ExpediteLo
	}
	t.ExpediteLo = &NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo{}
	return t.ExpediteLo
}

// GetBestEffort returns the value of the BestEffort struct pointer
// from NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType. If the receiver or the field BestEffort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType) GetBestEffort() *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort {
	if t != nil && t.BestEffort != nil {
		return t.BestEffort
	}
	return nil
}

// GetExpediteHi returns the value of the ExpediteHi struct pointer
// from NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType. If the receiver or the field ExpediteHi is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType) GetExpediteHi() *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi {
	if t != nil && t.ExpediteHi != nil {
		return t.ExpediteHi
	}
	return nil
}

// GetExpediteLo returns the value of the ExpediteLo struct pointer
// from NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType. If the receiver or the field ExpediteLo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType) GetExpediteLo() *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo {
	if t != nil && t.ExpediteLo != nil {
		return t.ExpediteLo
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BestEffort.PopulateDefaults()
	t.ExpediteHi.PopulateDefaults()
	t.ExpediteLo.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType.
func (*NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort represents the /nokia-conf/configure/qos/vlan-qos-policy/queue/queue-type/best-effort YANG schema element.
type NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort struct {
	CirWeightProfile *uint32                                                                       `path:"cir-weight-profile" module:"nokia-conf"`
	PercentRate      *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate `path:"percent-rate" module:"nokia-conf"`
	PirWeight        *uint32                                                                       `path:"pir-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort) IsYANGGoStruct() {}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort) GetOrCreatePercentRate() *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate{}
	return t.PercentRate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort) GetPercentRate() *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetCirWeightProfile retrieves the value of the leaf CirWeightProfile from the NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeightProfile is set, it can
// safely use t.GetCirWeightProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeightProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort) GetCirWeightProfile() uint32 {
	if t == nil || t.CirWeightProfile == nil {
		return 1
	}
	return *t.CirWeightProfile
}

// GetPirWeight retrieves the value of the leaf PirWeight from the NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PirWeight is set, it can
// safely use t.GetPirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort) GetPirWeight() uint32 {
	if t == nil || t.PirWeight == nil {
		return 1
	}
	return *t.PirWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CirWeightProfile == nil {
		var v uint32 = 1
		t.CirWeightProfile = &v
	}
	if t.PirWeight == nil {
		var v uint32 = 1
		t.PirWeight = &v
	}
	t.PercentRate.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort.
func (*NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate represents the /nokia-conf/configure/qos/vlan-qos-policy/queue/queue-type/best-effort/percent-rate YANG schema element.
type NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.00
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 100.00
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 0.00
		t.Cir = &v
	}
	if t.Pir == nil {
		var v float64 = 100.00
		t.Pir = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate.
func (*NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi represents the /nokia-conf/configure/qos/vlan-qos-policy/queue/queue-type/expedite-hi YANG schema element.
type NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi struct {
	PercentRate *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate `path:"percent-rate" module:"nokia-conf"`
	PirWeight   *uint32                                                                       `path:"pir-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi) IsYANGGoStruct() {}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi) GetOrCreatePercentRate() *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate{}
	return t.PercentRate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi) GetPercentRate() *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetPirWeight retrieves the value of the leaf PirWeight from the NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PirWeight is set, it can
// safely use t.GetPirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi) GetPirWeight() uint32 {
	if t == nil || t.PirWeight == nil {
		return 1
	}
	return *t.PirWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PirWeight == nil {
		var v uint32 = 1
		t.PirWeight = &v
	}
	t.PercentRate.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi.
func (*NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate represents the /nokia-conf/configure/qos/vlan-qos-policy/queue/queue-type/expedite-hi/percent-rate YANG schema element.
type NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.00
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 100.00
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 0.00
		t.Cir = &v
	}
	if t.Pir == nil {
		var v float64 = 100.00
		t.Pir = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate.
func (*NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo represents the /nokia-conf/configure/qos/vlan-qos-policy/queue/queue-type/expedite-lo YANG schema element.
type NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo struct {
	PercentRate *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate `path:"percent-rate" module:"nokia-conf"`
	PirWeight   *uint32                                                                       `path:"pir-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo) IsYANGGoStruct() {}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo) GetOrCreatePercentRate() *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate{}
	return t.PercentRate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo) GetPercentRate() *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetPirWeight retrieves the value of the leaf PirWeight from the NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PirWeight is set, it can
// safely use t.GetPirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo) GetPirWeight() uint32 {
	if t == nil || t.PirWeight == nil {
		return 1
	}
	return *t.PirWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PirWeight == nil {
		var v uint32 = 1
		t.PirWeight = &v
	}
	t.PercentRate.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo.
func (*NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate represents the /nokia-conf/configure/qos/vlan-qos-policy/queue/queue-type/expedite-lo/percent-rate YANG schema element.
type NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.00
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 100.00
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 0.00
		t.Cir = &v
	}
	if t.Pir == nil {
		var v float64 = 100.00
		t.Pir = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate.
func (*NokiaConf_Configure_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy represents the /nokia-conf/configure/redundancy YANG schema element.
type NokiaConf_Configure_Redundancy struct {
	ApplyGroups        []string                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	BgpEvpn            *NokiaConf_Configure_Redundancy_BgpEvpn       `path:"bgp-evpn" module:"nokia-conf"`
	BgpMh              *NokiaConf_Configure_Redundancy_BgpMh         `path:"bgp-mh" module:"nokia-conf"`
	CertSync           *bool                                         `path:"cert-sync" module:"nokia-conf"`
	MgmtEthernet       *NokiaConf_Configure_Redundancy_MgmtEthernet  `path:"mgmt-ethernet" module:"nokia-conf" yangPresence:"true"`
	MultiChassis       *NokiaConf_Configure_Redundancy_MultiChassis  `path:"multi-chassis" module:"nokia-conf"`
	RollbackSync       E_NokiaConf_Configure_Redundancy_RollbackSync `path:"rollback-sync" module:"nokia-conf"`
	Srrp               *NokiaConf_Configure_Redundancy_Srrp          `path:"srrp" module:"nokia-conf"`
	SwitchoverExec     *string                                       `path:"switchover-exec" module:"nokia-conf"`
	Synchronize        E_NokiaConf_Configure_Redundancy_Synchronize  `path:"synchronize" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy) IsYANGGoStruct() {}

// GetOrCreateBgpEvpn retrieves the value of the BgpEvpn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Redundancy) GetOrCreateBgpEvpn() *NokiaConf_Configure_Redundancy_BgpEvpn {
	if t.BgpEvpn != nil {
		return t.BgpEvpn
	}
	t.BgpEvpn = &NokiaConf_Configure_Redundancy_BgpEvpn{}
	return t.BgpEvpn
}

// GetOrCreateBgpMh retrieves the value of the BgpMh field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Redundancy) GetOrCreateBgpMh() *NokiaConf_Configure_Redundancy_BgpMh {
	if t.BgpMh != nil {
		return t.BgpMh
	}
	t.BgpMh = &NokiaConf_Configure_Redundancy_BgpMh{}
	return t.BgpMh
}

// GetOrCreateMgmtEthernet retrieves the value of the MgmtEthernet field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Redundancy) GetOrCreateMgmtEthernet() *NokiaConf_Configure_Redundancy_MgmtEthernet {
	if t.MgmtEthernet != nil {
		return t.MgmtEthernet
	}
	t.MgmtEthernet = &NokiaConf_Configure_Redundancy_MgmtEthernet{}
	return t.MgmtEthernet
}

// GetOrCreateMultiChassis retrieves the value of the MultiChassis field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Redundancy) GetOrCreateMultiChassis() *NokiaConf_Configure_Redundancy_MultiChassis {
	if t.MultiChassis != nil {
		return t.MultiChassis
	}
	t.MultiChassis = &NokiaConf_Configure_Redundancy_MultiChassis{}
	return t.MultiChassis
}

// GetOrCreateSrrp retrieves the value of the Srrp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Redundancy) GetOrCreateSrrp() *NokiaConf_Configure_Redundancy_Srrp {
	if t.Srrp != nil {
		return t.Srrp
	}
	t.Srrp = &NokiaConf_Configure_Redundancy_Srrp{}
	return t.Srrp
}

// GetBgpEvpn returns the value of the BgpEvpn struct pointer
// from NokiaConf_Configure_Redundancy. If the receiver or the field BgpEvpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Redundancy) GetBgpEvpn() *NokiaConf_Configure_Redundancy_BgpEvpn {
	if t != nil && t.BgpEvpn != nil {
		return t.BgpEvpn
	}
	return nil
}

// GetBgpMh returns the value of the BgpMh struct pointer
// from NokiaConf_Configure_Redundancy. If the receiver or the field BgpMh is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Redundancy) GetBgpMh() *NokiaConf_Configure_Redundancy_BgpMh {
	if t != nil && t.BgpMh != nil {
		return t.BgpMh
	}
	return nil
}

// GetMgmtEthernet returns the value of the MgmtEthernet struct pointer
// from NokiaConf_Configure_Redundancy. If the receiver or the field MgmtEthernet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Redundancy) GetMgmtEthernet() *NokiaConf_Configure_Redundancy_MgmtEthernet {
	if t != nil && t.MgmtEthernet != nil {
		return t.MgmtEthernet
	}
	return nil
}

// GetMultiChassis returns the value of the MultiChassis struct pointer
// from NokiaConf_Configure_Redundancy. If the receiver or the field MultiChassis is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Redundancy) GetMultiChassis() *NokiaConf_Configure_Redundancy_MultiChassis {
	if t != nil && t.MultiChassis != nil {
		return t.MultiChassis
	}
	return nil
}

// GetSrrp returns the value of the Srrp struct pointer
// from NokiaConf_Configure_Redundancy. If the receiver or the field Srrp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Redundancy) GetSrrp() *NokiaConf_Configure_Redundancy_Srrp {
	if t != nil && t.Srrp != nil {
		return t.Srrp
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Redundancy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Redundancy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCertSync retrieves the value of the leaf CertSync from the NokiaConf_Configure_Redundancy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CertSync is set, it can
// safely use t.GetCertSync() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CertSync == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy) GetCertSync() bool {
	if t == nil || t.CertSync == nil {
		return true
	}
	return *t.CertSync
}

// GetRollbackSync retrieves the value of the leaf RollbackSync from the NokiaConf_Configure_Redundancy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RollbackSync is set, it can
// safely use t.GetRollbackSync() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RollbackSync == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy) GetRollbackSync() E_NokiaConf_Configure_Redundancy_RollbackSync {
	if t == nil || t.RollbackSync == 0 {
		return 0
	}
	return t.RollbackSync
}

// GetSwitchoverExec retrieves the value of the leaf SwitchoverExec from the NokiaConf_Configure_Redundancy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SwitchoverExec is set, it can
// safely use t.GetSwitchoverExec() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SwitchoverExec == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy) GetSwitchoverExec() string {
	if t == nil || t.SwitchoverExec == nil {
		return ""
	}
	return *t.SwitchoverExec
}

// GetSynchronize retrieves the value of the leaf Synchronize from the NokiaConf_Configure_Redundancy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Synchronize is set, it can
// safely use t.GetSynchronize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Synchronize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy) GetSynchronize() E_NokiaConf_Configure_Redundancy_Synchronize {
	if t == nil || t.Synchronize == 0 {
		return 0
	}
	return t.Synchronize
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CertSync == nil {
		var v bool = true
		t.CertSync = &v
	}
	t.BgpEvpn.PopulateDefaults()
	t.BgpMh.PopulateDefaults()
	t.MgmtEthernet.PopulateDefaults()
	t.MultiChassis.PopulateDefaults()
	t.Srrp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy.
func (*NokiaConf_Configure_Redundancy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_BgpEvpn represents the /nokia-conf/configure/redundancy/bgp-evpn YANG schema element.
type NokiaConf_Configure_Redundancy_BgpEvpn struct {
	EthernetSegment *NokiaConf_Configure_Redundancy_BgpEvpn_EthernetSegment `path:"ethernet-segment" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_BgpEvpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_BgpEvpn) IsYANGGoStruct() {}

// GetOrCreateEthernetSegment retrieves the value of the EthernetSegment field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Redundancy_BgpEvpn) GetOrCreateEthernetSegment() *NokiaConf_Configure_Redundancy_BgpEvpn_EthernetSegment {
	if t.EthernetSegment != nil {
		return t.EthernetSegment
	}
	t.EthernetSegment = &NokiaConf_Configure_Redundancy_BgpEvpn_EthernetSegment{}
	return t.EthernetSegment
}

// GetEthernetSegment returns the value of the EthernetSegment struct pointer
// from NokiaConf_Configure_Redundancy_BgpEvpn. If the receiver or the field EthernetSegment is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Redundancy_BgpEvpn) GetEthernetSegment() *NokiaConf_Configure_Redundancy_BgpEvpn_EthernetSegment {
	if t != nil && t.EthernetSegment != nil {
		return t.EthernetSegment
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_BgpEvpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_BgpEvpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthernetSegment.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_BgpEvpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_BgpEvpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_BgpEvpn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_BgpEvpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_BgpEvpn.
func (*NokiaConf_Configure_Redundancy_BgpEvpn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_BgpEvpn_EthernetSegment represents the /nokia-conf/configure/redundancy/bgp-evpn/ethernet-segment YANG schema element.
type NokiaConf_Configure_Redundancy_BgpEvpn_EthernetSegment struct {
	ActivationTimer    *uint32  `path:"activation-timer" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	BootTimer          *uint32  `path:"boot-timer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_BgpEvpn_EthernetSegment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_BgpEvpn_EthernetSegment) IsYANGGoStruct() {}

// GetActivationTimer retrieves the value of the leaf ActivationTimer from the NokiaConf_Configure_Redundancy_BgpEvpn_EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActivationTimer is set, it can
// safely use t.GetActivationTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActivationTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_BgpEvpn_EthernetSegment) GetActivationTimer() uint32 {
	if t == nil || t.ActivationTimer == nil {
		return 3
	}
	return *t.ActivationTimer
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Redundancy_BgpEvpn_EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_BgpEvpn_EthernetSegment) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Redundancy_BgpEvpn_EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_BgpEvpn_EthernetSegment) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBootTimer retrieves the value of the leaf BootTimer from the NokiaConf_Configure_Redundancy_BgpEvpn_EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BootTimer is set, it can
// safely use t.GetBootTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BootTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_BgpEvpn_EthernetSegment) GetBootTimer() uint32 {
	if t == nil || t.BootTimer == nil {
		return 10
	}
	return *t.BootTimer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_BgpEvpn_EthernetSegment
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_BgpEvpn_EthernetSegment) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ActivationTimer == nil {
		var v uint32 = 3
		t.ActivationTimer = &v
	}
	if t.BootTimer == nil {
		var v uint32 = 10
		t.BootTimer = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_BgpEvpn_EthernetSegment) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_BgpEvpn_EthernetSegment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_BgpEvpn_EthernetSegment) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_BgpEvpn_EthernetSegment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_BgpEvpn_EthernetSegment.
func (*NokiaConf_Configure_Redundancy_BgpEvpn_EthernetSegment) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_BgpMh represents the /nokia-conf/configure/redundancy/bgp-mh YANG schema element.
type NokiaConf_Configure_Redundancy_BgpMh struct {
	ApplyGroups        []string                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Site               *NokiaConf_Configure_Redundancy_BgpMh_Site `path:"site" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_BgpMh implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_BgpMh) IsYANGGoStruct() {}

// GetOrCreateSite retrieves the value of the Site field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Redundancy_BgpMh) GetOrCreateSite() *NokiaConf_Configure_Redundancy_BgpMh_Site {
	if t.Site != nil {
		return t.Site
	}
	t.Site = &NokiaConf_Configure_Redundancy_BgpMh_Site{}
	return t.Site
}

// GetSite returns the value of the Site struct pointer
// from NokiaConf_Configure_Redundancy_BgpMh. If the receiver or the field Site is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Redundancy_BgpMh) GetSite() *NokiaConf_Configure_Redundancy_BgpMh_Site {
	if t != nil && t.Site != nil {
		return t.Site
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Redundancy_BgpMh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_BgpMh) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Redundancy_BgpMh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_BgpMh) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_BgpMh
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_BgpMh) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Site.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_BgpMh) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_BgpMh"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_BgpMh) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_BgpMh) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_BgpMh.
func (*NokiaConf_Configure_Redundancy_BgpMh) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_BgpMh_Site represents the /nokia-conf/configure/redundancy/bgp-mh/site YANG schema element.
type NokiaConf_Configure_Redundancy_BgpMh_Site struct {
	ActivationTimer *int32 `path:"activation-timer" module:"nokia-conf"`
	BootTimer       *int32 `path:"boot-timer" module:"nokia-conf"`
	MinDownTimer    *int32 `path:"min-down-timer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_BgpMh_Site implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_BgpMh_Site) IsYANGGoStruct() {}

// GetActivationTimer retrieves the value of the leaf ActivationTimer from the NokiaConf_Configure_Redundancy_BgpMh_Site
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActivationTimer is set, it can
// safely use t.GetActivationTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActivationTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_BgpMh_Site) GetActivationTimer() int32 {
	if t == nil || t.ActivationTimer == nil {
		return 2
	}
	return *t.ActivationTimer
}

// GetBootTimer retrieves the value of the leaf BootTimer from the NokiaConf_Configure_Redundancy_BgpMh_Site
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BootTimer is set, it can
// safely use t.GetBootTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BootTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_BgpMh_Site) GetBootTimer() int32 {
	if t == nil || t.BootTimer == nil {
		return 10
	}
	return *t.BootTimer
}

// GetMinDownTimer retrieves the value of the leaf MinDownTimer from the NokiaConf_Configure_Redundancy_BgpMh_Site
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinDownTimer is set, it can
// safely use t.GetMinDownTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinDownTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_BgpMh_Site) GetMinDownTimer() int32 {
	if t == nil || t.MinDownTimer == nil {
		return 0
	}
	return *t.MinDownTimer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_BgpMh_Site
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_BgpMh_Site) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ActivationTimer == nil {
		var v int32 = 2
		t.ActivationTimer = &v
	}
	if t.BootTimer == nil {
		var v int32 = 10
		t.BootTimer = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_BgpMh_Site) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_BgpMh_Site"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_BgpMh_Site) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_BgpMh_Site) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_BgpMh_Site.
func (*NokiaConf_Configure_Redundancy_BgpMh_Site) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MgmtEthernet represents the /nokia-conf/configure/redundancy/mgmt-ethernet YANG schema element.
type NokiaConf_Configure_Redundancy_MgmtEthernet struct {
	Revert *uint32 `path:"revert" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MgmtEthernet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MgmtEthernet) IsYANGGoStruct() {}

// GetRevert retrieves the value of the leaf Revert from the NokiaConf_Configure_Redundancy_MgmtEthernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Revert is set, it can
// safely use t.GetRevert() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Revert == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MgmtEthernet) GetRevert() uint32 {
	if t == nil || t.Revert == nil {
		return 5
	}
	return *t.Revert
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MgmtEthernet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MgmtEthernet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Revert == nil {
		var v uint32 = 5
		t.Revert = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MgmtEthernet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MgmtEthernet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MgmtEthernet) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MgmtEthernet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MgmtEthernet.
func (*NokiaConf_Configure_Redundancy_MgmtEthernet) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis represents the /nokia-conf/configure/redundancy/multi-chassis YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis struct {
	Options *NokiaConf_Configure_Redundancy_MultiChassis_Options         `path:"options" module:"nokia-conf"`
	Peer    map[string]*NokiaConf_Configure_Redundancy_MultiChassis_Peer `path:"peer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis) IsYANGGoStruct() {}

// NewPeer creates a new entry in the Peer list of the
// NokiaConf_Configure_Redundancy_MultiChassis struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Redundancy_MultiChassis) NewPeer(IpAddress string) (*NokiaConf_Configure_Redundancy_MultiChassis_Peer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Redundancy_MultiChassis_Peer)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &NokiaConf_Configure_Redundancy_MultiChassis_Peer{
		IpAddress: &IpAddress,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the NokiaConf_Configure_Redundancy_MultiChassis struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis) RenamePeer(oldK, newK string) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.IpAddress = &newK

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Redundancy_MultiChassis) GetOrCreatePeer(IpAddress string) *NokiaConf_Configure_Redundancy_MultiChassis_Peer {

	key := IpAddress

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of NokiaConf_Configure_Redundancy_MultiChassis. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis) GetPeer(IpAddress string) *NokiaConf_Configure_Redundancy_MultiChassis_Peer {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Redundancy_MultiChassis) DeletePeer(IpAddress string) {
	key := IpAddress

	delete(t.Peer, key)
}

// AppendPeer appends the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer struct to the
// list Peer of NokiaConf_Configure_Redundancy_MultiChassis. If the key value(s) specified in
// the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Redundancy_MultiChassis) AppendPeer(v *NokiaConf_Configure_Redundancy_MultiChassis_Peer) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Redundancy_MultiChassis_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// GetOrCreateOptions retrieves the value of the Options field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Redundancy_MultiChassis) GetOrCreateOptions() *NokiaConf_Configure_Redundancy_MultiChassis_Options {
	if t.Options != nil {
		return t.Options
	}
	t.Options = &NokiaConf_Configure_Redundancy_MultiChassis_Options{}
	return t.Options
}

// GetOptions returns the value of the Options struct pointer
// from NokiaConf_Configure_Redundancy_MultiChassis. If the receiver or the field Options is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis) GetOptions() *NokiaConf_Configure_Redundancy_MultiChassis_Options {
	if t != nil && t.Options != nil {
		return t.Options
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Options.PopulateDefaults()
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis.
func (*NokiaConf_Configure_Redundancy_MultiChassis) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Options represents the /nokia-conf/configure/redundancy/multi-chassis/options YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Options struct {
	SubMgmt *NokiaConf_Configure_Redundancy_MultiChassis_Options_SubMgmt `path:"sub-mgmt" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Options implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Options) IsYANGGoStruct() {}

// GetOrCreateSubMgmt retrieves the value of the SubMgmt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Options) GetOrCreateSubMgmt() *NokiaConf_Configure_Redundancy_MultiChassis_Options_SubMgmt {
	if t.SubMgmt != nil {
		return t.SubMgmt
	}
	t.SubMgmt = &NokiaConf_Configure_Redundancy_MultiChassis_Options_SubMgmt{}
	return t.SubMgmt
}

// GetSubMgmt returns the value of the SubMgmt struct pointer
// from NokiaConf_Configure_Redundancy_MultiChassis_Options. If the receiver or the field SubMgmt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Options) GetSubMgmt() *NokiaConf_Configure_Redundancy_MultiChassis_Options_SubMgmt {
	if t != nil && t.SubMgmt != nil {
		return t.SubMgmt
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Options
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Options) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SubMgmt.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Options) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Options"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Options) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Options) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Options.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Options) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Options_SubMgmt represents the /nokia-conf/configure/redundancy/multi-chassis/options/sub-mgmt YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Options_SubMgmt struct {
	ApplyGroups            []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string `path:"apply-groups-exclude" module:"nokia-conf"`
	DhcpLeasetimeThreshold *uint32  `path:"dhcp-leasetime-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Options_SubMgmt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Options_SubMgmt) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Redundancy_MultiChassis_Options_SubMgmt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Options_SubMgmt) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Redundancy_MultiChassis_Options_SubMgmt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Options_SubMgmt) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDhcpLeasetimeThreshold retrieves the value of the leaf DhcpLeasetimeThreshold from the NokiaConf_Configure_Redundancy_MultiChassis_Options_SubMgmt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpLeasetimeThreshold is set, it can
// safely use t.GetDhcpLeasetimeThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpLeasetimeThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Options_SubMgmt) GetDhcpLeasetimeThreshold() uint32 {
	if t == nil || t.DhcpLeasetimeThreshold == nil {
		return 0
	}
	return *t.DhcpLeasetimeThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Options_SubMgmt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Options_SubMgmt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Options_SubMgmt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Options_SubMgmt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Options_SubMgmt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Options_SubMgmt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Options_SubMgmt.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Options_SubMgmt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer represents the /nokia-conf/configure/redundancy/multi-chassis/peer YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer struct {
	AdminState         E_NokiaTypesSros_AdminState                               `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	AuthenticationKey  *string                                                   `path:"authentication-key" module:"nokia-conf"`
	Description        *string                                                   `path:"description" module:"nokia-conf"`
	IpAddress          *string                                                   `path:"ip-address" module:"nokia-conf"`
	McIpsec            *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec `path:"mc-ipsec" module:"nokia-conf" yangPresence:"true"`
	McLag              *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag   `path:"mc-lag" module:"nokia-conf"`
	McRing             *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing  `path:"mc-ring" module:"nokia-conf"`
	PeerName           *string                                                   `path:"peer-name" module:"nokia-conf"`
	SourceAddress      *string                                                   `path:"source-address" module:"nokia-conf"`
	Sync               *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync    `path:"sync" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer) IsYANGGoStruct() {}

// GetOrCreateMcIpsec retrieves the value of the McIpsec field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer) GetOrCreateMcIpsec() *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec {
	if t.McIpsec != nil {
		return t.McIpsec
	}
	t.McIpsec = &NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec{}
	return t.McIpsec
}

// GetOrCreateMcLag retrieves the value of the McLag field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer) GetOrCreateMcLag() *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag {
	if t.McLag != nil {
		return t.McLag
	}
	t.McLag = &NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag{}
	return t.McLag
}

// GetOrCreateMcRing retrieves the value of the McRing field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer) GetOrCreateMcRing() *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing {
	if t.McRing != nil {
		return t.McRing
	}
	t.McRing = &NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing{}
	return t.McRing
}

// GetOrCreateSync retrieves the value of the Sync field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer) GetOrCreateSync() *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync {
	if t.Sync != nil {
		return t.Sync
	}
	t.Sync = &NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync{}
	return t.Sync
}

// GetMcIpsec returns the value of the McIpsec struct pointer
// from NokiaConf_Configure_Redundancy_MultiChassis_Peer. If the receiver or the field McIpsec is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer) GetMcIpsec() *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec {
	if t != nil && t.McIpsec != nil {
		return t.McIpsec
	}
	return nil
}

// GetMcLag returns the value of the McLag struct pointer
// from NokiaConf_Configure_Redundancy_MultiChassis_Peer. If the receiver or the field McLag is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer) GetMcLag() *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag {
	if t != nil && t.McLag != nil {
		return t.McLag
	}
	return nil
}

// GetMcRing returns the value of the McRing struct pointer
// from NokiaConf_Configure_Redundancy_MultiChassis_Peer. If the receiver or the field McRing is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer) GetMcRing() *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing {
	if t != nil && t.McRing != nil {
		return t.McRing
	}
	return nil
}

// GetSync returns the value of the Sync struct pointer
// from NokiaConf_Configure_Redundancy_MultiChassis_Peer. If the receiver or the field Sync is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer) GetSync() *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync {
	if t != nil && t.Sync != nil {
		return t.Sync
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Redundancy_MultiChassis_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Redundancy_MultiChassis_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Redundancy_MultiChassis_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Redundancy_MultiChassis_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Redundancy_MultiChassis_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Redundancy_MultiChassis_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPeerName retrieves the value of the leaf PeerName from the NokiaConf_Configure_Redundancy_MultiChassis_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerName is set, it can
// safely use t.GetPeerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer) GetPeerName() string {
	if t == nil || t.PeerName == nil {
		return ""
	}
	return *t.PeerName
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Redundancy_MultiChassis_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.McIpsec.PopulateDefaults()
	t.McLag.PopulateDefaults()
	t.McRing.PopulateDefaults()
	t.Sync.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Redundancy_MultiChassis_Peer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Peer.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec represents the /nokia-conf/configure/redundancy/multi-chassis/peer/mc-ipsec YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec struct {
	ApplyGroups           []string                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	BfdLiveness           *bool                                                                            `path:"bfd-liveness" module:"nokia-conf"`
	DiscoveryInterval     *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval      `path:"discovery-interval" module:"nokia-conf"`
	HoldOnNeighborFailure *uint32                                                                          `path:"hold-on-neighbor-failure" module:"nokia-conf"`
	KeepAliveInterval     *uint32                                                                          `path:"keep-alive-interval" module:"nokia-conf"`
	TunnelGroup           map[uint32]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup `path:"tunnel-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec) IsYANGGoStruct() {}

// NewTunnelGroup creates a new entry in the TunnelGroup list of the
// NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec) NewTunnelGroup(TunnelGroupId uint32) (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TunnelGroup == nil {
		t.TunnelGroup = make(map[uint32]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup)
	}

	key := TunnelGroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TunnelGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TunnelGroup", key)
	}

	t.TunnelGroup[key] = &NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup{
		TunnelGroupId: &TunnelGroupId,
	}

	return t.TunnelGroup[key], nil
}

// RenameTunnelGroup renames an entry in the list TunnelGroup within
// the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec) RenameTunnelGroup(oldK, newK uint32) error {
	if _, ok := t.TunnelGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in TunnelGroup", newK)
	}

	e, ok := t.TunnelGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TunnelGroup", oldK)
	}
	e.TunnelGroupId = &newK

	t.TunnelGroup[newK] = e
	delete(t.TunnelGroup, oldK)
	return nil
}

// GetOrCreateTunnelGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec) GetOrCreateTunnelGroup(TunnelGroupId uint32) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup {

	key := TunnelGroupId

	if v, ok := t.TunnelGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTunnelGroup(TunnelGroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTunnelGroup got unexpected error: %v", err))
	}
	return v
}

// GetTunnelGroup retrieves the value with the specified key from
// the TunnelGroup map field of NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec) GetTunnelGroup(TunnelGroupId uint32) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup {

	if t == nil {
		return nil
	}

	key := TunnelGroupId

	if lm, ok := t.TunnelGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteTunnelGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec) DeleteTunnelGroup(TunnelGroupId uint32) {
	key := TunnelGroupId

	delete(t.TunnelGroup, key)
}

// AppendTunnelGroup appends the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup struct to the
// list TunnelGroup of NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec. If the key value(s) specified in
// the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec) AppendTunnelGroup(v *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup) error {
	if v.TunnelGroupId == nil {
		return fmt.Errorf("invalid nil key received for TunnelGroupId")
	}

	key := *v.TunnelGroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TunnelGroup == nil {
		t.TunnelGroup = make(map[uint32]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup)
	}

	if _, ok := t.TunnelGroup[key]; ok {
		return fmt.Errorf("duplicate key for list TunnelGroup %v", key)
	}

	t.TunnelGroup[key] = v
	return nil
}

// GetOrCreateDiscoveryInterval retrieves the value of the DiscoveryInterval field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec) GetOrCreateDiscoveryInterval() *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval {
	if t.DiscoveryInterval != nil {
		return t.DiscoveryInterval
	}
	t.DiscoveryInterval = &NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval{}
	return t.DiscoveryInterval
}

// GetDiscoveryInterval returns the value of the DiscoveryInterval struct pointer
// from NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec. If the receiver or the field DiscoveryInterval is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec) GetDiscoveryInterval() *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval {
	if t != nil && t.DiscoveryInterval != nil {
		return t.DiscoveryInterval
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetHoldOnNeighborFailure retrieves the value of the leaf HoldOnNeighborFailure from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldOnNeighborFailure is set, it can
// safely use t.GetHoldOnNeighborFailure() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldOnNeighborFailure == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec) GetHoldOnNeighborFailure() uint32 {
	if t == nil || t.HoldOnNeighborFailure == nil {
		return 3
	}
	return *t.HoldOnNeighborFailure
}

// GetKeepAliveInterval retrieves the value of the leaf KeepAliveInterval from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeepAliveInterval is set, it can
// safely use t.GetKeepAliveInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeepAliveInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec) GetKeepAliveInterval() uint32 {
	if t == nil || t.KeepAliveInterval == nil {
		return 10
	}
	return *t.KeepAliveInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BfdLiveness == nil {
		var v bool = false
		t.BfdLiveness = &v
	}
	if t.HoldOnNeighborFailure == nil {
		var v uint32 = 3
		t.HoldOnNeighborFailure = &v
	}
	if t.KeepAliveInterval == nil {
		var v uint32 = 10
		t.KeepAliveInterval = &v
	}
	t.DiscoveryInterval.PopulateDefaults()
	for _, e := range t.TunnelGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval represents the /nokia-conf/configure/redundancy/multi-chassis/peer/mc-ipsec/discovery-interval YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval struct {
	Boot         *uint32 `path:"boot" module:"nokia-conf"`
	IntervalSecs *uint32 `path:"interval-secs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval) IsYANGGoStruct() {}

// GetBoot retrieves the value of the leaf Boot from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Boot is set, it can
// safely use t.GetBoot() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Boot == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval) GetBoot() uint32 {
	if t == nil || t.Boot == nil {
		return 300
	}
	return *t.Boot
}

// GetIntervalSecs retrieves the value of the leaf IntervalSecs from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IntervalSecs is set, it can
// safely use t.GetIntervalSecs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IntervalSecs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval) GetIntervalSecs() uint32 {
	if t == nil || t.IntervalSecs == nil {
		return 300
	}
	return *t.IntervalSecs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Boot == nil {
		var v uint32 = 300
		t.Boot = &v
	}
	if t.IntervalSecs == nil {
		var v uint32 = 300
		t.IntervalSecs = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup represents the /nokia-conf/configure/redundancy/multi-chassis/peer/mc-ipsec/tunnel-group YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	PeerGroup          *uint32                     `path:"peer-group" module:"nokia-conf"`
	Priority           *uint32                     `path:"priority" module:"nokia-conf"`
	TunnelGroupId      *uint32                     `path:"tunnel-group-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPeerGroup retrieves the value of the leaf PeerGroup from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerGroup is set, it can
// safely use t.GetPeerGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup) GetPeerGroup() uint32 {
	if t == nil || t.PeerGroup == nil {
		return 0
	}
	return *t.PeerGroup
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup) GetPriority() uint32 {
	if t == nil || t.Priority == nil {
		return 100
	}
	return *t.Priority
}

// GetTunnelGroupId retrieves the value of the leaf TunnelGroupId from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelGroupId is set, it can
// safely use t.GetTunnelGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelGroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup) GetTunnelGroupId() uint32 {
	if t == nil || t.TunnelGroupId == nil {
		return 0
	}
	return *t.TunnelGroupId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Priority == nil {
		var v uint32 = 100
		t.Priority = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TunnelGroupId == nil {
		return nil, fmt.Errorf("nil value for key TunnelGroupId")
	}

	return map[string]interface{}{
		"tunnel-group-id": *t.TunnelGroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag represents the /nokia-conf/configure/redundancy/multi-chassis/peer/mc-lag YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag struct {
	AdminState            E_NokiaTypesSros_AdminState                                            `path:"admin-state" module:"nokia-conf"`
	ApplyGroups           []string                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	HoldOnNeighborFailure *uint32                                                                `path:"hold-on-neighbor-failure" module:"nokia-conf"`
	KeepAliveInterval     *uint32                                                                `path:"keep-alive-interval" module:"nokia-conf"`
	Lag                   map[string]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag `path:"lag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag) IsYANGGoStruct() {}

// NewLag creates a new entry in the Lag list of the
// NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag) NewLag(LagName string) (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lag == nil {
		t.Lag = make(map[string]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag)
	}

	key := LagName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Lag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Lag", key)
	}

	t.Lag[key] = &NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag{
		LagName: &LagName,
	}

	return t.Lag[key], nil
}

// RenameLag renames an entry in the list Lag within
// the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag) RenameLag(oldK, newK string) error {
	if _, ok := t.Lag[newK]; ok {
		return fmt.Errorf("key %v already exists in Lag", newK)
	}

	e, ok := t.Lag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Lag", oldK)
	}
	e.LagName = &newK

	t.Lag[newK] = e
	delete(t.Lag, oldK)
	return nil
}

// GetOrCreateLag retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag) GetOrCreateLag(LagName string) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag {

	key := LagName

	if v, ok := t.Lag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLag(LagName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLag got unexpected error: %v", err))
	}
	return v
}

// GetLag retrieves the value with the specified key from
// the Lag map field of NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag) GetLag(LagName string) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag {

	if t == nil {
		return nil
	}

	key := LagName

	if lm, ok := t.Lag[key]; ok {
		return lm
	}
	return nil
}

// DeleteLag deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag) DeleteLag(LagName string) {
	key := LagName

	delete(t.Lag, key)
}

// AppendLag appends the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag struct to the
// list Lag of NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag. If the key value(s) specified in
// the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag) AppendLag(v *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag) error {
	if v.LagName == nil {
		return fmt.Errorf("invalid nil key received for LagName")
	}

	key := *v.LagName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lag == nil {
		t.Lag = make(map[string]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag)
	}

	if _, ok := t.Lag[key]; ok {
		return fmt.Errorf("duplicate key for list Lag %v", key)
	}

	t.Lag[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetHoldOnNeighborFailure retrieves the value of the leaf HoldOnNeighborFailure from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldOnNeighborFailure is set, it can
// safely use t.GetHoldOnNeighborFailure() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldOnNeighborFailure == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag) GetHoldOnNeighborFailure() uint32 {
	if t == nil || t.HoldOnNeighborFailure == nil {
		return 3
	}
	return *t.HoldOnNeighborFailure
}

// GetKeepAliveInterval retrieves the value of the leaf KeepAliveInterval from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeepAliveInterval is set, it can
// safely use t.GetKeepAliveInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeepAliveInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag) GetKeepAliveInterval() uint32 {
	if t == nil || t.KeepAliveInterval == nil {
		return 10
	}
	return *t.KeepAliveInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.HoldOnNeighborFailure == nil {
		var v uint32 = 3
		t.HoldOnNeighborFailure = &v
	}
	if t.KeepAliveInterval == nil {
		var v uint32 = 10
		t.KeepAliveInterval = &v
	}
	for _, e := range t.Lag {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag represents the /nokia-conf/configure/redundancy/multi-chassis/peer/mc-lag/lag YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag struct {
	ApplyGroups        []string                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	LacpKey            *uint32                                                                        `path:"lacp-key" module:"nokia-conf"`
	LagName            *string                                                                        `path:"lag-name" module:"nokia-conf"`
	RemoteLag          *string                                                                        `path:"remote-lag" module:"nokia-conf"`
	SourceBmacLsb      NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag_SourceBmacLsb_Union `path:"source-bmac-lsb" module:"nokia-conf"`
	SystemId           *string                                                                        `path:"system-id" module:"nokia-conf"`
	SystemPriority     *int32                                                                         `path:"system-priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLacpKey retrieves the value of the leaf LacpKey from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LacpKey is set, it can
// safely use t.GetLacpKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LacpKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag) GetLacpKey() uint32 {
	if t == nil || t.LacpKey == nil {
		return 0
	}
	return *t.LacpKey
}

// GetLagName retrieves the value of the leaf LagName from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LagName is set, it can
// safely use t.GetLagName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LagName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag) GetLagName() string {
	if t == nil || t.LagName == nil {
		return ""
	}
	return *t.LagName
}

// GetRemoteLag retrieves the value of the leaf RemoteLag from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteLag is set, it can
// safely use t.GetRemoteLag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteLag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag) GetRemoteLag() string {
	if t == nil || t.RemoteLag == nil {
		return ""
	}
	return *t.RemoteLag
}

// GetSourceBmacLsb retrieves the value of the leaf SourceBmacLsb from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceBmacLsb is set, it can
// safely use t.GetSourceBmacLsb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceBmacLsb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag) GetSourceBmacLsb() NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag_SourceBmacLsb_Union {
	if t == nil || t.SourceBmacLsb == nil {
		return nil
	}
	return t.SourceBmacLsb
}

// GetSystemId retrieves the value of the leaf SystemId from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemId is set, it can
// safely use t.GetSystemId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag) GetSystemId() string {
	if t == nil || t.SystemId == nil {
		return ""
	}
	return *t.SystemId
}

// GetSystemPriority retrieves the value of the leaf SystemPriority from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemPriority is set, it can
// safely use t.GetSystemPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag) GetSystemPriority() int32 {
	if t == nil || t.SystemPriority == nil {
		return 0
	}
	return *t.SystemPriority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LagName == nil {
		return nil, fmt.Errorf("nil value for key LagName")
	}

	return map[string]interface{}{
		"lag-name": *t.LagName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McLag_Lag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing represents the /nokia-conf/configure/redundancy/multi-chassis/peer/mc-ring YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing struct {
	ApplyGroups        []string                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Ring               map[string]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring `path:"ring" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing) IsYANGGoStruct() {}

// NewRing creates a new entry in the Ring list of the
// NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing) NewRing(SyncTag string) (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ring == nil {
		t.Ring = make(map[string]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring)
	}

	key := SyncTag

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ring[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ring", key)
	}

	t.Ring[key] = &NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring{
		SyncTag: &SyncTag,
	}

	return t.Ring[key], nil
}

// RenameRing renames an entry in the list Ring within
// the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing) RenameRing(oldK, newK string) error {
	if _, ok := t.Ring[newK]; ok {
		return fmt.Errorf("key %v already exists in Ring", newK)
	}

	e, ok := t.Ring[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ring", oldK)
	}
	e.SyncTag = &newK

	t.Ring[newK] = e
	delete(t.Ring, oldK)
	return nil
}

// GetOrCreateRing retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing) GetOrCreateRing(SyncTag string) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring {

	key := SyncTag

	if v, ok := t.Ring[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRing(SyncTag)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRing got unexpected error: %v", err))
	}
	return v
}

// GetRing retrieves the value with the specified key from
// the Ring map field of NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing) GetRing(SyncTag string) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring {

	if t == nil {
		return nil
	}

	key := SyncTag

	if lm, ok := t.Ring[key]; ok {
		return lm
	}
	return nil
}

// DeleteRing deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing) DeleteRing(SyncTag string) {
	key := SyncTag

	delete(t.Ring, key)
}

// AppendRing appends the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring struct to the
// list Ring of NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing. If the key value(s) specified in
// the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing) AppendRing(v *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring) error {
	if v.SyncTag == nil {
		return fmt.Errorf("invalid nil key received for SyncTag")
	}

	key := *v.SyncTag

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ring == nil {
		t.Ring = make(map[string]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring)
	}

	if _, ok := t.Ring[key]; ok {
		return fmt.Errorf("duplicate key for list Ring %v", key)
	}

	t.Ring[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Ring {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring represents the /nokia-conf/configure/redundancy/multi-chassis/peer/mc-ring/ring YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring struct {
	AdminState         E_NokiaTypesSros_AdminState                                                           `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	InBandControlPath  *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath       `path:"in-band-control-path" module:"nokia-conf"`
	PathB              *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB                   `path:"path-b" module:"nokia-conf"`
	PathExcl           *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl                `path:"path-excl" module:"nokia-conf"`
	RingNode           map[string]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode     `path:"ring-node" module:"nokia-conf"`
	SrrpInstance       map[uint32]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance `path:"srrp-instance" module:"nokia-conf"`
	SyncTag            *string                                                                               `path:"sync-tag" module:"nokia-conf"`
	Type               E_NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_Type                   `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring) IsYANGGoStruct() {}

// NewRingNode creates a new entry in the RingNode list of the
// NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring) NewRingNode(Name string) (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RingNode == nil {
		t.RingNode = make(map[string]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RingNode[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RingNode", key)
	}

	t.RingNode[key] = &NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode{
		Name: &Name,
	}

	return t.RingNode[key], nil
}

// RenameRingNode renames an entry in the list RingNode within
// the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring) RenameRingNode(oldK, newK string) error {
	if _, ok := t.RingNode[newK]; ok {
		return fmt.Errorf("key %v already exists in RingNode", newK)
	}

	e, ok := t.RingNode[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RingNode", oldK)
	}
	e.Name = &newK

	t.RingNode[newK] = e
	delete(t.RingNode, oldK)
	return nil
}

// GetOrCreateRingNode retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring) GetOrCreateRingNode(Name string) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode {

	key := Name

	if v, ok := t.RingNode[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRingNode(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRingNode got unexpected error: %v", err))
	}
	return v
}

// GetRingNode retrieves the value with the specified key from
// the RingNode map field of NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring) GetRingNode(Name string) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.RingNode[key]; ok {
		return lm
	}
	return nil
}

// DeleteRingNode deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring) DeleteRingNode(Name string) {
	key := Name

	delete(t.RingNode, key)
}

// AppendRingNode appends the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode struct to the
// list RingNode of NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring. If the key value(s) specified in
// the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring) AppendRingNode(v *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RingNode == nil {
		t.RingNode = make(map[string]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode)
	}

	if _, ok := t.RingNode[key]; ok {
		return fmt.Errorf("duplicate key for list RingNode %v", key)
	}

	t.RingNode[key] = v
	return nil
}

// NewSrrpInstance creates a new entry in the SrrpInstance list of the
// NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring) NewSrrpInstance(Id uint32) (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SrrpInstance == nil {
		t.SrrpInstance = make(map[uint32]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SrrpInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SrrpInstance", key)
	}

	t.SrrpInstance[key] = &NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance{
		Id: &Id,
	}

	return t.SrrpInstance[key], nil
}

// RenameSrrpInstance renames an entry in the list SrrpInstance within
// the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring) RenameSrrpInstance(oldK, newK uint32) error {
	if _, ok := t.SrrpInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in SrrpInstance", newK)
	}

	e, ok := t.SrrpInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SrrpInstance", oldK)
	}
	e.Id = &newK

	t.SrrpInstance[newK] = e
	delete(t.SrrpInstance, oldK)
	return nil
}

// GetOrCreateSrrpInstance retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring) GetOrCreateSrrpInstance(Id uint32) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance {

	key := Id

	if v, ok := t.SrrpInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSrrpInstance(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSrrpInstance got unexpected error: %v", err))
	}
	return v
}

// GetSrrpInstance retrieves the value with the specified key from
// the SrrpInstance map field of NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring) GetSrrpInstance(Id uint32) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.SrrpInstance[key]; ok {
		return lm
	}
	return nil
}

// DeleteSrrpInstance deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring) DeleteSrrpInstance(Id uint32) {
	key := Id

	delete(t.SrrpInstance, key)
}

// AppendSrrpInstance appends the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance struct to the
// list SrrpInstance of NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring. If the key value(s) specified in
// the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring) AppendSrrpInstance(v *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SrrpInstance == nil {
		t.SrrpInstance = make(map[uint32]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance)
	}

	if _, ok := t.SrrpInstance[key]; ok {
		return fmt.Errorf("duplicate key for list SrrpInstance %v", key)
	}

	t.SrrpInstance[key] = v
	return nil
}

// GetOrCreateInBandControlPath retrieves the value of the InBandControlPath field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring) GetOrCreateInBandControlPath() *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath {
	if t.InBandControlPath != nil {
		return t.InBandControlPath
	}
	t.InBandControlPath = &NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath{}
	return t.InBandControlPath
}

// GetOrCreatePathB retrieves the value of the PathB field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring) GetOrCreatePathB() *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB {
	if t.PathB != nil {
		return t.PathB
	}
	t.PathB = &NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB{}
	return t.PathB
}

// GetOrCreatePathExcl retrieves the value of the PathExcl field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring) GetOrCreatePathExcl() *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl {
	if t.PathExcl != nil {
		return t.PathExcl
	}
	t.PathExcl = &NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl{}
	return t.PathExcl
}

// GetInBandControlPath returns the value of the InBandControlPath struct pointer
// from NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring. If the receiver or the field InBandControlPath is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring) GetInBandControlPath() *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath {
	if t != nil && t.InBandControlPath != nil {
		return t.InBandControlPath
	}
	return nil
}

// GetPathB returns the value of the PathB struct pointer
// from NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring. If the receiver or the field PathB is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring) GetPathB() *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB {
	if t != nil && t.PathB != nil {
		return t.PathB
	}
	return nil
}

// GetPathExcl returns the value of the PathExcl struct pointer
// from NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring. If the receiver or the field PathExcl is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring) GetPathExcl() *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl {
	if t != nil && t.PathExcl != nil {
		return t.PathExcl
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring) GetType() E_NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.InBandControlPath.PopulateDefaults()
	t.PathB.PopulateDefaults()
	t.PathExcl.PopulateDefaults()
	for _, e := range t.RingNode {
		e.PopulateDefaults()
	}
	for _, e := range t.SrrpInstance {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SyncTag == nil {
		return nil, fmt.Errorf("nil value for key SyncTag")
	}

	return map[string]interface{}{
		"sync-tag": *t.SyncTag,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath represents the /nokia-conf/configure/redundancy/multi-chassis/peer/mc-ring/ring/in-band-control-path YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath struct {
	Debounce        *bool   `path:"debounce" module:"nokia-conf"`
	DstIp           *string `path:"dst-ip" module:"nokia-conf"`
	Interface       *string `path:"interface" module:"nokia-conf"`
	MaxDebounceTime *uint32 `path:"max-debounce-time" module:"nokia-conf"`
	ServiceName     *string `path:"service-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath) IsYANGGoStruct() {
}

// GetDebounce retrieves the value of the leaf Debounce from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Debounce is set, it can
// safely use t.GetDebounce() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Debounce == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath) GetDebounce() bool {
	if t == nil || t.Debounce == nil {
		return true
	}
	return *t.Debounce
}

// GetDstIp retrieves the value of the leaf DstIp from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DstIp is set, it can
// safely use t.GetDstIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DstIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath) GetDstIp() string {
	if t == nil || t.DstIp == nil {
		return ""
	}
	return *t.DstIp
}

// GetInterface retrieves the value of the leaf Interface from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetMaxDebounceTime retrieves the value of the leaf MaxDebounceTime from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxDebounceTime is set, it can
// safely use t.GetMaxDebounceTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxDebounceTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath) GetMaxDebounceTime() uint32 {
	if t == nil || t.MaxDebounceTime == nil {
		return 10
	}
	return *t.MaxDebounceTime
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Debounce == nil {
		var v bool = true
		t.Debounce = &v
	}
	if t.MaxDebounceTime == nil {
		var v uint32 = 10
		t.MaxDebounceTime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB represents the /nokia-conf/configure/redundancy/multi-chassis/peer/mc-ring/ring/path-b YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB struct {
	ApplyGroups        []string                                                                                                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Range              map[NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range_Key]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range `path:"range" module:"nokia-conf"`
	WildcardSaps       *bool                                                                                                                                                      `path:"wildcard-saps" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB) IsYANGGoStruct() {}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range_Key represents the key for list Range of element /nokia-conf/configure/redundancy/multi-chassis/peer/mc-ring/ring/path-b.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range_Key struct {
	Start uint32 `path:"start"`
	End   uint32 `path:"end"`
}

// NewRange creates a new entry in the Range list of the
// NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB) NewRange(Start uint32, End uint32) (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range_Key]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range)
	}

	key := NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Range[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Range", key)
	}

	t.Range[key] = &NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range{
		Start: &Start,
		End:   &End,
	}

	return t.Range[key], nil
}

// RenameRange renames an entry in the list Range within
// the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB) RenameRange(oldK, newK NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range_Key) error {
	if _, ok := t.Range[newK]; ok {
		return fmt.Errorf("key %v already exists in Range", newK)
	}

	e, ok := t.Range[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Range", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.Range[newK] = e
	delete(t.Range, oldK)
	return nil
}

// GetOrCreateRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB) GetOrCreateRange(Start uint32, End uint32) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range {

	key := NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.Range[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRange got unexpected error: %v", err))
	}
	return v
}

// GetRange retrieves the value with the specified key from
// the Range map field of NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB) GetRange(Start uint32, End uint32) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.Range[key]; ok {
		return lm
	}
	return nil
}

// DeleteRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB) DeleteRange(Start uint32, End uint32) {
	key := NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range_Key{
		Start: Start,
		End:   End,
	}

	delete(t.Range, key)
}

// AppendRange appends the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range struct to the
// list Range of NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB. If the key value(s) specified in
// the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB) AppendRange(v *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range_Key]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range)
	}

	if _, ok := t.Range[key]; ok {
		return fmt.Errorf("duplicate key for list Range %v", key)
	}

	t.Range[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetWildcardSaps retrieves the value of the leaf WildcardSaps from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WildcardSaps is set, it can
// safely use t.GetWildcardSaps() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WildcardSaps == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB) GetWildcardSaps() bool {
	if t == nil || t.WildcardSaps == nil {
		return false
	}
	return *t.WildcardSaps
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.WildcardSaps == nil {
		var v bool = false
		t.WildcardSaps = &v
	}
	for _, e := range t.Range {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range represents the /nokia-conf/configure/redundancy/multi-chassis/peer/mc-ring/ring/path-b/range YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl represents the /nokia-conf/configure/redundancy/multi-chassis/peer/mc-ring/ring/path-excl YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl struct {
	ApplyGroups        []string                                                                                                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	Range              map[NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range_Key]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range `path:"range" module:"nokia-conf"`
	WildcardSaps       *bool                                                                                                                                                            `path:"wildcard-saps" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl) IsYANGGoStruct() {}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range_Key represents the key for list Range of element /nokia-conf/configure/redundancy/multi-chassis/peer/mc-ring/ring/path-excl.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range_Key struct {
	Start uint32 `path:"start"`
	End   uint32 `path:"end"`
}

// NewRange creates a new entry in the Range list of the
// NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl) NewRange(Start uint32, End uint32) (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range_Key]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range)
	}

	key := NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Range[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Range", key)
	}

	t.Range[key] = &NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range{
		Start: &Start,
		End:   &End,
	}

	return t.Range[key], nil
}

// RenameRange renames an entry in the list Range within
// the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl) RenameRange(oldK, newK NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range_Key) error {
	if _, ok := t.Range[newK]; ok {
		return fmt.Errorf("key %v already exists in Range", newK)
	}

	e, ok := t.Range[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Range", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.Range[newK] = e
	delete(t.Range, oldK)
	return nil
}

// GetOrCreateRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl) GetOrCreateRange(Start uint32, End uint32) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range {

	key := NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.Range[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRange got unexpected error: %v", err))
	}
	return v
}

// GetRange retrieves the value with the specified key from
// the Range map field of NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl) GetRange(Start uint32, End uint32) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.Range[key]; ok {
		return lm
	}
	return nil
}

// DeleteRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl) DeleteRange(Start uint32, End uint32) {
	key := NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range_Key{
		Start: Start,
		End:   End,
	}

	delete(t.Range, key)
}

// AppendRange appends the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range struct to the
// list Range of NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl. If the key value(s) specified in
// the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl) AppendRange(v *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range_Key]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range)
	}

	if _, ok := t.Range[key]; ok {
		return fmt.Errorf("duplicate key for list Range %v", key)
	}

	t.Range[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetWildcardSaps retrieves the value of the leaf WildcardSaps from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WildcardSaps is set, it can
// safely use t.GetWildcardSaps() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WildcardSaps == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl) GetWildcardSaps() bool {
	if t == nil || t.WildcardSaps == nil {
		return false
	}
	return *t.WildcardSaps
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.WildcardSaps == nil {
		var v bool = false
		t.WildcardSaps = &v
	}
	for _, e := range t.Range {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range represents the /nokia-conf/configure/redundancy/multi-chassis/peer/mc-ring/ring/path-excl/range YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode represents the /nokia-conf/configure/redundancy/multi-chassis/peer/mc-ring/ring/ring-node YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode struct {
	AdminState         E_NokiaTypesSros_AdminState                                                        `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	DstIp              *string                                                                            `path:"dst-ip" module:"nokia-conf"`
	Interval           *uint32                                                                            `path:"interval" module:"nokia-conf"`
	Name               *string                                                                            `path:"name" module:"nokia-conf"`
	ServiceName        *string                                                                            `path:"service-name" module:"nokia-conf"`
	SrcIp              *string                                                                            `path:"src-ip" module:"nokia-conf"`
	SrcMac             NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode_SrcMac_Union `path:"src-mac" module:"nokia-conf"`
	Vlan               *string                                                                            `path:"vlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDstIp retrieves the value of the leaf DstIp from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DstIp is set, it can
// safely use t.GetDstIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DstIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode) GetDstIp() string {
	if t == nil || t.DstIp == nil {
		return ""
	}
	return *t.DstIp
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 5
	}
	return *t.Interval
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// GetSrcIp retrieves the value of the leaf SrcIp from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrcIp is set, it can
// safely use t.GetSrcIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrcIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode) GetSrcIp() string {
	if t == nil || t.SrcIp == nil {
		return ""
	}
	return *t.SrcIp
}

// GetSrcMac retrieves the value of the leaf SrcMac from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrcMac is set, it can
// safely use t.GetSrcMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrcMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode) GetSrcMac() NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode_SrcMac_Union {
	if t == nil || t.SrcMac == nil {
		return NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode_SrcMac_Enum_system_mac_address
	}
	return t.SrcMac
}

// GetVlan retrieves the value of the leaf Vlan from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vlan is set, it can
// safely use t.GetVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode) GetVlan() string {
	if t == nil || t.Vlan == nil {
		return ""
	}
	return *t.Vlan
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Interval == nil {
		var v uint32 = 5
		t.Interval = &v
	}
	if t.SrcMac == nil {
		t.SrcMac = NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode_SrcMac_Enum_system_mac_address
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance represents the /nokia-conf/configure/redundancy/multi-chassis/peer/mc-ring/ring/srrp-instance YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance struct {
	Id *uint32 `path:"id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync represents the /nokia-conf/configure/redundancy/multi-chassis/peer/sync YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync struct {
	AdminState          E_NokiaTypesSros_AdminState                                                   `path:"admin-state" module:"nokia-conf"`
	ApplyGroups         []string                                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	DiameterNode        *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode           `path:"diameter-node" module:"nokia-conf" yangPresence:"true"`
	DiameterProxy       *bool                                                                         `path:"diameter-proxy" module:"nokia-conf"`
	Igmp                *bool                                                                         `path:"igmp" module:"nokia-conf"`
	IgmpSnooping        *bool                                                                         `path:"igmp-snooping" module:"nokia-conf"`
	Ipsec               *bool                                                                         `path:"ipsec" module:"nokia-conf"`
	L2Tp                *bool                                                                         `path:"l2tp" module:"nokia-conf"`
	LocalDhcpServer     *bool                                                                         `path:"local-dhcp-server" module:"nokia-conf"`
	McRing              *bool                                                                         `path:"mc-ring" module:"nokia-conf"`
	Mld                 *bool                                                                         `path:"mld" module:"nokia-conf"`
	MldSnooping         *bool                                                                         `path:"mld-snooping" module:"nokia-conf"`
	Nat                 *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat                    `path:"nat" module:"nokia-conf" yangPresence:"true"`
	PimSnooping         *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_PimSnooping            `path:"pim-snooping" module:"nokia-conf"`
	Python              *bool                                                                         `path:"python" module:"nokia-conf"`
	Srrp                *bool                                                                         `path:"srrp" module:"nokia-conf"`
	SubHostTrk          *bool                                                                         `path:"sub-host-trk" module:"nokia-conf"`
	SubMgmt             *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_SubMgmt                `path:"sub-mgmt" module:"nokia-conf"`
	Tags                *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags                   `path:"tags" module:"nokia-conf"`
	TrackSrrp           map[uint32]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp   `path:"track-srrp" module:"nokia-conf"`
	TransportEncryption *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption    `path:"transport-encryption" module:"nokia-conf"`
	TunnelGroup         map[uint32]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TunnelGroup `path:"tunnel-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) IsYANGGoStruct() {}

// NewTrackSrrp creates a new entry in the TrackSrrp list of the
// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) NewTrackSrrp(Id uint32) (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrackSrrp == nil {
		t.TrackSrrp = make(map[uint32]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TrackSrrp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TrackSrrp", key)
	}

	t.TrackSrrp[key] = &NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp{
		Id: &Id,
	}

	return t.TrackSrrp[key], nil
}

// RenameTrackSrrp renames an entry in the list TrackSrrp within
// the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) RenameTrackSrrp(oldK, newK uint32) error {
	if _, ok := t.TrackSrrp[newK]; ok {
		return fmt.Errorf("key %v already exists in TrackSrrp", newK)
	}

	e, ok := t.TrackSrrp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TrackSrrp", oldK)
	}
	e.Id = &newK

	t.TrackSrrp[newK] = e
	delete(t.TrackSrrp, oldK)
	return nil
}

// GetOrCreateTrackSrrp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) GetOrCreateTrackSrrp(Id uint32) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp {

	key := Id

	if v, ok := t.TrackSrrp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTrackSrrp(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTrackSrrp got unexpected error: %v", err))
	}
	return v
}

// GetTrackSrrp retrieves the value with the specified key from
// the TrackSrrp map field of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) GetTrackSrrp(Id uint32) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.TrackSrrp[key]; ok {
		return lm
	}
	return nil
}

// DeleteTrackSrrp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) DeleteTrackSrrp(Id uint32) {
	key := Id

	delete(t.TrackSrrp, key)
}

// AppendTrackSrrp appends the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp struct to the
// list TrackSrrp of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync. If the key value(s) specified in
// the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) AppendTrackSrrp(v *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrackSrrp == nil {
		t.TrackSrrp = make(map[uint32]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp)
	}

	if _, ok := t.TrackSrrp[key]; ok {
		return fmt.Errorf("duplicate key for list TrackSrrp %v", key)
	}

	t.TrackSrrp[key] = v
	return nil
}

// NewTunnelGroup creates a new entry in the TunnelGroup list of the
// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) NewTunnelGroup(TunnelGroupId uint32) (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TunnelGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TunnelGroup == nil {
		t.TunnelGroup = make(map[uint32]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TunnelGroup)
	}

	key := TunnelGroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TunnelGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TunnelGroup", key)
	}

	t.TunnelGroup[key] = &NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TunnelGroup{
		TunnelGroupId: &TunnelGroupId,
	}

	return t.TunnelGroup[key], nil
}

// RenameTunnelGroup renames an entry in the list TunnelGroup within
// the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) RenameTunnelGroup(oldK, newK uint32) error {
	if _, ok := t.TunnelGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in TunnelGroup", newK)
	}

	e, ok := t.TunnelGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TunnelGroup", oldK)
	}
	e.TunnelGroupId = &newK

	t.TunnelGroup[newK] = e
	delete(t.TunnelGroup, oldK)
	return nil
}

// GetOrCreateTunnelGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) GetOrCreateTunnelGroup(TunnelGroupId uint32) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TunnelGroup {

	key := TunnelGroupId

	if v, ok := t.TunnelGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTunnelGroup(TunnelGroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTunnelGroup got unexpected error: %v", err))
	}
	return v
}

// GetTunnelGroup retrieves the value with the specified key from
// the TunnelGroup map field of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) GetTunnelGroup(TunnelGroupId uint32) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TunnelGroup {

	if t == nil {
		return nil
	}

	key := TunnelGroupId

	if lm, ok := t.TunnelGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteTunnelGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) DeleteTunnelGroup(TunnelGroupId uint32) {
	key := TunnelGroupId

	delete(t.TunnelGroup, key)
}

// AppendTunnelGroup appends the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TunnelGroup struct to the
// list TunnelGroup of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync. If the key value(s) specified in
// the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TunnelGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) AppendTunnelGroup(v *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TunnelGroup) error {
	if v.TunnelGroupId == nil {
		return fmt.Errorf("invalid nil key received for TunnelGroupId")
	}

	key := *v.TunnelGroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TunnelGroup == nil {
		t.TunnelGroup = make(map[uint32]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TunnelGroup)
	}

	if _, ok := t.TunnelGroup[key]; ok {
		return fmt.Errorf("duplicate key for list TunnelGroup %v", key)
	}

	t.TunnelGroup[key] = v
	return nil
}

// GetOrCreateDiameterNode retrieves the value of the DiameterNode field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) GetOrCreateDiameterNode() *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode {
	if t.DiameterNode != nil {
		return t.DiameterNode
	}
	t.DiameterNode = &NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode{}
	return t.DiameterNode
}

// GetOrCreateNat retrieves the value of the Nat field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) GetOrCreateNat() *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat {
	if t.Nat != nil {
		return t.Nat
	}
	t.Nat = &NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat{}
	return t.Nat
}

// GetOrCreatePimSnooping retrieves the value of the PimSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) GetOrCreatePimSnooping() *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_PimSnooping {
	if t.PimSnooping != nil {
		return t.PimSnooping
	}
	t.PimSnooping = &NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_PimSnooping{}
	return t.PimSnooping
}

// GetOrCreateSubMgmt retrieves the value of the SubMgmt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) GetOrCreateSubMgmt() *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_SubMgmt {
	if t.SubMgmt != nil {
		return t.SubMgmt
	}
	t.SubMgmt = &NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_SubMgmt{}
	return t.SubMgmt
}

// GetOrCreateTags retrieves the value of the Tags field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) GetOrCreateTags() *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags {
	if t.Tags != nil {
		return t.Tags
	}
	t.Tags = &NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags{}
	return t.Tags
}

// GetOrCreateTransportEncryption retrieves the value of the TransportEncryption field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) GetOrCreateTransportEncryption() *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption {
	if t.TransportEncryption != nil {
		return t.TransportEncryption
	}
	t.TransportEncryption = &NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption{}
	return t.TransportEncryption
}

// GetDiameterNode returns the value of the DiameterNode struct pointer
// from NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync. If the receiver or the field DiameterNode is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) GetDiameterNode() *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode {
	if t != nil && t.DiameterNode != nil {
		return t.DiameterNode
	}
	return nil
}

// GetNat returns the value of the Nat struct pointer
// from NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync. If the receiver or the field Nat is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) GetNat() *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat {
	if t != nil && t.Nat != nil {
		return t.Nat
	}
	return nil
}

// GetPimSnooping returns the value of the PimSnooping struct pointer
// from NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync. If the receiver or the field PimSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) GetPimSnooping() *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_PimSnooping {
	if t != nil && t.PimSnooping != nil {
		return t.PimSnooping
	}
	return nil
}

// GetSubMgmt returns the value of the SubMgmt struct pointer
// from NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync. If the receiver or the field SubMgmt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) GetSubMgmt() *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_SubMgmt {
	if t != nil && t.SubMgmt != nil {
		return t.SubMgmt
	}
	return nil
}

// GetTags returns the value of the Tags struct pointer
// from NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync. If the receiver or the field Tags is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) GetTags() *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags {
	if t != nil && t.Tags != nil {
		return t.Tags
	}
	return nil
}

// GetTransportEncryption returns the value of the TransportEncryption struct pointer
// from NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync. If the receiver or the field TransportEncryption is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) GetTransportEncryption() *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption {
	if t != nil && t.TransportEncryption != nil {
		return t.TransportEncryption
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDiameterProxy retrieves the value of the leaf DiameterProxy from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiameterProxy is set, it can
// safely use t.GetDiameterProxy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiameterProxy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) GetDiameterProxy() bool {
	if t == nil || t.DiameterProxy == nil {
		return false
	}
	return *t.DiameterProxy
}

// GetIgmp retrieves the value of the leaf Igmp from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Igmp is set, it can
// safely use t.GetIgmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Igmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) GetIgmp() bool {
	if t == nil || t.Igmp == nil {
		return false
	}
	return *t.Igmp
}

// GetIgmpSnooping retrieves the value of the leaf IgmpSnooping from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgmpSnooping is set, it can
// safely use t.GetIgmpSnooping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgmpSnooping == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) GetIgmpSnooping() bool {
	if t == nil || t.IgmpSnooping == nil {
		return false
	}
	return *t.IgmpSnooping
}

// GetIpsec retrieves the value of the leaf Ipsec from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipsec is set, it can
// safely use t.GetIpsec() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipsec == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) GetIpsec() bool {
	if t == nil || t.Ipsec == nil {
		return false
	}
	return *t.Ipsec
}

// GetL2Tp retrieves the value of the leaf L2Tp from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2Tp is set, it can
// safely use t.GetL2Tp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2Tp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) GetL2Tp() bool {
	if t == nil || t.L2Tp == nil {
		return false
	}
	return *t.L2Tp
}

// GetLocalDhcpServer retrieves the value of the leaf LocalDhcpServer from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalDhcpServer is set, it can
// safely use t.GetLocalDhcpServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalDhcpServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) GetLocalDhcpServer() bool {
	if t == nil || t.LocalDhcpServer == nil {
		return false
	}
	return *t.LocalDhcpServer
}

// GetMcRing retrieves the value of the leaf McRing from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McRing is set, it can
// safely use t.GetMcRing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McRing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) GetMcRing() bool {
	if t == nil || t.McRing == nil {
		return false
	}
	return *t.McRing
}

// GetMld retrieves the value of the leaf Mld from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mld is set, it can
// safely use t.GetMld() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mld == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) GetMld() bool {
	if t == nil || t.Mld == nil {
		return false
	}
	return *t.Mld
}

// GetMldSnooping retrieves the value of the leaf MldSnooping from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MldSnooping is set, it can
// safely use t.GetMldSnooping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MldSnooping == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) GetMldSnooping() bool {
	if t == nil || t.MldSnooping == nil {
		return false
	}
	return *t.MldSnooping
}

// GetPython retrieves the value of the leaf Python from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Python is set, it can
// safely use t.GetPython() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Python == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) GetPython() bool {
	if t == nil || t.Python == nil {
		return false
	}
	return *t.Python
}

// GetSrrp retrieves the value of the leaf Srrp from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Srrp is set, it can
// safely use t.GetSrrp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Srrp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) GetSrrp() bool {
	if t == nil || t.Srrp == nil {
		return false
	}
	return *t.Srrp
}

// GetSubHostTrk retrieves the value of the leaf SubHostTrk from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubHostTrk is set, it can
// safely use t.GetSubHostTrk() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubHostTrk == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) GetSubHostTrk() bool {
	if t == nil || t.SubHostTrk == nil {
		return false
	}
	return *t.SubHostTrk
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.DiameterProxy == nil {
		var v bool = false
		t.DiameterProxy = &v
	}
	if t.Igmp == nil {
		var v bool = false
		t.Igmp = &v
	}
	if t.IgmpSnooping == nil {
		var v bool = false
		t.IgmpSnooping = &v
	}
	if t.Ipsec == nil {
		var v bool = false
		t.Ipsec = &v
	}
	if t.L2Tp == nil {
		var v bool = false
		t.L2Tp = &v
	}
	if t.LocalDhcpServer == nil {
		var v bool = false
		t.LocalDhcpServer = &v
	}
	if t.McRing == nil {
		var v bool = false
		t.McRing = &v
	}
	if t.Mld == nil {
		var v bool = false
		t.Mld = &v
	}
	if t.MldSnooping == nil {
		var v bool = false
		t.MldSnooping = &v
	}
	if t.Python == nil {
		var v bool = false
		t.Python = &v
	}
	if t.Srrp == nil {
		var v bool = false
		t.Srrp = &v
	}
	if t.SubHostTrk == nil {
		var v bool = false
		t.SubHostTrk = &v
	}
	t.DiameterNode.PopulateDefaults()
	t.Nat.PopulateDefaults()
	t.PimSnooping.PopulateDefaults()
	t.SubMgmt.PopulateDefaults()
	t.Tags.PopulateDefaults()
	t.TransportEncryption.PopulateDefaults()
	for _, e := range t.TrackSrrp {
		e.PopulateDefaults()
	}
	for _, e := range t.TunnelGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode represents the /nokia-conf/configure/redundancy/multi-chassis/peer/sync/diameter-node YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode struct {
	Node map[string]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node `path:"node" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode) IsYANGGoStruct() {}

// NewNode creates a new entry in the Node list of the
// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode) NewNode(HostName string) (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Node == nil {
		t.Node = make(map[string]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node)
	}

	key := HostName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Node[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Node", key)
	}

	t.Node[key] = &NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node{
		HostName: &HostName,
	}

	return t.Node[key], nil
}

// RenameNode renames an entry in the list Node within
// the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode) RenameNode(oldK, newK string) error {
	if _, ok := t.Node[newK]; ok {
		return fmt.Errorf("key %v already exists in Node", newK)
	}

	e, ok := t.Node[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Node", oldK)
	}
	e.HostName = &newK

	t.Node[newK] = e
	delete(t.Node, oldK)
	return nil
}

// GetOrCreateNode retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode) GetOrCreateNode(HostName string) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node {

	key := HostName

	if v, ok := t.Node[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNode(HostName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNode got unexpected error: %v", err))
	}
	return v
}

// GetNode retrieves the value with the specified key from
// the Node map field of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode) GetNode(HostName string) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node {

	if t == nil {
		return nil
	}

	key := HostName

	if lm, ok := t.Node[key]; ok {
		return lm
	}
	return nil
}

// DeleteNode deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode) DeleteNode(HostName string) {
	key := HostName

	delete(t.Node, key)
}

// AppendNode appends the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node struct to the
// list Node of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode. If the key value(s) specified in
// the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode) AppendNode(v *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node) error {
	if v.HostName == nil {
		return fmt.Errorf("invalid nil key received for HostName")
	}

	key := *v.HostName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Node == nil {
		t.Node = make(map[string]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node)
	}

	if _, ok := t.Node[key]; ok {
		return fmt.Errorf("duplicate key for list Node %v", key)
	}

	t.Node[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Node {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node represents the /nokia-conf/configure/redundancy/multi-chassis/peer/sync/diameter-node/node YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	HostName           *string  `path:"host-name" module:"nokia-conf"`
	SyncTag            *string  `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetHostName retrieves the value of the leaf HostName from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostName is set, it can
// safely use t.GetHostName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node) GetHostName() string {
	if t == nil || t.HostName == nil {
		return ""
	}
	return *t.HostName
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node) ΛListKeyMap() (map[string]interface{}, error) {
	if t.HostName == nil {
		return nil, fmt.Errorf("nil value for key HostName")
	}

	return map[string]interface{}{
		"host-name": *t.HostName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat represents the /nokia-conf/configure/redundancy/multi-chassis/peer/sync/nat YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat struct {
	NatGroup map[uint32]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup `path:"nat-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat) IsYANGGoStruct() {}

// NewNatGroup creates a new entry in the NatGroup list of the
// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat) NewNatGroup(Id uint32) (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NatGroup == nil {
		t.NatGroup = make(map[uint32]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NatGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NatGroup", key)
	}

	t.NatGroup[key] = &NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup{
		Id: &Id,
	}

	return t.NatGroup[key], nil
}

// RenameNatGroup renames an entry in the list NatGroup within
// the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat) RenameNatGroup(oldK, newK uint32) error {
	if _, ok := t.NatGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in NatGroup", newK)
	}

	e, ok := t.NatGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NatGroup", oldK)
	}
	e.Id = &newK

	t.NatGroup[newK] = e
	delete(t.NatGroup, oldK)
	return nil
}

// GetOrCreateNatGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat) GetOrCreateNatGroup(Id uint32) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup {

	key := Id

	if v, ok := t.NatGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNatGroup(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNatGroup got unexpected error: %v", err))
	}
	return v
}

// GetNatGroup retrieves the value with the specified key from
// the NatGroup map field of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat) GetNatGroup(Id uint32) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.NatGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteNatGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat) DeleteNatGroup(Id uint32) {
	key := Id

	delete(t.NatGroup, key)
}

// AppendNatGroup appends the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup struct to the
// list NatGroup of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat. If the key value(s) specified in
// the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat) AppendNatGroup(v *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NatGroup == nil {
		t.NatGroup = make(map[uint32]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup)
	}

	if _, ok := t.NatGroup[key]; ok {
		return fmt.Errorf("duplicate key for list NatGroup %v", key)
	}

	t.NatGroup[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.NatGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup represents the /nokia-conf/configure/redundancy/multi-chassis/peer/sync/nat/nat-group YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Id                 *uint32  `path:"id" module:"nokia-conf"`
	SyncTag            *string  `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_PimSnooping represents the /nokia-conf/configure/redundancy/multi-chassis/peer/sync/pim-snooping YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_PimSnooping struct {
	Saps      *bool `path:"saps" module:"nokia-conf"`
	SpokeSdps *bool `path:"spoke-sdps" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_PimSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_PimSnooping) IsYANGGoStruct() {}

// GetSaps retrieves the value of the leaf Saps from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_PimSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Saps is set, it can
// safely use t.GetSaps() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Saps == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_PimSnooping) GetSaps() bool {
	if t == nil || t.Saps == nil {
		return false
	}
	return *t.Saps
}

// GetSpokeSdps retrieves the value of the leaf SpokeSdps from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_PimSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpokeSdps is set, it can
// safely use t.GetSpokeSdps() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpokeSdps == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_PimSnooping) GetSpokeSdps() bool {
	if t == nil || t.SpokeSdps == nil {
		return false
	}
	return *t.SpokeSdps
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_PimSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_PimSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Saps == nil {
		var v bool = false
		t.Saps = &v
	}
	if t.SpokeSdps == nil {
		var v bool = false
		t.SpokeSdps = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_PimSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_PimSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_PimSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_PimSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_PimSnooping.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_PimSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_SubMgmt represents the /nokia-conf/configure/redundancy/multi-chassis/peer/sync/sub-mgmt YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_SubMgmt struct {
	Ipoe  *bool `path:"ipoe" module:"nokia-conf"`
	Pppoe *bool `path:"pppoe" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_SubMgmt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_SubMgmt) IsYANGGoStruct() {}

// GetIpoe retrieves the value of the leaf Ipoe from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_SubMgmt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipoe is set, it can
// safely use t.GetIpoe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipoe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_SubMgmt) GetIpoe() bool {
	if t == nil || t.Ipoe == nil {
		return false
	}
	return *t.Ipoe
}

// GetPppoe retrieves the value of the leaf Pppoe from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_SubMgmt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pppoe is set, it can
// safely use t.GetPppoe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pppoe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_SubMgmt) GetPppoe() bool {
	if t == nil || t.Pppoe == nil {
		return false
	}
	return *t.Pppoe
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_SubMgmt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_SubMgmt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipoe == nil {
		var v bool = false
		t.Ipoe = &v
	}
	if t.Pppoe == nil {
		var v bool = false
		t.Pppoe = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_SubMgmt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_SubMgmt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_SubMgmt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_SubMgmt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_SubMgmt.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_SubMgmt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags represents the /nokia-conf/configure/redundancy/multi-chassis/peer/sync/tags YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags struct {
	Lag    map[string]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag    `path:"lag" module:"nokia-conf"`
	Port   map[string]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port   `path:"port" module:"nokia-conf"`
	PwPort map[uint32]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort `path:"pw-port" module:"nokia-conf"`
	Sdp    map[uint32]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp    `path:"sdp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags) IsYANGGoStruct() {}

// NewLag creates a new entry in the Lag list of the
// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags) NewLag(LagName string) (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lag == nil {
		t.Lag = make(map[string]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag)
	}

	key := LagName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Lag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Lag", key)
	}

	t.Lag[key] = &NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag{
		LagName: &LagName,
	}

	return t.Lag[key], nil
}

// RenameLag renames an entry in the list Lag within
// the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags) RenameLag(oldK, newK string) error {
	if _, ok := t.Lag[newK]; ok {
		return fmt.Errorf("key %v already exists in Lag", newK)
	}

	e, ok := t.Lag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Lag", oldK)
	}
	e.LagName = &newK

	t.Lag[newK] = e
	delete(t.Lag, oldK)
	return nil
}

// GetOrCreateLag retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags) GetOrCreateLag(LagName string) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag {

	key := LagName

	if v, ok := t.Lag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLag(LagName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLag got unexpected error: %v", err))
	}
	return v
}

// GetLag retrieves the value with the specified key from
// the Lag map field of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags) GetLag(LagName string) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag {

	if t == nil {
		return nil
	}

	key := LagName

	if lm, ok := t.Lag[key]; ok {
		return lm
	}
	return nil
}

// DeleteLag deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags) DeleteLag(LagName string) {
	key := LagName

	delete(t.Lag, key)
}

// AppendLag appends the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag struct to the
// list Lag of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags. If the key value(s) specified in
// the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags) AppendLag(v *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag) error {
	if v.LagName == nil {
		return fmt.Errorf("invalid nil key received for LagName")
	}

	key := *v.LagName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lag == nil {
		t.Lag = make(map[string]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag)
	}

	if _, ok := t.Lag[key]; ok {
		return fmt.Errorf("duplicate key for list Lag %v", key)
	}

	t.Lag[key] = v
	return nil
}

// NewPort creates a new entry in the Port list of the
// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags) NewPort(Id string) (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[string]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Port[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Port", key)
	}

	t.Port[key] = &NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port{
		Id: &Id,
	}

	return t.Port[key], nil
}

// RenamePort renames an entry in the list Port within
// the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags) RenamePort(oldK, newK string) error {
	if _, ok := t.Port[newK]; ok {
		return fmt.Errorf("key %v already exists in Port", newK)
	}

	e, ok := t.Port[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Port", oldK)
	}
	e.Id = &newK

	t.Port[newK] = e
	delete(t.Port, oldK)
	return nil
}

// GetOrCreatePort retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags) GetOrCreatePort(Id string) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port {

	key := Id

	if v, ok := t.Port[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPort(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePort got unexpected error: %v", err))
	}
	return v
}

// GetPort retrieves the value with the specified key from
// the Port map field of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags) GetPort(Id string) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Port[key]; ok {
		return lm
	}
	return nil
}

// DeletePort deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags) DeletePort(Id string) {
	key := Id

	delete(t.Port, key)
}

// AppendPort appends the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port struct to the
// list Port of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags. If the key value(s) specified in
// the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags) AppendPort(v *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[string]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port)
	}

	if _, ok := t.Port[key]; ok {
		return fmt.Errorf("duplicate key for list Port %v", key)
	}

	t.Port[key] = v
	return nil
}

// NewPwPort creates a new entry in the PwPort list of the
// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags) NewPwPort(Id uint32) (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PwPort == nil {
		t.PwPort = make(map[uint32]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PwPort[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PwPort", key)
	}

	t.PwPort[key] = &NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort{
		Id: &Id,
	}

	return t.PwPort[key], nil
}

// RenamePwPort renames an entry in the list PwPort within
// the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags) RenamePwPort(oldK, newK uint32) error {
	if _, ok := t.PwPort[newK]; ok {
		return fmt.Errorf("key %v already exists in PwPort", newK)
	}

	e, ok := t.PwPort[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PwPort", oldK)
	}
	e.Id = &newK

	t.PwPort[newK] = e
	delete(t.PwPort, oldK)
	return nil
}

// GetOrCreatePwPort retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags) GetOrCreatePwPort(Id uint32) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort {

	key := Id

	if v, ok := t.PwPort[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPwPort(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePwPort got unexpected error: %v", err))
	}
	return v
}

// GetPwPort retrieves the value with the specified key from
// the PwPort map field of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags) GetPwPort(Id uint32) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.PwPort[key]; ok {
		return lm
	}
	return nil
}

// DeletePwPort deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags) DeletePwPort(Id uint32) {
	key := Id

	delete(t.PwPort, key)
}

// AppendPwPort appends the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort struct to the
// list PwPort of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags. If the key value(s) specified in
// the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags) AppendPwPort(v *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PwPort == nil {
		t.PwPort = make(map[uint32]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort)
	}

	if _, ok := t.PwPort[key]; ok {
		return fmt.Errorf("duplicate key for list PwPort %v", key)
	}

	t.PwPort[key] = v
	return nil
}

// NewSdp creates a new entry in the Sdp list of the
// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags) NewSdp(Id uint32) (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sdp == nil {
		t.Sdp = make(map[uint32]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sdp", key)
	}

	t.Sdp[key] = &NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp{
		Id: &Id,
	}

	return t.Sdp[key], nil
}

// RenameSdp renames an entry in the list Sdp within
// the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags) RenameSdp(oldK, newK uint32) error {
	if _, ok := t.Sdp[newK]; ok {
		return fmt.Errorf("key %v already exists in Sdp", newK)
	}

	e, ok := t.Sdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sdp", oldK)
	}
	e.Id = &newK

	t.Sdp[newK] = e
	delete(t.Sdp, oldK)
	return nil
}

// GetOrCreateSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags) GetOrCreateSdp(Id uint32) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp {

	key := Id

	if v, ok := t.Sdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSdp(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSdp got unexpected error: %v", err))
	}
	return v
}

// GetSdp retrieves the value with the specified key from
// the Sdp map field of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags) GetSdp(Id uint32) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Sdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags) DeleteSdp(Id uint32) {
	key := Id

	delete(t.Sdp, key)
}

// AppendSdp appends the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp struct to the
// list Sdp of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags. If the key value(s) specified in
// the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags) AppendSdp(v *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sdp == nil {
		t.Sdp = make(map[uint32]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp)
	}

	if _, ok := t.Sdp[key]; ok {
		return fmt.Errorf("duplicate key for list Sdp %v", key)
	}

	t.Sdp[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Lag {
		e.PopulateDefaults()
	}
	for _, e := range t.Port {
		e.PopulateDefaults()
	}
	for _, e := range t.PwPort {
		e.PopulateDefaults()
	}
	for _, e := range t.Sdp {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag represents the /nokia-conf/configure/redundancy/multi-chassis/peer/sync/tags/lag YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag struct {
	ApplyGroups        []string                                                                                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	LagName            *string                                                                                                                                            `path:"lag-name" module:"nokia-conf"`
	Range              map[NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range_Key]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range `path:"range" module:"nokia-conf"`
	SyncTag            *string                                                                                                                                            `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag) IsYANGGoStruct() {}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range_Key represents the key for list Range of element /nokia-conf/configure/redundancy/multi-chassis/peer/sync/tags/lag.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// NewRange creates a new entry in the Range list of the
// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag) NewRange(Start string, End string) (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range_Key]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range)
	}

	key := NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Range[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Range", key)
	}

	t.Range[key] = &NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range{
		Start: &Start,
		End:   &End,
	}

	return t.Range[key], nil
}

// RenameRange renames an entry in the list Range within
// the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag) RenameRange(oldK, newK NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range_Key) error {
	if _, ok := t.Range[newK]; ok {
		return fmt.Errorf("key %v already exists in Range", newK)
	}

	e, ok := t.Range[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Range", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.Range[newK] = e
	delete(t.Range, oldK)
	return nil
}

// GetOrCreateRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag) GetOrCreateRange(Start string, End string) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range {

	key := NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.Range[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRange got unexpected error: %v", err))
	}
	return v
}

// GetRange retrieves the value with the specified key from
// the Range map field of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag) GetRange(Start string, End string) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.Range[key]; ok {
		return lm
	}
	return nil
}

// DeleteRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag) DeleteRange(Start string, End string) {
	key := NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range_Key{
		Start: Start,
		End:   End,
	}

	delete(t.Range, key)
}

// AppendRange appends the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range struct to the
// list Range of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag. If the key value(s) specified in
// the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag) AppendRange(v *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range_Key]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range)
	}

	if _, ok := t.Range[key]; ok {
		return fmt.Errorf("duplicate key for list Range %v", key)
	}

	t.Range[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLagName retrieves the value of the leaf LagName from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LagName is set, it can
// safely use t.GetLagName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LagName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag) GetLagName() string {
	if t == nil || t.LagName == nil {
		return ""
	}
	return *t.LagName
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Range {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LagName == nil {
		return nil, fmt.Errorf("nil value for key LagName")
	}

	return map[string]interface{}{
		"lag-name": *t.LagName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range represents the /nokia-conf/configure/redundancy/multi-chassis/peer/sync/tags/lag/range YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	End                *string  `path:"end" module:"nokia-conf"`
	Start              *string  `path:"start" module:"nokia-conf"`
	SyncTag            *string  `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port represents the /nokia-conf/configure/redundancy/multi-chassis/peer/sync/tags/port YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port struct {
	ApplyGroups        []string                                                                                                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Id                 *string                                                                                                                                              `path:"id" module:"nokia-conf"`
	Range              map[NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range_Key]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range `path:"range" module:"nokia-conf"`
	SyncTag            *string                                                                                                                                              `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port) IsYANGGoStruct() {}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range_Key represents the key for list Range of element /nokia-conf/configure/redundancy/multi-chassis/peer/sync/tags/port.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// NewRange creates a new entry in the Range list of the
// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port) NewRange(Start string, End string) (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range_Key]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range)
	}

	key := NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Range[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Range", key)
	}

	t.Range[key] = &NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range{
		Start: &Start,
		End:   &End,
	}

	return t.Range[key], nil
}

// RenameRange renames an entry in the list Range within
// the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port) RenameRange(oldK, newK NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range_Key) error {
	if _, ok := t.Range[newK]; ok {
		return fmt.Errorf("key %v already exists in Range", newK)
	}

	e, ok := t.Range[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Range", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.Range[newK] = e
	delete(t.Range, oldK)
	return nil
}

// GetOrCreateRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port) GetOrCreateRange(Start string, End string) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range {

	key := NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.Range[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRange got unexpected error: %v", err))
	}
	return v
}

// GetRange retrieves the value with the specified key from
// the Range map field of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port) GetRange(Start string, End string) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.Range[key]; ok {
		return lm
	}
	return nil
}

// DeleteRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port) DeleteRange(Start string, End string) {
	key := NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range_Key{
		Start: Start,
		End:   End,
	}

	delete(t.Range, key)
}

// AppendRange appends the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range struct to the
// list Range of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port. If the key value(s) specified in
// the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port) AppendRange(v *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range_Key]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range)
	}

	if _, ok := t.Range[key]; ok {
		return fmt.Errorf("duplicate key for list Range %v", key)
	}

	t.Range[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Range {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range represents the /nokia-conf/configure/redundancy/multi-chassis/peer/sync/tags/port/range YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	End                *string  `path:"end" module:"nokia-conf"`
	Start              *string  `path:"start" module:"nokia-conf"`
	SyncTag            *string  `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort represents the /nokia-conf/configure/redundancy/multi-chassis/peer/sync/tags/pw-port YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort struct {
	ApplyGroups        []string                                                                                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Id                 *uint32                                                                                                                                                  `path:"id" module:"nokia-conf"`
	Range              map[NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range_Key]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range `path:"range" module:"nokia-conf"`
	SyncTag            *string                                                                                                                                                  `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort) IsYANGGoStruct() {}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range_Key represents the key for list Range of element /nokia-conf/configure/redundancy/multi-chassis/peer/sync/tags/pw-port.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// NewRange creates a new entry in the Range list of the
// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort) NewRange(Start string, End string) (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range_Key]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range)
	}

	key := NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Range[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Range", key)
	}

	t.Range[key] = &NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range{
		Start: &Start,
		End:   &End,
	}

	return t.Range[key], nil
}

// RenameRange renames an entry in the list Range within
// the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort) RenameRange(oldK, newK NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range_Key) error {
	if _, ok := t.Range[newK]; ok {
		return fmt.Errorf("key %v already exists in Range", newK)
	}

	e, ok := t.Range[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Range", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.Range[newK] = e
	delete(t.Range, oldK)
	return nil
}

// GetOrCreateRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort) GetOrCreateRange(Start string, End string) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range {

	key := NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.Range[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRange got unexpected error: %v", err))
	}
	return v
}

// GetRange retrieves the value with the specified key from
// the Range map field of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort) GetRange(Start string, End string) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.Range[key]; ok {
		return lm
	}
	return nil
}

// DeleteRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort) DeleteRange(Start string, End string) {
	key := NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range_Key{
		Start: Start,
		End:   End,
	}

	delete(t.Range, key)
}

// AppendRange appends the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range struct to the
// list Range of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort. If the key value(s) specified in
// the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort) AppendRange(v *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range_Key]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range)
	}

	if _, ok := t.Range[key]; ok {
		return fmt.Errorf("duplicate key for list Range %v", key)
	}

	t.Range[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Range {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range represents the /nokia-conf/configure/redundancy/multi-chassis/peer/sync/tags/pw-port/range YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	End                *string  `path:"end" module:"nokia-conf"`
	Start              *string  `path:"start" module:"nokia-conf"`
	SyncTag            *string  `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp represents the /nokia-conf/configure/redundancy/multi-chassis/peer/sync/tags/sdp YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp struct {
	ApplyGroups        []string                                                                                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Id                 *uint32                                                                                                                                            `path:"id" module:"nokia-conf"`
	Range              map[NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range_Key]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range `path:"range" module:"nokia-conf"`
	SyncTag            *string                                                                                                                                            `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp) IsYANGGoStruct() {}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range_Key represents the key for list Range of element /nokia-conf/configure/redundancy/multi-chassis/peer/sync/tags/sdp.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range_Key struct {
	Start uint32 `path:"start"`
	End   uint32 `path:"end"`
}

// NewRange creates a new entry in the Range list of the
// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp) NewRange(Start uint32, End uint32) (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range_Key]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range)
	}

	key := NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Range[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Range", key)
	}

	t.Range[key] = &NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range{
		Start: &Start,
		End:   &End,
	}

	return t.Range[key], nil
}

// RenameRange renames an entry in the list Range within
// the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp) RenameRange(oldK, newK NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range_Key) error {
	if _, ok := t.Range[newK]; ok {
		return fmt.Errorf("key %v already exists in Range", newK)
	}

	e, ok := t.Range[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Range", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.Range[newK] = e
	delete(t.Range, oldK)
	return nil
}

// GetOrCreateRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp) GetOrCreateRange(Start uint32, End uint32) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range {

	key := NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.Range[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRange got unexpected error: %v", err))
	}
	return v
}

// GetRange retrieves the value with the specified key from
// the Range map field of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp) GetRange(Start uint32, End uint32) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.Range[key]; ok {
		return lm
	}
	return nil
}

// DeleteRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp) DeleteRange(Start uint32, End uint32) {
	key := NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range_Key{
		Start: Start,
		End:   End,
	}

	delete(t.Range, key)
}

// AppendRange appends the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range struct to the
// list Range of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp) AppendRange(v *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range_Key]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range)
	}

	if _, ok := t.Range[key]; ok {
		return fmt.Errorf("duplicate key for list Range %v", key)
	}

	t.Range[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Range {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range represents the /nokia-conf/configure/redundancy/multi-chassis/peer/sync/tags/sdp/range YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	End                *uint32  `path:"end" module:"nokia-conf"`
	Start              *uint32  `path:"start" module:"nokia-conf"`
	SyncTag            *string  `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp represents the /nokia-conf/configure/redundancy/multi-chassis/peer/sync/track-srrp YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp struct {
	ApplyGroups        []string                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Id                 *uint32                                                                            `path:"id" module:"nokia-conf"`
	L2TpTunnelIdRange  *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange `path:"l2tp-tunnel-id-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp) IsYANGGoStruct() {}

// GetOrCreateL2TpTunnelIdRange retrieves the value of the L2TpTunnelIdRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp) GetOrCreateL2TpTunnelIdRange() *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange {
	if t.L2TpTunnelIdRange != nil {
		return t.L2TpTunnelIdRange
	}
	t.L2TpTunnelIdRange = &NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange{}
	return t.L2TpTunnelIdRange
}

// GetL2TpTunnelIdRange returns the value of the L2TpTunnelIdRange struct pointer
// from NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp. If the receiver or the field L2TpTunnelIdRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp) GetL2TpTunnelIdRange() *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange {
	if t != nil && t.L2TpTunnelIdRange != nil {
		return t.L2TpTunnelIdRange
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.L2TpTunnelIdRange.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange represents the /nokia-conf/configure/redundancy/multi-chassis/peer/sync/track-srrp/l2tp-tunnel-id-range YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption represents the /nokia-conf/configure/redundancy/multi-chassis/peer/sync/transport-encryption YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption struct {
	Application map[E_NokiaTypesRedundancy_McApplication]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application `path:"application" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption) IsYANGGoStruct() {}

// NewApplication creates a new entry in the Application list of the
// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption) NewApplication(ApplicationId E_NokiaTypesRedundancy_McApplication) (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Application == nil {
		t.Application = make(map[E_NokiaTypesRedundancy_McApplication]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application)
	}

	key := ApplicationId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Application[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Application", key)
	}

	t.Application[key] = &NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application{
		ApplicationId: ApplicationId,
	}

	return t.Application[key], nil
}

// RenameApplication renames an entry in the list Application within
// the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption) RenameApplication(oldK, newK E_NokiaTypesRedundancy_McApplication) error {
	if _, ok := t.Application[newK]; ok {
		return fmt.Errorf("key %v already exists in Application", newK)
	}

	e, ok := t.Application[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Application", oldK)
	}
	e.ApplicationId = newK

	t.Application[newK] = e
	delete(t.Application, oldK)
	return nil
}

// GetOrCreateApplication retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption) GetOrCreateApplication(ApplicationId E_NokiaTypesRedundancy_McApplication) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application {

	key := ApplicationId

	if v, ok := t.Application[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewApplication(ApplicationId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateApplication got unexpected error: %v", err))
	}
	return v
}

// GetApplication retrieves the value with the specified key from
// the Application map field of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption) GetApplication(ApplicationId E_NokiaTypesRedundancy_McApplication) *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application {

	if t == nil {
		return nil
	}

	key := ApplicationId

	if lm, ok := t.Application[key]; ok {
		return lm
	}
	return nil
}

// DeleteApplication deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption) DeleteApplication(ApplicationId E_NokiaTypesRedundancy_McApplication) {
	key := ApplicationId

	delete(t.Application, key)
}

// AppendApplication appends the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application struct to the
// list Application of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption. If the key value(s) specified in
// the supplied NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption) AppendApplication(v *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application) error {
	key := v.ApplicationId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Application == nil {
		t.Application = make(map[E_NokiaTypesRedundancy_McApplication]*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application)
	}

	if _, ok := t.Application[key]; ok {
		return fmt.Errorf("duplicate key for list Application %v", key)
	}

	t.Application[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Application {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application represents the /nokia-conf/configure/redundancy/multi-chassis/peer/sync/transport-encryption/application YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application struct {
	ApplicationId      E_NokiaTypesRedundancy_McApplication `path:"application-id" module:"nokia-conf"`
	ApplyGroups        []string                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Keychain           *string                              `path:"keychain" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application) IsYANGGoStruct() {
}

// GetApplicationId retrieves the value of the leaf ApplicationId from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplicationId is set, it can
// safely use t.GetApplicationId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplicationId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application) GetApplicationId() E_NokiaTypesRedundancy_McApplication {
	if t == nil || t.ApplicationId == 0 {
		return 0
	}
	return t.ApplicationId
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetKeychain retrieves the value of the leaf Keychain from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keychain is set, it can
// safely use t.GetKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keychain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application) GetKeychain() string {
	if t == nil || t.Keychain == nil {
		return ""
	}
	return *t.Keychain
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"application-id": t.ApplicationId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TunnelGroup represents the /nokia-conf/configure/redundancy/multi-chassis/peer/sync/tunnel-group YANG schema element.
type NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TunnelGroup struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	SyncTag            *string  `path:"sync-tag" module:"nokia-conf"`
	TunnelGroupId      *uint32  `path:"tunnel-group-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TunnelGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TunnelGroup) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TunnelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TunnelGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TunnelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TunnelGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TunnelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TunnelGroup) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// GetTunnelGroupId retrieves the value of the leaf TunnelGroupId from the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TunnelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelGroupId is set, it can
// safely use t.GetTunnelGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelGroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TunnelGroup) GetTunnelGroupId() uint32 {
	if t == nil || t.TunnelGroupId == nil {
		return 0
	}
	return *t.TunnelGroupId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TunnelGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TunnelGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TunnelGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TunnelGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TunnelGroupId == nil {
		return nil, fmt.Errorf("nil value for key TunnelGroupId")
	}

	return map[string]interface{}{
		"tunnel-group-id": *t.TunnelGroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TunnelGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TunnelGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TunnelGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TunnelGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TunnelGroup.
func (*NokiaConf_Configure_Redundancy_MultiChassis_Peer_Sync_TunnelGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_Srrp represents the /nokia-conf/configure/redundancy/srrp YANG schema element.
type NokiaConf_Configure_Redundancy_Srrp struct {
	ApplyGroups        []string                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	AutoSrrpIdRange    *NokiaConf_Configure_Redundancy_Srrp_AutoSrrpIdRange `path:"auto-srrp-id-range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_Srrp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_Srrp) IsYANGGoStruct() {}

// GetOrCreateAutoSrrpIdRange retrieves the value of the AutoSrrpIdRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Redundancy_Srrp) GetOrCreateAutoSrrpIdRange() *NokiaConf_Configure_Redundancy_Srrp_AutoSrrpIdRange {
	if t.AutoSrrpIdRange != nil {
		return t.AutoSrrpIdRange
	}
	t.AutoSrrpIdRange = &NokiaConf_Configure_Redundancy_Srrp_AutoSrrpIdRange{}
	return t.AutoSrrpIdRange
}

// GetAutoSrrpIdRange returns the value of the AutoSrrpIdRange struct pointer
// from NokiaConf_Configure_Redundancy_Srrp. If the receiver or the field AutoSrrpIdRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Redundancy_Srrp) GetAutoSrrpIdRange() *NokiaConf_Configure_Redundancy_Srrp_AutoSrrpIdRange {
	if t != nil && t.AutoSrrpIdRange != nil {
		return t.AutoSrrpIdRange
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Redundancy_Srrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_Srrp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Redundancy_Srrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_Srrp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_Srrp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_Srrp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AutoSrrpIdRange.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_Srrp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_Srrp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_Srrp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_Srrp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_Srrp.
func (*NokiaConf_Configure_Redundancy_Srrp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Redundancy_Srrp_AutoSrrpIdRange represents the /nokia-conf/configure/redundancy/srrp/auto-srrp-id-range YANG schema element.
type NokiaConf_Configure_Redundancy_Srrp_AutoSrrpIdRange struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Redundancy_Srrp_AutoSrrpIdRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Redundancy_Srrp_AutoSrrpIdRange) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Redundancy_Srrp_AutoSrrpIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_Srrp_AutoSrrpIdRange) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 4294967295
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Redundancy_Srrp_AutoSrrpIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Redundancy_Srrp_AutoSrrpIdRange) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 2147483648
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Redundancy_Srrp_AutoSrrpIdRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Redundancy_Srrp_AutoSrrpIdRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.End == nil {
		var v uint32 = 4294967295
		t.End = &v
	}
	if t.Start == nil {
		var v uint32 = 2147483648
		t.Start = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_Srrp_AutoSrrpIdRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Redundancy_Srrp_AutoSrrpIdRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Redundancy_Srrp_AutoSrrpIdRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Redundancy_Srrp_AutoSrrpIdRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Redundancy_Srrp_AutoSrrpIdRange.
func (*NokiaConf_Configure_Redundancy_Srrp_AutoSrrpIdRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router represents the /nokia-conf/configure/router YANG schema element.
type NokiaConf_Configure_Router struct {
	Aggregates          *NokiaConf_Configure_Router_Aggregates           `path:"aggregates" module:"nokia-conf"`
	AllowIcmpRedirect   *bool                                            `path:"allow-icmp-redirect" module:"nokia-conf"`
	AllowIcmp6Redirect  *bool                                            `path:"allow-icmp6-redirect" module:"nokia-conf"`
	ApplyGroups         []string                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	AutonomousSystem    *uint32                                          `path:"autonomous-system" module:"nokia-conf"`
	Bfd                 *NokiaConf_Configure_Router_Bfd                  `path:"bfd" module:"nokia-conf"`
	Bgp                 *NokiaConf_Configure_Router_Bgp                  `path:"bgp" module:"nokia-conf" yangPresence:"true"`
	Bier                *NokiaConf_Configure_Router_Bier                 `path:"bier" module:"nokia-conf" yangPresence:"true"`
	ClassForwarding     *bool                                            `path:"class-forwarding" module:"nokia-conf"`
	Confederation       *NokiaConf_Configure_Router_Confederation        `path:"confederation" module:"nokia-conf"`
	Description         *string                                          `path:"description" module:"nokia-conf"`
	DhcpServer          *NokiaConf_Configure_Router_DhcpServer           `path:"dhcp-server" module:"nokia-conf"`
	Dns                 *NokiaConf_Configure_Router_Dns                  `path:"dns" module:"nokia-conf"`
	Ecmp                *uint32                                          `path:"ecmp" module:"nokia-conf"`
	EntropyLabel        *bool                                            `path:"entropy-label" module:"nokia-conf"`
	FibPriority         E_NokiaConf_Configure_Router_FibPriority         `path:"fib-priority" module:"nokia-conf"`
	FibTelemetry        *bool                                            `path:"fib-telemetry" module:"nokia-conf"`
	Firewall            *NokiaConf_Configure_Router_Firewall             `path:"firewall" module:"nokia-conf"`
	Flowspec            *NokiaConf_Configure_Router_Flowspec             `path:"flowspec" module:"nokia-conf"`
	Gtm                 *NokiaConf_Configure_Router_Gtm                  `path:"gtm" module:"nokia-conf"`
	Gtp                 *NokiaConf_Configure_Router_Gtp                  `path:"gtp" module:"nokia-conf"`
	IcmpTunneling       *bool                                            `path:"icmp-tunneling" module:"nokia-conf"`
	Igmp                *NokiaConf_Configure_Router_Igmp                 `path:"igmp" module:"nokia-conf" yangPresence:"true"`
	Interface           map[string]*NokiaConf_Configure_Router_Interface `path:"interface" module:"nokia-conf"`
	Ipv6                *NokiaConf_Configure_Router_Ipv6                 `path:"ipv6" module:"nokia-conf"`
	Ipv6TeRouterId      *NokiaConf_Configure_Router_Ipv6TeRouterId       `path:"ipv6-te-router-id" module:"nokia-conf"`
	IsaServiceChaining  *NokiaConf_Configure_Router_IsaServiceChaining   `path:"isa-service-chaining" module:"nokia-conf" yangPresence:"true"`
	Isis                map[int32]*NokiaConf_Configure_Router_Isis       `path:"isis" module:"nokia-conf"`
	L2Tp                *NokiaConf_Configure_Router_L2Tp                 `path:"l2tp" module:"nokia-conf"`
	Ldp                 *NokiaConf_Configure_Router_Ldp                  `path:"ldp" module:"nokia-conf" yangPresence:"true"`
	LeakExport          *NokiaConf_Configure_Router_LeakExport           `path:"leak-export" module:"nokia-conf"`
	LspBfd              *NokiaConf_Configure_Router_LspBfd               `path:"lsp-bfd" module:"nokia-conf"`
	McMaximumRoutes     *NokiaConf_Configure_Router_McMaximumRoutes      `path:"mc-maximum-routes" module:"nokia-conf"`
	Mld                 *NokiaConf_Configure_Router_Mld                  `path:"mld" module:"nokia-conf" yangPresence:"true"`
	Mpls                *NokiaConf_Configure_Router_Mpls                 `path:"mpls" module:"nokia-conf" yangPresence:"true"`
	MplsLabels          *NokiaConf_Configure_Router_MplsLabels           `path:"mpls-labels" module:"nokia-conf"`
	Msdp                *NokiaConf_Configure_Router_Msdp                 `path:"msdp" module:"nokia-conf" yangPresence:"true"`
	MssAdjust           *NokiaConf_Configure_Router_MssAdjust            `path:"mss-adjust" module:"nokia-conf" yangPresence:"true"`
	Mtrace2             *NokiaConf_Configure_Router_Mtrace2              `path:"mtrace2" module:"nokia-conf"`
	MulticastInfoPolicy *string                                          `path:"multicast-info-policy" module:"nokia-conf"`
	Nat                 *NokiaConf_Configure_Router_Nat                  `path:"nat" module:"nokia-conf" yangPresence:"true"`
	NetworkDomains      *NokiaConf_Configure_Router_NetworkDomains       `path:"network-domains" module:"nokia-conf"`
	OriginValidation    *NokiaConf_Configure_Router_OriginValidation     `path:"origin-validation" module:"nokia-conf"`
	Ospf                map[uint32]*NokiaConf_Configure_Router_Ospf      `path:"ospf" module:"nokia-conf"`
	Ospf3               map[uint32]*NokiaConf_Configure_Router_Ospf3     `path:"ospf3" module:"nokia-conf"`
	P2MpSrTree          *NokiaConf_Configure_Router_P2MpSrTree           `path:"p2mp-sr-tree" module:"nokia-conf" yangPresence:"true"`
	Pcep                *NokiaConf_Configure_Router_Pcep                 `path:"pcep" module:"nokia-conf"`
	Pcp                 *NokiaConf_Configure_Router_Pcp                  `path:"pcp" module:"nokia-conf"`
	Pim                 *NokiaConf_Configure_Router_Pim                  `path:"pim" module:"nokia-conf" yangPresence:"true"`
	Radius              *NokiaConf_Configure_Router_Radius               `path:"radius" module:"nokia-conf"`
	Reassembly          *NokiaConf_Configure_Router_Reassembly           `path:"reassembly" module:"nokia-conf" yangPresence:"true"`
	RibApi              *NokiaConf_Configure_Router_RibApi               `path:"rib-api" module:"nokia-conf"`
	Rip                 *NokiaConf_Configure_Router_Rip                  `path:"rip" module:"nokia-conf" yangPresence:"true"`
	Ripng               *NokiaConf_Configure_Router_Ripng                `path:"ripng" module:"nokia-conf" yangPresence:"true"`
	RouterId            *string                                          `path:"router-id" module:"nokia-conf"`
	RouterName          *string                                          `path:"router-name" module:"nokia-conf"`
	Rsvp                *NokiaConf_Configure_Router_Rsvp                 `path:"rsvp" module:"nokia-conf" yangPresence:"true"`
	SegmentRouting      *NokiaConf_Configure_Router_SegmentRouting       `path:"segment-routing" module:"nokia-conf"`
	SelectiveFib        *bool                                            `path:"selective-fib" module:"nokia-conf"`
	SfmOverload         *NokiaConf_Configure_Router_SfmOverload          `path:"sfm-overload" module:"nokia-conf" yangPresence:"true"`
	SgtQos              *NokiaConf_Configure_Router_SgtQos               `path:"sgt-qos" module:"nokia-conf"`
	StaticRoutes        *NokiaConf_Configure_Router_StaticRoutes         `path:"static-routes" module:"nokia-conf"`
	TriggeredPolicy     *bool                                            `path:"triggered-policy" module:"nokia-conf"`
	TtlPropagate        *NokiaConf_Configure_Router_TtlPropagate         `path:"ttl-propagate" module:"nokia-conf"`
	TunnelInterface     *NokiaConf_Configure_Router_TunnelInterface      `path:"tunnel-interface" module:"nokia-conf"`
	TwampLight          *NokiaConf_Configure_Router_TwampLight           `path:"twamp-light" module:"nokia-conf"`
	Vrgw                *NokiaConf_Configure_Router_Vrgw                 `path:"vrgw" module:"nokia-conf"`
	WeightedEcmp        E_NokiaConf_Configure_Router_WeightedEcmp        `path:"weighted-ecmp" module:"nokia-conf"`
	WlanGw              *NokiaConf_Configure_Router_WlanGw               `path:"wlan-gw" module:"nokia-conf" yangPresence:"true"`
	Wpp                 *NokiaConf_Configure_Router_Wpp                  `path:"wpp" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Router struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router) NewInterface(InterfaceName string) (*NokiaConf_Configure_Router_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Router_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Router_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Router struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router) GetOrCreateInterface(InterfaceName string) *NokiaConf_Configure_Router_Interface {

	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Router. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router) GetInterface(InterfaceName string) *NokiaConf_Configure_Router_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Router_Interface struct to the
// list Interface of NokiaConf_Configure_Router. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router) AppendInterface(v *NokiaConf_Configure_Router_Interface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Router_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewIsis creates a new entry in the Isis list of the
// NokiaConf_Configure_Router struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router) NewIsis(IsisInstance int32) (*NokiaConf_Configure_Router_Isis, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Isis == nil {
		t.Isis = make(map[int32]*NokiaConf_Configure_Router_Isis)
	}

	key := IsisInstance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Isis[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Isis", key)
	}

	t.Isis[key] = &NokiaConf_Configure_Router_Isis{
		IsisInstance: &IsisInstance,
	}

	return t.Isis[key], nil
}

// RenameIsis renames an entry in the list Isis within
// the NokiaConf_Configure_Router struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router) RenameIsis(oldK, newK int32) error {
	if _, ok := t.Isis[newK]; ok {
		return fmt.Errorf("key %v already exists in Isis", newK)
	}

	e, ok := t.Isis[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Isis", oldK)
	}
	e.IsisInstance = &newK

	t.Isis[newK] = e
	delete(t.Isis, oldK)
	return nil
}

// GetOrCreateIsis retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router) GetOrCreateIsis(IsisInstance int32) *NokiaConf_Configure_Router_Isis {

	key := IsisInstance

	if v, ok := t.Isis[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIsis(IsisInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIsis got unexpected error: %v", err))
	}
	return v
}

// GetIsis retrieves the value with the specified key from
// the Isis map field of NokiaConf_Configure_Router. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router) GetIsis(IsisInstance int32) *NokiaConf_Configure_Router_Isis {

	if t == nil {
		return nil
	}

	key := IsisInstance

	if lm, ok := t.Isis[key]; ok {
		return lm
	}
	return nil
}

// DeleteIsis deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router) DeleteIsis(IsisInstance int32) {
	key := IsisInstance

	delete(t.Isis, key)
}

// AppendIsis appends the supplied NokiaConf_Configure_Router_Isis struct to the
// list Isis of NokiaConf_Configure_Router. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Isis already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router) AppendIsis(v *NokiaConf_Configure_Router_Isis) error {
	if v.IsisInstance == nil {
		return fmt.Errorf("invalid nil key received for IsisInstance")
	}

	key := *v.IsisInstance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Isis == nil {
		t.Isis = make(map[int32]*NokiaConf_Configure_Router_Isis)
	}

	if _, ok := t.Isis[key]; ok {
		return fmt.Errorf("duplicate key for list Isis %v", key)
	}

	t.Isis[key] = v
	return nil
}

// NewOspf creates a new entry in the Ospf list of the
// NokiaConf_Configure_Router struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router) NewOspf(OspfInstance uint32) (*NokiaConf_Configure_Router_Ospf, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ospf == nil {
		t.Ospf = make(map[uint32]*NokiaConf_Configure_Router_Ospf)
	}

	key := OspfInstance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ospf[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ospf", key)
	}

	t.Ospf[key] = &NokiaConf_Configure_Router_Ospf{
		OspfInstance: &OspfInstance,
	}

	return t.Ospf[key], nil
}

// RenameOspf renames an entry in the list Ospf within
// the NokiaConf_Configure_Router struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router) RenameOspf(oldK, newK uint32) error {
	if _, ok := t.Ospf[newK]; ok {
		return fmt.Errorf("key %v already exists in Ospf", newK)
	}

	e, ok := t.Ospf[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ospf", oldK)
	}
	e.OspfInstance = &newK

	t.Ospf[newK] = e
	delete(t.Ospf, oldK)
	return nil
}

// GetOrCreateOspf retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router) GetOrCreateOspf(OspfInstance uint32) *NokiaConf_Configure_Router_Ospf {

	key := OspfInstance

	if v, ok := t.Ospf[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOspf(OspfInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOspf got unexpected error: %v", err))
	}
	return v
}

// GetOspf retrieves the value with the specified key from
// the Ospf map field of NokiaConf_Configure_Router. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router) GetOspf(OspfInstance uint32) *NokiaConf_Configure_Router_Ospf {

	if t == nil {
		return nil
	}

	key := OspfInstance

	if lm, ok := t.Ospf[key]; ok {
		return lm
	}
	return nil
}

// DeleteOspf deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router) DeleteOspf(OspfInstance uint32) {
	key := OspfInstance

	delete(t.Ospf, key)
}

// AppendOspf appends the supplied NokiaConf_Configure_Router_Ospf struct to the
// list Ospf of NokiaConf_Configure_Router. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Ospf already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router) AppendOspf(v *NokiaConf_Configure_Router_Ospf) error {
	if v.OspfInstance == nil {
		return fmt.Errorf("invalid nil key received for OspfInstance")
	}

	key := *v.OspfInstance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ospf == nil {
		t.Ospf = make(map[uint32]*NokiaConf_Configure_Router_Ospf)
	}

	if _, ok := t.Ospf[key]; ok {
		return fmt.Errorf("duplicate key for list Ospf %v", key)
	}

	t.Ospf[key] = v
	return nil
}

// NewOspf3 creates a new entry in the Ospf3 list of the
// NokiaConf_Configure_Router struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router) NewOspf3(OspfInstance uint32) (*NokiaConf_Configure_Router_Ospf3, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ospf3 == nil {
		t.Ospf3 = make(map[uint32]*NokiaConf_Configure_Router_Ospf3)
	}

	key := OspfInstance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ospf3[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ospf3", key)
	}

	t.Ospf3[key] = &NokiaConf_Configure_Router_Ospf3{
		OspfInstance: &OspfInstance,
	}

	return t.Ospf3[key], nil
}

// RenameOspf3 renames an entry in the list Ospf3 within
// the NokiaConf_Configure_Router struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router) RenameOspf3(oldK, newK uint32) error {
	if _, ok := t.Ospf3[newK]; ok {
		return fmt.Errorf("key %v already exists in Ospf3", newK)
	}

	e, ok := t.Ospf3[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ospf3", oldK)
	}
	e.OspfInstance = &newK

	t.Ospf3[newK] = e
	delete(t.Ospf3, oldK)
	return nil
}

// GetOrCreateOspf3 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router) GetOrCreateOspf3(OspfInstance uint32) *NokiaConf_Configure_Router_Ospf3 {

	key := OspfInstance

	if v, ok := t.Ospf3[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOspf3(OspfInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOspf3 got unexpected error: %v", err))
	}
	return v
}

// GetOspf3 retrieves the value with the specified key from
// the Ospf3 map field of NokiaConf_Configure_Router. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router) GetOspf3(OspfInstance uint32) *NokiaConf_Configure_Router_Ospf3 {

	if t == nil {
		return nil
	}

	key := OspfInstance

	if lm, ok := t.Ospf3[key]; ok {
		return lm
	}
	return nil
}

// DeleteOspf3 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router) DeleteOspf3(OspfInstance uint32) {
	key := OspfInstance

	delete(t.Ospf3, key)
}

// AppendOspf3 appends the supplied NokiaConf_Configure_Router_Ospf3 struct to the
// list Ospf3 of NokiaConf_Configure_Router. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Ospf3 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router) AppendOspf3(v *NokiaConf_Configure_Router_Ospf3) error {
	if v.OspfInstance == nil {
		return fmt.Errorf("invalid nil key received for OspfInstance")
	}

	key := *v.OspfInstance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ospf3 == nil {
		t.Ospf3 = make(map[uint32]*NokiaConf_Configure_Router_Ospf3)
	}

	if _, ok := t.Ospf3[key]; ok {
		return fmt.Errorf("duplicate key for list Ospf3 %v", key)
	}

	t.Ospf3[key] = v
	return nil
}

// GetOrCreateAggregates retrieves the value of the Aggregates field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateAggregates() *NokiaConf_Configure_Router_Aggregates {
	if t.Aggregates != nil {
		return t.Aggregates
	}
	t.Aggregates = &NokiaConf_Configure_Router_Aggregates{}
	return t.Aggregates
}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateBfd() *NokiaConf_Configure_Router_Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &NokiaConf_Configure_Router_Bfd{}
	return t.Bfd
}

// GetOrCreateBgp retrieves the value of the Bgp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateBgp() *NokiaConf_Configure_Router_Bgp {
	if t.Bgp != nil {
		return t.Bgp
	}
	t.Bgp = &NokiaConf_Configure_Router_Bgp{}
	return t.Bgp
}

// GetOrCreateBier retrieves the value of the Bier field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateBier() *NokiaConf_Configure_Router_Bier {
	if t.Bier != nil {
		return t.Bier
	}
	t.Bier = &NokiaConf_Configure_Router_Bier{}
	return t.Bier
}

// GetOrCreateConfederation retrieves the value of the Confederation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateConfederation() *NokiaConf_Configure_Router_Confederation {
	if t.Confederation != nil {
		return t.Confederation
	}
	t.Confederation = &NokiaConf_Configure_Router_Confederation{}
	return t.Confederation
}

// GetOrCreateDhcpServer retrieves the value of the DhcpServer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateDhcpServer() *NokiaConf_Configure_Router_DhcpServer {
	if t.DhcpServer != nil {
		return t.DhcpServer
	}
	t.DhcpServer = &NokiaConf_Configure_Router_DhcpServer{}
	return t.DhcpServer
}

// GetOrCreateDns retrieves the value of the Dns field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateDns() *NokiaConf_Configure_Router_Dns {
	if t.Dns != nil {
		return t.Dns
	}
	t.Dns = &NokiaConf_Configure_Router_Dns{}
	return t.Dns
}

// GetOrCreateFirewall retrieves the value of the Firewall field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateFirewall() *NokiaConf_Configure_Router_Firewall {
	if t.Firewall != nil {
		return t.Firewall
	}
	t.Firewall = &NokiaConf_Configure_Router_Firewall{}
	return t.Firewall
}

// GetOrCreateFlowspec retrieves the value of the Flowspec field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateFlowspec() *NokiaConf_Configure_Router_Flowspec {
	if t.Flowspec != nil {
		return t.Flowspec
	}
	t.Flowspec = &NokiaConf_Configure_Router_Flowspec{}
	return t.Flowspec
}

// GetOrCreateGtm retrieves the value of the Gtm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateGtm() *NokiaConf_Configure_Router_Gtm {
	if t.Gtm != nil {
		return t.Gtm
	}
	t.Gtm = &NokiaConf_Configure_Router_Gtm{}
	return t.Gtm
}

// GetOrCreateGtp retrieves the value of the Gtp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateGtp() *NokiaConf_Configure_Router_Gtp {
	if t.Gtp != nil {
		return t.Gtp
	}
	t.Gtp = &NokiaConf_Configure_Router_Gtp{}
	return t.Gtp
}

// GetOrCreateIgmp retrieves the value of the Igmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateIgmp() *NokiaConf_Configure_Router_Igmp {
	if t.Igmp != nil {
		return t.Igmp
	}
	t.Igmp = &NokiaConf_Configure_Router_Igmp{}
	return t.Igmp
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateIpv6() *NokiaConf_Configure_Router_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Router_Ipv6{}
	return t.Ipv6
}

// GetOrCreateIpv6TeRouterId retrieves the value of the Ipv6TeRouterId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateIpv6TeRouterId() *NokiaConf_Configure_Router_Ipv6TeRouterId {
	if t.Ipv6TeRouterId != nil {
		return t.Ipv6TeRouterId
	}
	t.Ipv6TeRouterId = &NokiaConf_Configure_Router_Ipv6TeRouterId{}
	return t.Ipv6TeRouterId
}

// GetOrCreateIsaServiceChaining retrieves the value of the IsaServiceChaining field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateIsaServiceChaining() *NokiaConf_Configure_Router_IsaServiceChaining {
	if t.IsaServiceChaining != nil {
		return t.IsaServiceChaining
	}
	t.IsaServiceChaining = &NokiaConf_Configure_Router_IsaServiceChaining{}
	return t.IsaServiceChaining
}

// GetOrCreateL2Tp retrieves the value of the L2Tp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateL2Tp() *NokiaConf_Configure_Router_L2Tp {
	if t.L2Tp != nil {
		return t.L2Tp
	}
	t.L2Tp = &NokiaConf_Configure_Router_L2Tp{}
	return t.L2Tp
}

// GetOrCreateLdp retrieves the value of the Ldp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateLdp() *NokiaConf_Configure_Router_Ldp {
	if t.Ldp != nil {
		return t.Ldp
	}
	t.Ldp = &NokiaConf_Configure_Router_Ldp{}
	return t.Ldp
}

// GetOrCreateLeakExport retrieves the value of the LeakExport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateLeakExport() *NokiaConf_Configure_Router_LeakExport {
	if t.LeakExport != nil {
		return t.LeakExport
	}
	t.LeakExport = &NokiaConf_Configure_Router_LeakExport{}
	return t.LeakExport
}

// GetOrCreateLspBfd retrieves the value of the LspBfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateLspBfd() *NokiaConf_Configure_Router_LspBfd {
	if t.LspBfd != nil {
		return t.LspBfd
	}
	t.LspBfd = &NokiaConf_Configure_Router_LspBfd{}
	return t.LspBfd
}

// GetOrCreateMcMaximumRoutes retrieves the value of the McMaximumRoutes field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateMcMaximumRoutes() *NokiaConf_Configure_Router_McMaximumRoutes {
	if t.McMaximumRoutes != nil {
		return t.McMaximumRoutes
	}
	t.McMaximumRoutes = &NokiaConf_Configure_Router_McMaximumRoutes{}
	return t.McMaximumRoutes
}

// GetOrCreateMld retrieves the value of the Mld field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateMld() *NokiaConf_Configure_Router_Mld {
	if t.Mld != nil {
		return t.Mld
	}
	t.Mld = &NokiaConf_Configure_Router_Mld{}
	return t.Mld
}

// GetOrCreateMpls retrieves the value of the Mpls field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateMpls() *NokiaConf_Configure_Router_Mpls {
	if t.Mpls != nil {
		return t.Mpls
	}
	t.Mpls = &NokiaConf_Configure_Router_Mpls{}
	return t.Mpls
}

// GetOrCreateMplsLabels retrieves the value of the MplsLabels field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateMplsLabels() *NokiaConf_Configure_Router_MplsLabels {
	if t.MplsLabels != nil {
		return t.MplsLabels
	}
	t.MplsLabels = &NokiaConf_Configure_Router_MplsLabels{}
	return t.MplsLabels
}

// GetOrCreateMsdp retrieves the value of the Msdp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateMsdp() *NokiaConf_Configure_Router_Msdp {
	if t.Msdp != nil {
		return t.Msdp
	}
	t.Msdp = &NokiaConf_Configure_Router_Msdp{}
	return t.Msdp
}

// GetOrCreateMssAdjust retrieves the value of the MssAdjust field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateMssAdjust() *NokiaConf_Configure_Router_MssAdjust {
	if t.MssAdjust != nil {
		return t.MssAdjust
	}
	t.MssAdjust = &NokiaConf_Configure_Router_MssAdjust{}
	return t.MssAdjust
}

// GetOrCreateMtrace2 retrieves the value of the Mtrace2 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateMtrace2() *NokiaConf_Configure_Router_Mtrace2 {
	if t.Mtrace2 != nil {
		return t.Mtrace2
	}
	t.Mtrace2 = &NokiaConf_Configure_Router_Mtrace2{}
	return t.Mtrace2
}

// GetOrCreateNat retrieves the value of the Nat field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateNat() *NokiaConf_Configure_Router_Nat {
	if t.Nat != nil {
		return t.Nat
	}
	t.Nat = &NokiaConf_Configure_Router_Nat{}
	return t.Nat
}

// GetOrCreateNetworkDomains retrieves the value of the NetworkDomains field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateNetworkDomains() *NokiaConf_Configure_Router_NetworkDomains {
	if t.NetworkDomains != nil {
		return t.NetworkDomains
	}
	t.NetworkDomains = &NokiaConf_Configure_Router_NetworkDomains{}
	return t.NetworkDomains
}

// GetOrCreateOriginValidation retrieves the value of the OriginValidation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateOriginValidation() *NokiaConf_Configure_Router_OriginValidation {
	if t.OriginValidation != nil {
		return t.OriginValidation
	}
	t.OriginValidation = &NokiaConf_Configure_Router_OriginValidation{}
	return t.OriginValidation
}

// GetOrCreateP2MpSrTree retrieves the value of the P2MpSrTree field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateP2MpSrTree() *NokiaConf_Configure_Router_P2MpSrTree {
	if t.P2MpSrTree != nil {
		return t.P2MpSrTree
	}
	t.P2MpSrTree = &NokiaConf_Configure_Router_P2MpSrTree{}
	return t.P2MpSrTree
}

// GetOrCreatePcep retrieves the value of the Pcep field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreatePcep() *NokiaConf_Configure_Router_Pcep {
	if t.Pcep != nil {
		return t.Pcep
	}
	t.Pcep = &NokiaConf_Configure_Router_Pcep{}
	return t.Pcep
}

// GetOrCreatePcp retrieves the value of the Pcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreatePcp() *NokiaConf_Configure_Router_Pcp {
	if t.Pcp != nil {
		return t.Pcp
	}
	t.Pcp = &NokiaConf_Configure_Router_Pcp{}
	return t.Pcp
}

// GetOrCreatePim retrieves the value of the Pim field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreatePim() *NokiaConf_Configure_Router_Pim {
	if t.Pim != nil {
		return t.Pim
	}
	t.Pim = &NokiaConf_Configure_Router_Pim{}
	return t.Pim
}

// GetOrCreateRadius retrieves the value of the Radius field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateRadius() *NokiaConf_Configure_Router_Radius {
	if t.Radius != nil {
		return t.Radius
	}
	t.Radius = &NokiaConf_Configure_Router_Radius{}
	return t.Radius
}

// GetOrCreateReassembly retrieves the value of the Reassembly field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateReassembly() *NokiaConf_Configure_Router_Reassembly {
	if t.Reassembly != nil {
		return t.Reassembly
	}
	t.Reassembly = &NokiaConf_Configure_Router_Reassembly{}
	return t.Reassembly
}

// GetOrCreateRibApi retrieves the value of the RibApi field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateRibApi() *NokiaConf_Configure_Router_RibApi {
	if t.RibApi != nil {
		return t.RibApi
	}
	t.RibApi = &NokiaConf_Configure_Router_RibApi{}
	return t.RibApi
}

// GetOrCreateRip retrieves the value of the Rip field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateRip() *NokiaConf_Configure_Router_Rip {
	if t.Rip != nil {
		return t.Rip
	}
	t.Rip = &NokiaConf_Configure_Router_Rip{}
	return t.Rip
}

// GetOrCreateRipng retrieves the value of the Ripng field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateRipng() *NokiaConf_Configure_Router_Ripng {
	if t.Ripng != nil {
		return t.Ripng
	}
	t.Ripng = &NokiaConf_Configure_Router_Ripng{}
	return t.Ripng
}

// GetOrCreateRsvp retrieves the value of the Rsvp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateRsvp() *NokiaConf_Configure_Router_Rsvp {
	if t.Rsvp != nil {
		return t.Rsvp
	}
	t.Rsvp = &NokiaConf_Configure_Router_Rsvp{}
	return t.Rsvp
}

// GetOrCreateSegmentRouting retrieves the value of the SegmentRouting field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateSegmentRouting() *NokiaConf_Configure_Router_SegmentRouting {
	if t.SegmentRouting != nil {
		return t.SegmentRouting
	}
	t.SegmentRouting = &NokiaConf_Configure_Router_SegmentRouting{}
	return t.SegmentRouting
}

// GetOrCreateSfmOverload retrieves the value of the SfmOverload field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateSfmOverload() *NokiaConf_Configure_Router_SfmOverload {
	if t.SfmOverload != nil {
		return t.SfmOverload
	}
	t.SfmOverload = &NokiaConf_Configure_Router_SfmOverload{}
	return t.SfmOverload
}

// GetOrCreateSgtQos retrieves the value of the SgtQos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateSgtQos() *NokiaConf_Configure_Router_SgtQos {
	if t.SgtQos != nil {
		return t.SgtQos
	}
	t.SgtQos = &NokiaConf_Configure_Router_SgtQos{}
	return t.SgtQos
}

// GetOrCreateStaticRoutes retrieves the value of the StaticRoutes field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateStaticRoutes() *NokiaConf_Configure_Router_StaticRoutes {
	if t.StaticRoutes != nil {
		return t.StaticRoutes
	}
	t.StaticRoutes = &NokiaConf_Configure_Router_StaticRoutes{}
	return t.StaticRoutes
}

// GetOrCreateTtlPropagate retrieves the value of the TtlPropagate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateTtlPropagate() *NokiaConf_Configure_Router_TtlPropagate {
	if t.TtlPropagate != nil {
		return t.TtlPropagate
	}
	t.TtlPropagate = &NokiaConf_Configure_Router_TtlPropagate{}
	return t.TtlPropagate
}

// GetOrCreateTunnelInterface retrieves the value of the TunnelInterface field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateTunnelInterface() *NokiaConf_Configure_Router_TunnelInterface {
	if t.TunnelInterface != nil {
		return t.TunnelInterface
	}
	t.TunnelInterface = &NokiaConf_Configure_Router_TunnelInterface{}
	return t.TunnelInterface
}

// GetOrCreateTwampLight retrieves the value of the TwampLight field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateTwampLight() *NokiaConf_Configure_Router_TwampLight {
	if t.TwampLight != nil {
		return t.TwampLight
	}
	t.TwampLight = &NokiaConf_Configure_Router_TwampLight{}
	return t.TwampLight
}

// GetOrCreateVrgw retrieves the value of the Vrgw field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateVrgw() *NokiaConf_Configure_Router_Vrgw {
	if t.Vrgw != nil {
		return t.Vrgw
	}
	t.Vrgw = &NokiaConf_Configure_Router_Vrgw{}
	return t.Vrgw
}

// GetOrCreateWlanGw retrieves the value of the WlanGw field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateWlanGw() *NokiaConf_Configure_Router_WlanGw {
	if t.WlanGw != nil {
		return t.WlanGw
	}
	t.WlanGw = &NokiaConf_Configure_Router_WlanGw{}
	return t.WlanGw
}

// GetOrCreateWpp retrieves the value of the Wpp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router) GetOrCreateWpp() *NokiaConf_Configure_Router_Wpp {
	if t.Wpp != nil {
		return t.Wpp
	}
	t.Wpp = &NokiaConf_Configure_Router_Wpp{}
	return t.Wpp
}

// GetAggregates returns the value of the Aggregates struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field Aggregates is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetAggregates() *NokiaConf_Configure_Router_Aggregates {
	if t != nil && t.Aggregates != nil {
		return t.Aggregates
	}
	return nil
}

// GetBfd returns the value of the Bfd struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetBfd() *NokiaConf_Configure_Router_Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetBgp returns the value of the Bgp struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field Bgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetBgp() *NokiaConf_Configure_Router_Bgp {
	if t != nil && t.Bgp != nil {
		return t.Bgp
	}
	return nil
}

// GetBier returns the value of the Bier struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field Bier is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetBier() *NokiaConf_Configure_Router_Bier {
	if t != nil && t.Bier != nil {
		return t.Bier
	}
	return nil
}

// GetConfederation returns the value of the Confederation struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field Confederation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetConfederation() *NokiaConf_Configure_Router_Confederation {
	if t != nil && t.Confederation != nil {
		return t.Confederation
	}
	return nil
}

// GetDhcpServer returns the value of the DhcpServer struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field DhcpServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetDhcpServer() *NokiaConf_Configure_Router_DhcpServer {
	if t != nil && t.DhcpServer != nil {
		return t.DhcpServer
	}
	return nil
}

// GetDns returns the value of the Dns struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field Dns is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetDns() *NokiaConf_Configure_Router_Dns {
	if t != nil && t.Dns != nil {
		return t.Dns
	}
	return nil
}

// GetFirewall returns the value of the Firewall struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field Firewall is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetFirewall() *NokiaConf_Configure_Router_Firewall {
	if t != nil && t.Firewall != nil {
		return t.Firewall
	}
	return nil
}

// GetFlowspec returns the value of the Flowspec struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field Flowspec is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetFlowspec() *NokiaConf_Configure_Router_Flowspec {
	if t != nil && t.Flowspec != nil {
		return t.Flowspec
	}
	return nil
}

// GetGtm returns the value of the Gtm struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field Gtm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetGtm() *NokiaConf_Configure_Router_Gtm {
	if t != nil && t.Gtm != nil {
		return t.Gtm
	}
	return nil
}

// GetGtp returns the value of the Gtp struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field Gtp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetGtp() *NokiaConf_Configure_Router_Gtp {
	if t != nil && t.Gtp != nil {
		return t.Gtp
	}
	return nil
}

// GetIgmp returns the value of the Igmp struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field Igmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetIgmp() *NokiaConf_Configure_Router_Igmp {
	if t != nil && t.Igmp != nil {
		return t.Igmp
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetIpv6() *NokiaConf_Configure_Router_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetIpv6TeRouterId returns the value of the Ipv6TeRouterId struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field Ipv6TeRouterId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetIpv6TeRouterId() *NokiaConf_Configure_Router_Ipv6TeRouterId {
	if t != nil && t.Ipv6TeRouterId != nil {
		return t.Ipv6TeRouterId
	}
	return nil
}

// GetIsaServiceChaining returns the value of the IsaServiceChaining struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field IsaServiceChaining is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetIsaServiceChaining() *NokiaConf_Configure_Router_IsaServiceChaining {
	if t != nil && t.IsaServiceChaining != nil {
		return t.IsaServiceChaining
	}
	return nil
}

// GetL2Tp returns the value of the L2Tp struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field L2Tp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetL2Tp() *NokiaConf_Configure_Router_L2Tp {
	if t != nil && t.L2Tp != nil {
		return t.L2Tp
	}
	return nil
}

// GetLdp returns the value of the Ldp struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field Ldp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetLdp() *NokiaConf_Configure_Router_Ldp {
	if t != nil && t.Ldp != nil {
		return t.Ldp
	}
	return nil
}

// GetLeakExport returns the value of the LeakExport struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field LeakExport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetLeakExport() *NokiaConf_Configure_Router_LeakExport {
	if t != nil && t.LeakExport != nil {
		return t.LeakExport
	}
	return nil
}

// GetLspBfd returns the value of the LspBfd struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field LspBfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetLspBfd() *NokiaConf_Configure_Router_LspBfd {
	if t != nil && t.LspBfd != nil {
		return t.LspBfd
	}
	return nil
}

// GetMcMaximumRoutes returns the value of the McMaximumRoutes struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field McMaximumRoutes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetMcMaximumRoutes() *NokiaConf_Configure_Router_McMaximumRoutes {
	if t != nil && t.McMaximumRoutes != nil {
		return t.McMaximumRoutes
	}
	return nil
}

// GetMld returns the value of the Mld struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field Mld is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetMld() *NokiaConf_Configure_Router_Mld {
	if t != nil && t.Mld != nil {
		return t.Mld
	}
	return nil
}

// GetMpls returns the value of the Mpls struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field Mpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetMpls() *NokiaConf_Configure_Router_Mpls {
	if t != nil && t.Mpls != nil {
		return t.Mpls
	}
	return nil
}

// GetMplsLabels returns the value of the MplsLabels struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field MplsLabels is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetMplsLabels() *NokiaConf_Configure_Router_MplsLabels {
	if t != nil && t.MplsLabels != nil {
		return t.MplsLabels
	}
	return nil
}

// GetMsdp returns the value of the Msdp struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field Msdp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetMsdp() *NokiaConf_Configure_Router_Msdp {
	if t != nil && t.Msdp != nil {
		return t.Msdp
	}
	return nil
}

// GetMssAdjust returns the value of the MssAdjust struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field MssAdjust is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetMssAdjust() *NokiaConf_Configure_Router_MssAdjust {
	if t != nil && t.MssAdjust != nil {
		return t.MssAdjust
	}
	return nil
}

// GetMtrace2 returns the value of the Mtrace2 struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field Mtrace2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetMtrace2() *NokiaConf_Configure_Router_Mtrace2 {
	if t != nil && t.Mtrace2 != nil {
		return t.Mtrace2
	}
	return nil
}

// GetNat returns the value of the Nat struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field Nat is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetNat() *NokiaConf_Configure_Router_Nat {
	if t != nil && t.Nat != nil {
		return t.Nat
	}
	return nil
}

// GetNetworkDomains returns the value of the NetworkDomains struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field NetworkDomains is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetNetworkDomains() *NokiaConf_Configure_Router_NetworkDomains {
	if t != nil && t.NetworkDomains != nil {
		return t.NetworkDomains
	}
	return nil
}

// GetOriginValidation returns the value of the OriginValidation struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field OriginValidation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetOriginValidation() *NokiaConf_Configure_Router_OriginValidation {
	if t != nil && t.OriginValidation != nil {
		return t.OriginValidation
	}
	return nil
}

// GetP2MpSrTree returns the value of the P2MpSrTree struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field P2MpSrTree is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetP2MpSrTree() *NokiaConf_Configure_Router_P2MpSrTree {
	if t != nil && t.P2MpSrTree != nil {
		return t.P2MpSrTree
	}
	return nil
}

// GetPcep returns the value of the Pcep struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field Pcep is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetPcep() *NokiaConf_Configure_Router_Pcep {
	if t != nil && t.Pcep != nil {
		return t.Pcep
	}
	return nil
}

// GetPcp returns the value of the Pcp struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field Pcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetPcp() *NokiaConf_Configure_Router_Pcp {
	if t != nil && t.Pcp != nil {
		return t.Pcp
	}
	return nil
}

// GetPim returns the value of the Pim struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field Pim is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetPim() *NokiaConf_Configure_Router_Pim {
	if t != nil && t.Pim != nil {
		return t.Pim
	}
	return nil
}

// GetRadius returns the value of the Radius struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field Radius is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetRadius() *NokiaConf_Configure_Router_Radius {
	if t != nil && t.Radius != nil {
		return t.Radius
	}
	return nil
}

// GetReassembly returns the value of the Reassembly struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field Reassembly is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetReassembly() *NokiaConf_Configure_Router_Reassembly {
	if t != nil && t.Reassembly != nil {
		return t.Reassembly
	}
	return nil
}

// GetRibApi returns the value of the RibApi struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field RibApi is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetRibApi() *NokiaConf_Configure_Router_RibApi {
	if t != nil && t.RibApi != nil {
		return t.RibApi
	}
	return nil
}

// GetRip returns the value of the Rip struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field Rip is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetRip() *NokiaConf_Configure_Router_Rip {
	if t != nil && t.Rip != nil {
		return t.Rip
	}
	return nil
}

// GetRipng returns the value of the Ripng struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field Ripng is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetRipng() *NokiaConf_Configure_Router_Ripng {
	if t != nil && t.Ripng != nil {
		return t.Ripng
	}
	return nil
}

// GetRsvp returns the value of the Rsvp struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field Rsvp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetRsvp() *NokiaConf_Configure_Router_Rsvp {
	if t != nil && t.Rsvp != nil {
		return t.Rsvp
	}
	return nil
}

// GetSegmentRouting returns the value of the SegmentRouting struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field SegmentRouting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetSegmentRouting() *NokiaConf_Configure_Router_SegmentRouting {
	if t != nil && t.SegmentRouting != nil {
		return t.SegmentRouting
	}
	return nil
}

// GetSfmOverload returns the value of the SfmOverload struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field SfmOverload is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetSfmOverload() *NokiaConf_Configure_Router_SfmOverload {
	if t != nil && t.SfmOverload != nil {
		return t.SfmOverload
	}
	return nil
}

// GetSgtQos returns the value of the SgtQos struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field SgtQos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetSgtQos() *NokiaConf_Configure_Router_SgtQos {
	if t != nil && t.SgtQos != nil {
		return t.SgtQos
	}
	return nil
}

// GetStaticRoutes returns the value of the StaticRoutes struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field StaticRoutes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetStaticRoutes() *NokiaConf_Configure_Router_StaticRoutes {
	if t != nil && t.StaticRoutes != nil {
		return t.StaticRoutes
	}
	return nil
}

// GetTtlPropagate returns the value of the TtlPropagate struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field TtlPropagate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetTtlPropagate() *NokiaConf_Configure_Router_TtlPropagate {
	if t != nil && t.TtlPropagate != nil {
		return t.TtlPropagate
	}
	return nil
}

// GetTunnelInterface returns the value of the TunnelInterface struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field TunnelInterface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetTunnelInterface() *NokiaConf_Configure_Router_TunnelInterface {
	if t != nil && t.TunnelInterface != nil {
		return t.TunnelInterface
	}
	return nil
}

// GetTwampLight returns the value of the TwampLight struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field TwampLight is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetTwampLight() *NokiaConf_Configure_Router_TwampLight {
	if t != nil && t.TwampLight != nil {
		return t.TwampLight
	}
	return nil
}

// GetVrgw returns the value of the Vrgw struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field Vrgw is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetVrgw() *NokiaConf_Configure_Router_Vrgw {
	if t != nil && t.Vrgw != nil {
		return t.Vrgw
	}
	return nil
}

// GetWlanGw returns the value of the WlanGw struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field WlanGw is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetWlanGw() *NokiaConf_Configure_Router_WlanGw {
	if t != nil && t.WlanGw != nil {
		return t.WlanGw
	}
	return nil
}

// GetWpp returns the value of the Wpp struct pointer
// from NokiaConf_Configure_Router. If the receiver or the field Wpp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router) GetWpp() *NokiaConf_Configure_Router_Wpp {
	if t != nil && t.Wpp != nil {
		return t.Wpp
	}
	return nil
}

// GetAllowIcmpRedirect retrieves the value of the leaf AllowIcmpRedirect from the NokiaConf_Configure_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowIcmpRedirect is set, it can
// safely use t.GetAllowIcmpRedirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowIcmpRedirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router) GetAllowIcmpRedirect() bool {
	if t == nil || t.AllowIcmpRedirect == nil {
		return false
	}
	return *t.AllowIcmpRedirect
}

// GetAllowIcmp6Redirect retrieves the value of the leaf AllowIcmp6Redirect from the NokiaConf_Configure_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowIcmp6Redirect is set, it can
// safely use t.GetAllowIcmp6Redirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowIcmp6Redirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router) GetAllowIcmp6Redirect() bool {
	if t == nil || t.AllowIcmp6Redirect == nil {
		return false
	}
	return *t.AllowIcmp6Redirect
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAutonomousSystem retrieves the value of the leaf AutonomousSystem from the NokiaConf_Configure_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutonomousSystem is set, it can
// safely use t.GetAutonomousSystem() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutonomousSystem == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router) GetAutonomousSystem() uint32 {
	if t == nil || t.AutonomousSystem == nil {
		return 0
	}
	return *t.AutonomousSystem
}

// GetClassForwarding retrieves the value of the leaf ClassForwarding from the NokiaConf_Configure_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassForwarding is set, it can
// safely use t.GetClassForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassForwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router) GetClassForwarding() bool {
	if t == nil || t.ClassForwarding == nil {
		return false
	}
	return *t.ClassForwarding
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEcmp retrieves the value of the leaf Ecmp from the NokiaConf_Configure_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ecmp is set, it can
// safely use t.GetEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ecmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router) GetEcmp() uint32 {
	if t == nil || t.Ecmp == nil {
		return 1
	}
	return *t.Ecmp
}

// GetEntropyLabel retrieves the value of the leaf EntropyLabel from the NokiaConf_Configure_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntropyLabel is set, it can
// safely use t.GetEntropyLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntropyLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router) GetEntropyLabel() bool {
	if t == nil || t.EntropyLabel == nil {
		return false
	}
	return *t.EntropyLabel
}

// GetFibPriority retrieves the value of the leaf FibPriority from the NokiaConf_Configure_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FibPriority is set, it can
// safely use t.GetFibPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FibPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router) GetFibPriority() E_NokiaConf_Configure_Router_FibPriority {
	if t == nil || t.FibPriority == 0 {
		return NokiaConf_Configure_Router_FibPriority_standard
	}
	return t.FibPriority
}

// GetFibTelemetry retrieves the value of the leaf FibTelemetry from the NokiaConf_Configure_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FibTelemetry is set, it can
// safely use t.GetFibTelemetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FibTelemetry == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router) GetFibTelemetry() bool {
	if t == nil || t.FibTelemetry == nil {
		return false
	}
	return *t.FibTelemetry
}

// GetIcmpTunneling retrieves the value of the leaf IcmpTunneling from the NokiaConf_Configure_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IcmpTunneling is set, it can
// safely use t.GetIcmpTunneling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IcmpTunneling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router) GetIcmpTunneling() bool {
	if t == nil || t.IcmpTunneling == nil {
		return false
	}
	return *t.IcmpTunneling
}

// GetMulticastInfoPolicy retrieves the value of the leaf MulticastInfoPolicy from the NokiaConf_Configure_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastInfoPolicy is set, it can
// safely use t.GetMulticastInfoPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastInfoPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router) GetMulticastInfoPolicy() string {
	if t == nil || t.MulticastInfoPolicy == nil {
		return ""
	}
	return *t.MulticastInfoPolicy
}

// GetRouterId retrieves the value of the leaf RouterId from the NokiaConf_Configure_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterId is set, it can
// safely use t.GetRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router) GetRouterId() string {
	if t == nil || t.RouterId == nil {
		return ""
	}
	return *t.RouterId
}

// GetRouterName retrieves the value of the leaf RouterName from the NokiaConf_Configure_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterName is set, it can
// safely use t.GetRouterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router) GetRouterName() string {
	if t == nil || t.RouterName == nil {
		return ""
	}
	return *t.RouterName
}

// GetSelectiveFib retrieves the value of the leaf SelectiveFib from the NokiaConf_Configure_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SelectiveFib is set, it can
// safely use t.GetSelectiveFib() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SelectiveFib == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router) GetSelectiveFib() bool {
	if t == nil || t.SelectiveFib == nil {
		return true
	}
	return *t.SelectiveFib
}

// GetTriggeredPolicy retrieves the value of the leaf TriggeredPolicy from the NokiaConf_Configure_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TriggeredPolicy is set, it can
// safely use t.GetTriggeredPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TriggeredPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router) GetTriggeredPolicy() bool {
	if t == nil || t.TriggeredPolicy == nil {
		return false
	}
	return *t.TriggeredPolicy
}

// GetWeightedEcmp retrieves the value of the leaf WeightedEcmp from the NokiaConf_Configure_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WeightedEcmp is set, it can
// safely use t.GetWeightedEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WeightedEcmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router) GetWeightedEcmp() E_NokiaConf_Configure_Router_WeightedEcmp {
	if t == nil || t.WeightedEcmp == 0 {
		return NokiaConf_Configure_Router_WeightedEcmp_false
	}
	return t.WeightedEcmp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowIcmpRedirect == nil {
		var v bool = false
		t.AllowIcmpRedirect = &v
	}
	if t.AllowIcmp6Redirect == nil {
		var v bool = false
		t.AllowIcmp6Redirect = &v
	}
	if t.ClassForwarding == nil {
		var v bool = false
		t.ClassForwarding = &v
	}
	if t.Ecmp == nil {
		var v uint32 = 1
		t.Ecmp = &v
	}
	if t.EntropyLabel == nil {
		var v bool = false
		t.EntropyLabel = &v
	}
	if t.FibPriority == 0 {
		t.FibPriority = NokiaConf_Configure_Router_FibPriority_standard
	}
	if t.FibTelemetry == nil {
		var v bool = false
		t.FibTelemetry = &v
	}
	if t.IcmpTunneling == nil {
		var v bool = false
		t.IcmpTunneling = &v
	}
	if t.SelectiveFib == nil {
		var v bool = true
		t.SelectiveFib = &v
	}
	if t.TriggeredPolicy == nil {
		var v bool = false
		t.TriggeredPolicy = &v
	}
	if t.WeightedEcmp == 0 {
		t.WeightedEcmp = NokiaConf_Configure_Router_WeightedEcmp_false
	}
	t.Aggregates.PopulateDefaults()
	t.Bfd.PopulateDefaults()
	t.Bgp.PopulateDefaults()
	t.Bier.PopulateDefaults()
	t.Confederation.PopulateDefaults()
	t.DhcpServer.PopulateDefaults()
	t.Dns.PopulateDefaults()
	t.Firewall.PopulateDefaults()
	t.Flowspec.PopulateDefaults()
	t.Gtm.PopulateDefaults()
	t.Gtp.PopulateDefaults()
	t.Igmp.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	t.Ipv6TeRouterId.PopulateDefaults()
	t.IsaServiceChaining.PopulateDefaults()
	t.L2Tp.PopulateDefaults()
	t.Ldp.PopulateDefaults()
	t.LeakExport.PopulateDefaults()
	t.LspBfd.PopulateDefaults()
	t.McMaximumRoutes.PopulateDefaults()
	t.Mld.PopulateDefaults()
	t.Mpls.PopulateDefaults()
	t.MplsLabels.PopulateDefaults()
	t.Msdp.PopulateDefaults()
	t.MssAdjust.PopulateDefaults()
	t.Mtrace2.PopulateDefaults()
	t.Nat.PopulateDefaults()
	t.NetworkDomains.PopulateDefaults()
	t.OriginValidation.PopulateDefaults()
	t.P2MpSrTree.PopulateDefaults()
	t.Pcep.PopulateDefaults()
	t.Pcp.PopulateDefaults()
	t.Pim.PopulateDefaults()
	t.Radius.PopulateDefaults()
	t.Reassembly.PopulateDefaults()
	t.RibApi.PopulateDefaults()
	t.Rip.PopulateDefaults()
	t.Ripng.PopulateDefaults()
	t.Rsvp.PopulateDefaults()
	t.SegmentRouting.PopulateDefaults()
	t.SfmOverload.PopulateDefaults()
	t.SgtQos.PopulateDefaults()
	t.StaticRoutes.PopulateDefaults()
	t.TtlPropagate.PopulateDefaults()
	t.TunnelInterface.PopulateDefaults()
	t.TwampLight.PopulateDefaults()
	t.Vrgw.PopulateDefaults()
	t.WlanGw.PopulateDefaults()
	t.Wpp.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.Isis {
		e.PopulateDefaults()
	}
	for _, e := range t.Ospf {
		e.PopulateDefaults()
	}
	for _, e := range t.Ospf3 {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RouterName == nil {
		return nil, fmt.Errorf("nil value for key RouterName")
	}

	return map[string]interface{}{
		"router-name": *t.RouterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router.
func (*NokiaConf_Configure_Router) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Aggregates represents the /nokia-conf/configure/router/aggregates YANG schema element.
type NokiaConf_Configure_Router_Aggregates struct {
	Aggregate          map[string]*NokiaConf_Configure_Router_Aggregates_Aggregate `path:"aggregate" module:"nokia-conf"`
	ApplyGroups        []string                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Aggregates implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Aggregates) IsYANGGoStruct() {}

// NewAggregate creates a new entry in the Aggregate list of the
// NokiaConf_Configure_Router_Aggregates struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Aggregates) NewAggregate(IpPrefix string) (*NokiaConf_Configure_Router_Aggregates_Aggregate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Aggregate == nil {
		t.Aggregate = make(map[string]*NokiaConf_Configure_Router_Aggregates_Aggregate)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Aggregate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Aggregate", key)
	}

	t.Aggregate[key] = &NokiaConf_Configure_Router_Aggregates_Aggregate{
		IpPrefix: &IpPrefix,
	}

	return t.Aggregate[key], nil
}

// RenameAggregate renames an entry in the list Aggregate within
// the NokiaConf_Configure_Router_Aggregates struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Aggregates) RenameAggregate(oldK, newK string) error {
	if _, ok := t.Aggregate[newK]; ok {
		return fmt.Errorf("key %v already exists in Aggregate", newK)
	}

	e, ok := t.Aggregate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Aggregate", oldK)
	}
	e.IpPrefix = &newK

	t.Aggregate[newK] = e
	delete(t.Aggregate, oldK)
	return nil
}

// GetOrCreateAggregate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Aggregates. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Aggregates) GetOrCreateAggregate(IpPrefix string) *NokiaConf_Configure_Router_Aggregates_Aggregate {

	key := IpPrefix

	if v, ok := t.Aggregate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAggregate(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAggregate got unexpected error: %v", err))
	}
	return v
}

// GetAggregate retrieves the value with the specified key from
// the Aggregate map field of NokiaConf_Configure_Router_Aggregates. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Aggregates) GetAggregate(IpPrefix string) *NokiaConf_Configure_Router_Aggregates_Aggregate {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.Aggregate[key]; ok {
		return lm
	}
	return nil
}

// DeleteAggregate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Aggregates. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Aggregates) DeleteAggregate(IpPrefix string) {
	key := IpPrefix

	delete(t.Aggregate, key)
}

// AppendAggregate appends the supplied NokiaConf_Configure_Router_Aggregates_Aggregate struct to the
// list Aggregate of NokiaConf_Configure_Router_Aggregates. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Aggregates_Aggregate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Aggregates) AppendAggregate(v *NokiaConf_Configure_Router_Aggregates_Aggregate) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Aggregate == nil {
		t.Aggregate = make(map[string]*NokiaConf_Configure_Router_Aggregates_Aggregate)
	}

	if _, ok := t.Aggregate[key]; ok {
		return fmt.Errorf("duplicate key for list Aggregate %v", key)
	}

	t.Aggregate[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Aggregates
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Aggregates) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Aggregates
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Aggregates) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Aggregates
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Aggregates) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Aggregate {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Aggregates) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Aggregates"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Aggregates) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Aggregates) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Aggregates.
func (*NokiaConf_Configure_Router_Aggregates) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Aggregates_Aggregate represents the /nokia-conf/configure/router/aggregates/aggregate YANG schema element.
type NokiaConf_Configure_Router_Aggregates_Aggregate struct {
	Aggregator                  *NokiaConf_Configure_Router_Aggregates_Aggregate_Aggregator `path:"aggregator" module:"nokia-conf"`
	ApplyGroups                 []string                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude          []string                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	AsSet                       *bool                                                       `path:"as-set" module:"nokia-conf"`
	Blackhole                   *NokiaConf_Configure_Router_Aggregates_Aggregate_Blackhole  `path:"blackhole" module:"nokia-conf" yangPresence:"true"`
	Community                   []string                                                    `path:"community" module:"nokia-conf"`
	Description                 *string                                                     `path:"description" module:"nokia-conf"`
	DiscardComponentCommunities *bool                                                       `path:"discard-component-communities" module:"nokia-conf"`
	Indirect                    *string                                                     `path:"indirect" module:"nokia-conf"`
	IpPrefix                    *string                                                     `path:"ip-prefix" module:"nokia-conf"`
	LocalPreference             *int64                                                      `path:"local-preference" module:"nokia-conf"`
	Policy                      *string                                                     `path:"policy" module:"nokia-conf"`
	SummaryOnly                 *bool                                                       `path:"summary-only" module:"nokia-conf"`
	TunnelGroup                 *uint32                                                     `path:"tunnel-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Aggregates_Aggregate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Aggregates_Aggregate) IsYANGGoStruct() {}

// GetOrCreateAggregator retrieves the value of the Aggregator field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Aggregates_Aggregate) GetOrCreateAggregator() *NokiaConf_Configure_Router_Aggregates_Aggregate_Aggregator {
	if t.Aggregator != nil {
		return t.Aggregator
	}
	t.Aggregator = &NokiaConf_Configure_Router_Aggregates_Aggregate_Aggregator{}
	return t.Aggregator
}

// GetOrCreateBlackhole retrieves the value of the Blackhole field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Aggregates_Aggregate) GetOrCreateBlackhole() *NokiaConf_Configure_Router_Aggregates_Aggregate_Blackhole {
	if t.Blackhole != nil {
		return t.Blackhole
	}
	t.Blackhole = &NokiaConf_Configure_Router_Aggregates_Aggregate_Blackhole{}
	return t.Blackhole
}

// GetAggregator returns the value of the Aggregator struct pointer
// from NokiaConf_Configure_Router_Aggregates_Aggregate. If the receiver or the field Aggregator is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Aggregates_Aggregate) GetAggregator() *NokiaConf_Configure_Router_Aggregates_Aggregate_Aggregator {
	if t != nil && t.Aggregator != nil {
		return t.Aggregator
	}
	return nil
}

// GetBlackhole returns the value of the Blackhole struct pointer
// from NokiaConf_Configure_Router_Aggregates_Aggregate. If the receiver or the field Blackhole is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Aggregates_Aggregate) GetBlackhole() *NokiaConf_Configure_Router_Aggregates_Aggregate_Blackhole {
	if t != nil && t.Blackhole != nil {
		return t.Blackhole
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Aggregates_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Aggregates_Aggregate) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Aggregates_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Aggregates_Aggregate) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAsSet retrieves the value of the leaf AsSet from the NokiaConf_Configure_Router_Aggregates_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsSet is set, it can
// safely use t.GetAsSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Aggregates_Aggregate) GetAsSet() bool {
	if t == nil || t.AsSet == nil {
		return false
	}
	return *t.AsSet
}

// GetCommunity retrieves the value of the leaf Community from the NokiaConf_Configure_Router_Aggregates_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Community is set, it can
// safely use t.GetCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Community == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Aggregates_Aggregate) GetCommunity() []string {
	if t == nil || t.Community == nil {
		return nil
	}
	return t.Community
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Router_Aggregates_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Aggregates_Aggregate) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDiscardComponentCommunities retrieves the value of the leaf DiscardComponentCommunities from the NokiaConf_Configure_Router_Aggregates_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiscardComponentCommunities is set, it can
// safely use t.GetDiscardComponentCommunities() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiscardComponentCommunities == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Aggregates_Aggregate) GetDiscardComponentCommunities() bool {
	if t == nil || t.DiscardComponentCommunities == nil {
		return false
	}
	return *t.DiscardComponentCommunities
}

// GetIndirect retrieves the value of the leaf Indirect from the NokiaConf_Configure_Router_Aggregates_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Indirect is set, it can
// safely use t.GetIndirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Indirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Aggregates_Aggregate) GetIndirect() string {
	if t == nil || t.Indirect == nil {
		return ""
	}
	return *t.Indirect
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Router_Aggregates_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Aggregates_Aggregate) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetLocalPreference retrieves the value of the leaf LocalPreference from the NokiaConf_Configure_Router_Aggregates_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPreference is set, it can
// safely use t.GetLocalPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Aggregates_Aggregate) GetLocalPreference() int64 {
	if t == nil || t.LocalPreference == nil {
		return 0
	}
	return *t.LocalPreference
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Router_Aggregates_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Aggregates_Aggregate) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// GetSummaryOnly retrieves the value of the leaf SummaryOnly from the NokiaConf_Configure_Router_Aggregates_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SummaryOnly is set, it can
// safely use t.GetSummaryOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SummaryOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Aggregates_Aggregate) GetSummaryOnly() bool {
	if t == nil || t.SummaryOnly == nil {
		return false
	}
	return *t.SummaryOnly
}

// GetTunnelGroup retrieves the value of the leaf TunnelGroup from the NokiaConf_Configure_Router_Aggregates_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelGroup is set, it can
// safely use t.GetTunnelGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Aggregates_Aggregate) GetTunnelGroup() uint32 {
	if t == nil || t.TunnelGroup == nil {
		return 0
	}
	return *t.TunnelGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Aggregates_Aggregate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Aggregates_Aggregate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AsSet == nil {
		var v bool = false
		t.AsSet = &v
	}
	if t.DiscardComponentCommunities == nil {
		var v bool = false
		t.DiscardComponentCommunities = &v
	}
	if t.SummaryOnly == nil {
		var v bool = false
		t.SummaryOnly = &v
	}
	t.Aggregator.PopulateDefaults()
	t.Blackhole.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Aggregates_Aggregate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Aggregates_Aggregate) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Aggregates_Aggregate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Aggregates_Aggregate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Aggregates_Aggregate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Aggregates_Aggregate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Aggregates_Aggregate.
func (*NokiaConf_Configure_Router_Aggregates_Aggregate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Aggregates_Aggregate_Aggregator represents the /nokia-conf/configure/router/aggregates/aggregate/aggregator YANG schema element.
type NokiaConf_Configure_Router_Aggregates_Aggregate_Aggregator struct {
	Address  *string `path:"address" module:"nokia-conf"`
	AsNumber *uint32 `path:"as-number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Aggregates_Aggregate_Aggregator implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Aggregates_Aggregate_Aggregator) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Router_Aggregates_Aggregate_Aggregator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Aggregates_Aggregate_Aggregator) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAsNumber retrieves the value of the leaf AsNumber from the NokiaConf_Configure_Router_Aggregates_Aggregate_Aggregator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsNumber is set, it can
// safely use t.GetAsNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Aggregates_Aggregate_Aggregator) GetAsNumber() uint32 {
	if t == nil || t.AsNumber == nil {
		return 0
	}
	return *t.AsNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Aggregates_Aggregate_Aggregator
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Aggregates_Aggregate_Aggregator) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Aggregates_Aggregate_Aggregator) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Aggregates_Aggregate_Aggregator"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Aggregates_Aggregate_Aggregator) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Aggregates_Aggregate_Aggregator) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Aggregates_Aggregate_Aggregator.
func (*NokiaConf_Configure_Router_Aggregates_Aggregate_Aggregator) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Aggregates_Aggregate_Blackhole represents the /nokia-conf/configure/router/aggregates/aggregate/blackhole YANG schema element.
type NokiaConf_Configure_Router_Aggregates_Aggregate_Blackhole struct {
	GenerateIcmp *bool `path:"generate-icmp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Aggregates_Aggregate_Blackhole implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Aggregates_Aggregate_Blackhole) IsYANGGoStruct() {}

// GetGenerateIcmp retrieves the value of the leaf GenerateIcmp from the NokiaConf_Configure_Router_Aggregates_Aggregate_Blackhole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GenerateIcmp is set, it can
// safely use t.GetGenerateIcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GenerateIcmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Aggregates_Aggregate_Blackhole) GetGenerateIcmp() bool {
	if t == nil || t.GenerateIcmp == nil {
		return false
	}
	return *t.GenerateIcmp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Aggregates_Aggregate_Blackhole
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Aggregates_Aggregate_Blackhole) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.GenerateIcmp == nil {
		var v bool = false
		t.GenerateIcmp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Aggregates_Aggregate_Blackhole) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Aggregates_Aggregate_Blackhole"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Aggregates_Aggregate_Blackhole) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Aggregates_Aggregate_Blackhole) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Aggregates_Aggregate_Blackhole.
func (*NokiaConf_Configure_Router_Aggregates_Aggregate_Blackhole) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bfd represents the /nokia-conf/configure/router/bfd YANG schema element.
type NokiaConf_Configure_Router_Bfd struct {
	SeamlessBfd *NokiaConf_Configure_Router_Bfd_SeamlessBfd `path:"seamless-bfd" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bfd) IsYANGGoStruct() {}

// GetOrCreateSeamlessBfd retrieves the value of the SeamlessBfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bfd) GetOrCreateSeamlessBfd() *NokiaConf_Configure_Router_Bfd_SeamlessBfd {
	if t.SeamlessBfd != nil {
		return t.SeamlessBfd
	}
	t.SeamlessBfd = &NokiaConf_Configure_Router_Bfd_SeamlessBfd{}
	return t.SeamlessBfd
}

// GetSeamlessBfd returns the value of the SeamlessBfd struct pointer
// from NokiaConf_Configure_Router_Bfd. If the receiver or the field SeamlessBfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bfd) GetSeamlessBfd() *NokiaConf_Configure_Router_Bfd_SeamlessBfd {
	if t != nil && t.SeamlessBfd != nil {
		return t.SeamlessBfd
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SeamlessBfd.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bfd.
func (*NokiaConf_Configure_Router_Bfd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bfd_SeamlessBfd represents the /nokia-conf/configure/router/bfd/seamless-bfd YANG schema element.
type NokiaConf_Configure_Router_Bfd_SeamlessBfd struct {
	Peer map[string]*NokiaConf_Configure_Router_Bfd_SeamlessBfd_Peer `path:"peer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bfd_SeamlessBfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bfd_SeamlessBfd) IsYANGGoStruct() {}

// NewPeer creates a new entry in the Peer list of the
// NokiaConf_Configure_Router_Bfd_SeamlessBfd struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Bfd_SeamlessBfd) NewPeer(Address string) (*NokiaConf_Configure_Router_Bfd_SeamlessBfd_Peer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Router_Bfd_SeamlessBfd_Peer)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &NokiaConf_Configure_Router_Bfd_SeamlessBfd_Peer{
		Address: &Address,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the NokiaConf_Configure_Router_Bfd_SeamlessBfd struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Bfd_SeamlessBfd) RenamePeer(oldK, newK string) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.Address = &newK

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bfd_SeamlessBfd. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Bfd_SeamlessBfd) GetOrCreatePeer(Address string) *NokiaConf_Configure_Router_Bfd_SeamlessBfd_Peer {

	key := Address

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of NokiaConf_Configure_Router_Bfd_SeamlessBfd. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Bfd_SeamlessBfd) GetPeer(Address string) *NokiaConf_Configure_Router_Bfd_SeamlessBfd_Peer {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bfd_SeamlessBfd. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Bfd_SeamlessBfd) DeletePeer(Address string) {
	key := Address

	delete(t.Peer, key)
}

// AppendPeer appends the supplied NokiaConf_Configure_Router_Bfd_SeamlessBfd_Peer struct to the
// list Peer of NokiaConf_Configure_Router_Bfd_SeamlessBfd. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Bfd_SeamlessBfd_Peer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Bfd_SeamlessBfd) AppendPeer(v *NokiaConf_Configure_Router_Bfd_SeamlessBfd_Peer) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Router_Bfd_SeamlessBfd_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bfd_SeamlessBfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bfd_SeamlessBfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bfd_SeamlessBfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bfd_SeamlessBfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bfd_SeamlessBfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bfd_SeamlessBfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bfd_SeamlessBfd.
func (*NokiaConf_Configure_Router_Bfd_SeamlessBfd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bfd_SeamlessBfd_Peer represents the /nokia-conf/configure/router/bfd/seamless-bfd/peer YANG schema element.
type NokiaConf_Configure_Router_Bfd_SeamlessBfd_Peer struct {
	Address            *string  `path:"address" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Discriminator      *uint32  `path:"discriminator" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bfd_SeamlessBfd_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bfd_SeamlessBfd_Peer) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Router_Bfd_SeamlessBfd_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bfd_SeamlessBfd_Peer) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bfd_SeamlessBfd_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bfd_SeamlessBfd_Peer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bfd_SeamlessBfd_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bfd_SeamlessBfd_Peer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDiscriminator retrieves the value of the leaf Discriminator from the NokiaConf_Configure_Router_Bfd_SeamlessBfd_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Discriminator is set, it can
// safely use t.GetDiscriminator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Discriminator == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bfd_SeamlessBfd_Peer) GetDiscriminator() uint32 {
	if t == nil || t.Discriminator == nil {
		return 0
	}
	return *t.Discriminator
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bfd_SeamlessBfd_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bfd_SeamlessBfd_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Bfd_SeamlessBfd_Peer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Bfd_SeamlessBfd_Peer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bfd_SeamlessBfd_Peer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bfd_SeamlessBfd_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bfd_SeamlessBfd_Peer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bfd_SeamlessBfd_Peer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bfd_SeamlessBfd_Peer.
func (*NokiaConf_Configure_Router_Bfd_SeamlessBfd_Peer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp represents the /nokia-conf/configure/router/bgp YANG schema element.
type NokiaConf_Configure_Router_Bgp struct {
	AddPaths                       *NokiaConf_Configure_Router_Bgp_AddPaths                   `path:"add-paths" module:"nokia-conf" yangPresence:"true"`
	AdminState                     E_NokiaTypesSros_AdminState                                `path:"admin-state" module:"nokia-conf"`
	AdvertiseExternal              *NokiaConf_Configure_Router_Bgp_AdvertiseExternal          `path:"advertise-external" module:"nokia-conf"`
	AdvertiseInactive              *bool                                                      `path:"advertise-inactive" module:"nokia-conf"`
	AdvertiseIpv6NextHops          *NokiaConf_Configure_Router_Bgp_AdvertiseIpv6NextHops      `path:"advertise-ipv6-next-hops" module:"nokia-conf"`
	AggregatorIdZero               *bool                                                      `path:"aggregator-id-zero" module:"nokia-conf"`
	ApplyGroups                    []string                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude             []string                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Asn_4Byte                      *bool                                                      `path:"asn-4-byte" module:"nokia-conf"`
	AuthenticationKey              *string                                                    `path:"authentication-key" module:"nokia-conf"`
	AuthenticationKeychain         *string                                                    `path:"authentication-keychain" module:"nokia-conf"`
	BackupPath                     *NokiaConf_Configure_Router_Bgp_BackupPath                 `path:"backup-path" module:"nokia-conf"`
	BestPathSelection              *NokiaConf_Configure_Router_Bgp_BestPathSelection          `path:"best-path-selection" module:"nokia-conf"`
	BfdLiveness                    *bool                                                      `path:"bfd-liveness" module:"nokia-conf"`
	BgpTunnelMetric                *NokiaConf_Configure_Router_Bgp_BgpTunnelMetric            `path:"bgp-tunnel-metric" module:"nokia-conf"`
	BgpTunnelPreference            *uint32                                                    `path:"bgp-tunnel-preference" module:"nokia-conf"`
	BlockPrefixSid                 *bool                                                      `path:"block-prefix-sid" module:"nokia-conf"`
	ClientReflect                  *bool                                                      `path:"client-reflect" module:"nokia-conf"`
	Cluster                        *NokiaConf_Configure_Router_Bgp_Cluster                    `path:"cluster" module:"nokia-conf"`
	ConnectRetry                   *int32                                                     `path:"connect-retry" module:"nokia-conf"`
	Convergence                    *NokiaConf_Configure_Router_Bgp_Convergence                `path:"convergence" module:"nokia-conf"`
	DampPeerOscillations           *NokiaConf_Configure_Router_Bgp_DampPeerOscillations       `path:"damp-peer-oscillations" module:"nokia-conf" yangPresence:"true"`
	Damping                        *bool                                                      `path:"damping" module:"nokia-conf"`
	DefRecvEvpnEncap               E_NokiaTypesBgp_Encap                                      `path:"def-recv-evpn-encap" module:"nokia-conf"`
	DefaultLabelPreference         *NokiaConf_Configure_Router_Bgp_DefaultLabelPreference     `path:"default-label-preference" module:"nokia-conf"`
	DefaultPreference              *NokiaConf_Configure_Router_Bgp_DefaultPreference          `path:"default-preference" module:"nokia-conf"`
	Description                    *string                                                    `path:"description" module:"nokia-conf"`
	DynamicNeighborLimit           *uint32                                                    `path:"dynamic-neighbor-limit" module:"nokia-conf"`
	EbgpDefaultRejectPolicy        *NokiaConf_Configure_Router_Bgp_EbgpDefaultRejectPolicy    `path:"ebgp-default-reject-policy" module:"nokia-conf"`
	EgressPeerEngineering          *NokiaConf_Configure_Router_Bgp_EgressPeerEngineering      `path:"egress-peer-engineering" module:"nokia-conf" yangPresence:"true"`
	EnforceFirstAs                 *bool                                                      `path:"enforce-first-as" module:"nokia-conf"`
	ErrorHandling                  *NokiaConf_Configure_Router_Bgp_ErrorHandling              `path:"error-handling" module:"nokia-conf"`
	Export                         *NokiaConf_Configure_Router_Bgp_Export                     `path:"export" module:"nokia-conf" yangPresence:"true"`
	ExtendedNhEncoding             *NokiaConf_Configure_Router_Bgp_ExtendedNhEncoding         `path:"extended-nh-encoding" module:"nokia-conf"`
	Family                         *NokiaConf_Configure_Router_Bgp_Family                     `path:"family" module:"nokia-conf"`
	FastExternalFailover           *bool                                                      `path:"fast-external-failover" module:"nokia-conf"`
	Flowspec                       *NokiaConf_Configure_Router_Bgp_Flowspec                   `path:"flowspec" module:"nokia-conf"`
	GracefulRestart                *NokiaConf_Configure_Router_Bgp_GracefulRestart            `path:"graceful-restart" module:"nokia-conf" yangPresence:"true"`
	Group                          map[string]*NokiaConf_Configure_Router_Bgp_Group           `path:"group" module:"nokia-conf"`
	HoldTime                       *NokiaConf_Configure_Router_Bgp_HoldTime                   `path:"hold-time" module:"nokia-conf"`
	IbgpMultipath                  *bool                                                      `path:"ibgp-multipath" module:"nokia-conf"`
	Import                         *NokiaConf_Configure_Router_Bgp_Import                     `path:"import" module:"nokia-conf" yangPresence:"true"`
	InitialSendDelayZero           *bool                                                      `path:"initial-send-delay-zero" module:"nokia-conf"`
	InterAsVpn                     *bool                                                      `path:"inter-as-vpn" module:"nokia-conf"`
	Keepalive                      *int32                                                     `path:"keepalive" module:"nokia-conf"`
	LabelAllocation                *NokiaConf_Configure_Router_Bgp_LabelAllocation            `path:"label-allocation" module:"nokia-conf"`
	LabelPreference                *uint32                                                    `path:"label-preference" module:"nokia-conf"`
	LinkStateRouteExport           *bool                                                      `path:"link-state-route-export" module:"nokia-conf"`
	LinkStateRouteImport           *bool                                                      `path:"link-state-route-import" module:"nokia-conf"`
	LocalAs                        *NokiaConf_Configure_Router_Bgp_LocalAs                    `path:"local-as" module:"nokia-conf"`
	LocalPreference                *uint32                                                    `path:"local-preference" module:"nokia-conf"`
	LoopDetect                     E_NokiaTypesBgp_LoopDetect                                 `path:"loop-detect" module:"nokia-conf"`
	LoopDetectThreshold            *uint32                                                    `path:"loop-detect-threshold" module:"nokia-conf"`
	MedOut                         NokiaConf_Configure_Router_Bgp_MedOut_Union                `path:"med-out" module:"nokia-conf"`
	MinRouteAdvertisement          *int16                                                     `path:"min-route-advertisement" module:"nokia-conf"`
	Monitor                        *NokiaConf_Configure_Router_Bgp_Monitor                    `path:"monitor" module:"nokia-conf" yangPresence:"true"`
	MpBgpKeep                      *bool                                                      `path:"mp-bgp-keep" module:"nokia-conf"`
	Multihop                       *int32                                                     `path:"multihop" module:"nokia-conf"`
	Multipath                      *NokiaConf_Configure_Router_Bgp_Multipath                  `path:"multipath" module:"nokia-conf"`
	MvpnVrfImportSubtypeNew        *bool                                                      `path:"mvpn-vrf-import-subtype-new" module:"nokia-conf"`
	Neighbor                       map[string]*NokiaConf_Configure_Router_Bgp_Neighbor        `path:"neighbor" module:"nokia-conf"`
	NeighborTrust                  *NokiaConf_Configure_Router_Bgp_NeighborTrust              `path:"neighbor-trust" module:"nokia-conf"`
	NextHopResolution              *NokiaConf_Configure_Router_Bgp_NextHopResolution          `path:"next-hop-resolution" module:"nokia-conf"`
	OptimalRouteReflection         *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection     `path:"optimal-route-reflection" module:"nokia-conf"`
	OutboundRouteFiltering         *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering     `path:"outbound-route-filtering" module:"nokia-conf" yangPresence:"true"`
	OverrideTunnelElc              *bool                                                      `path:"override-tunnel-elc" module:"nokia-conf"`
	PathMtuDiscovery               *bool                                                      `path:"path-mtu-discovery" module:"nokia-conf"`
	PeerIpTracking                 *bool                                                      `path:"peer-ip-tracking" module:"nokia-conf"`
	PeerTrackingPolicy             *string                                                    `path:"peer-tracking-policy" module:"nokia-conf"`
	Preference                     *uint32                                                    `path:"preference" module:"nokia-conf"`
	PurgeTimer                     *uint32                                                    `path:"purge-timer" module:"nokia-conf"`
	RapidUpdate                    *NokiaConf_Configure_Router_Bgp_RapidUpdate                `path:"rapid-update" module:"nokia-conf"`
	RapidWithdrawal                *bool                                                      `path:"rapid-withdrawal" module:"nokia-conf"`
	RemovePrivate                  *NokiaConf_Configure_Router_Bgp_RemovePrivate              `path:"remove-private" module:"nokia-conf" yangPresence:"true"`
	RibManagement                  *NokiaConf_Configure_Router_Bgp_RibManagement              `path:"rib-management" module:"nokia-conf"`
	RouteTableInstall              *bool                                                      `path:"route-table-install" module:"nokia-conf"`
	RouteTargetList                map[string]*NokiaConf_Configure_Router_Bgp_RouteTargetList `path:"route-target-list" module:"nokia-conf"`
	RouterId                       *string                                                    `path:"router-id" module:"nokia-conf"`
	RrVpnForwarding                *bool                                                      `path:"rr-vpn-forwarding" module:"nokia-conf"`
	SegmentRouting                 *NokiaConf_Configure_Router_Bgp_SegmentRouting             `path:"segment-routing" module:"nokia-conf"`
	SegmentRoutingV6               *NokiaConf_Configure_Router_Bgp_SegmentRoutingV6           `path:"segment-routing-v6" module:"nokia-conf" yangPresence:"true"`
	SelectiveLabelIpPrioritization *bool                                                      `path:"selective-label-ip-prioritization" module:"nokia-conf"`
	SelectiveLabelIpv4Install      *bool                                                      `path:"selective-label-ipv4-install" module:"nokia-conf"`
	SendCommunities                *NokiaConf_Configure_Router_Bgp_SendCommunities            `path:"send-communities" module:"nokia-conf"`
	SendDefault                    *NokiaConf_Configure_Router_Bgp_SendDefault                `path:"send-default" module:"nokia-conf"`
	SplitHorizon                   *bool                                                      `path:"split-horizon" module:"nokia-conf"`
	SrPolicyImport                 *bool                                                      `path:"sr-policy-import" module:"nokia-conf"`
	SubconfedVpnForwarding         *bool                                                      `path:"subconfed-vpn-forwarding" module:"nokia-conf"`
	TcpMss                         *uint32                                                    `path:"tcp-mss" module:"nokia-conf"`
	ThirdPartyNexthop              *bool                                                      `path:"third-party-nexthop" module:"nokia-conf"`
	VpnApplyExport                 *bool                                                      `path:"vpn-apply-export" module:"nokia-conf"`
	VpnApplyImport                 *bool                                                      `path:"vpn-apply-import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Router_Bgp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Bgp) NewGroup(GroupName string) (*NokiaConf_Configure_Router_Bgp_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Router_Bgp_Group)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Router_Bgp_Group{
		GroupName: &GroupName,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Router_Bgp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Bgp) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupName = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateGroup(GroupName string) *NokiaConf_Configure_Router_Bgp_Group {

	key := GroupName

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Router_Bgp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetGroup(GroupName string) *NokiaConf_Configure_Router_Bgp_Group {

	if t == nil {
		return nil
	}

	key := GroupName

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Bgp) DeleteGroup(GroupName string) {
	key := GroupName

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Router_Bgp_Group struct to the
// list Group of NokiaConf_Configure_Router_Bgp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Bgp_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Bgp) AppendGroup(v *NokiaConf_Configure_Router_Bgp_Group) error {
	if v.GroupName == nil {
		return fmt.Errorf("invalid nil key received for GroupName")
	}

	key := *v.GroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Router_Bgp_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// NewNeighbor creates a new entry in the Neighbor list of the
// NokiaConf_Configure_Router_Bgp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Bgp) NewNeighbor(IpAddress string) (*NokiaConf_Configure_Router_Bgp_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NokiaConf_Configure_Router_Bgp_Neighbor)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &NokiaConf_Configure_Router_Bgp_Neighbor{
		IpAddress: &IpAddress,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the NokiaConf_Configure_Router_Bgp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Bgp) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.IpAddress = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateNeighbor(IpAddress string) *NokiaConf_Configure_Router_Bgp_Neighbor {

	key := IpAddress

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of NokiaConf_Configure_Router_Bgp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetNeighbor(IpAddress string) *NokiaConf_Configure_Router_Bgp_Neighbor {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Bgp) DeleteNeighbor(IpAddress string) {
	key := IpAddress

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied NokiaConf_Configure_Router_Bgp_Neighbor struct to the
// list Neighbor of NokiaConf_Configure_Router_Bgp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Bgp_Neighbor already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Bgp) AppendNeighbor(v *NokiaConf_Configure_Router_Bgp_Neighbor) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NokiaConf_Configure_Router_Bgp_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// NewRouteTargetList creates a new entry in the RouteTargetList list of the
// NokiaConf_Configure_Router_Bgp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Bgp) NewRouteTargetList(CommunityName string) (*NokiaConf_Configure_Router_Bgp_RouteTargetList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouteTargetList == nil {
		t.RouteTargetList = make(map[string]*NokiaConf_Configure_Router_Bgp_RouteTargetList)
	}

	key := CommunityName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RouteTargetList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RouteTargetList", key)
	}

	t.RouteTargetList[key] = &NokiaConf_Configure_Router_Bgp_RouteTargetList{
		CommunityName: &CommunityName,
	}

	return t.RouteTargetList[key], nil
}

// RenameRouteTargetList renames an entry in the list RouteTargetList within
// the NokiaConf_Configure_Router_Bgp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Bgp) RenameRouteTargetList(oldK, newK string) error {
	if _, ok := t.RouteTargetList[newK]; ok {
		return fmt.Errorf("key %v already exists in RouteTargetList", newK)
	}

	e, ok := t.RouteTargetList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RouteTargetList", oldK)
	}
	e.CommunityName = &newK

	t.RouteTargetList[newK] = e
	delete(t.RouteTargetList, oldK)
	return nil
}

// GetOrCreateRouteTargetList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateRouteTargetList(CommunityName string) *NokiaConf_Configure_Router_Bgp_RouteTargetList {

	key := CommunityName

	if v, ok := t.RouteTargetList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRouteTargetList(CommunityName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRouteTargetList got unexpected error: %v", err))
	}
	return v
}

// GetRouteTargetList retrieves the value with the specified key from
// the RouteTargetList map field of NokiaConf_Configure_Router_Bgp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetRouteTargetList(CommunityName string) *NokiaConf_Configure_Router_Bgp_RouteTargetList {

	if t == nil {
		return nil
	}

	key := CommunityName

	if lm, ok := t.RouteTargetList[key]; ok {
		return lm
	}
	return nil
}

// DeleteRouteTargetList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Bgp) DeleteRouteTargetList(CommunityName string) {
	key := CommunityName

	delete(t.RouteTargetList, key)
}

// AppendRouteTargetList appends the supplied NokiaConf_Configure_Router_Bgp_RouteTargetList struct to the
// list RouteTargetList of NokiaConf_Configure_Router_Bgp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Bgp_RouteTargetList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Bgp) AppendRouteTargetList(v *NokiaConf_Configure_Router_Bgp_RouteTargetList) error {
	if v.CommunityName == nil {
		return fmt.Errorf("invalid nil key received for CommunityName")
	}

	key := *v.CommunityName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouteTargetList == nil {
		t.RouteTargetList = make(map[string]*NokiaConf_Configure_Router_Bgp_RouteTargetList)
	}

	if _, ok := t.RouteTargetList[key]; ok {
		return fmt.Errorf("duplicate key for list RouteTargetList %v", key)
	}

	t.RouteTargetList[key] = v
	return nil
}

// GetOrCreateAddPaths retrieves the value of the AddPaths field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateAddPaths() *NokiaConf_Configure_Router_Bgp_AddPaths {
	if t.AddPaths != nil {
		return t.AddPaths
	}
	t.AddPaths = &NokiaConf_Configure_Router_Bgp_AddPaths{}
	return t.AddPaths
}

// GetOrCreateAdvertiseExternal retrieves the value of the AdvertiseExternal field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateAdvertiseExternal() *NokiaConf_Configure_Router_Bgp_AdvertiseExternal {
	if t.AdvertiseExternal != nil {
		return t.AdvertiseExternal
	}
	t.AdvertiseExternal = &NokiaConf_Configure_Router_Bgp_AdvertiseExternal{}
	return t.AdvertiseExternal
}

// GetOrCreateAdvertiseIpv6NextHops retrieves the value of the AdvertiseIpv6NextHops field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateAdvertiseIpv6NextHops() *NokiaConf_Configure_Router_Bgp_AdvertiseIpv6NextHops {
	if t.AdvertiseIpv6NextHops != nil {
		return t.AdvertiseIpv6NextHops
	}
	t.AdvertiseIpv6NextHops = &NokiaConf_Configure_Router_Bgp_AdvertiseIpv6NextHops{}
	return t.AdvertiseIpv6NextHops
}

// GetOrCreateBackupPath retrieves the value of the BackupPath field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateBackupPath() *NokiaConf_Configure_Router_Bgp_BackupPath {
	if t.BackupPath != nil {
		return t.BackupPath
	}
	t.BackupPath = &NokiaConf_Configure_Router_Bgp_BackupPath{}
	return t.BackupPath
}

// GetOrCreateBestPathSelection retrieves the value of the BestPathSelection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateBestPathSelection() *NokiaConf_Configure_Router_Bgp_BestPathSelection {
	if t.BestPathSelection != nil {
		return t.BestPathSelection
	}
	t.BestPathSelection = &NokiaConf_Configure_Router_Bgp_BestPathSelection{}
	return t.BestPathSelection
}

// GetOrCreateBgpTunnelMetric retrieves the value of the BgpTunnelMetric field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateBgpTunnelMetric() *NokiaConf_Configure_Router_Bgp_BgpTunnelMetric {
	if t.BgpTunnelMetric != nil {
		return t.BgpTunnelMetric
	}
	t.BgpTunnelMetric = &NokiaConf_Configure_Router_Bgp_BgpTunnelMetric{}
	return t.BgpTunnelMetric
}

// GetOrCreateCluster retrieves the value of the Cluster field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateCluster() *NokiaConf_Configure_Router_Bgp_Cluster {
	if t.Cluster != nil {
		return t.Cluster
	}
	t.Cluster = &NokiaConf_Configure_Router_Bgp_Cluster{}
	return t.Cluster
}

// GetOrCreateConvergence retrieves the value of the Convergence field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateConvergence() *NokiaConf_Configure_Router_Bgp_Convergence {
	if t.Convergence != nil {
		return t.Convergence
	}
	t.Convergence = &NokiaConf_Configure_Router_Bgp_Convergence{}
	return t.Convergence
}

// GetOrCreateDampPeerOscillations retrieves the value of the DampPeerOscillations field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateDampPeerOscillations() *NokiaConf_Configure_Router_Bgp_DampPeerOscillations {
	if t.DampPeerOscillations != nil {
		return t.DampPeerOscillations
	}
	t.DampPeerOscillations = &NokiaConf_Configure_Router_Bgp_DampPeerOscillations{}
	return t.DampPeerOscillations
}

// GetOrCreateDefaultLabelPreference retrieves the value of the DefaultLabelPreference field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateDefaultLabelPreference() *NokiaConf_Configure_Router_Bgp_DefaultLabelPreference {
	if t.DefaultLabelPreference != nil {
		return t.DefaultLabelPreference
	}
	t.DefaultLabelPreference = &NokiaConf_Configure_Router_Bgp_DefaultLabelPreference{}
	return t.DefaultLabelPreference
}

// GetOrCreateDefaultPreference retrieves the value of the DefaultPreference field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateDefaultPreference() *NokiaConf_Configure_Router_Bgp_DefaultPreference {
	if t.DefaultPreference != nil {
		return t.DefaultPreference
	}
	t.DefaultPreference = &NokiaConf_Configure_Router_Bgp_DefaultPreference{}
	return t.DefaultPreference
}

// GetOrCreateEbgpDefaultRejectPolicy retrieves the value of the EbgpDefaultRejectPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateEbgpDefaultRejectPolicy() *NokiaConf_Configure_Router_Bgp_EbgpDefaultRejectPolicy {
	if t.EbgpDefaultRejectPolicy != nil {
		return t.EbgpDefaultRejectPolicy
	}
	t.EbgpDefaultRejectPolicy = &NokiaConf_Configure_Router_Bgp_EbgpDefaultRejectPolicy{}
	return t.EbgpDefaultRejectPolicy
}

// GetOrCreateEgressPeerEngineering retrieves the value of the EgressPeerEngineering field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateEgressPeerEngineering() *NokiaConf_Configure_Router_Bgp_EgressPeerEngineering {
	if t.EgressPeerEngineering != nil {
		return t.EgressPeerEngineering
	}
	t.EgressPeerEngineering = &NokiaConf_Configure_Router_Bgp_EgressPeerEngineering{}
	return t.EgressPeerEngineering
}

// GetOrCreateErrorHandling retrieves the value of the ErrorHandling field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateErrorHandling() *NokiaConf_Configure_Router_Bgp_ErrorHandling {
	if t.ErrorHandling != nil {
		return t.ErrorHandling
	}
	t.ErrorHandling = &NokiaConf_Configure_Router_Bgp_ErrorHandling{}
	return t.ErrorHandling
}

// GetOrCreateExport retrieves the value of the Export field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateExport() *NokiaConf_Configure_Router_Bgp_Export {
	if t.Export != nil {
		return t.Export
	}
	t.Export = &NokiaConf_Configure_Router_Bgp_Export{}
	return t.Export
}

// GetOrCreateExtendedNhEncoding retrieves the value of the ExtendedNhEncoding field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateExtendedNhEncoding() *NokiaConf_Configure_Router_Bgp_ExtendedNhEncoding {
	if t.ExtendedNhEncoding != nil {
		return t.ExtendedNhEncoding
	}
	t.ExtendedNhEncoding = &NokiaConf_Configure_Router_Bgp_ExtendedNhEncoding{}
	return t.ExtendedNhEncoding
}

// GetOrCreateFamily retrieves the value of the Family field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateFamily() *NokiaConf_Configure_Router_Bgp_Family {
	if t.Family != nil {
		return t.Family
	}
	t.Family = &NokiaConf_Configure_Router_Bgp_Family{}
	return t.Family
}

// GetOrCreateFlowspec retrieves the value of the Flowspec field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateFlowspec() *NokiaConf_Configure_Router_Bgp_Flowspec {
	if t.Flowspec != nil {
		return t.Flowspec
	}
	t.Flowspec = &NokiaConf_Configure_Router_Bgp_Flowspec{}
	return t.Flowspec
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateGracefulRestart() *NokiaConf_Configure_Router_Bgp_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &NokiaConf_Configure_Router_Bgp_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateHoldTime() *NokiaConf_Configure_Router_Bgp_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &NokiaConf_Configure_Router_Bgp_HoldTime{}
	return t.HoldTime
}

// GetOrCreateImport retrieves the value of the Import field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateImport() *NokiaConf_Configure_Router_Bgp_Import {
	if t.Import != nil {
		return t.Import
	}
	t.Import = &NokiaConf_Configure_Router_Bgp_Import{}
	return t.Import
}

// GetOrCreateLabelAllocation retrieves the value of the LabelAllocation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateLabelAllocation() *NokiaConf_Configure_Router_Bgp_LabelAllocation {
	if t.LabelAllocation != nil {
		return t.LabelAllocation
	}
	t.LabelAllocation = &NokiaConf_Configure_Router_Bgp_LabelAllocation{}
	return t.LabelAllocation
}

// GetOrCreateLocalAs retrieves the value of the LocalAs field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateLocalAs() *NokiaConf_Configure_Router_Bgp_LocalAs {
	if t.LocalAs != nil {
		return t.LocalAs
	}
	t.LocalAs = &NokiaConf_Configure_Router_Bgp_LocalAs{}
	return t.LocalAs
}

// GetOrCreateMonitor retrieves the value of the Monitor field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateMonitor() *NokiaConf_Configure_Router_Bgp_Monitor {
	if t.Monitor != nil {
		return t.Monitor
	}
	t.Monitor = &NokiaConf_Configure_Router_Bgp_Monitor{}
	return t.Monitor
}

// GetOrCreateMultipath retrieves the value of the Multipath field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateMultipath() *NokiaConf_Configure_Router_Bgp_Multipath {
	if t.Multipath != nil {
		return t.Multipath
	}
	t.Multipath = &NokiaConf_Configure_Router_Bgp_Multipath{}
	return t.Multipath
}

// GetOrCreateNeighborTrust retrieves the value of the NeighborTrust field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateNeighborTrust() *NokiaConf_Configure_Router_Bgp_NeighborTrust {
	if t.NeighborTrust != nil {
		return t.NeighborTrust
	}
	t.NeighborTrust = &NokiaConf_Configure_Router_Bgp_NeighborTrust{}
	return t.NeighborTrust
}

// GetOrCreateNextHopResolution retrieves the value of the NextHopResolution field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateNextHopResolution() *NokiaConf_Configure_Router_Bgp_NextHopResolution {
	if t.NextHopResolution != nil {
		return t.NextHopResolution
	}
	t.NextHopResolution = &NokiaConf_Configure_Router_Bgp_NextHopResolution{}
	return t.NextHopResolution
}

// GetOrCreateOptimalRouteReflection retrieves the value of the OptimalRouteReflection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateOptimalRouteReflection() *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection {
	if t.OptimalRouteReflection != nil {
		return t.OptimalRouteReflection
	}
	t.OptimalRouteReflection = &NokiaConf_Configure_Router_Bgp_OptimalRouteReflection{}
	return t.OptimalRouteReflection
}

// GetOrCreateOutboundRouteFiltering retrieves the value of the OutboundRouteFiltering field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateOutboundRouteFiltering() *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering {
	if t.OutboundRouteFiltering != nil {
		return t.OutboundRouteFiltering
	}
	t.OutboundRouteFiltering = &NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering{}
	return t.OutboundRouteFiltering
}

// GetOrCreateRapidUpdate retrieves the value of the RapidUpdate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateRapidUpdate() *NokiaConf_Configure_Router_Bgp_RapidUpdate {
	if t.RapidUpdate != nil {
		return t.RapidUpdate
	}
	t.RapidUpdate = &NokiaConf_Configure_Router_Bgp_RapidUpdate{}
	return t.RapidUpdate
}

// GetOrCreateRemovePrivate retrieves the value of the RemovePrivate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateRemovePrivate() *NokiaConf_Configure_Router_Bgp_RemovePrivate {
	if t.RemovePrivate != nil {
		return t.RemovePrivate
	}
	t.RemovePrivate = &NokiaConf_Configure_Router_Bgp_RemovePrivate{}
	return t.RemovePrivate
}

// GetOrCreateRibManagement retrieves the value of the RibManagement field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateRibManagement() *NokiaConf_Configure_Router_Bgp_RibManagement {
	if t.RibManagement != nil {
		return t.RibManagement
	}
	t.RibManagement = &NokiaConf_Configure_Router_Bgp_RibManagement{}
	return t.RibManagement
}

// GetOrCreateSegmentRouting retrieves the value of the SegmentRouting field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateSegmentRouting() *NokiaConf_Configure_Router_Bgp_SegmentRouting {
	if t.SegmentRouting != nil {
		return t.SegmentRouting
	}
	t.SegmentRouting = &NokiaConf_Configure_Router_Bgp_SegmentRouting{}
	return t.SegmentRouting
}

// GetOrCreateSegmentRoutingV6 retrieves the value of the SegmentRoutingV6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateSegmentRoutingV6() *NokiaConf_Configure_Router_Bgp_SegmentRoutingV6 {
	if t.SegmentRoutingV6 != nil {
		return t.SegmentRoutingV6
	}
	t.SegmentRoutingV6 = &NokiaConf_Configure_Router_Bgp_SegmentRoutingV6{}
	return t.SegmentRoutingV6
}

// GetOrCreateSendCommunities retrieves the value of the SendCommunities field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateSendCommunities() *NokiaConf_Configure_Router_Bgp_SendCommunities {
	if t.SendCommunities != nil {
		return t.SendCommunities
	}
	t.SendCommunities = &NokiaConf_Configure_Router_Bgp_SendCommunities{}
	return t.SendCommunities
}

// GetOrCreateSendDefault retrieves the value of the SendDefault field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp) GetOrCreateSendDefault() *NokiaConf_Configure_Router_Bgp_SendDefault {
	if t.SendDefault != nil {
		return t.SendDefault
	}
	t.SendDefault = &NokiaConf_Configure_Router_Bgp_SendDefault{}
	return t.SendDefault
}

// GetAddPaths returns the value of the AddPaths struct pointer
// from NokiaConf_Configure_Router_Bgp. If the receiver or the field AddPaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetAddPaths() *NokiaConf_Configure_Router_Bgp_AddPaths {
	if t != nil && t.AddPaths != nil {
		return t.AddPaths
	}
	return nil
}

// GetAdvertiseExternal returns the value of the AdvertiseExternal struct pointer
// from NokiaConf_Configure_Router_Bgp. If the receiver or the field AdvertiseExternal is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetAdvertiseExternal() *NokiaConf_Configure_Router_Bgp_AdvertiseExternal {
	if t != nil && t.AdvertiseExternal != nil {
		return t.AdvertiseExternal
	}
	return nil
}

// GetAdvertiseIpv6NextHops returns the value of the AdvertiseIpv6NextHops struct pointer
// from NokiaConf_Configure_Router_Bgp. If the receiver or the field AdvertiseIpv6NextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetAdvertiseIpv6NextHops() *NokiaConf_Configure_Router_Bgp_AdvertiseIpv6NextHops {
	if t != nil && t.AdvertiseIpv6NextHops != nil {
		return t.AdvertiseIpv6NextHops
	}
	return nil
}

// GetBackupPath returns the value of the BackupPath struct pointer
// from NokiaConf_Configure_Router_Bgp. If the receiver or the field BackupPath is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetBackupPath() *NokiaConf_Configure_Router_Bgp_BackupPath {
	if t != nil && t.BackupPath != nil {
		return t.BackupPath
	}
	return nil
}

// GetBestPathSelection returns the value of the BestPathSelection struct pointer
// from NokiaConf_Configure_Router_Bgp. If the receiver or the field BestPathSelection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetBestPathSelection() *NokiaConf_Configure_Router_Bgp_BestPathSelection {
	if t != nil && t.BestPathSelection != nil {
		return t.BestPathSelection
	}
	return nil
}

// GetBgpTunnelMetric returns the value of the BgpTunnelMetric struct pointer
// from NokiaConf_Configure_Router_Bgp. If the receiver or the field BgpTunnelMetric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetBgpTunnelMetric() *NokiaConf_Configure_Router_Bgp_BgpTunnelMetric {
	if t != nil && t.BgpTunnelMetric != nil {
		return t.BgpTunnelMetric
	}
	return nil
}

// GetCluster returns the value of the Cluster struct pointer
// from NokiaConf_Configure_Router_Bgp. If the receiver or the field Cluster is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetCluster() *NokiaConf_Configure_Router_Bgp_Cluster {
	if t != nil && t.Cluster != nil {
		return t.Cluster
	}
	return nil
}

// GetConvergence returns the value of the Convergence struct pointer
// from NokiaConf_Configure_Router_Bgp. If the receiver or the field Convergence is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetConvergence() *NokiaConf_Configure_Router_Bgp_Convergence {
	if t != nil && t.Convergence != nil {
		return t.Convergence
	}
	return nil
}

// GetDampPeerOscillations returns the value of the DampPeerOscillations struct pointer
// from NokiaConf_Configure_Router_Bgp. If the receiver or the field DampPeerOscillations is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetDampPeerOscillations() *NokiaConf_Configure_Router_Bgp_DampPeerOscillations {
	if t != nil && t.DampPeerOscillations != nil {
		return t.DampPeerOscillations
	}
	return nil
}

// GetDefaultLabelPreference returns the value of the DefaultLabelPreference struct pointer
// from NokiaConf_Configure_Router_Bgp. If the receiver or the field DefaultLabelPreference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetDefaultLabelPreference() *NokiaConf_Configure_Router_Bgp_DefaultLabelPreference {
	if t != nil && t.DefaultLabelPreference != nil {
		return t.DefaultLabelPreference
	}
	return nil
}

// GetDefaultPreference returns the value of the DefaultPreference struct pointer
// from NokiaConf_Configure_Router_Bgp. If the receiver or the field DefaultPreference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetDefaultPreference() *NokiaConf_Configure_Router_Bgp_DefaultPreference {
	if t != nil && t.DefaultPreference != nil {
		return t.DefaultPreference
	}
	return nil
}

// GetEbgpDefaultRejectPolicy returns the value of the EbgpDefaultRejectPolicy struct pointer
// from NokiaConf_Configure_Router_Bgp. If the receiver or the field EbgpDefaultRejectPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetEbgpDefaultRejectPolicy() *NokiaConf_Configure_Router_Bgp_EbgpDefaultRejectPolicy {
	if t != nil && t.EbgpDefaultRejectPolicy != nil {
		return t.EbgpDefaultRejectPolicy
	}
	return nil
}

// GetEgressPeerEngineering returns the value of the EgressPeerEngineering struct pointer
// from NokiaConf_Configure_Router_Bgp. If the receiver or the field EgressPeerEngineering is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetEgressPeerEngineering() *NokiaConf_Configure_Router_Bgp_EgressPeerEngineering {
	if t != nil && t.EgressPeerEngineering != nil {
		return t.EgressPeerEngineering
	}
	return nil
}

// GetErrorHandling returns the value of the ErrorHandling struct pointer
// from NokiaConf_Configure_Router_Bgp. If the receiver or the field ErrorHandling is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetErrorHandling() *NokiaConf_Configure_Router_Bgp_ErrorHandling {
	if t != nil && t.ErrorHandling != nil {
		return t.ErrorHandling
	}
	return nil
}

// GetExport returns the value of the Export struct pointer
// from NokiaConf_Configure_Router_Bgp. If the receiver or the field Export is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetExport() *NokiaConf_Configure_Router_Bgp_Export {
	if t != nil && t.Export != nil {
		return t.Export
	}
	return nil
}

// GetExtendedNhEncoding returns the value of the ExtendedNhEncoding struct pointer
// from NokiaConf_Configure_Router_Bgp. If the receiver or the field ExtendedNhEncoding is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetExtendedNhEncoding() *NokiaConf_Configure_Router_Bgp_ExtendedNhEncoding {
	if t != nil && t.ExtendedNhEncoding != nil {
		return t.ExtendedNhEncoding
	}
	return nil
}

// GetFamily returns the value of the Family struct pointer
// from NokiaConf_Configure_Router_Bgp. If the receiver or the field Family is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetFamily() *NokiaConf_Configure_Router_Bgp_Family {
	if t != nil && t.Family != nil {
		return t.Family
	}
	return nil
}

// GetFlowspec returns the value of the Flowspec struct pointer
// from NokiaConf_Configure_Router_Bgp. If the receiver or the field Flowspec is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetFlowspec() *NokiaConf_Configure_Router_Bgp_Flowspec {
	if t != nil && t.Flowspec != nil {
		return t.Flowspec
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from NokiaConf_Configure_Router_Bgp. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetGracefulRestart() *NokiaConf_Configure_Router_Bgp_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from NokiaConf_Configure_Router_Bgp. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetHoldTime() *NokiaConf_Configure_Router_Bgp_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetImport returns the value of the Import struct pointer
// from NokiaConf_Configure_Router_Bgp. If the receiver or the field Import is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetImport() *NokiaConf_Configure_Router_Bgp_Import {
	if t != nil && t.Import != nil {
		return t.Import
	}
	return nil
}

// GetLabelAllocation returns the value of the LabelAllocation struct pointer
// from NokiaConf_Configure_Router_Bgp. If the receiver or the field LabelAllocation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetLabelAllocation() *NokiaConf_Configure_Router_Bgp_LabelAllocation {
	if t != nil && t.LabelAllocation != nil {
		return t.LabelAllocation
	}
	return nil
}

// GetLocalAs returns the value of the LocalAs struct pointer
// from NokiaConf_Configure_Router_Bgp. If the receiver or the field LocalAs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetLocalAs() *NokiaConf_Configure_Router_Bgp_LocalAs {
	if t != nil && t.LocalAs != nil {
		return t.LocalAs
	}
	return nil
}

// GetMonitor returns the value of the Monitor struct pointer
// from NokiaConf_Configure_Router_Bgp. If the receiver or the field Monitor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetMonitor() *NokiaConf_Configure_Router_Bgp_Monitor {
	if t != nil && t.Monitor != nil {
		return t.Monitor
	}
	return nil
}

// GetMultipath returns the value of the Multipath struct pointer
// from NokiaConf_Configure_Router_Bgp. If the receiver or the field Multipath is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetMultipath() *NokiaConf_Configure_Router_Bgp_Multipath {
	if t != nil && t.Multipath != nil {
		return t.Multipath
	}
	return nil
}

// GetNeighborTrust returns the value of the NeighborTrust struct pointer
// from NokiaConf_Configure_Router_Bgp. If the receiver or the field NeighborTrust is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetNeighborTrust() *NokiaConf_Configure_Router_Bgp_NeighborTrust {
	if t != nil && t.NeighborTrust != nil {
		return t.NeighborTrust
	}
	return nil
}

// GetNextHopResolution returns the value of the NextHopResolution struct pointer
// from NokiaConf_Configure_Router_Bgp. If the receiver or the field NextHopResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetNextHopResolution() *NokiaConf_Configure_Router_Bgp_NextHopResolution {
	if t != nil && t.NextHopResolution != nil {
		return t.NextHopResolution
	}
	return nil
}

// GetOptimalRouteReflection returns the value of the OptimalRouteReflection struct pointer
// from NokiaConf_Configure_Router_Bgp. If the receiver or the field OptimalRouteReflection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetOptimalRouteReflection() *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection {
	if t != nil && t.OptimalRouteReflection != nil {
		return t.OptimalRouteReflection
	}
	return nil
}

// GetOutboundRouteFiltering returns the value of the OutboundRouteFiltering struct pointer
// from NokiaConf_Configure_Router_Bgp. If the receiver or the field OutboundRouteFiltering is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetOutboundRouteFiltering() *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering {
	if t != nil && t.OutboundRouteFiltering != nil {
		return t.OutboundRouteFiltering
	}
	return nil
}

// GetRapidUpdate returns the value of the RapidUpdate struct pointer
// from NokiaConf_Configure_Router_Bgp. If the receiver or the field RapidUpdate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetRapidUpdate() *NokiaConf_Configure_Router_Bgp_RapidUpdate {
	if t != nil && t.RapidUpdate != nil {
		return t.RapidUpdate
	}
	return nil
}

// GetRemovePrivate returns the value of the RemovePrivate struct pointer
// from NokiaConf_Configure_Router_Bgp. If the receiver or the field RemovePrivate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetRemovePrivate() *NokiaConf_Configure_Router_Bgp_RemovePrivate {
	if t != nil && t.RemovePrivate != nil {
		return t.RemovePrivate
	}
	return nil
}

// GetRibManagement returns the value of the RibManagement struct pointer
// from NokiaConf_Configure_Router_Bgp. If the receiver or the field RibManagement is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetRibManagement() *NokiaConf_Configure_Router_Bgp_RibManagement {
	if t != nil && t.RibManagement != nil {
		return t.RibManagement
	}
	return nil
}

// GetSegmentRouting returns the value of the SegmentRouting struct pointer
// from NokiaConf_Configure_Router_Bgp. If the receiver or the field SegmentRouting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetSegmentRouting() *NokiaConf_Configure_Router_Bgp_SegmentRouting {
	if t != nil && t.SegmentRouting != nil {
		return t.SegmentRouting
	}
	return nil
}

// GetSegmentRoutingV6 returns the value of the SegmentRoutingV6 struct pointer
// from NokiaConf_Configure_Router_Bgp. If the receiver or the field SegmentRoutingV6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetSegmentRoutingV6() *NokiaConf_Configure_Router_Bgp_SegmentRoutingV6 {
	if t != nil && t.SegmentRoutingV6 != nil {
		return t.SegmentRoutingV6
	}
	return nil
}

// GetSendCommunities returns the value of the SendCommunities struct pointer
// from NokiaConf_Configure_Router_Bgp. If the receiver or the field SendCommunities is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetSendCommunities() *NokiaConf_Configure_Router_Bgp_SendCommunities {
	if t != nil && t.SendCommunities != nil {
		return t.SendCommunities
	}
	return nil
}

// GetSendDefault returns the value of the SendDefault struct pointer
// from NokiaConf_Configure_Router_Bgp. If the receiver or the field SendDefault is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp) GetSendDefault() *NokiaConf_Configure_Router_Bgp_SendDefault {
	if t != nil && t.SendDefault != nil {
		return t.SendDefault
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAdvertiseInactive retrieves the value of the leaf AdvertiseInactive from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseInactive is set, it can
// safely use t.GetAdvertiseInactive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseInactive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetAdvertiseInactive() bool {
	if t == nil || t.AdvertiseInactive == nil {
		return false
	}
	return *t.AdvertiseInactive
}

// GetAggregatorIdZero retrieves the value of the leaf AggregatorIdZero from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AggregatorIdZero is set, it can
// safely use t.GetAggregatorIdZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AggregatorIdZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetAggregatorIdZero() bool {
	if t == nil || t.AggregatorIdZero == nil {
		return false
	}
	return *t.AggregatorIdZero
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAsn_4Byte retrieves the value of the leaf Asn_4Byte from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Asn_4Byte is set, it can
// safely use t.GetAsn_4Byte() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Asn_4Byte == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetAsn_4Byte() bool {
	if t == nil || t.Asn_4Byte == nil {
		return true
	}
	return *t.Asn_4Byte
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationKeychain retrieves the value of the leaf AuthenticationKeychain from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKeychain is set, it can
// safely use t.GetAuthenticationKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKeychain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetAuthenticationKeychain() string {
	if t == nil || t.AuthenticationKeychain == nil {
		return ""
	}
	return *t.AuthenticationKeychain
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetBgpTunnelPreference retrieves the value of the leaf BgpTunnelPreference from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpTunnelPreference is set, it can
// safely use t.GetBgpTunnelPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpTunnelPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetBgpTunnelPreference() uint32 {
	if t == nil || t.BgpTunnelPreference == nil {
		return 12
	}
	return *t.BgpTunnelPreference
}

// GetBlockPrefixSid retrieves the value of the leaf BlockPrefixSid from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockPrefixSid is set, it can
// safely use t.GetBlockPrefixSid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockPrefixSid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetBlockPrefixSid() bool {
	if t == nil || t.BlockPrefixSid == nil {
		return false
	}
	return *t.BlockPrefixSid
}

// GetClientReflect retrieves the value of the leaf ClientReflect from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientReflect is set, it can
// safely use t.GetClientReflect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientReflect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetClientReflect() bool {
	if t == nil || t.ClientReflect == nil {
		return true
	}
	return *t.ClientReflect
}

// GetConnectRetry retrieves the value of the leaf ConnectRetry from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectRetry is set, it can
// safely use t.GetConnectRetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectRetry == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetConnectRetry() int32 {
	if t == nil || t.ConnectRetry == nil {
		return 120
	}
	return *t.ConnectRetry
}

// GetDamping retrieves the value of the leaf Damping from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Damping is set, it can
// safely use t.GetDamping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Damping == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetDamping() bool {
	if t == nil || t.Damping == nil {
		return false
	}
	return *t.Damping
}

// GetDefRecvEvpnEncap retrieves the value of the leaf DefRecvEvpnEncap from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefRecvEvpnEncap is set, it can
// safely use t.GetDefRecvEvpnEncap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefRecvEvpnEncap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetDefRecvEvpnEncap() E_NokiaTypesBgp_Encap {
	if t == nil || t.DefRecvEvpnEncap == 0 {
		return NokiaTypesBgp_Encap_mpls
	}
	return t.DefRecvEvpnEncap
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDynamicNeighborLimit retrieves the value of the leaf DynamicNeighborLimit from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicNeighborLimit is set, it can
// safely use t.GetDynamicNeighborLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicNeighborLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetDynamicNeighborLimit() uint32 {
	if t == nil || t.DynamicNeighborLimit == nil {
		return 0
	}
	return *t.DynamicNeighborLimit
}

// GetEnforceFirstAs retrieves the value of the leaf EnforceFirstAs from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnforceFirstAs is set, it can
// safely use t.GetEnforceFirstAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnforceFirstAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetEnforceFirstAs() bool {
	if t == nil || t.EnforceFirstAs == nil {
		return false
	}
	return *t.EnforceFirstAs
}

// GetFastExternalFailover retrieves the value of the leaf FastExternalFailover from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastExternalFailover is set, it can
// safely use t.GetFastExternalFailover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastExternalFailover == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetFastExternalFailover() bool {
	if t == nil || t.FastExternalFailover == nil {
		return true
	}
	return *t.FastExternalFailover
}

// GetIbgpMultipath retrieves the value of the leaf IbgpMultipath from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IbgpMultipath is set, it can
// safely use t.GetIbgpMultipath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IbgpMultipath == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetIbgpMultipath() bool {
	if t == nil || t.IbgpMultipath == nil {
		return false
	}
	return *t.IbgpMultipath
}

// GetInitialSendDelayZero retrieves the value of the leaf InitialSendDelayZero from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialSendDelayZero is set, it can
// safely use t.GetInitialSendDelayZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialSendDelayZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetInitialSendDelayZero() bool {
	if t == nil || t.InitialSendDelayZero == nil {
		return false
	}
	return *t.InitialSendDelayZero
}

// GetInterAsVpn retrieves the value of the leaf InterAsVpn from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterAsVpn is set, it can
// safely use t.GetInterAsVpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterAsVpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetInterAsVpn() bool {
	if t == nil || t.InterAsVpn == nil {
		return false
	}
	return *t.InterAsVpn
}

// GetKeepalive retrieves the value of the leaf Keepalive from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keepalive is set, it can
// safely use t.GetKeepalive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keepalive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetKeepalive() int32 {
	if t == nil || t.Keepalive == nil {
		return 30
	}
	return *t.Keepalive
}

// GetLabelPreference retrieves the value of the leaf LabelPreference from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelPreference is set, it can
// safely use t.GetLabelPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetLabelPreference() uint32 {
	if t == nil || t.LabelPreference == nil {
		return 170
	}
	return *t.LabelPreference
}

// GetLinkStateRouteExport retrieves the value of the leaf LinkStateRouteExport from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkStateRouteExport is set, it can
// safely use t.GetLinkStateRouteExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkStateRouteExport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetLinkStateRouteExport() bool {
	if t == nil || t.LinkStateRouteExport == nil {
		return false
	}
	return *t.LinkStateRouteExport
}

// GetLinkStateRouteImport retrieves the value of the leaf LinkStateRouteImport from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkStateRouteImport is set, it can
// safely use t.GetLinkStateRouteImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkStateRouteImport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetLinkStateRouteImport() bool {
	if t == nil || t.LinkStateRouteImport == nil {
		return false
	}
	return *t.LinkStateRouteImport
}

// GetLocalPreference retrieves the value of the leaf LocalPreference from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPreference is set, it can
// safely use t.GetLocalPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetLocalPreference() uint32 {
	if t == nil || t.LocalPreference == nil {
		return 100
	}
	return *t.LocalPreference
}

// GetLoopDetect retrieves the value of the leaf LoopDetect from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopDetect is set, it can
// safely use t.GetLoopDetect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopDetect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetLoopDetect() E_NokiaTypesBgp_LoopDetect {
	if t == nil || t.LoopDetect == 0 {
		return NokiaTypesBgp_LoopDetect_ignore_loop
	}
	return t.LoopDetect
}

// GetLoopDetectThreshold retrieves the value of the leaf LoopDetectThreshold from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopDetectThreshold is set, it can
// safely use t.GetLoopDetectThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopDetectThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetLoopDetectThreshold() uint32 {
	if t == nil || t.LoopDetectThreshold == nil {
		return 0
	}
	return *t.LoopDetectThreshold
}

// GetMedOut retrieves the value of the leaf MedOut from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MedOut is set, it can
// safely use t.GetMedOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MedOut == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetMedOut() NokiaConf_Configure_Router_Bgp_MedOut_Union {
	if t == nil || t.MedOut == nil {
		return nil
	}
	return t.MedOut
}

// GetMinRouteAdvertisement retrieves the value of the leaf MinRouteAdvertisement from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinRouteAdvertisement is set, it can
// safely use t.GetMinRouteAdvertisement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinRouteAdvertisement == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetMinRouteAdvertisement() int16 {
	if t == nil || t.MinRouteAdvertisement == nil {
		return 30
	}
	return *t.MinRouteAdvertisement
}

// GetMpBgpKeep retrieves the value of the leaf MpBgpKeep from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MpBgpKeep is set, it can
// safely use t.GetMpBgpKeep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MpBgpKeep == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetMpBgpKeep() bool {
	if t == nil || t.MpBgpKeep == nil {
		return false
	}
	return *t.MpBgpKeep
}

// GetMultihop retrieves the value of the leaf Multihop from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multihop is set, it can
// safely use t.GetMultihop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multihop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetMultihop() int32 {
	if t == nil || t.Multihop == nil {
		return 0
	}
	return *t.Multihop
}

// GetMvpnVrfImportSubtypeNew retrieves the value of the leaf MvpnVrfImportSubtypeNew from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MvpnVrfImportSubtypeNew is set, it can
// safely use t.GetMvpnVrfImportSubtypeNew() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MvpnVrfImportSubtypeNew == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetMvpnVrfImportSubtypeNew() bool {
	if t == nil || t.MvpnVrfImportSubtypeNew == nil {
		return false
	}
	return *t.MvpnVrfImportSubtypeNew
}

// GetOverrideTunnelElc retrieves the value of the leaf OverrideTunnelElc from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverrideTunnelElc is set, it can
// safely use t.GetOverrideTunnelElc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverrideTunnelElc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetOverrideTunnelElc() bool {
	if t == nil || t.OverrideTunnelElc == nil {
		return false
	}
	return *t.OverrideTunnelElc
}

// GetPathMtuDiscovery retrieves the value of the leaf PathMtuDiscovery from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathMtuDiscovery is set, it can
// safely use t.GetPathMtuDiscovery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathMtuDiscovery == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetPathMtuDiscovery() bool {
	if t == nil || t.PathMtuDiscovery == nil {
		return false
	}
	return *t.PathMtuDiscovery
}

// GetPeerIpTracking retrieves the value of the leaf PeerIpTracking from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerIpTracking is set, it can
// safely use t.GetPeerIpTracking() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerIpTracking == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetPeerIpTracking() bool {
	if t == nil || t.PeerIpTracking == nil {
		return false
	}
	return *t.PeerIpTracking
}

// GetPeerTrackingPolicy retrieves the value of the leaf PeerTrackingPolicy from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerTrackingPolicy is set, it can
// safely use t.GetPeerTrackingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerTrackingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetPeerTrackingPolicy() string {
	if t == nil || t.PeerTrackingPolicy == nil {
		return ""
	}
	return *t.PeerTrackingPolicy
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 170
	}
	return *t.Preference
}

// GetPurgeTimer retrieves the value of the leaf PurgeTimer from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PurgeTimer is set, it can
// safely use t.GetPurgeTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PurgeTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetPurgeTimer() uint32 {
	if t == nil || t.PurgeTimer == nil {
		return 10
	}
	return *t.PurgeTimer
}

// GetRapidWithdrawal retrieves the value of the leaf RapidWithdrawal from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RapidWithdrawal is set, it can
// safely use t.GetRapidWithdrawal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RapidWithdrawal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetRapidWithdrawal() bool {
	if t == nil || t.RapidWithdrawal == nil {
		return false
	}
	return *t.RapidWithdrawal
}

// GetRouteTableInstall retrieves the value of the leaf RouteTableInstall from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTableInstall is set, it can
// safely use t.GetRouteTableInstall() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTableInstall == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetRouteTableInstall() bool {
	if t == nil || t.RouteTableInstall == nil {
		return true
	}
	return *t.RouteTableInstall
}

// GetRouterId retrieves the value of the leaf RouterId from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterId is set, it can
// safely use t.GetRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetRouterId() string {
	if t == nil || t.RouterId == nil {
		return ""
	}
	return *t.RouterId
}

// GetRrVpnForwarding retrieves the value of the leaf RrVpnForwarding from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RrVpnForwarding is set, it can
// safely use t.GetRrVpnForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RrVpnForwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetRrVpnForwarding() bool {
	if t == nil || t.RrVpnForwarding == nil {
		return false
	}
	return *t.RrVpnForwarding
}

// GetSelectiveLabelIpPrioritization retrieves the value of the leaf SelectiveLabelIpPrioritization from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SelectiveLabelIpPrioritization is set, it can
// safely use t.GetSelectiveLabelIpPrioritization() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SelectiveLabelIpPrioritization == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetSelectiveLabelIpPrioritization() bool {
	if t == nil || t.SelectiveLabelIpPrioritization == nil {
		return false
	}
	return *t.SelectiveLabelIpPrioritization
}

// GetSelectiveLabelIpv4Install retrieves the value of the leaf SelectiveLabelIpv4Install from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SelectiveLabelIpv4Install is set, it can
// safely use t.GetSelectiveLabelIpv4Install() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SelectiveLabelIpv4Install == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetSelectiveLabelIpv4Install() bool {
	if t == nil || t.SelectiveLabelIpv4Install == nil {
		return false
	}
	return *t.SelectiveLabelIpv4Install
}

// GetSplitHorizon retrieves the value of the leaf SplitHorizon from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SplitHorizon is set, it can
// safely use t.GetSplitHorizon() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SplitHorizon == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetSplitHorizon() bool {
	if t == nil || t.SplitHorizon == nil {
		return false
	}
	return *t.SplitHorizon
}

// GetSrPolicyImport retrieves the value of the leaf SrPolicyImport from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrPolicyImport is set, it can
// safely use t.GetSrPolicyImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrPolicyImport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetSrPolicyImport() bool {
	if t == nil || t.SrPolicyImport == nil {
		return false
	}
	return *t.SrPolicyImport
}

// GetSubconfedVpnForwarding retrieves the value of the leaf SubconfedVpnForwarding from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubconfedVpnForwarding is set, it can
// safely use t.GetSubconfedVpnForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubconfedVpnForwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetSubconfedVpnForwarding() bool {
	if t == nil || t.SubconfedVpnForwarding == nil {
		return false
	}
	return *t.SubconfedVpnForwarding
}

// GetTcpMss retrieves the value of the leaf TcpMss from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpMss is set, it can
// safely use t.GetTcpMss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpMss == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetTcpMss() uint32 {
	if t == nil || t.TcpMss == nil {
		return 0
	}
	return *t.TcpMss
}

// GetThirdPartyNexthop retrieves the value of the leaf ThirdPartyNexthop from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ThirdPartyNexthop is set, it can
// safely use t.GetThirdPartyNexthop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ThirdPartyNexthop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetThirdPartyNexthop() bool {
	if t == nil || t.ThirdPartyNexthop == nil {
		return false
	}
	return *t.ThirdPartyNexthop
}

// GetVpnApplyExport retrieves the value of the leaf VpnApplyExport from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnApplyExport is set, it can
// safely use t.GetVpnApplyExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnApplyExport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetVpnApplyExport() bool {
	if t == nil || t.VpnApplyExport == nil {
		return false
	}
	return *t.VpnApplyExport
}

// GetVpnApplyImport retrieves the value of the leaf VpnApplyImport from the NokiaConf_Configure_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnApplyImport is set, it can
// safely use t.GetVpnApplyImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnApplyImport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp) GetVpnApplyImport() bool {
	if t == nil || t.VpnApplyImport == nil {
		return false
	}
	return *t.VpnApplyImport
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.AdvertiseInactive == nil {
		var v bool = false
		t.AdvertiseInactive = &v
	}
	if t.AggregatorIdZero == nil {
		var v bool = false
		t.AggregatorIdZero = &v
	}
	if t.Asn_4Byte == nil {
		var v bool = true
		t.Asn_4Byte = &v
	}
	if t.BfdLiveness == nil {
		var v bool = false
		t.BfdLiveness = &v
	}
	if t.BgpTunnelPreference == nil {
		var v uint32 = 12
		t.BgpTunnelPreference = &v
	}
	if t.BlockPrefixSid == nil {
		var v bool = false
		t.BlockPrefixSid = &v
	}
	if t.ClientReflect == nil {
		var v bool = true
		t.ClientReflect = &v
	}
	if t.ConnectRetry == nil {
		var v int32 = 120
		t.ConnectRetry = &v
	}
	if t.Damping == nil {
		var v bool = false
		t.Damping = &v
	}
	if t.DefRecvEvpnEncap == 0 {
		t.DefRecvEvpnEncap = NokiaTypesBgp_Encap_mpls
	}
	if t.EnforceFirstAs == nil {
		var v bool = false
		t.EnforceFirstAs = &v
	}
	if t.FastExternalFailover == nil {
		var v bool = true
		t.FastExternalFailover = &v
	}
	if t.IbgpMultipath == nil {
		var v bool = false
		t.IbgpMultipath = &v
	}
	if t.InitialSendDelayZero == nil {
		var v bool = false
		t.InitialSendDelayZero = &v
	}
	if t.InterAsVpn == nil {
		var v bool = false
		t.InterAsVpn = &v
	}
	if t.Keepalive == nil {
		var v int32 = 30
		t.Keepalive = &v
	}
	if t.LabelPreference == nil {
		var v uint32 = 170
		t.LabelPreference = &v
	}
	if t.LinkStateRouteExport == nil {
		var v bool = false
		t.LinkStateRouteExport = &v
	}
	if t.LinkStateRouteImport == nil {
		var v bool = false
		t.LinkStateRouteImport = &v
	}
	if t.LocalPreference == nil {
		var v uint32 = 100
		t.LocalPreference = &v
	}
	if t.LoopDetect == 0 {
		t.LoopDetect = NokiaTypesBgp_LoopDetect_ignore_loop
	}
	if t.LoopDetectThreshold == nil {
		var v uint32 = 0
		t.LoopDetectThreshold = &v
	}
	if t.MinRouteAdvertisement == nil {
		var v int16 = 30
		t.MinRouteAdvertisement = &v
	}
	if t.MpBgpKeep == nil {
		var v bool = false
		t.MpBgpKeep = &v
	}
	if t.MvpnVrfImportSubtypeNew == nil {
		var v bool = false
		t.MvpnVrfImportSubtypeNew = &v
	}
	if t.OverrideTunnelElc == nil {
		var v bool = false
		t.OverrideTunnelElc = &v
	}
	if t.PathMtuDiscovery == nil {
		var v bool = false
		t.PathMtuDiscovery = &v
	}
	if t.PeerIpTracking == nil {
		var v bool = false
		t.PeerIpTracking = &v
	}
	if t.Preference == nil {
		var v uint32 = 170
		t.Preference = &v
	}
	if t.PurgeTimer == nil {
		var v uint32 = 10
		t.PurgeTimer = &v
	}
	if t.RapidWithdrawal == nil {
		var v bool = false
		t.RapidWithdrawal = &v
	}
	if t.RouteTableInstall == nil {
		var v bool = true
		t.RouteTableInstall = &v
	}
	if t.RrVpnForwarding == nil {
		var v bool = false
		t.RrVpnForwarding = &v
	}
	if t.SelectiveLabelIpPrioritization == nil {
		var v bool = false
		t.SelectiveLabelIpPrioritization = &v
	}
	if t.SelectiveLabelIpv4Install == nil {
		var v bool = false
		t.SelectiveLabelIpv4Install = &v
	}
	if t.SplitHorizon == nil {
		var v bool = false
		t.SplitHorizon = &v
	}
	if t.SrPolicyImport == nil {
		var v bool = false
		t.SrPolicyImport = &v
	}
	if t.SubconfedVpnForwarding == nil {
		var v bool = false
		t.SubconfedVpnForwarding = &v
	}
	if t.ThirdPartyNexthop == nil {
		var v bool = false
		t.ThirdPartyNexthop = &v
	}
	if t.VpnApplyExport == nil {
		var v bool = false
		t.VpnApplyExport = &v
	}
	if t.VpnApplyImport == nil {
		var v bool = false
		t.VpnApplyImport = &v
	}
	t.AddPaths.PopulateDefaults()
	t.AdvertiseExternal.PopulateDefaults()
	t.AdvertiseIpv6NextHops.PopulateDefaults()
	t.BackupPath.PopulateDefaults()
	t.BestPathSelection.PopulateDefaults()
	t.BgpTunnelMetric.PopulateDefaults()
	t.Cluster.PopulateDefaults()
	t.Convergence.PopulateDefaults()
	t.DampPeerOscillations.PopulateDefaults()
	t.DefaultLabelPreference.PopulateDefaults()
	t.DefaultPreference.PopulateDefaults()
	t.EbgpDefaultRejectPolicy.PopulateDefaults()
	t.EgressPeerEngineering.PopulateDefaults()
	t.ErrorHandling.PopulateDefaults()
	t.Export.PopulateDefaults()
	t.ExtendedNhEncoding.PopulateDefaults()
	t.Family.PopulateDefaults()
	t.Flowspec.PopulateDefaults()
	t.GracefulRestart.PopulateDefaults()
	t.HoldTime.PopulateDefaults()
	t.Import.PopulateDefaults()
	t.LabelAllocation.PopulateDefaults()
	t.LocalAs.PopulateDefaults()
	t.Monitor.PopulateDefaults()
	t.Multipath.PopulateDefaults()
	t.NeighborTrust.PopulateDefaults()
	t.NextHopResolution.PopulateDefaults()
	t.OptimalRouteReflection.PopulateDefaults()
	t.OutboundRouteFiltering.PopulateDefaults()
	t.RapidUpdate.PopulateDefaults()
	t.RemovePrivate.PopulateDefaults()
	t.RibManagement.PopulateDefaults()
	t.SegmentRouting.PopulateDefaults()
	t.SegmentRoutingV6.PopulateDefaults()
	t.SendCommunities.PopulateDefaults()
	t.SendDefault.PopulateDefaults()
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
	for _, e := range t.RouteTargetList {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp.
func (*NokiaConf_Configure_Router_Bgp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_AddPaths represents the /nokia-conf/configure/router/bgp/add-paths YANG schema element.
type NokiaConf_Configure_Router_Bgp_AddPaths struct {
	Evpn         *NokiaConf_Configure_Router_Bgp_AddPaths_Evpn         `path:"evpn" module:"nokia-conf"`
	Ipv4         *NokiaConf_Configure_Router_Bgp_AddPaths_Ipv4         `path:"ipv4" module:"nokia-conf"`
	Ipv6         *NokiaConf_Configure_Router_Bgp_AddPaths_Ipv6         `path:"ipv6" module:"nokia-conf"`
	LabelIpv4    *NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv4    `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6    *NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv6    `path:"label-ipv6" module:"nokia-conf"`
	McastVpnIpv4 *NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv4 `path:"mcast-vpn-ipv4" module:"nokia-conf"`
	McastVpnIpv6 *NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv6 `path:"mcast-vpn-ipv6" module:"nokia-conf"`
	MvpnIpv4     *NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv4     `path:"mvpn-ipv4" module:"nokia-conf"`
	MvpnIpv6     *NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv6     `path:"mvpn-ipv6" module:"nokia-conf"`
	VpnIpv4      *NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv4      `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6      *NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv6      `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_AddPaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_AddPaths) IsYANGGoStruct() {}

// GetOrCreateEvpn retrieves the value of the Evpn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths) GetOrCreateEvpn() *NokiaConf_Configure_Router_Bgp_AddPaths_Evpn {
	if t.Evpn != nil {
		return t.Evpn
	}
	t.Evpn = &NokiaConf_Configure_Router_Bgp_AddPaths_Evpn{}
	return t.Evpn
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths) GetOrCreateIpv4() *NokiaConf_Configure_Router_Bgp_AddPaths_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Router_Bgp_AddPaths_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths) GetOrCreateIpv6() *NokiaConf_Configure_Router_Bgp_AddPaths_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Router_Bgp_AddPaths_Ipv6{}
	return t.Ipv6
}

// GetOrCreateLabelIpv4 retrieves the value of the LabelIpv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths) GetOrCreateLabelIpv4() *NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv4 {
	if t.LabelIpv4 != nil {
		return t.LabelIpv4
	}
	t.LabelIpv4 = &NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv4{}
	return t.LabelIpv4
}

// GetOrCreateLabelIpv6 retrieves the value of the LabelIpv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths) GetOrCreateLabelIpv6() *NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv6 {
	if t.LabelIpv6 != nil {
		return t.LabelIpv6
	}
	t.LabelIpv6 = &NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv6{}
	return t.LabelIpv6
}

// GetOrCreateMcastVpnIpv4 retrieves the value of the McastVpnIpv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths) GetOrCreateMcastVpnIpv4() *NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv4 {
	if t.McastVpnIpv4 != nil {
		return t.McastVpnIpv4
	}
	t.McastVpnIpv4 = &NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv4{}
	return t.McastVpnIpv4
}

// GetOrCreateMcastVpnIpv6 retrieves the value of the McastVpnIpv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths) GetOrCreateMcastVpnIpv6() *NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv6 {
	if t.McastVpnIpv6 != nil {
		return t.McastVpnIpv6
	}
	t.McastVpnIpv6 = &NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv6{}
	return t.McastVpnIpv6
}

// GetOrCreateMvpnIpv4 retrieves the value of the MvpnIpv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths) GetOrCreateMvpnIpv4() *NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv4 {
	if t.MvpnIpv4 != nil {
		return t.MvpnIpv4
	}
	t.MvpnIpv4 = &NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv4{}
	return t.MvpnIpv4
}

// GetOrCreateMvpnIpv6 retrieves the value of the MvpnIpv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths) GetOrCreateMvpnIpv6() *NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv6 {
	if t.MvpnIpv6 != nil {
		return t.MvpnIpv6
	}
	t.MvpnIpv6 = &NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv6{}
	return t.MvpnIpv6
}

// GetOrCreateVpnIpv4 retrieves the value of the VpnIpv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths) GetOrCreateVpnIpv4() *NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv4 {
	if t.VpnIpv4 != nil {
		return t.VpnIpv4
	}
	t.VpnIpv4 = &NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv4{}
	return t.VpnIpv4
}

// GetOrCreateVpnIpv6 retrieves the value of the VpnIpv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths) GetOrCreateVpnIpv6() *NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv6 {
	if t.VpnIpv6 != nil {
		return t.VpnIpv6
	}
	t.VpnIpv6 = &NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv6{}
	return t.VpnIpv6
}

// GetEvpn returns the value of the Evpn struct pointer
// from NokiaConf_Configure_Router_Bgp_AddPaths. If the receiver or the field Evpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths) GetEvpn() *NokiaConf_Configure_Router_Bgp_AddPaths_Evpn {
	if t != nil && t.Evpn != nil {
		return t.Evpn
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Router_Bgp_AddPaths. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths) GetIpv4() *NokiaConf_Configure_Router_Bgp_AddPaths_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Router_Bgp_AddPaths. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths) GetIpv6() *NokiaConf_Configure_Router_Bgp_AddPaths_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetLabelIpv4 returns the value of the LabelIpv4 struct pointer
// from NokiaConf_Configure_Router_Bgp_AddPaths. If the receiver or the field LabelIpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths) GetLabelIpv4() *NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv4 {
	if t != nil && t.LabelIpv4 != nil {
		return t.LabelIpv4
	}
	return nil
}

// GetLabelIpv6 returns the value of the LabelIpv6 struct pointer
// from NokiaConf_Configure_Router_Bgp_AddPaths. If the receiver or the field LabelIpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths) GetLabelIpv6() *NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv6 {
	if t != nil && t.LabelIpv6 != nil {
		return t.LabelIpv6
	}
	return nil
}

// GetMcastVpnIpv4 returns the value of the McastVpnIpv4 struct pointer
// from NokiaConf_Configure_Router_Bgp_AddPaths. If the receiver or the field McastVpnIpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths) GetMcastVpnIpv4() *NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv4 {
	if t != nil && t.McastVpnIpv4 != nil {
		return t.McastVpnIpv4
	}
	return nil
}

// GetMcastVpnIpv6 returns the value of the McastVpnIpv6 struct pointer
// from NokiaConf_Configure_Router_Bgp_AddPaths. If the receiver or the field McastVpnIpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths) GetMcastVpnIpv6() *NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv6 {
	if t != nil && t.McastVpnIpv6 != nil {
		return t.McastVpnIpv6
	}
	return nil
}

// GetMvpnIpv4 returns the value of the MvpnIpv4 struct pointer
// from NokiaConf_Configure_Router_Bgp_AddPaths. If the receiver or the field MvpnIpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths) GetMvpnIpv4() *NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv4 {
	if t != nil && t.MvpnIpv4 != nil {
		return t.MvpnIpv4
	}
	return nil
}

// GetMvpnIpv6 returns the value of the MvpnIpv6 struct pointer
// from NokiaConf_Configure_Router_Bgp_AddPaths. If the receiver or the field MvpnIpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths) GetMvpnIpv6() *NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv6 {
	if t != nil && t.MvpnIpv6 != nil {
		return t.MvpnIpv6
	}
	return nil
}

// GetVpnIpv4 returns the value of the VpnIpv4 struct pointer
// from NokiaConf_Configure_Router_Bgp_AddPaths. If the receiver or the field VpnIpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths) GetVpnIpv4() *NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv4 {
	if t != nil && t.VpnIpv4 != nil {
		return t.VpnIpv4
	}
	return nil
}

// GetVpnIpv6 returns the value of the VpnIpv6 struct pointer
// from NokiaConf_Configure_Router_Bgp_AddPaths. If the receiver or the field VpnIpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths) GetVpnIpv6() *NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv6 {
	if t != nil && t.VpnIpv6 != nil {
		return t.VpnIpv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_AddPaths
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Evpn.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	t.LabelIpv4.PopulateDefaults()
	t.LabelIpv6.PopulateDefaults()
	t.McastVpnIpv4.PopulateDefaults()
	t.McastVpnIpv6.PopulateDefaults()
	t.MvpnIpv4.PopulateDefaults()
	t.MvpnIpv6.PopulateDefaults()
	t.VpnIpv4.PopulateDefaults()
	t.VpnIpv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_AddPaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_AddPaths.
func (*NokiaConf_Configure_Router_Bgp_AddPaths) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_AddPaths_Evpn represents the /nokia-conf/configure/router/bgp/add-paths/evpn YANG schema element.
type NokiaConf_Configure_Router_Bgp_AddPaths_Evpn struct {
	Receive *bool                                                   `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Router_Bgp_AddPaths_Evpn_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_AddPaths_Evpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_AddPaths_Evpn) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Bgp_AddPaths_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_Evpn) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Bgp_AddPaths_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_Evpn) GetSend() NokiaConf_Configure_Router_Bgp_AddPaths_Evpn_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_AddPaths_Evpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_Evpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_Evpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_AddPaths_Evpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_Evpn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_Evpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_AddPaths_Evpn.
func (*NokiaConf_Configure_Router_Bgp_AddPaths_Evpn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_AddPaths_Ipv4 represents the /nokia-conf/configure/router/bgp/add-paths/ipv4 YANG schema element.
type NokiaConf_Configure_Router_Bgp_AddPaths_Ipv4 struct {
	Receive *bool                                                   `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Router_Bgp_AddPaths_Ipv4_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_AddPaths_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_AddPaths_Ipv4) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Bgp_AddPaths_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_Ipv4) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Bgp_AddPaths_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_Ipv4) GetSend() NokiaConf_Configure_Router_Bgp_AddPaths_Ipv4_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_AddPaths_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_AddPaths_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_AddPaths_Ipv4.
func (*NokiaConf_Configure_Router_Bgp_AddPaths_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_AddPaths_Ipv6 represents the /nokia-conf/configure/router/bgp/add-paths/ipv6 YANG schema element.
type NokiaConf_Configure_Router_Bgp_AddPaths_Ipv6 struct {
	Receive *bool                                                   `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Router_Bgp_AddPaths_Ipv6_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_AddPaths_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_AddPaths_Ipv6) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Bgp_AddPaths_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_Ipv6) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Bgp_AddPaths_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_Ipv6) GetSend() NokiaConf_Configure_Router_Bgp_AddPaths_Ipv6_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_AddPaths_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_AddPaths_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_AddPaths_Ipv6.
func (*NokiaConf_Configure_Router_Bgp_AddPaths_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv4 represents the /nokia-conf/configure/router/bgp/add-paths/label-ipv4 YANG schema element.
type NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv4 struct {
	Receive *bool                                                        `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv4_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv4) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv4) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv4) GetSend() NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv4_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv4.
func (*NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv6 represents the /nokia-conf/configure/router/bgp/add-paths/label-ipv6 YANG schema element.
type NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv6 struct {
	Receive *bool                                                        `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv6_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv6) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv6) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv6) GetSend() NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv6_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv6.
func (*NokiaConf_Configure_Router_Bgp_AddPaths_LabelIpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv4 represents the /nokia-conf/configure/router/bgp/add-paths/mcast-vpn-ipv4 YANG schema element.
type NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv4 struct {
	Receive *bool  `path:"receive" module:"nokia-conf"`
	Send    *int32 `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv4) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv4) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv4) GetSend() int32 {
	if t == nil || t.Send == nil {
		return 0
	}
	return *t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv4.
func (*NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv6 represents the /nokia-conf/configure/router/bgp/add-paths/mcast-vpn-ipv6 YANG schema element.
type NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv6 struct {
	Receive *bool  `path:"receive" module:"nokia-conf"`
	Send    *int32 `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv6) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv6) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv6) GetSend() int32 {
	if t == nil || t.Send == nil {
		return 0
	}
	return *t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv6.
func (*NokiaConf_Configure_Router_Bgp_AddPaths_McastVpnIpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv4 represents the /nokia-conf/configure/router/bgp/add-paths/mvpn-ipv4 YANG schema element.
type NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv4 struct {
	Receive *bool  `path:"receive" module:"nokia-conf"`
	Send    *int32 `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv4) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv4) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv4) GetSend() int32 {
	if t == nil || t.Send == nil {
		return 0
	}
	return *t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv4.
func (*NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv6 represents the /nokia-conf/configure/router/bgp/add-paths/mvpn-ipv6 YANG schema element.
type NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv6 struct {
	Receive *bool  `path:"receive" module:"nokia-conf"`
	Send    *int32 `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv6) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv6) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv6) GetSend() int32 {
	if t == nil || t.Send == nil {
		return 0
	}
	return *t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv6.
func (*NokiaConf_Configure_Router_Bgp_AddPaths_MvpnIpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv4 represents the /nokia-conf/configure/router/bgp/add-paths/vpn-ipv4 YANG schema element.
type NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv4 struct {
	Receive *bool                                                      `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv4_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv4) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv4) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv4) GetSend() NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv4_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv4.
func (*NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv6 represents the /nokia-conf/configure/router/bgp/add-paths/vpn-ipv6 YANG schema element.
type NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv6 struct {
	Receive *bool                                                      `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv6_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv6) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv6) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv6) GetSend() NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv6_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv6.
func (*NokiaConf_Configure_Router_Bgp_AddPaths_VpnIpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_AdvertiseExternal represents the /nokia-conf/configure/router/bgp/advertise-external YANG schema element.
type NokiaConf_Configure_Router_Bgp_AdvertiseExternal struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_AdvertiseExternal implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_AdvertiseExternal) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Router_Bgp_AdvertiseExternal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_AdvertiseExternal) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Router_Bgp_AdvertiseExternal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_AdvertiseExternal) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Router_Bgp_AdvertiseExternal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_AdvertiseExternal) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Router_Bgp_AdvertiseExternal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_AdvertiseExternal) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_AdvertiseExternal
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_AdvertiseExternal) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_AdvertiseExternal) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_AdvertiseExternal"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_AdvertiseExternal) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_AdvertiseExternal) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_AdvertiseExternal.
func (*NokiaConf_Configure_Router_Bgp_AdvertiseExternal) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_AdvertiseIpv6NextHops represents the /nokia-conf/configure/router/bgp/advertise-ipv6-next-hops YANG schema element.
type NokiaConf_Configure_Router_Bgp_AdvertiseIpv6NextHops struct {
	Evpn      *bool `path:"evpn" module:"nokia-conf"`
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
	VpnIpv4   *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6   *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_AdvertiseIpv6NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_AdvertiseIpv6NextHops) IsYANGGoStruct() {}

// GetEvpn retrieves the value of the leaf Evpn from the NokiaConf_Configure_Router_Bgp_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Evpn is set, it can
// safely use t.GetEvpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Evpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_AdvertiseIpv6NextHops) GetEvpn() bool {
	if t == nil || t.Evpn == nil {
		return false
	}
	return *t.Evpn
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Router_Bgp_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_AdvertiseIpv6NextHops) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Router_Bgp_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_AdvertiseIpv6NextHops) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Router_Bgp_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_AdvertiseIpv6NextHops) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Router_Bgp_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_AdvertiseIpv6NextHops) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Router_Bgp_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_AdvertiseIpv6NextHops) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_AdvertiseIpv6NextHops
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_AdvertiseIpv6NextHops) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Evpn == nil {
		var v bool = false
		t.Evpn = &v
	}
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_AdvertiseIpv6NextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_AdvertiseIpv6NextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_AdvertiseIpv6NextHops) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_AdvertiseIpv6NextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_AdvertiseIpv6NextHops.
func (*NokiaConf_Configure_Router_Bgp_AdvertiseIpv6NextHops) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_BackupPath represents the /nokia-conf/configure/router/bgp/backup-path YANG schema element.
type NokiaConf_Configure_Router_Bgp_BackupPath struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_BackupPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_BackupPath) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Router_Bgp_BackupPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_BackupPath) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Router_Bgp_BackupPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_BackupPath) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Router_Bgp_BackupPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_BackupPath) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Router_Bgp_BackupPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_BackupPath) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_BackupPath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_BackupPath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_BackupPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_BackupPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_BackupPath) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_BackupPath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_BackupPath.
func (*NokiaConf_Configure_Router_Bgp_BackupPath) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_BestPathSelection represents the /nokia-conf/configure/router/bgp/best-path-selection YANG schema element.
type NokiaConf_Configure_Router_Bgp_BestPathSelection struct {
	AlwaysCompareMed             *NokiaConf_Configure_Router_Bgp_BestPathSelection_AlwaysCompareMed `path:"always-compare-med" module:"nokia-conf"`
	AsPathIgnore                 *NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore     `path:"as-path-ignore" module:"nokia-conf"`
	CompareOriginValidationState *bool                                                              `path:"compare-origin-validation-state" module:"nokia-conf"`
	DPathLengthIgnore            *bool                                                              `path:"d-path-length-ignore" module:"nokia-conf"`
	DeterministicMed             *bool                                                              `path:"deterministic-med" module:"nokia-conf"`
	EbgpIbgpEqual                *NokiaConf_Configure_Router_Bgp_BestPathSelection_EbgpIbgpEqual    `path:"ebgp-ibgp-equal" module:"nokia-conf"`
	IgnoreNhMetric               *bool                                                              `path:"ignore-nh-metric" module:"nokia-conf"`
	IgnoreRouterId               *NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId   `path:"ignore-router-id" module:"nokia-conf" yangPresence:"true"`
	OriginInvalidUnusable        *bool                                                              `path:"origin-invalid-unusable" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_BestPathSelection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_BestPathSelection) IsYANGGoStruct() {}

// GetOrCreateAlwaysCompareMed retrieves the value of the AlwaysCompareMed field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection) GetOrCreateAlwaysCompareMed() *NokiaConf_Configure_Router_Bgp_BestPathSelection_AlwaysCompareMed {
	if t.AlwaysCompareMed != nil {
		return t.AlwaysCompareMed
	}
	t.AlwaysCompareMed = &NokiaConf_Configure_Router_Bgp_BestPathSelection_AlwaysCompareMed{}
	return t.AlwaysCompareMed
}

// GetOrCreateAsPathIgnore retrieves the value of the AsPathIgnore field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection) GetOrCreateAsPathIgnore() *NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore {
	if t.AsPathIgnore != nil {
		return t.AsPathIgnore
	}
	t.AsPathIgnore = &NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore{}
	return t.AsPathIgnore
}

// GetOrCreateEbgpIbgpEqual retrieves the value of the EbgpIbgpEqual field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection) GetOrCreateEbgpIbgpEqual() *NokiaConf_Configure_Router_Bgp_BestPathSelection_EbgpIbgpEqual {
	if t.EbgpIbgpEqual != nil {
		return t.EbgpIbgpEqual
	}
	t.EbgpIbgpEqual = &NokiaConf_Configure_Router_Bgp_BestPathSelection_EbgpIbgpEqual{}
	return t.EbgpIbgpEqual
}

// GetOrCreateIgnoreRouterId retrieves the value of the IgnoreRouterId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection) GetOrCreateIgnoreRouterId() *NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId {
	if t.IgnoreRouterId != nil {
		return t.IgnoreRouterId
	}
	t.IgnoreRouterId = &NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId{}
	return t.IgnoreRouterId
}

// GetAlwaysCompareMed returns the value of the AlwaysCompareMed struct pointer
// from NokiaConf_Configure_Router_Bgp_BestPathSelection. If the receiver or the field AlwaysCompareMed is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection) GetAlwaysCompareMed() *NokiaConf_Configure_Router_Bgp_BestPathSelection_AlwaysCompareMed {
	if t != nil && t.AlwaysCompareMed != nil {
		return t.AlwaysCompareMed
	}
	return nil
}

// GetAsPathIgnore returns the value of the AsPathIgnore struct pointer
// from NokiaConf_Configure_Router_Bgp_BestPathSelection. If the receiver or the field AsPathIgnore is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection) GetAsPathIgnore() *NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore {
	if t != nil && t.AsPathIgnore != nil {
		return t.AsPathIgnore
	}
	return nil
}

// GetEbgpIbgpEqual returns the value of the EbgpIbgpEqual struct pointer
// from NokiaConf_Configure_Router_Bgp_BestPathSelection. If the receiver or the field EbgpIbgpEqual is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection) GetEbgpIbgpEqual() *NokiaConf_Configure_Router_Bgp_BestPathSelection_EbgpIbgpEqual {
	if t != nil && t.EbgpIbgpEqual != nil {
		return t.EbgpIbgpEqual
	}
	return nil
}

// GetIgnoreRouterId returns the value of the IgnoreRouterId struct pointer
// from NokiaConf_Configure_Router_Bgp_BestPathSelection. If the receiver or the field IgnoreRouterId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection) GetIgnoreRouterId() *NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId {
	if t != nil && t.IgnoreRouterId != nil {
		return t.IgnoreRouterId
	}
	return nil
}

// GetCompareOriginValidationState retrieves the value of the leaf CompareOriginValidationState from the NokiaConf_Configure_Router_Bgp_BestPathSelection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CompareOriginValidationState is set, it can
// safely use t.GetCompareOriginValidationState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CompareOriginValidationState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection) GetCompareOriginValidationState() bool {
	if t == nil || t.CompareOriginValidationState == nil {
		return false
	}
	return *t.CompareOriginValidationState
}

// GetDPathLengthIgnore retrieves the value of the leaf DPathLengthIgnore from the NokiaConf_Configure_Router_Bgp_BestPathSelection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DPathLengthIgnore is set, it can
// safely use t.GetDPathLengthIgnore() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DPathLengthIgnore == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection) GetDPathLengthIgnore() bool {
	if t == nil || t.DPathLengthIgnore == nil {
		return false
	}
	return *t.DPathLengthIgnore
}

// GetDeterministicMed retrieves the value of the leaf DeterministicMed from the NokiaConf_Configure_Router_Bgp_BestPathSelection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeterministicMed is set, it can
// safely use t.GetDeterministicMed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeterministicMed == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection) GetDeterministicMed() bool {
	if t == nil || t.DeterministicMed == nil {
		return false
	}
	return *t.DeterministicMed
}

// GetIgnoreNhMetric retrieves the value of the leaf IgnoreNhMetric from the NokiaConf_Configure_Router_Bgp_BestPathSelection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreNhMetric is set, it can
// safely use t.GetIgnoreNhMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreNhMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection) GetIgnoreNhMetric() bool {
	if t == nil || t.IgnoreNhMetric == nil {
		return false
	}
	return *t.IgnoreNhMetric
}

// GetOriginInvalidUnusable retrieves the value of the leaf OriginInvalidUnusable from the NokiaConf_Configure_Router_Bgp_BestPathSelection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginInvalidUnusable is set, it can
// safely use t.GetOriginInvalidUnusable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginInvalidUnusable == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection) GetOriginInvalidUnusable() bool {
	if t == nil || t.OriginInvalidUnusable == nil {
		return false
	}
	return *t.OriginInvalidUnusable
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_BestPathSelection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CompareOriginValidationState == nil {
		var v bool = false
		t.CompareOriginValidationState = &v
	}
	if t.DPathLengthIgnore == nil {
		var v bool = false
		t.DPathLengthIgnore = &v
	}
	if t.DeterministicMed == nil {
		var v bool = false
		t.DeterministicMed = &v
	}
	if t.IgnoreNhMetric == nil {
		var v bool = false
		t.IgnoreNhMetric = &v
	}
	if t.OriginInvalidUnusable == nil {
		var v bool = false
		t.OriginInvalidUnusable = &v
	}
	t.AlwaysCompareMed.PopulateDefaults()
	t.AsPathIgnore.PopulateDefaults()
	t.EbgpIbgpEqual.PopulateDefaults()
	t.IgnoreRouterId.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_BestPathSelection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_BestPathSelection.
func (*NokiaConf_Configure_Router_Bgp_BestPathSelection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_BestPathSelection_AlwaysCompareMed represents the /nokia-conf/configure/router/bgp/best-path-selection/always-compare-med YANG schema element.
type NokiaConf_Configure_Router_Bgp_BestPathSelection_AlwaysCompareMed struct {
	MedValue E_NokiaTypesBgp_MedValue `path:"med-value" module:"nokia-conf"`
	StrictAs *bool                    `path:"strict-as" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_BestPathSelection_AlwaysCompareMed implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_BestPathSelection_AlwaysCompareMed) IsYANGGoStruct() {}

// GetMedValue retrieves the value of the leaf MedValue from the NokiaConf_Configure_Router_Bgp_BestPathSelection_AlwaysCompareMed
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MedValue is set, it can
// safely use t.GetMedValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MedValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_AlwaysCompareMed) GetMedValue() E_NokiaTypesBgp_MedValue {
	if t == nil || t.MedValue == 0 {
		return NokiaTypesBgp_MedValue_off
	}
	return t.MedValue
}

// GetStrictAs retrieves the value of the leaf StrictAs from the NokiaConf_Configure_Router_Bgp_BestPathSelection_AlwaysCompareMed
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StrictAs is set, it can
// safely use t.GetStrictAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StrictAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_AlwaysCompareMed) GetStrictAs() bool {
	if t == nil || t.StrictAs == nil {
		return true
	}
	return *t.StrictAs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_BestPathSelection_AlwaysCompareMed
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_AlwaysCompareMed) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MedValue == 0 {
		t.MedValue = NokiaTypesBgp_MedValue_off
	}
	if t.StrictAs == nil {
		var v bool = true
		t.StrictAs = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_AlwaysCompareMed) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_BestPathSelection_AlwaysCompareMed"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_AlwaysCompareMed) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_AlwaysCompareMed) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_BestPathSelection_AlwaysCompareMed.
func (*NokiaConf_Configure_Router_Bgp_BestPathSelection_AlwaysCompareMed) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore represents the /nokia-conf/configure/router/bgp/best-path-selection/as-path-ignore YANG schema element.
type NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	L2Vpn     *bool `path:"l2-vpn" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
	McastIpv4 *bool `path:"mcast-ipv4" module:"nokia-conf"`
	McastIpv6 *bool `path:"mcast-ipv6" module:"nokia-conf"`
	MvpnIpv4  *bool `path:"mvpn-ipv4" module:"nokia-conf"`
	MvpnIpv6  *bool `path:"mvpn-ipv6" module:"nokia-conf"`
	VpnIpv4   *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6   *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetL2Vpn retrieves the value of the leaf L2Vpn from the NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2Vpn is set, it can
// safely use t.GetL2Vpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2Vpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore) GetL2Vpn() bool {
	if t == nil || t.L2Vpn == nil {
		return false
	}
	return *t.L2Vpn
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetMcastIpv4 retrieves the value of the leaf McastIpv4 from the NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastIpv4 is set, it can
// safely use t.GetMcastIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore) GetMcastIpv4() bool {
	if t == nil || t.McastIpv4 == nil {
		return false
	}
	return *t.McastIpv4
}

// GetMcastIpv6 retrieves the value of the leaf McastIpv6 from the NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastIpv6 is set, it can
// safely use t.GetMcastIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore) GetMcastIpv6() bool {
	if t == nil || t.McastIpv6 == nil {
		return false
	}
	return *t.McastIpv6
}

// GetMvpnIpv4 retrieves the value of the leaf MvpnIpv4 from the NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MvpnIpv4 is set, it can
// safely use t.GetMvpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MvpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore) GetMvpnIpv4() bool {
	if t == nil || t.MvpnIpv4 == nil {
		return false
	}
	return *t.MvpnIpv4
}

// GetMvpnIpv6 retrieves the value of the leaf MvpnIpv6 from the NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MvpnIpv6 is set, it can
// safely use t.GetMvpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MvpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore) GetMvpnIpv6() bool {
	if t == nil || t.MvpnIpv6 == nil {
		return false
	}
	return *t.MvpnIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.L2Vpn == nil {
		var v bool = false
		t.L2Vpn = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.McastIpv4 == nil {
		var v bool = false
		t.McastIpv4 = &v
	}
	if t.McastIpv6 == nil {
		var v bool = false
		t.McastIpv6 = &v
	}
	if t.MvpnIpv4 == nil {
		var v bool = false
		t.MvpnIpv4 = &v
	}
	if t.MvpnIpv6 == nil {
		var v bool = false
		t.MvpnIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore.
func (*NokiaConf_Configure_Router_Bgp_BestPathSelection_AsPathIgnore) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_BestPathSelection_EbgpIbgpEqual represents the /nokia-conf/configure/router/bgp/best-path-selection/ebgp-ibgp-equal YANG schema element.
type NokiaConf_Configure_Router_Bgp_BestPathSelection_EbgpIbgpEqual struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
	VpnIpv4   *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6   *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_BestPathSelection_EbgpIbgpEqual implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_BestPathSelection_EbgpIbgpEqual) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Router_Bgp_BestPathSelection_EbgpIbgpEqual
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_EbgpIbgpEqual) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Router_Bgp_BestPathSelection_EbgpIbgpEqual
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_EbgpIbgpEqual) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Router_Bgp_BestPathSelection_EbgpIbgpEqual
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_EbgpIbgpEqual) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Router_Bgp_BestPathSelection_EbgpIbgpEqual
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_EbgpIbgpEqual) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Router_Bgp_BestPathSelection_EbgpIbgpEqual
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_EbgpIbgpEqual) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Router_Bgp_BestPathSelection_EbgpIbgpEqual
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_EbgpIbgpEqual) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_BestPathSelection_EbgpIbgpEqual
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_EbgpIbgpEqual) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_EbgpIbgpEqual) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_BestPathSelection_EbgpIbgpEqual"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_EbgpIbgpEqual) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_EbgpIbgpEqual) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_BestPathSelection_EbgpIbgpEqual.
func (*NokiaConf_Configure_Router_Bgp_BestPathSelection_EbgpIbgpEqual) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId represents the /nokia-conf/configure/router/bgp/best-path-selection/ignore-router-id YANG schema element.
type NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId struct {
	IncludeInternal *NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal `path:"include-internal" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId) IsYANGGoStruct() {}

// GetOrCreateIncludeInternal retrieves the value of the IncludeInternal field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId) GetOrCreateIncludeInternal() *NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal {
	if t.IncludeInternal != nil {
		return t.IncludeInternal
	}
	t.IncludeInternal = &NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal{}
	return t.IncludeInternal
}

// GetIncludeInternal returns the value of the IncludeInternal struct pointer
// from NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId. If the receiver or the field IncludeInternal is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId) GetIncludeInternal() *NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal {
	if t != nil && t.IncludeInternal != nil {
		return t.IncludeInternal
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IncludeInternal.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId.
func (*NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal represents the /nokia-conf/configure/router/bgp/best-path-selection/ignore-router-id/include-internal YANG schema element.
type NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal struct {
	MvpnIpv4 *bool `path:"mvpn-ipv4" module:"nokia-conf"`
	MvpnIpv6 *bool `path:"mvpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal) IsYANGGoStruct() {
}

// GetMvpnIpv4 retrieves the value of the leaf MvpnIpv4 from the NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MvpnIpv4 is set, it can
// safely use t.GetMvpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MvpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal) GetMvpnIpv4() bool {
	if t == nil || t.MvpnIpv4 == nil {
		return false
	}
	return *t.MvpnIpv4
}

// GetMvpnIpv6 retrieves the value of the leaf MvpnIpv6 from the NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MvpnIpv6 is set, it can
// safely use t.GetMvpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MvpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal) GetMvpnIpv6() bool {
	if t == nil || t.MvpnIpv6 == nil {
		return false
	}
	return *t.MvpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MvpnIpv4 == nil {
		var v bool = false
		t.MvpnIpv4 = &v
	}
	if t.MvpnIpv6 == nil {
		var v bool = false
		t.MvpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal.
func (*NokiaConf_Configure_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_BgpTunnelMetric represents the /nokia-conf/configure/router/bgp/bgp-tunnel-metric YANG schema element.
type NokiaConf_Configure_Router_Bgp_BgpTunnelMetric struct {
	PreferAigp *bool   `path:"prefer-aigp" module:"nokia-conf"`
	Value      *uint32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_BgpTunnelMetric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_BgpTunnelMetric) IsYANGGoStruct() {}

// GetPreferAigp retrieves the value of the leaf PreferAigp from the NokiaConf_Configure_Router_Bgp_BgpTunnelMetric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferAigp is set, it can
// safely use t.GetPreferAigp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferAigp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_BgpTunnelMetric) GetPreferAigp() bool {
	if t == nil || t.PreferAigp == nil {
		return false
	}
	return *t.PreferAigp
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Router_Bgp_BgpTunnelMetric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_BgpTunnelMetric) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 1000
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_BgpTunnelMetric
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_BgpTunnelMetric) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PreferAigp == nil {
		var v bool = false
		t.PreferAigp = &v
	}
	if t.Value == nil {
		var v uint32 = 1000
		t.Value = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_BgpTunnelMetric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_BgpTunnelMetric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_BgpTunnelMetric) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_BgpTunnelMetric) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_BgpTunnelMetric.
func (*NokiaConf_Configure_Router_Bgp_BgpTunnelMetric) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Cluster represents the /nokia-conf/configure/router/bgp/cluster YANG schema element.
type NokiaConf_Configure_Router_Bgp_Cluster struct {
	AllowLocalFallback *bool   `path:"allow-local-fallback" module:"nokia-conf"`
	ClusterId          *string `path:"cluster-id" module:"nokia-conf"`
	OrrLocation        *uint32 `path:"orr-location" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Cluster implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Cluster) IsYANGGoStruct() {}

// GetAllowLocalFallback retrieves the value of the leaf AllowLocalFallback from the NokiaConf_Configure_Router_Bgp_Cluster
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowLocalFallback is set, it can
// safely use t.GetAllowLocalFallback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowLocalFallback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Cluster) GetAllowLocalFallback() bool {
	if t == nil || t.AllowLocalFallback == nil {
		return false
	}
	return *t.AllowLocalFallback
}

// GetClusterId retrieves the value of the leaf ClusterId from the NokiaConf_Configure_Router_Bgp_Cluster
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClusterId is set, it can
// safely use t.GetClusterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClusterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Cluster) GetClusterId() string {
	if t == nil || t.ClusterId == nil {
		return ""
	}
	return *t.ClusterId
}

// GetOrrLocation retrieves the value of the leaf OrrLocation from the NokiaConf_Configure_Router_Bgp_Cluster
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OrrLocation is set, it can
// safely use t.GetOrrLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OrrLocation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Cluster) GetOrrLocation() uint32 {
	if t == nil || t.OrrLocation == nil {
		return 0
	}
	return *t.OrrLocation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Cluster
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Cluster) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowLocalFallback == nil {
		var v bool = false
		t.AllowLocalFallback = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Cluster) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Cluster"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Cluster) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Cluster) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Cluster.
func (*NokiaConf_Configure_Router_Bgp_Cluster) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Convergence represents the /nokia-conf/configure/router/bgp/convergence YANG schema element.
type NokiaConf_Configure_Router_Bgp_Convergence struct {
	Family             map[E_NokiaConf_Configure_Router_Bgp_Convergence_Family_FamilyType]*NokiaConf_Configure_Router_Bgp_Convergence_Family `path:"family" module:"nokia-conf"`
	MinWaitToAdvertise *uint32                                                                                                               `path:"min-wait-to-advertise" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Convergence implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Convergence) IsYANGGoStruct() {}

// NewFamily creates a new entry in the Family list of the
// NokiaConf_Configure_Router_Bgp_Convergence struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Bgp_Convergence) NewFamily(FamilyType E_NokiaConf_Configure_Router_Bgp_Convergence_Family_FamilyType) (*NokiaConf_Configure_Router_Bgp_Convergence_Family, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[E_NokiaConf_Configure_Router_Bgp_Convergence_Family_FamilyType]*NokiaConf_Configure_Router_Bgp_Convergence_Family)
	}

	key := FamilyType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Family[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Family", key)
	}

	t.Family[key] = &NokiaConf_Configure_Router_Bgp_Convergence_Family{
		FamilyType: FamilyType,
	}

	return t.Family[key], nil
}

// RenameFamily renames an entry in the list Family within
// the NokiaConf_Configure_Router_Bgp_Convergence struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Bgp_Convergence) RenameFamily(oldK, newK E_NokiaConf_Configure_Router_Bgp_Convergence_Family_FamilyType) error {
	if _, ok := t.Family[newK]; ok {
		return fmt.Errorf("key %v already exists in Family", newK)
	}

	e, ok := t.Family[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Family", oldK)
	}
	e.FamilyType = newK

	t.Family[newK] = e
	delete(t.Family, oldK)
	return nil
}

// GetOrCreateFamily retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_Convergence. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Bgp_Convergence) GetOrCreateFamily(FamilyType E_NokiaConf_Configure_Router_Bgp_Convergence_Family_FamilyType) *NokiaConf_Configure_Router_Bgp_Convergence_Family {

	key := FamilyType

	if v, ok := t.Family[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFamily(FamilyType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFamily got unexpected error: %v", err))
	}
	return v
}

// GetFamily retrieves the value with the specified key from
// the Family map field of NokiaConf_Configure_Router_Bgp_Convergence. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Convergence) GetFamily(FamilyType E_NokiaConf_Configure_Router_Bgp_Convergence_Family_FamilyType) *NokiaConf_Configure_Router_Bgp_Convergence_Family {

	if t == nil {
		return nil
	}

	key := FamilyType

	if lm, ok := t.Family[key]; ok {
		return lm
	}
	return nil
}

// DeleteFamily deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_Convergence. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Bgp_Convergence) DeleteFamily(FamilyType E_NokiaConf_Configure_Router_Bgp_Convergence_Family_FamilyType) {
	key := FamilyType

	delete(t.Family, key)
}

// AppendFamily appends the supplied NokiaConf_Configure_Router_Bgp_Convergence_Family struct to the
// list Family of NokiaConf_Configure_Router_Bgp_Convergence. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Bgp_Convergence_Family already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Bgp_Convergence) AppendFamily(v *NokiaConf_Configure_Router_Bgp_Convergence_Family) error {
	key := v.FamilyType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[E_NokiaConf_Configure_Router_Bgp_Convergence_Family_FamilyType]*NokiaConf_Configure_Router_Bgp_Convergence_Family)
	}

	if _, ok := t.Family[key]; ok {
		return fmt.Errorf("duplicate key for list Family %v", key)
	}

	t.Family[key] = v
	return nil
}

// GetMinWaitToAdvertise retrieves the value of the leaf MinWaitToAdvertise from the NokiaConf_Configure_Router_Bgp_Convergence
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinWaitToAdvertise is set, it can
// safely use t.GetMinWaitToAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinWaitToAdvertise == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Convergence) GetMinWaitToAdvertise() uint32 {
	if t == nil || t.MinWaitToAdvertise == nil {
		return 0
	}
	return *t.MinWaitToAdvertise
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Convergence
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Convergence) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MinWaitToAdvertise == nil {
		var v uint32 = 0
		t.MinWaitToAdvertise = &v
	}
	for _, e := range t.Family {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Convergence) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Convergence"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Convergence) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Convergence) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Convergence.
func (*NokiaConf_Configure_Router_Bgp_Convergence) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Convergence_Family represents the /nokia-conf/configure/router/bgp/convergence/family YANG schema element.
type NokiaConf_Configure_Router_Bgp_Convergence_Family struct {
	ApplyGroups        []string                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	FamilyType         E_NokiaConf_Configure_Router_Bgp_Convergence_Family_FamilyType `path:"family-type" module:"nokia-conf"`
	MaxWaitToAdvertise *uint32                                                        `path:"max-wait-to-advertise" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Convergence_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Convergence_Family) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bgp_Convergence_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Convergence_Family) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bgp_Convergence_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Convergence_Family) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFamilyType retrieves the value of the leaf FamilyType from the NokiaConf_Configure_Router_Bgp_Convergence_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FamilyType is set, it can
// safely use t.GetFamilyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FamilyType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Convergence_Family) GetFamilyType() E_NokiaConf_Configure_Router_Bgp_Convergence_Family_FamilyType {
	if t == nil || t.FamilyType == 0 {
		return 0
	}
	return t.FamilyType
}

// GetMaxWaitToAdvertise retrieves the value of the leaf MaxWaitToAdvertise from the NokiaConf_Configure_Router_Bgp_Convergence_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxWaitToAdvertise is set, it can
// safely use t.GetMaxWaitToAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxWaitToAdvertise == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Convergence_Family) GetMaxWaitToAdvertise() uint32 {
	if t == nil || t.MaxWaitToAdvertise == nil {
		return 0
	}
	return *t.MaxWaitToAdvertise
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Convergence_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Convergence_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxWaitToAdvertise == nil {
		var v uint32 = 0
		t.MaxWaitToAdvertise = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Bgp_Convergence_Family struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Bgp_Convergence_Family) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"family-type": t.FamilyType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Convergence_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Convergence_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Convergence_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Convergence_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Convergence_Family.
func (*NokiaConf_Configure_Router_Bgp_Convergence_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_DampPeerOscillations represents the /nokia-conf/configure/router/bgp/damp-peer-oscillations YANG schema element.
type NokiaConf_Configure_Router_Bgp_DampPeerOscillations struct {
	ErrorInterval *uint32                                                           `path:"error-interval" module:"nokia-conf"`
	IdleHoldTime  *NokiaConf_Configure_Router_Bgp_DampPeerOscillations_IdleHoldTime `path:"idle-hold-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_DampPeerOscillations implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_DampPeerOscillations) IsYANGGoStruct() {}

// GetOrCreateIdleHoldTime retrieves the value of the IdleHoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_DampPeerOscillations) GetOrCreateIdleHoldTime() *NokiaConf_Configure_Router_Bgp_DampPeerOscillations_IdleHoldTime {
	if t.IdleHoldTime != nil {
		return t.IdleHoldTime
	}
	t.IdleHoldTime = &NokiaConf_Configure_Router_Bgp_DampPeerOscillations_IdleHoldTime{}
	return t.IdleHoldTime
}

// GetIdleHoldTime returns the value of the IdleHoldTime struct pointer
// from NokiaConf_Configure_Router_Bgp_DampPeerOscillations. If the receiver or the field IdleHoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_DampPeerOscillations) GetIdleHoldTime() *NokiaConf_Configure_Router_Bgp_DampPeerOscillations_IdleHoldTime {
	if t != nil && t.IdleHoldTime != nil {
		return t.IdleHoldTime
	}
	return nil
}

// GetErrorInterval retrieves the value of the leaf ErrorInterval from the NokiaConf_Configure_Router_Bgp_DampPeerOscillations
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ErrorInterval is set, it can
// safely use t.GetErrorInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ErrorInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_DampPeerOscillations) GetErrorInterval() uint32 {
	if t == nil || t.ErrorInterval == nil {
		return 30
	}
	return *t.ErrorInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_DampPeerOscillations
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_DampPeerOscillations) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ErrorInterval == nil {
		var v uint32 = 30
		t.ErrorInterval = &v
	}
	t.IdleHoldTime.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_DampPeerOscillations) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_DampPeerOscillations"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_DampPeerOscillations) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_DampPeerOscillations) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_DampPeerOscillations.
func (*NokiaConf_Configure_Router_Bgp_DampPeerOscillations) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_DampPeerOscillations_IdleHoldTime represents the /nokia-conf/configure/router/bgp/damp-peer-oscillations/idle-hold-time YANG schema element.
type NokiaConf_Configure_Router_Bgp_DampPeerOscillations_IdleHoldTime struct {
	InitialWait *uint32 `path:"initial-wait" module:"nokia-conf"`
	MaxWait     *uint32 `path:"max-wait" module:"nokia-conf"`
	SecondWait  *uint32 `path:"second-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_DampPeerOscillations_IdleHoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_DampPeerOscillations_IdleHoldTime) IsYANGGoStruct() {}

// GetInitialWait retrieves the value of the leaf InitialWait from the NokiaConf_Configure_Router_Bgp_DampPeerOscillations_IdleHoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialWait is set, it can
// safely use t.GetInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_DampPeerOscillations_IdleHoldTime) GetInitialWait() uint32 {
	if t == nil || t.InitialWait == nil {
		return 0
	}
	return *t.InitialWait
}

// GetMaxWait retrieves the value of the leaf MaxWait from the NokiaConf_Configure_Router_Bgp_DampPeerOscillations_IdleHoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxWait is set, it can
// safely use t.GetMaxWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_DampPeerOscillations_IdleHoldTime) GetMaxWait() uint32 {
	if t == nil || t.MaxWait == nil {
		return 60
	}
	return *t.MaxWait
}

// GetSecondWait retrieves the value of the leaf SecondWait from the NokiaConf_Configure_Router_Bgp_DampPeerOscillations_IdleHoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondWait is set, it can
// safely use t.GetSecondWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_DampPeerOscillations_IdleHoldTime) GetSecondWait() uint32 {
	if t == nil || t.SecondWait == nil {
		return 5
	}
	return *t.SecondWait
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_DampPeerOscillations_IdleHoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_DampPeerOscillations_IdleHoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitialWait == nil {
		var v uint32 = 0
		t.InitialWait = &v
	}
	if t.MaxWait == nil {
		var v uint32 = 60
		t.MaxWait = &v
	}
	if t.SecondWait == nil {
		var v uint32 = 5
		t.SecondWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_DampPeerOscillations_IdleHoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_DampPeerOscillations_IdleHoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_DampPeerOscillations_IdleHoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_DampPeerOscillations_IdleHoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_DampPeerOscillations_IdleHoldTime.
func (*NokiaConf_Configure_Router_Bgp_DampPeerOscillations_IdleHoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_DefaultLabelPreference represents the /nokia-conf/configure/router/bgp/default-label-preference YANG schema element.
type NokiaConf_Configure_Router_Bgp_DefaultLabelPreference struct {
	Ebgp *uint32 `path:"ebgp" module:"nokia-conf"`
	Ibgp *uint32 `path:"ibgp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_DefaultLabelPreference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_DefaultLabelPreference) IsYANGGoStruct() {}

// GetEbgp retrieves the value of the leaf Ebgp from the NokiaConf_Configure_Router_Bgp_DefaultLabelPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ebgp is set, it can
// safely use t.GetEbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ebgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_DefaultLabelPreference) GetEbgp() uint32 {
	if t == nil || t.Ebgp == nil {
		return 0
	}
	return *t.Ebgp
}

// GetIbgp retrieves the value of the leaf Ibgp from the NokiaConf_Configure_Router_Bgp_DefaultLabelPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ibgp is set, it can
// safely use t.GetIbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ibgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_DefaultLabelPreference) GetIbgp() uint32 {
	if t == nil || t.Ibgp == nil {
		return 0
	}
	return *t.Ibgp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_DefaultLabelPreference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_DefaultLabelPreference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ebgp == nil {
		var v uint32 = 0
		t.Ebgp = &v
	}
	if t.Ibgp == nil {
		var v uint32 = 0
		t.Ibgp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_DefaultLabelPreference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_DefaultLabelPreference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_DefaultLabelPreference) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_DefaultLabelPreference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_DefaultLabelPreference.
func (*NokiaConf_Configure_Router_Bgp_DefaultLabelPreference) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_DefaultPreference represents the /nokia-conf/configure/router/bgp/default-preference YANG schema element.
type NokiaConf_Configure_Router_Bgp_DefaultPreference struct {
	Ebgp *uint32 `path:"ebgp" module:"nokia-conf"`
	Ibgp *uint32 `path:"ibgp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_DefaultPreference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_DefaultPreference) IsYANGGoStruct() {}

// GetEbgp retrieves the value of the leaf Ebgp from the NokiaConf_Configure_Router_Bgp_DefaultPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ebgp is set, it can
// safely use t.GetEbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ebgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_DefaultPreference) GetEbgp() uint32 {
	if t == nil || t.Ebgp == nil {
		return 0
	}
	return *t.Ebgp
}

// GetIbgp retrieves the value of the leaf Ibgp from the NokiaConf_Configure_Router_Bgp_DefaultPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ibgp is set, it can
// safely use t.GetIbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ibgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_DefaultPreference) GetIbgp() uint32 {
	if t == nil || t.Ibgp == nil {
		return 0
	}
	return *t.Ibgp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_DefaultPreference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_DefaultPreference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ebgp == nil {
		var v uint32 = 0
		t.Ebgp = &v
	}
	if t.Ibgp == nil {
		var v uint32 = 0
		t.Ibgp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_DefaultPreference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_DefaultPreference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_DefaultPreference) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_DefaultPreference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_DefaultPreference.
func (*NokiaConf_Configure_Router_Bgp_DefaultPreference) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_EbgpDefaultRejectPolicy represents the /nokia-conf/configure/router/bgp/ebgp-default-reject-policy YANG schema element.
type NokiaConf_Configure_Router_Bgp_EbgpDefaultRejectPolicy struct {
	Export *bool `path:"export" module:"nokia-conf"`
	Import *bool `path:"import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_EbgpDefaultRejectPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_EbgpDefaultRejectPolicy) IsYANGGoStruct() {}

// GetExport retrieves the value of the leaf Export from the NokiaConf_Configure_Router_Bgp_EbgpDefaultRejectPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Export is set, it can
// safely use t.GetExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Export == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_EbgpDefaultRejectPolicy) GetExport() bool {
	if t == nil || t.Export == nil {
		return true
	}
	return *t.Export
}

// GetImport retrieves the value of the leaf Import from the NokiaConf_Configure_Router_Bgp_EbgpDefaultRejectPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Import is set, it can
// safely use t.GetImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Import == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_EbgpDefaultRejectPolicy) GetImport() bool {
	if t == nil || t.Import == nil {
		return true
	}
	return *t.Import
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_EbgpDefaultRejectPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_EbgpDefaultRejectPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Export == nil {
		var v bool = true
		t.Export = &v
	}
	if t.Import == nil {
		var v bool = true
		t.Import = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_EbgpDefaultRejectPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_EbgpDefaultRejectPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_EbgpDefaultRejectPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_EbgpDefaultRejectPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_EbgpDefaultRejectPolicy.
func (*NokiaConf_Configure_Router_Bgp_EbgpDefaultRejectPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_EgressPeerEngineering represents the /nokia-conf/configure/router/bgp/egress-peer-engineering YANG schema element.
type NokiaConf_Configure_Router_Bgp_EgressPeerEngineering struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_EgressPeerEngineering implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_EgressPeerEngineering) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Bgp_EgressPeerEngineering
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_EgressPeerEngineering) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bgp_EgressPeerEngineering
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_EgressPeerEngineering) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bgp_EgressPeerEngineering
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_EgressPeerEngineering) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_EgressPeerEngineering
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_EgressPeerEngineering) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_EgressPeerEngineering) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_EgressPeerEngineering"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_EgressPeerEngineering) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_EgressPeerEngineering) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_EgressPeerEngineering.
func (*NokiaConf_Configure_Router_Bgp_EgressPeerEngineering) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_ErrorHandling represents the /nokia-conf/configure/router/bgp/error-handling YANG schema element.
type NokiaConf_Configure_Router_Bgp_ErrorHandling struct {
	UpdateFaultTolerance *bool `path:"update-fault-tolerance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_ErrorHandling implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_ErrorHandling) IsYANGGoStruct() {}

// GetUpdateFaultTolerance retrieves the value of the leaf UpdateFaultTolerance from the NokiaConf_Configure_Router_Bgp_ErrorHandling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UpdateFaultTolerance is set, it can
// safely use t.GetUpdateFaultTolerance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UpdateFaultTolerance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_ErrorHandling) GetUpdateFaultTolerance() bool {
	if t == nil || t.UpdateFaultTolerance == nil {
		return false
	}
	return *t.UpdateFaultTolerance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_ErrorHandling
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_ErrorHandling) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UpdateFaultTolerance == nil {
		var v bool = false
		t.UpdateFaultTolerance = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_ErrorHandling) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_ErrorHandling"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_ErrorHandling) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_ErrorHandling) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_ErrorHandling.
func (*NokiaConf_Configure_Router_Bgp_ErrorHandling) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Export represents the /nokia-conf/configure/router/bgp/export YANG schema element.
type NokiaConf_Configure_Router_Bgp_Export struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Policy             []string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Export implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Export) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bgp_Export
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Export) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bgp_Export
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Export) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Router_Bgp_Export
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Export) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Export
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Export) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Export) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Export"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Export) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Export) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Export.
func (*NokiaConf_Configure_Router_Bgp_Export) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_ExtendedNhEncoding represents the /nokia-conf/configure/router/bgp/extended-nh-encoding YANG schema element.
type NokiaConf_Configure_Router_Bgp_ExtendedNhEncoding struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	VpnIpv4   *bool `path:"vpn-ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_ExtendedNhEncoding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_ExtendedNhEncoding) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Router_Bgp_ExtendedNhEncoding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_ExtendedNhEncoding) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Router_Bgp_ExtendedNhEncoding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_ExtendedNhEncoding) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Router_Bgp_ExtendedNhEncoding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_ExtendedNhEncoding) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_ExtendedNhEncoding
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_ExtendedNhEncoding) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_ExtendedNhEncoding) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_ExtendedNhEncoding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_ExtendedNhEncoding) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_ExtendedNhEncoding) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_ExtendedNhEncoding.
func (*NokiaConf_Configure_Router_Bgp_ExtendedNhEncoding) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Family represents the /nokia-conf/configure/router/bgp/family YANG schema element.
type NokiaConf_Configure_Router_Bgp_Family struct {
	BgpLs        *bool `path:"bgp-ls" module:"nokia-conf"`
	Evpn         *bool `path:"evpn" module:"nokia-conf"`
	FlowIpv4     *bool `path:"flow-ipv4" module:"nokia-conf"`
	FlowIpv6     *bool `path:"flow-ipv6" module:"nokia-conf"`
	Ipv4         *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6         *bool `path:"ipv6" module:"nokia-conf"`
	L2Vpn        *bool `path:"l2-vpn" module:"nokia-conf"`
	LabelIpv4    *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6    *bool `path:"label-ipv6" module:"nokia-conf"`
	McastIpv4    *bool `path:"mcast-ipv4" module:"nokia-conf"`
	McastIpv6    *bool `path:"mcast-ipv6" module:"nokia-conf"`
	McastVpnIpv4 *bool `path:"mcast-vpn-ipv4" module:"nokia-conf"`
	McastVpnIpv6 *bool `path:"mcast-vpn-ipv6" module:"nokia-conf"`
	MdtSafi      *bool `path:"mdt-safi" module:"nokia-conf"`
	MsPw         *bool `path:"ms-pw" module:"nokia-conf"`
	MvpnIpv4     *bool `path:"mvpn-ipv4" module:"nokia-conf"`
	MvpnIpv6     *bool `path:"mvpn-ipv6" module:"nokia-conf"`
	RouteTarget  *bool `path:"route-target" module:"nokia-conf"`
	SrPolicyIpv4 *bool `path:"sr-policy-ipv4" module:"nokia-conf"`
	SrPolicyIpv6 *bool `path:"sr-policy-ipv6" module:"nokia-conf"`
	VpnIpv4      *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6      *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Family) IsYANGGoStruct() {}

// GetBgpLs retrieves the value of the leaf BgpLs from the NokiaConf_Configure_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpLs is set, it can
// safely use t.GetBgpLs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpLs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Family) GetBgpLs() bool {
	if t == nil || t.BgpLs == nil {
		return false
	}
	return *t.BgpLs
}

// GetEvpn retrieves the value of the leaf Evpn from the NokiaConf_Configure_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Evpn is set, it can
// safely use t.GetEvpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Evpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Family) GetEvpn() bool {
	if t == nil || t.Evpn == nil {
		return false
	}
	return *t.Evpn
}

// GetFlowIpv4 retrieves the value of the leaf FlowIpv4 from the NokiaConf_Configure_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowIpv4 is set, it can
// safely use t.GetFlowIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Family) GetFlowIpv4() bool {
	if t == nil || t.FlowIpv4 == nil {
		return false
	}
	return *t.FlowIpv4
}

// GetFlowIpv6 retrieves the value of the leaf FlowIpv6 from the NokiaConf_Configure_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowIpv6 is set, it can
// safely use t.GetFlowIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Family) GetFlowIpv6() bool {
	if t == nil || t.FlowIpv6 == nil {
		return false
	}
	return *t.FlowIpv6
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Family) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return true
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Family) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetL2Vpn retrieves the value of the leaf L2Vpn from the NokiaConf_Configure_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2Vpn is set, it can
// safely use t.GetL2Vpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2Vpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Family) GetL2Vpn() bool {
	if t == nil || t.L2Vpn == nil {
		return false
	}
	return *t.L2Vpn
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Family) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Family) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetMcastIpv4 retrieves the value of the leaf McastIpv4 from the NokiaConf_Configure_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastIpv4 is set, it can
// safely use t.GetMcastIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Family) GetMcastIpv4() bool {
	if t == nil || t.McastIpv4 == nil {
		return false
	}
	return *t.McastIpv4
}

// GetMcastIpv6 retrieves the value of the leaf McastIpv6 from the NokiaConf_Configure_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastIpv6 is set, it can
// safely use t.GetMcastIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Family) GetMcastIpv6() bool {
	if t == nil || t.McastIpv6 == nil {
		return false
	}
	return *t.McastIpv6
}

// GetMcastVpnIpv4 retrieves the value of the leaf McastVpnIpv4 from the NokiaConf_Configure_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastVpnIpv4 is set, it can
// safely use t.GetMcastVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastVpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Family) GetMcastVpnIpv4() bool {
	if t == nil || t.McastVpnIpv4 == nil {
		return false
	}
	return *t.McastVpnIpv4
}

// GetMcastVpnIpv6 retrieves the value of the leaf McastVpnIpv6 from the NokiaConf_Configure_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastVpnIpv6 is set, it can
// safely use t.GetMcastVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastVpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Family) GetMcastVpnIpv6() bool {
	if t == nil || t.McastVpnIpv6 == nil {
		return false
	}
	return *t.McastVpnIpv6
}

// GetMdtSafi retrieves the value of the leaf MdtSafi from the NokiaConf_Configure_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdtSafi is set, it can
// safely use t.GetMdtSafi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdtSafi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Family) GetMdtSafi() bool {
	if t == nil || t.MdtSafi == nil {
		return false
	}
	return *t.MdtSafi
}

// GetMsPw retrieves the value of the leaf MsPw from the NokiaConf_Configure_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MsPw is set, it can
// safely use t.GetMsPw() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MsPw == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Family) GetMsPw() bool {
	if t == nil || t.MsPw == nil {
		return false
	}
	return *t.MsPw
}

// GetMvpnIpv4 retrieves the value of the leaf MvpnIpv4 from the NokiaConf_Configure_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MvpnIpv4 is set, it can
// safely use t.GetMvpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MvpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Family) GetMvpnIpv4() bool {
	if t == nil || t.MvpnIpv4 == nil {
		return false
	}
	return *t.MvpnIpv4
}

// GetMvpnIpv6 retrieves the value of the leaf MvpnIpv6 from the NokiaConf_Configure_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MvpnIpv6 is set, it can
// safely use t.GetMvpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MvpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Family) GetMvpnIpv6() bool {
	if t == nil || t.MvpnIpv6 == nil {
		return false
	}
	return *t.MvpnIpv6
}

// GetRouteTarget retrieves the value of the leaf RouteTarget from the NokiaConf_Configure_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTarget is set, it can
// safely use t.GetRouteTarget() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTarget == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Family) GetRouteTarget() bool {
	if t == nil || t.RouteTarget == nil {
		return false
	}
	return *t.RouteTarget
}

// GetSrPolicyIpv4 retrieves the value of the leaf SrPolicyIpv4 from the NokiaConf_Configure_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrPolicyIpv4 is set, it can
// safely use t.GetSrPolicyIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrPolicyIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Family) GetSrPolicyIpv4() bool {
	if t == nil || t.SrPolicyIpv4 == nil {
		return false
	}
	return *t.SrPolicyIpv4
}

// GetSrPolicyIpv6 retrieves the value of the leaf SrPolicyIpv6 from the NokiaConf_Configure_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrPolicyIpv6 is set, it can
// safely use t.GetSrPolicyIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrPolicyIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Family) GetSrPolicyIpv6() bool {
	if t == nil || t.SrPolicyIpv6 == nil {
		return false
	}
	return *t.SrPolicyIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Family) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Family) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BgpLs == nil {
		var v bool = false
		t.BgpLs = &v
	}
	if t.Evpn == nil {
		var v bool = false
		t.Evpn = &v
	}
	if t.FlowIpv4 == nil {
		var v bool = false
		t.FlowIpv4 = &v
	}
	if t.FlowIpv6 == nil {
		var v bool = false
		t.FlowIpv6 = &v
	}
	if t.Ipv4 == nil {
		var v bool = true
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.L2Vpn == nil {
		var v bool = false
		t.L2Vpn = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.McastIpv4 == nil {
		var v bool = false
		t.McastIpv4 = &v
	}
	if t.McastIpv6 == nil {
		var v bool = false
		t.McastIpv6 = &v
	}
	if t.McastVpnIpv4 == nil {
		var v bool = false
		t.McastVpnIpv4 = &v
	}
	if t.McastVpnIpv6 == nil {
		var v bool = false
		t.McastVpnIpv6 = &v
	}
	if t.MdtSafi == nil {
		var v bool = false
		t.MdtSafi = &v
	}
	if t.MsPw == nil {
		var v bool = false
		t.MsPw = &v
	}
	if t.MvpnIpv4 == nil {
		var v bool = false
		t.MvpnIpv4 = &v
	}
	if t.MvpnIpv6 == nil {
		var v bool = false
		t.MvpnIpv6 = &v
	}
	if t.RouteTarget == nil {
		var v bool = false
		t.RouteTarget = &v
	}
	if t.SrPolicyIpv4 == nil {
		var v bool = false
		t.SrPolicyIpv4 = &v
	}
	if t.SrPolicyIpv6 == nil {
		var v bool = false
		t.SrPolicyIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Family.
func (*NokiaConf_Configure_Router_Bgp_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Flowspec represents the /nokia-conf/configure/router/bgp/flowspec YANG schema element.
type NokiaConf_Configure_Router_Bgp_Flowspec struct {
	ValidateDestPrefix *bool `path:"validate-dest-prefix" module:"nokia-conf"`
	ValidateRedirectIp *bool `path:"validate-redirect-ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Flowspec implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Flowspec) IsYANGGoStruct() {}

// GetValidateDestPrefix retrieves the value of the leaf ValidateDestPrefix from the NokiaConf_Configure_Router_Bgp_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidateDestPrefix is set, it can
// safely use t.GetValidateDestPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidateDestPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Flowspec) GetValidateDestPrefix() bool {
	if t == nil || t.ValidateDestPrefix == nil {
		return false
	}
	return *t.ValidateDestPrefix
}

// GetValidateRedirectIp retrieves the value of the leaf ValidateRedirectIp from the NokiaConf_Configure_Router_Bgp_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidateRedirectIp is set, it can
// safely use t.GetValidateRedirectIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidateRedirectIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Flowspec) GetValidateRedirectIp() bool {
	if t == nil || t.ValidateRedirectIp == nil {
		return false
	}
	return *t.ValidateRedirectIp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Flowspec
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Flowspec) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ValidateDestPrefix == nil {
		var v bool = false
		t.ValidateDestPrefix = &v
	}
	if t.ValidateRedirectIp == nil {
		var v bool = false
		t.ValidateRedirectIp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Flowspec) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Flowspec"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Flowspec) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Flowspec) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Flowspec.
func (*NokiaConf_Configure_Router_Bgp_Flowspec) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_GracefulRestart represents the /nokia-conf/configure/router/bgp/graceful-restart YANG schema element.
type NokiaConf_Configure_Router_Bgp_GracefulRestart struct {
	GrNotification  *bool                                                     `path:"gr-notification" module:"nokia-conf"`
	LongLived       *NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived `path:"long-lived" module:"nokia-conf" yangPresence:"true"`
	RestartTime     *uint32                                                   `path:"restart-time" module:"nokia-conf"`
	StaleRoutesTime *uint32                                                   `path:"stale-routes-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_GracefulRestart) IsYANGGoStruct() {}

// GetOrCreateLongLived retrieves the value of the LongLived field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_GracefulRestart) GetOrCreateLongLived() *NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived {
	if t.LongLived != nil {
		return t.LongLived
	}
	t.LongLived = &NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived{}
	return t.LongLived
}

// GetLongLived returns the value of the LongLived struct pointer
// from NokiaConf_Configure_Router_Bgp_GracefulRestart. If the receiver or the field LongLived is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_GracefulRestart) GetLongLived() *NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived {
	if t != nil && t.LongLived != nil {
		return t.LongLived
	}
	return nil
}

// GetGrNotification retrieves the value of the leaf GrNotification from the NokiaConf_Configure_Router_Bgp_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GrNotification is set, it can
// safely use t.GetGrNotification() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GrNotification == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_GracefulRestart) GetGrNotification() bool {
	if t == nil || t.GrNotification == nil {
		return false
	}
	return *t.GrNotification
}

// GetRestartTime retrieves the value of the leaf RestartTime from the NokiaConf_Configure_Router_Bgp_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RestartTime is set, it can
// safely use t.GetRestartTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RestartTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_GracefulRestart) GetRestartTime() uint32 {
	if t == nil || t.RestartTime == nil {
		return 120
	}
	return *t.RestartTime
}

// GetStaleRoutesTime retrieves the value of the leaf StaleRoutesTime from the NokiaConf_Configure_Router_Bgp_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaleRoutesTime is set, it can
// safely use t.GetStaleRoutesTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaleRoutesTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_GracefulRestart) GetStaleRoutesTime() uint32 {
	if t == nil || t.StaleRoutesTime == nil {
		return 360
	}
	return *t.StaleRoutesTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_GracefulRestart
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_GracefulRestart) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.GrNotification == nil {
		var v bool = false
		t.GrNotification = &v
	}
	if t.RestartTime == nil {
		var v uint32 = 120
		t.RestartTime = &v
	}
	if t.StaleRoutesTime == nil {
		var v uint32 = 360
		t.StaleRoutesTime = &v
	}
	t.LongLived.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_GracefulRestart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_GracefulRestart) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_GracefulRestart.
func (*NokiaConf_Configure_Router_Bgp_GracefulRestart) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived represents the /nokia-conf/configure/router/bgp/graceful-restart/long-lived YANG schema element.
type NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived struct {
	AdvertiseStaleToAllNeighbors *bool                                                                                                      `path:"advertise-stale-to-all-neighbors" module:"nokia-conf"`
	AdvertisedStaleTime          *uint32                                                                                                    `path:"advertised-stale-time" module:"nokia-conf"`
	Family                       map[E_NokiaTypesBgp_LlgrFamilyIdentifiers]*NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_Family `path:"family" module:"nokia-conf"`
	ForwardingBitsSet            E_NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_ForwardingBitsSet                               `path:"forwarding-bits-set" module:"nokia-conf"`
	HelperOverrideRestartTime    *uint32                                                                                                    `path:"helper-override-restart-time" module:"nokia-conf"`
	HelperOverrideStaleTime      *uint32                                                                                                    `path:"helper-override-stale-time" module:"nokia-conf"`
	WithoutNoExport              *bool                                                                                                      `path:"without-no-export" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived) IsYANGGoStruct() {}

// NewFamily creates a new entry in the Family list of the
// NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived) NewFamily(FamilyType E_NokiaTypesBgp_LlgrFamilyIdentifiers) (*NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_Family, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[E_NokiaTypesBgp_LlgrFamilyIdentifiers]*NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_Family)
	}

	key := FamilyType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Family[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Family", key)
	}

	t.Family[key] = &NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_Family{
		FamilyType: FamilyType,
	}

	return t.Family[key], nil
}

// RenameFamily renames an entry in the list Family within
// the NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived) RenameFamily(oldK, newK E_NokiaTypesBgp_LlgrFamilyIdentifiers) error {
	if _, ok := t.Family[newK]; ok {
		return fmt.Errorf("key %v already exists in Family", newK)
	}

	e, ok := t.Family[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Family", oldK)
	}
	e.FamilyType = newK

	t.Family[newK] = e
	delete(t.Family, oldK)
	return nil
}

// GetOrCreateFamily retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived) GetOrCreateFamily(FamilyType E_NokiaTypesBgp_LlgrFamilyIdentifiers) *NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_Family {

	key := FamilyType

	if v, ok := t.Family[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFamily(FamilyType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFamily got unexpected error: %v", err))
	}
	return v
}

// GetFamily retrieves the value with the specified key from
// the Family map field of NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived) GetFamily(FamilyType E_NokiaTypesBgp_LlgrFamilyIdentifiers) *NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_Family {

	if t == nil {
		return nil
	}

	key := FamilyType

	if lm, ok := t.Family[key]; ok {
		return lm
	}
	return nil
}

// DeleteFamily deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived) DeleteFamily(FamilyType E_NokiaTypesBgp_LlgrFamilyIdentifiers) {
	key := FamilyType

	delete(t.Family, key)
}

// AppendFamily appends the supplied NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_Family struct to the
// list Family of NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_Family already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived) AppendFamily(v *NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_Family) error {
	key := v.FamilyType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[E_NokiaTypesBgp_LlgrFamilyIdentifiers]*NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_Family)
	}

	if _, ok := t.Family[key]; ok {
		return fmt.Errorf("duplicate key for list Family %v", key)
	}

	t.Family[key] = v
	return nil
}

// GetAdvertiseStaleToAllNeighbors retrieves the value of the leaf AdvertiseStaleToAllNeighbors from the NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseStaleToAllNeighbors is set, it can
// safely use t.GetAdvertiseStaleToAllNeighbors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseStaleToAllNeighbors == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived) GetAdvertiseStaleToAllNeighbors() bool {
	if t == nil || t.AdvertiseStaleToAllNeighbors == nil {
		return false
	}
	return *t.AdvertiseStaleToAllNeighbors
}

// GetAdvertisedStaleTime retrieves the value of the leaf AdvertisedStaleTime from the NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisedStaleTime is set, it can
// safely use t.GetAdvertisedStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisedStaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived) GetAdvertisedStaleTime() uint32 {
	if t == nil || t.AdvertisedStaleTime == nil {
		return 86400
	}
	return *t.AdvertisedStaleTime
}

// GetForwardingBitsSet retrieves the value of the leaf ForwardingBitsSet from the NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingBitsSet is set, it can
// safely use t.GetForwardingBitsSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingBitsSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived) GetForwardingBitsSet() E_NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_ForwardingBitsSet {
	if t == nil || t.ForwardingBitsSet == 0 {
		return NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_ForwardingBitsSet_none
	}
	return t.ForwardingBitsSet
}

// GetHelperOverrideRestartTime retrieves the value of the leaf HelperOverrideRestartTime from the NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperOverrideRestartTime is set, it can
// safely use t.GetHelperOverrideRestartTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperOverrideRestartTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived) GetHelperOverrideRestartTime() uint32 {
	if t == nil || t.HelperOverrideRestartTime == nil {
		return 0
	}
	return *t.HelperOverrideRestartTime
}

// GetHelperOverrideStaleTime retrieves the value of the leaf HelperOverrideStaleTime from the NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperOverrideStaleTime is set, it can
// safely use t.GetHelperOverrideStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperOverrideStaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived) GetHelperOverrideStaleTime() uint32 {
	if t == nil || t.HelperOverrideStaleTime == nil {
		return 0
	}
	return *t.HelperOverrideStaleTime
}

// GetWithoutNoExport retrieves the value of the leaf WithoutNoExport from the NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WithoutNoExport is set, it can
// safely use t.GetWithoutNoExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WithoutNoExport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived) GetWithoutNoExport() bool {
	if t == nil || t.WithoutNoExport == nil {
		return false
	}
	return *t.WithoutNoExport
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertiseStaleToAllNeighbors == nil {
		var v bool = false
		t.AdvertiseStaleToAllNeighbors = &v
	}
	if t.AdvertisedStaleTime == nil {
		var v uint32 = 86400
		t.AdvertisedStaleTime = &v
	}
	if t.ForwardingBitsSet == 0 {
		t.ForwardingBitsSet = NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_ForwardingBitsSet_none
	}
	if t.WithoutNoExport == nil {
		var v bool = false
		t.WithoutNoExport = &v
	}
	for _, e := range t.Family {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived.
func (*NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_Family represents the /nokia-conf/configure/router/bgp/graceful-restart/long-lived/family YANG schema element.
type NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_Family struct {
	AdvertisedStaleTime     *uint32                               `path:"advertised-stale-time" module:"nokia-conf"`
	ApplyGroups             []string                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                              `path:"apply-groups-exclude" module:"nokia-conf"`
	FamilyType              E_NokiaTypesBgp_LlgrFamilyIdentifiers `path:"family-type" module:"nokia-conf"`
	HelperOverrideStaleTime *uint32                               `path:"helper-override-stale-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_Family) IsYANGGoStruct() {}

// GetAdvertisedStaleTime retrieves the value of the leaf AdvertisedStaleTime from the NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisedStaleTime is set, it can
// safely use t.GetAdvertisedStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisedStaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_Family) GetAdvertisedStaleTime() uint32 {
	if t == nil || t.AdvertisedStaleTime == nil {
		return 86400
	}
	return *t.AdvertisedStaleTime
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_Family) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_Family) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFamilyType retrieves the value of the leaf FamilyType from the NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FamilyType is set, it can
// safely use t.GetFamilyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FamilyType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_Family) GetFamilyType() E_NokiaTypesBgp_LlgrFamilyIdentifiers {
	if t == nil || t.FamilyType == 0 {
		return 0
	}
	return t.FamilyType
}

// GetHelperOverrideStaleTime retrieves the value of the leaf HelperOverrideStaleTime from the NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperOverrideStaleTime is set, it can
// safely use t.GetHelperOverrideStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperOverrideStaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_Family) GetHelperOverrideStaleTime() uint32 {
	if t == nil || t.HelperOverrideStaleTime == nil {
		return 0
	}
	return *t.HelperOverrideStaleTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertisedStaleTime == nil {
		var v uint32 = 86400
		t.AdvertisedStaleTime = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_Family struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_Family) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"family-type": t.FamilyType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_Family.
func (*NokiaConf_Configure_Router_Bgp_GracefulRestart_LongLived_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group represents the /nokia-conf/configure/router/bgp/group YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group struct {
	AddPaths                          *NokiaConf_Configure_Router_Bgp_Group_AddPaths                                           `path:"add-paths" module:"nokia-conf" yangPresence:"true"`
	AdminState                        E_NokiaTypesSros_AdminState                                                              `path:"admin-state" module:"nokia-conf"`
	AdvertiseInactive                 *bool                                                                                    `path:"advertise-inactive" module:"nokia-conf"`
	AdvertiseIpv6NextHops             *NokiaConf_Configure_Router_Bgp_Group_AdvertiseIpv6NextHops                              `path:"advertise-ipv6-next-hops" module:"nokia-conf" yangPresence:"true"`
	AggregatorIdZero                  *bool                                                                                    `path:"aggregator-id-zero" module:"nokia-conf"`
	Aigp                              *bool                                                                                    `path:"aigp" module:"nokia-conf"`
	ApplyGroups                       []string                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude                []string                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	AsOverride                        *bool                                                                                    `path:"as-override" module:"nokia-conf"`
	Asn_4Byte                         *bool                                                                                    `path:"asn-4-byte" module:"nokia-conf"`
	AuthenticationKey                 *string                                                                                  `path:"authentication-key" module:"nokia-conf"`
	AuthenticationKeychain            *string                                                                                  `path:"authentication-keychain" module:"nokia-conf"`
	BfdLiveness                       *bool                                                                                    `path:"bfd-liveness" module:"nokia-conf"`
	BlockPrefixSid                    *bool                                                                                    `path:"block-prefix-sid" module:"nokia-conf"`
	CapabilityNegotiation             *bool                                                                                    `path:"capability-negotiation" module:"nokia-conf"`
	ClientReflect                     *bool                                                                                    `path:"client-reflect" module:"nokia-conf"`
	Cluster                           *NokiaConf_Configure_Router_Bgp_Group_Cluster                                            `path:"cluster" module:"nokia-conf"`
	ConnectRetry                      *int32                                                                                   `path:"connect-retry" module:"nokia-conf"`
	DampPeerOscillations              *NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations                               `path:"damp-peer-oscillations" module:"nokia-conf" yangPresence:"true"`
	Damping                           *bool                                                                                    `path:"damping" module:"nokia-conf"`
	DefRecvEvpnEncap                  E_NokiaTypesBgp_Encap                                                                    `path:"def-recv-evpn-encap" module:"nokia-conf"`
	DefaultLabelPreference            *NokiaConf_Configure_Router_Bgp_Group_DefaultLabelPreference                             `path:"default-label-preference" module:"nokia-conf"`
	DefaultPreference                 *NokiaConf_Configure_Router_Bgp_Group_DefaultPreference                                  `path:"default-preference" module:"nokia-conf"`
	DefaultRouteTarget                *bool                                                                                    `path:"default-route-target" module:"nokia-conf"`
	Description                       *string                                                                                  `path:"description" module:"nokia-conf"`
	DynamicNeighbor                   *NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor                                    `path:"dynamic-neighbor" module:"nokia-conf"`
	DynamicNeighborLimit              *uint32                                                                                  `path:"dynamic-neighbor-limit" module:"nokia-conf"`
	EbgpDefaultRejectPolicy           *NokiaConf_Configure_Router_Bgp_Group_EbgpDefaultRejectPolicy                            `path:"ebgp-default-reject-policy" module:"nokia-conf" yangPresence:"true"`
	EgressEngineering                 *NokiaConf_Configure_Router_Bgp_Group_EgressEngineering                                  `path:"egress-engineering" module:"nokia-conf" yangPresence:"true"`
	EgressPeerEngineeringLabelUnicast *bool                                                                                    `path:"egress-peer-engineering-label-unicast" module:"nokia-conf"`
	EnforceFirstAs                    *bool                                                                                    `path:"enforce-first-as" module:"nokia-conf"`
	ErrorHandling                     *NokiaConf_Configure_Router_Bgp_Group_ErrorHandling                                      `path:"error-handling" module:"nokia-conf"`
	Export                            *NokiaConf_Configure_Router_Bgp_Group_Export                                             `path:"export" module:"nokia-conf" yangPresence:"true"`
	ExtendedNhEncoding                *NokiaConf_Configure_Router_Bgp_Group_ExtendedNhEncoding                                 `path:"extended-nh-encoding" module:"nokia-conf" yangPresence:"true"`
	Family                            *NokiaConf_Configure_Router_Bgp_Group_Family                                             `path:"family" module:"nokia-conf" yangPresence:"true"`
	FastExternalFailover              *bool                                                                                    `path:"fast-external-failover" module:"nokia-conf"`
	GracefulRestart                   *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart                                    `path:"graceful-restart" module:"nokia-conf" yangPresence:"true"`
	GroupName                         *string                                                                                  `path:"group-name" module:"nokia-conf"`
	HoldTime                          *NokiaConf_Configure_Router_Bgp_Group_HoldTime                                           `path:"hold-time" module:"nokia-conf"`
	Import                            *NokiaConf_Configure_Router_Bgp_Group_Import                                             `path:"import" module:"nokia-conf" yangPresence:"true"`
	InitialSendDelayZero              *bool                                                                                    `path:"initial-send-delay-zero" module:"nokia-conf"`
	Keepalive                         *int32                                                                                   `path:"keepalive" module:"nokia-conf"`
	LabelPreference                   *uint32                                                                                  `path:"label-preference" module:"nokia-conf"`
	LinkBandwidth                     *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth                                      `path:"link-bandwidth" module:"nokia-conf"`
	LocalAddress                      *string                                                                                  `path:"local-address" module:"nokia-conf"`
	LocalAs                           *NokiaConf_Configure_Router_Bgp_Group_LocalAs                                            `path:"local-as" module:"nokia-conf"`
	LocalPreference                   *int64                                                                                   `path:"local-preference" module:"nokia-conf"`
	LoopDetect                        E_NokiaTypesBgp_LoopDetect                                                               `path:"loop-detect" module:"nokia-conf"`
	LoopDetectThreshold               *uint32                                                                                  `path:"loop-detect-threshold" module:"nokia-conf"`
	MedOut                            NokiaConf_Configure_Router_Bgp_Group_MedOut_Union                                        `path:"med-out" module:"nokia-conf"`
	MinRouteAdvertisement             *int16                                                                                   `path:"min-route-advertisement" module:"nokia-conf"`
	Monitor                           *NokiaConf_Configure_Router_Bgp_Group_Monitor                                            `path:"monitor" module:"nokia-conf" yangPresence:"true"`
	Multihop                          *int32                                                                                   `path:"multihop" module:"nokia-conf"`
	MultipathEligible                 *bool                                                                                    `path:"multipath-eligible" module:"nokia-conf"`
	NextHopSelf                       *bool                                                                                    `path:"next-hop-self" module:"nokia-conf"`
	NextHopUnchanged                  *NokiaConf_Configure_Router_Bgp_Group_NextHopUnchanged                                   `path:"next-hop-unchanged" module:"nokia-conf"`
	OriginValidation                  *NokiaConf_Configure_Router_Bgp_Group_OriginValidation                                   `path:"origin-validation" module:"nokia-conf"`
	OutboundRouteFiltering            *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering                             `path:"outbound-route-filtering" module:"nokia-conf" yangPresence:"true"`
	Passive                           *bool                                                                                    `path:"passive" module:"nokia-conf"`
	PathMtuDiscovery                  *bool                                                                                    `path:"path-mtu-discovery" module:"nokia-conf"`
	PeerAs                            *uint32                                                                                  `path:"peer-as" module:"nokia-conf"`
	PeerIpTracking                    *bool                                                                                    `path:"peer-ip-tracking" module:"nokia-conf"`
	Preference                        *uint32                                                                                  `path:"preference" module:"nokia-conf"`
	PrefixLimit                       map[E_NokiaTypesBgp_IpFamilyIdentifier]*NokiaConf_Configure_Router_Bgp_Group_PrefixLimit `path:"prefix-limit" module:"nokia-conf"`
	RemovePrivate                     *NokiaConf_Configure_Router_Bgp_Group_RemovePrivate                                      `path:"remove-private" module:"nokia-conf" yangPresence:"true"`
	SegmentRoutingV6                  *NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6                                   `path:"segment-routing-v6" module:"nokia-conf" yangPresence:"true"`
	SelectiveLabelIpv4Install         *bool                                                                                    `path:"selective-label-ipv4-install" module:"nokia-conf"`
	SendCommunities                   *NokiaConf_Configure_Router_Bgp_Group_SendCommunities                                    `path:"send-communities" module:"nokia-conf"`
	SendDefault                       *NokiaConf_Configure_Router_Bgp_Group_SendDefault                                        `path:"send-default" module:"nokia-conf" yangPresence:"true"`
	SplitHorizon                      *bool                                                                                    `path:"split-horizon" module:"nokia-conf"`
	StaticGroup                       *bool                                                                                    `path:"static-group" module:"nokia-conf"`
	TcpMss                            NokiaConf_Configure_Router_Bgp_Group_TcpMss_Union                                        `path:"tcp-mss" module:"nokia-conf"`
	ThirdPartyNexthop                 *bool                                                                                    `path:"third-party-nexthop" module:"nokia-conf"`
	TtlSecurity                       *uint32                                                                                  `path:"ttl-security" module:"nokia-conf"`
	Type                              E_NokiaTypesBgp_PeerType                                                                 `path:"type" module:"nokia-conf"`
	VpnApplyExport                    *bool                                                                                    `path:"vpn-apply-export" module:"nokia-conf"`
	VpnApplyImport                    *bool                                                                                    `path:"vpn-apply-import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group) IsYANGGoStruct() {}

// NewPrefixLimit creates a new entry in the PrefixLimit list of the
// NokiaConf_Configure_Router_Bgp_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Bgp_Group) NewPrefixLimit(Family E_NokiaTypesBgp_IpFamilyIdentifier) (*NokiaConf_Configure_Router_Bgp_Group_PrefixLimit, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixLimit == nil {
		t.PrefixLimit = make(map[E_NokiaTypesBgp_IpFamilyIdentifier]*NokiaConf_Configure_Router_Bgp_Group_PrefixLimit)
	}

	key := Family

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrefixLimit[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrefixLimit", key)
	}

	t.PrefixLimit[key] = &NokiaConf_Configure_Router_Bgp_Group_PrefixLimit{
		Family: Family,
	}

	return t.PrefixLimit[key], nil
}

// RenamePrefixLimit renames an entry in the list PrefixLimit within
// the NokiaConf_Configure_Router_Bgp_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Bgp_Group) RenamePrefixLimit(oldK, newK E_NokiaTypesBgp_IpFamilyIdentifier) error {
	if _, ok := t.PrefixLimit[newK]; ok {
		return fmt.Errorf("key %v already exists in PrefixLimit", newK)
	}

	e, ok := t.PrefixLimit[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrefixLimit", oldK)
	}
	e.Family = newK

	t.PrefixLimit[newK] = e
	delete(t.PrefixLimit, oldK)
	return nil
}

// GetOrCreatePrefixLimit retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetOrCreatePrefixLimit(Family E_NokiaTypesBgp_IpFamilyIdentifier) *NokiaConf_Configure_Router_Bgp_Group_PrefixLimit {

	key := Family

	if v, ok := t.PrefixLimit[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefixLimit(Family)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefixLimit got unexpected error: %v", err))
	}
	return v
}

// GetPrefixLimit retrieves the value with the specified key from
// the PrefixLimit map field of NokiaConf_Configure_Router_Bgp_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetPrefixLimit(Family E_NokiaTypesBgp_IpFamilyIdentifier) *NokiaConf_Configure_Router_Bgp_Group_PrefixLimit {

	if t == nil {
		return nil
	}

	key := Family

	if lm, ok := t.PrefixLimit[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefixLimit deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Bgp_Group) DeletePrefixLimit(Family E_NokiaTypesBgp_IpFamilyIdentifier) {
	key := Family

	delete(t.PrefixLimit, key)
}

// AppendPrefixLimit appends the supplied NokiaConf_Configure_Router_Bgp_Group_PrefixLimit struct to the
// list PrefixLimit of NokiaConf_Configure_Router_Bgp_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Bgp_Group_PrefixLimit already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Bgp_Group) AppendPrefixLimit(v *NokiaConf_Configure_Router_Bgp_Group_PrefixLimit) error {
	key := v.Family

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixLimit == nil {
		t.PrefixLimit = make(map[E_NokiaTypesBgp_IpFamilyIdentifier]*NokiaConf_Configure_Router_Bgp_Group_PrefixLimit)
	}

	if _, ok := t.PrefixLimit[key]; ok {
		return fmt.Errorf("duplicate key for list PrefixLimit %v", key)
	}

	t.PrefixLimit[key] = v
	return nil
}

// GetOrCreateAddPaths retrieves the value of the AddPaths field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetOrCreateAddPaths() *NokiaConf_Configure_Router_Bgp_Group_AddPaths {
	if t.AddPaths != nil {
		return t.AddPaths
	}
	t.AddPaths = &NokiaConf_Configure_Router_Bgp_Group_AddPaths{}
	return t.AddPaths
}

// GetOrCreateAdvertiseIpv6NextHops retrieves the value of the AdvertiseIpv6NextHops field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetOrCreateAdvertiseIpv6NextHops() *NokiaConf_Configure_Router_Bgp_Group_AdvertiseIpv6NextHops {
	if t.AdvertiseIpv6NextHops != nil {
		return t.AdvertiseIpv6NextHops
	}
	t.AdvertiseIpv6NextHops = &NokiaConf_Configure_Router_Bgp_Group_AdvertiseIpv6NextHops{}
	return t.AdvertiseIpv6NextHops
}

// GetOrCreateCluster retrieves the value of the Cluster field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetOrCreateCluster() *NokiaConf_Configure_Router_Bgp_Group_Cluster {
	if t.Cluster != nil {
		return t.Cluster
	}
	t.Cluster = &NokiaConf_Configure_Router_Bgp_Group_Cluster{}
	return t.Cluster
}

// GetOrCreateDampPeerOscillations retrieves the value of the DampPeerOscillations field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetOrCreateDampPeerOscillations() *NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations {
	if t.DampPeerOscillations != nil {
		return t.DampPeerOscillations
	}
	t.DampPeerOscillations = &NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations{}
	return t.DampPeerOscillations
}

// GetOrCreateDefaultLabelPreference retrieves the value of the DefaultLabelPreference field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetOrCreateDefaultLabelPreference() *NokiaConf_Configure_Router_Bgp_Group_DefaultLabelPreference {
	if t.DefaultLabelPreference != nil {
		return t.DefaultLabelPreference
	}
	t.DefaultLabelPreference = &NokiaConf_Configure_Router_Bgp_Group_DefaultLabelPreference{}
	return t.DefaultLabelPreference
}

// GetOrCreateDefaultPreference retrieves the value of the DefaultPreference field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetOrCreateDefaultPreference() *NokiaConf_Configure_Router_Bgp_Group_DefaultPreference {
	if t.DefaultPreference != nil {
		return t.DefaultPreference
	}
	t.DefaultPreference = &NokiaConf_Configure_Router_Bgp_Group_DefaultPreference{}
	return t.DefaultPreference
}

// GetOrCreateDynamicNeighbor retrieves the value of the DynamicNeighbor field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetOrCreateDynamicNeighbor() *NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor {
	if t.DynamicNeighbor != nil {
		return t.DynamicNeighbor
	}
	t.DynamicNeighbor = &NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor{}
	return t.DynamicNeighbor
}

// GetOrCreateEbgpDefaultRejectPolicy retrieves the value of the EbgpDefaultRejectPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetOrCreateEbgpDefaultRejectPolicy() *NokiaConf_Configure_Router_Bgp_Group_EbgpDefaultRejectPolicy {
	if t.EbgpDefaultRejectPolicy != nil {
		return t.EbgpDefaultRejectPolicy
	}
	t.EbgpDefaultRejectPolicy = &NokiaConf_Configure_Router_Bgp_Group_EbgpDefaultRejectPolicy{}
	return t.EbgpDefaultRejectPolicy
}

// GetOrCreateEgressEngineering retrieves the value of the EgressEngineering field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetOrCreateEgressEngineering() *NokiaConf_Configure_Router_Bgp_Group_EgressEngineering {
	if t.EgressEngineering != nil {
		return t.EgressEngineering
	}
	t.EgressEngineering = &NokiaConf_Configure_Router_Bgp_Group_EgressEngineering{}
	return t.EgressEngineering
}

// GetOrCreateErrorHandling retrieves the value of the ErrorHandling field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetOrCreateErrorHandling() *NokiaConf_Configure_Router_Bgp_Group_ErrorHandling {
	if t.ErrorHandling != nil {
		return t.ErrorHandling
	}
	t.ErrorHandling = &NokiaConf_Configure_Router_Bgp_Group_ErrorHandling{}
	return t.ErrorHandling
}

// GetOrCreateExport retrieves the value of the Export field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetOrCreateExport() *NokiaConf_Configure_Router_Bgp_Group_Export {
	if t.Export != nil {
		return t.Export
	}
	t.Export = &NokiaConf_Configure_Router_Bgp_Group_Export{}
	return t.Export
}

// GetOrCreateExtendedNhEncoding retrieves the value of the ExtendedNhEncoding field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetOrCreateExtendedNhEncoding() *NokiaConf_Configure_Router_Bgp_Group_ExtendedNhEncoding {
	if t.ExtendedNhEncoding != nil {
		return t.ExtendedNhEncoding
	}
	t.ExtendedNhEncoding = &NokiaConf_Configure_Router_Bgp_Group_ExtendedNhEncoding{}
	return t.ExtendedNhEncoding
}

// GetOrCreateFamily retrieves the value of the Family field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetOrCreateFamily() *NokiaConf_Configure_Router_Bgp_Group_Family {
	if t.Family != nil {
		return t.Family
	}
	t.Family = &NokiaConf_Configure_Router_Bgp_Group_Family{}
	return t.Family
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetOrCreateGracefulRestart() *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &NokiaConf_Configure_Router_Bgp_Group_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetOrCreateHoldTime() *NokiaConf_Configure_Router_Bgp_Group_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &NokiaConf_Configure_Router_Bgp_Group_HoldTime{}
	return t.HoldTime
}

// GetOrCreateImport retrieves the value of the Import field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetOrCreateImport() *NokiaConf_Configure_Router_Bgp_Group_Import {
	if t.Import != nil {
		return t.Import
	}
	t.Import = &NokiaConf_Configure_Router_Bgp_Group_Import{}
	return t.Import
}

// GetOrCreateLinkBandwidth retrieves the value of the LinkBandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetOrCreateLinkBandwidth() *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth {
	if t.LinkBandwidth != nil {
		return t.LinkBandwidth
	}
	t.LinkBandwidth = &NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth{}
	return t.LinkBandwidth
}

// GetOrCreateLocalAs retrieves the value of the LocalAs field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetOrCreateLocalAs() *NokiaConf_Configure_Router_Bgp_Group_LocalAs {
	if t.LocalAs != nil {
		return t.LocalAs
	}
	t.LocalAs = &NokiaConf_Configure_Router_Bgp_Group_LocalAs{}
	return t.LocalAs
}

// GetOrCreateMonitor retrieves the value of the Monitor field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetOrCreateMonitor() *NokiaConf_Configure_Router_Bgp_Group_Monitor {
	if t.Monitor != nil {
		return t.Monitor
	}
	t.Monitor = &NokiaConf_Configure_Router_Bgp_Group_Monitor{}
	return t.Monitor
}

// GetOrCreateNextHopUnchanged retrieves the value of the NextHopUnchanged field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetOrCreateNextHopUnchanged() *NokiaConf_Configure_Router_Bgp_Group_NextHopUnchanged {
	if t.NextHopUnchanged != nil {
		return t.NextHopUnchanged
	}
	t.NextHopUnchanged = &NokiaConf_Configure_Router_Bgp_Group_NextHopUnchanged{}
	return t.NextHopUnchanged
}

// GetOrCreateOriginValidation retrieves the value of the OriginValidation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetOrCreateOriginValidation() *NokiaConf_Configure_Router_Bgp_Group_OriginValidation {
	if t.OriginValidation != nil {
		return t.OriginValidation
	}
	t.OriginValidation = &NokiaConf_Configure_Router_Bgp_Group_OriginValidation{}
	return t.OriginValidation
}

// GetOrCreateOutboundRouteFiltering retrieves the value of the OutboundRouteFiltering field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetOrCreateOutboundRouteFiltering() *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering {
	if t.OutboundRouteFiltering != nil {
		return t.OutboundRouteFiltering
	}
	t.OutboundRouteFiltering = &NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering{}
	return t.OutboundRouteFiltering
}

// GetOrCreateRemovePrivate retrieves the value of the RemovePrivate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetOrCreateRemovePrivate() *NokiaConf_Configure_Router_Bgp_Group_RemovePrivate {
	if t.RemovePrivate != nil {
		return t.RemovePrivate
	}
	t.RemovePrivate = &NokiaConf_Configure_Router_Bgp_Group_RemovePrivate{}
	return t.RemovePrivate
}

// GetOrCreateSegmentRoutingV6 retrieves the value of the SegmentRoutingV6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetOrCreateSegmentRoutingV6() *NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6 {
	if t.SegmentRoutingV6 != nil {
		return t.SegmentRoutingV6
	}
	t.SegmentRoutingV6 = &NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6{}
	return t.SegmentRoutingV6
}

// GetOrCreateSendCommunities retrieves the value of the SendCommunities field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetOrCreateSendCommunities() *NokiaConf_Configure_Router_Bgp_Group_SendCommunities {
	if t.SendCommunities != nil {
		return t.SendCommunities
	}
	t.SendCommunities = &NokiaConf_Configure_Router_Bgp_Group_SendCommunities{}
	return t.SendCommunities
}

// GetOrCreateSendDefault retrieves the value of the SendDefault field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetOrCreateSendDefault() *NokiaConf_Configure_Router_Bgp_Group_SendDefault {
	if t.SendDefault != nil {
		return t.SendDefault
	}
	t.SendDefault = &NokiaConf_Configure_Router_Bgp_Group_SendDefault{}
	return t.SendDefault
}

// GetAddPaths returns the value of the AddPaths struct pointer
// from NokiaConf_Configure_Router_Bgp_Group. If the receiver or the field AddPaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetAddPaths() *NokiaConf_Configure_Router_Bgp_Group_AddPaths {
	if t != nil && t.AddPaths != nil {
		return t.AddPaths
	}
	return nil
}

// GetAdvertiseIpv6NextHops returns the value of the AdvertiseIpv6NextHops struct pointer
// from NokiaConf_Configure_Router_Bgp_Group. If the receiver or the field AdvertiseIpv6NextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetAdvertiseIpv6NextHops() *NokiaConf_Configure_Router_Bgp_Group_AdvertiseIpv6NextHops {
	if t != nil && t.AdvertiseIpv6NextHops != nil {
		return t.AdvertiseIpv6NextHops
	}
	return nil
}

// GetCluster returns the value of the Cluster struct pointer
// from NokiaConf_Configure_Router_Bgp_Group. If the receiver or the field Cluster is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetCluster() *NokiaConf_Configure_Router_Bgp_Group_Cluster {
	if t != nil && t.Cluster != nil {
		return t.Cluster
	}
	return nil
}

// GetDampPeerOscillations returns the value of the DampPeerOscillations struct pointer
// from NokiaConf_Configure_Router_Bgp_Group. If the receiver or the field DampPeerOscillations is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetDampPeerOscillations() *NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations {
	if t != nil && t.DampPeerOscillations != nil {
		return t.DampPeerOscillations
	}
	return nil
}

// GetDefaultLabelPreference returns the value of the DefaultLabelPreference struct pointer
// from NokiaConf_Configure_Router_Bgp_Group. If the receiver or the field DefaultLabelPreference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetDefaultLabelPreference() *NokiaConf_Configure_Router_Bgp_Group_DefaultLabelPreference {
	if t != nil && t.DefaultLabelPreference != nil {
		return t.DefaultLabelPreference
	}
	return nil
}

// GetDefaultPreference returns the value of the DefaultPreference struct pointer
// from NokiaConf_Configure_Router_Bgp_Group. If the receiver or the field DefaultPreference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetDefaultPreference() *NokiaConf_Configure_Router_Bgp_Group_DefaultPreference {
	if t != nil && t.DefaultPreference != nil {
		return t.DefaultPreference
	}
	return nil
}

// GetDynamicNeighbor returns the value of the DynamicNeighbor struct pointer
// from NokiaConf_Configure_Router_Bgp_Group. If the receiver or the field DynamicNeighbor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetDynamicNeighbor() *NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor {
	if t != nil && t.DynamicNeighbor != nil {
		return t.DynamicNeighbor
	}
	return nil
}

// GetEbgpDefaultRejectPolicy returns the value of the EbgpDefaultRejectPolicy struct pointer
// from NokiaConf_Configure_Router_Bgp_Group. If the receiver or the field EbgpDefaultRejectPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetEbgpDefaultRejectPolicy() *NokiaConf_Configure_Router_Bgp_Group_EbgpDefaultRejectPolicy {
	if t != nil && t.EbgpDefaultRejectPolicy != nil {
		return t.EbgpDefaultRejectPolicy
	}
	return nil
}

// GetEgressEngineering returns the value of the EgressEngineering struct pointer
// from NokiaConf_Configure_Router_Bgp_Group. If the receiver or the field EgressEngineering is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetEgressEngineering() *NokiaConf_Configure_Router_Bgp_Group_EgressEngineering {
	if t != nil && t.EgressEngineering != nil {
		return t.EgressEngineering
	}
	return nil
}

// GetErrorHandling returns the value of the ErrorHandling struct pointer
// from NokiaConf_Configure_Router_Bgp_Group. If the receiver or the field ErrorHandling is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetErrorHandling() *NokiaConf_Configure_Router_Bgp_Group_ErrorHandling {
	if t != nil && t.ErrorHandling != nil {
		return t.ErrorHandling
	}
	return nil
}

// GetExport returns the value of the Export struct pointer
// from NokiaConf_Configure_Router_Bgp_Group. If the receiver or the field Export is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetExport() *NokiaConf_Configure_Router_Bgp_Group_Export {
	if t != nil && t.Export != nil {
		return t.Export
	}
	return nil
}

// GetExtendedNhEncoding returns the value of the ExtendedNhEncoding struct pointer
// from NokiaConf_Configure_Router_Bgp_Group. If the receiver or the field ExtendedNhEncoding is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetExtendedNhEncoding() *NokiaConf_Configure_Router_Bgp_Group_ExtendedNhEncoding {
	if t != nil && t.ExtendedNhEncoding != nil {
		return t.ExtendedNhEncoding
	}
	return nil
}

// GetFamily returns the value of the Family struct pointer
// from NokiaConf_Configure_Router_Bgp_Group. If the receiver or the field Family is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetFamily() *NokiaConf_Configure_Router_Bgp_Group_Family {
	if t != nil && t.Family != nil {
		return t.Family
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from NokiaConf_Configure_Router_Bgp_Group. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetGracefulRestart() *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from NokiaConf_Configure_Router_Bgp_Group. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetHoldTime() *NokiaConf_Configure_Router_Bgp_Group_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetImport returns the value of the Import struct pointer
// from NokiaConf_Configure_Router_Bgp_Group. If the receiver or the field Import is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetImport() *NokiaConf_Configure_Router_Bgp_Group_Import {
	if t != nil && t.Import != nil {
		return t.Import
	}
	return nil
}

// GetLinkBandwidth returns the value of the LinkBandwidth struct pointer
// from NokiaConf_Configure_Router_Bgp_Group. If the receiver or the field LinkBandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetLinkBandwidth() *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth {
	if t != nil && t.LinkBandwidth != nil {
		return t.LinkBandwidth
	}
	return nil
}

// GetLocalAs returns the value of the LocalAs struct pointer
// from NokiaConf_Configure_Router_Bgp_Group. If the receiver or the field LocalAs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetLocalAs() *NokiaConf_Configure_Router_Bgp_Group_LocalAs {
	if t != nil && t.LocalAs != nil {
		return t.LocalAs
	}
	return nil
}

// GetMonitor returns the value of the Monitor struct pointer
// from NokiaConf_Configure_Router_Bgp_Group. If the receiver or the field Monitor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetMonitor() *NokiaConf_Configure_Router_Bgp_Group_Monitor {
	if t != nil && t.Monitor != nil {
		return t.Monitor
	}
	return nil
}

// GetNextHopUnchanged returns the value of the NextHopUnchanged struct pointer
// from NokiaConf_Configure_Router_Bgp_Group. If the receiver or the field NextHopUnchanged is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetNextHopUnchanged() *NokiaConf_Configure_Router_Bgp_Group_NextHopUnchanged {
	if t != nil && t.NextHopUnchanged != nil {
		return t.NextHopUnchanged
	}
	return nil
}

// GetOriginValidation returns the value of the OriginValidation struct pointer
// from NokiaConf_Configure_Router_Bgp_Group. If the receiver or the field OriginValidation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetOriginValidation() *NokiaConf_Configure_Router_Bgp_Group_OriginValidation {
	if t != nil && t.OriginValidation != nil {
		return t.OriginValidation
	}
	return nil
}

// GetOutboundRouteFiltering returns the value of the OutboundRouteFiltering struct pointer
// from NokiaConf_Configure_Router_Bgp_Group. If the receiver or the field OutboundRouteFiltering is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetOutboundRouteFiltering() *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering {
	if t != nil && t.OutboundRouteFiltering != nil {
		return t.OutboundRouteFiltering
	}
	return nil
}

// GetRemovePrivate returns the value of the RemovePrivate struct pointer
// from NokiaConf_Configure_Router_Bgp_Group. If the receiver or the field RemovePrivate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetRemovePrivate() *NokiaConf_Configure_Router_Bgp_Group_RemovePrivate {
	if t != nil && t.RemovePrivate != nil {
		return t.RemovePrivate
	}
	return nil
}

// GetSegmentRoutingV6 returns the value of the SegmentRoutingV6 struct pointer
// from NokiaConf_Configure_Router_Bgp_Group. If the receiver or the field SegmentRoutingV6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetSegmentRoutingV6() *NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6 {
	if t != nil && t.SegmentRoutingV6 != nil {
		return t.SegmentRoutingV6
	}
	return nil
}

// GetSendCommunities returns the value of the SendCommunities struct pointer
// from NokiaConf_Configure_Router_Bgp_Group. If the receiver or the field SendCommunities is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetSendCommunities() *NokiaConf_Configure_Router_Bgp_Group_SendCommunities {
	if t != nil && t.SendCommunities != nil {
		return t.SendCommunities
	}
	return nil
}

// GetSendDefault returns the value of the SendDefault struct pointer
// from NokiaConf_Configure_Router_Bgp_Group. If the receiver or the field SendDefault is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetSendDefault() *NokiaConf_Configure_Router_Bgp_Group_SendDefault {
	if t != nil && t.SendDefault != nil {
		return t.SendDefault
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAdvertiseInactive retrieves the value of the leaf AdvertiseInactive from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseInactive is set, it can
// safely use t.GetAdvertiseInactive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseInactive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetAdvertiseInactive() bool {
	if t == nil || t.AdvertiseInactive == nil {
		return false
	}
	return *t.AdvertiseInactive
}

// GetAggregatorIdZero retrieves the value of the leaf AggregatorIdZero from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AggregatorIdZero is set, it can
// safely use t.GetAggregatorIdZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AggregatorIdZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetAggregatorIdZero() bool {
	if t == nil || t.AggregatorIdZero == nil {
		return false
	}
	return *t.AggregatorIdZero
}

// GetAigp retrieves the value of the leaf Aigp from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aigp is set, it can
// safely use t.GetAigp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aigp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetAigp() bool {
	if t == nil || t.Aigp == nil {
		return false
	}
	return *t.Aigp
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAsOverride retrieves the value of the leaf AsOverride from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsOverride is set, it can
// safely use t.GetAsOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetAsOverride() bool {
	if t == nil || t.AsOverride == nil {
		return false
	}
	return *t.AsOverride
}

// GetAsn_4Byte retrieves the value of the leaf Asn_4Byte from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Asn_4Byte is set, it can
// safely use t.GetAsn_4Byte() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Asn_4Byte == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetAsn_4Byte() bool {
	if t == nil || t.Asn_4Byte == nil {
		return false
	}
	return *t.Asn_4Byte
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationKeychain retrieves the value of the leaf AuthenticationKeychain from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKeychain is set, it can
// safely use t.GetAuthenticationKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKeychain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetAuthenticationKeychain() string {
	if t == nil || t.AuthenticationKeychain == nil {
		return ""
	}
	return *t.AuthenticationKeychain
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetBlockPrefixSid retrieves the value of the leaf BlockPrefixSid from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockPrefixSid is set, it can
// safely use t.GetBlockPrefixSid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockPrefixSid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetBlockPrefixSid() bool {
	if t == nil || t.BlockPrefixSid == nil {
		return false
	}
	return *t.BlockPrefixSid
}

// GetCapabilityNegotiation retrieves the value of the leaf CapabilityNegotiation from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CapabilityNegotiation is set, it can
// safely use t.GetCapabilityNegotiation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CapabilityNegotiation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetCapabilityNegotiation() bool {
	if t == nil || t.CapabilityNegotiation == nil {
		return true
	}
	return *t.CapabilityNegotiation
}

// GetClientReflect retrieves the value of the leaf ClientReflect from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientReflect is set, it can
// safely use t.GetClientReflect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientReflect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetClientReflect() bool {
	if t == nil || t.ClientReflect == nil {
		return false
	}
	return *t.ClientReflect
}

// GetConnectRetry retrieves the value of the leaf ConnectRetry from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectRetry is set, it can
// safely use t.GetConnectRetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectRetry == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetConnectRetry() int32 {
	if t == nil || t.ConnectRetry == nil {
		return 0
	}
	return *t.ConnectRetry
}

// GetDamping retrieves the value of the leaf Damping from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Damping is set, it can
// safely use t.GetDamping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Damping == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetDamping() bool {
	if t == nil || t.Damping == nil {
		return false
	}
	return *t.Damping
}

// GetDefRecvEvpnEncap retrieves the value of the leaf DefRecvEvpnEncap from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefRecvEvpnEncap is set, it can
// safely use t.GetDefRecvEvpnEncap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefRecvEvpnEncap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetDefRecvEvpnEncap() E_NokiaTypesBgp_Encap {
	if t == nil || t.DefRecvEvpnEncap == 0 {
		return 0
	}
	return t.DefRecvEvpnEncap
}

// GetDefaultRouteTarget retrieves the value of the leaf DefaultRouteTarget from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultRouteTarget is set, it can
// safely use t.GetDefaultRouteTarget() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultRouteTarget == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetDefaultRouteTarget() bool {
	if t == nil || t.DefaultRouteTarget == nil {
		return false
	}
	return *t.DefaultRouteTarget
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDynamicNeighborLimit retrieves the value of the leaf DynamicNeighborLimit from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicNeighborLimit is set, it can
// safely use t.GetDynamicNeighborLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicNeighborLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetDynamicNeighborLimit() uint32 {
	if t == nil || t.DynamicNeighborLimit == nil {
		return 0
	}
	return *t.DynamicNeighborLimit
}

// GetEgressPeerEngineeringLabelUnicast retrieves the value of the leaf EgressPeerEngineeringLabelUnicast from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EgressPeerEngineeringLabelUnicast is set, it can
// safely use t.GetEgressPeerEngineeringLabelUnicast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EgressPeerEngineeringLabelUnicast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetEgressPeerEngineeringLabelUnicast() bool {
	if t == nil || t.EgressPeerEngineeringLabelUnicast == nil {
		return false
	}
	return *t.EgressPeerEngineeringLabelUnicast
}

// GetEnforceFirstAs retrieves the value of the leaf EnforceFirstAs from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnforceFirstAs is set, it can
// safely use t.GetEnforceFirstAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnforceFirstAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetEnforceFirstAs() bool {
	if t == nil || t.EnforceFirstAs == nil {
		return false
	}
	return *t.EnforceFirstAs
}

// GetFastExternalFailover retrieves the value of the leaf FastExternalFailover from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastExternalFailover is set, it can
// safely use t.GetFastExternalFailover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastExternalFailover == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetFastExternalFailover() bool {
	if t == nil || t.FastExternalFailover == nil {
		return false
	}
	return *t.FastExternalFailover
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInitialSendDelayZero retrieves the value of the leaf InitialSendDelayZero from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialSendDelayZero is set, it can
// safely use t.GetInitialSendDelayZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialSendDelayZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetInitialSendDelayZero() bool {
	if t == nil || t.InitialSendDelayZero == nil {
		return false
	}
	return *t.InitialSendDelayZero
}

// GetKeepalive retrieves the value of the leaf Keepalive from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keepalive is set, it can
// safely use t.GetKeepalive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keepalive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetKeepalive() int32 {
	if t == nil || t.Keepalive == nil {
		return 0
	}
	return *t.Keepalive
}

// GetLabelPreference retrieves the value of the leaf LabelPreference from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelPreference is set, it can
// safely use t.GetLabelPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetLabelPreference() uint32 {
	if t == nil || t.LabelPreference == nil {
		return 0
	}
	return *t.LabelPreference
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetLocalPreference retrieves the value of the leaf LocalPreference from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPreference is set, it can
// safely use t.GetLocalPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetLocalPreference() int64 {
	if t == nil || t.LocalPreference == nil {
		return 0
	}
	return *t.LocalPreference
}

// GetLoopDetect retrieves the value of the leaf LoopDetect from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopDetect is set, it can
// safely use t.GetLoopDetect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopDetect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetLoopDetect() E_NokiaTypesBgp_LoopDetect {
	if t == nil || t.LoopDetect == 0 {
		return 0
	}
	return t.LoopDetect
}

// GetLoopDetectThreshold retrieves the value of the leaf LoopDetectThreshold from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopDetectThreshold is set, it can
// safely use t.GetLoopDetectThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopDetectThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetLoopDetectThreshold() uint32 {
	if t == nil || t.LoopDetectThreshold == nil {
		return 0
	}
	return *t.LoopDetectThreshold
}

// GetMedOut retrieves the value of the leaf MedOut from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MedOut is set, it can
// safely use t.GetMedOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MedOut == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetMedOut() NokiaConf_Configure_Router_Bgp_Group_MedOut_Union {
	if t == nil || t.MedOut == nil {
		return nil
	}
	return t.MedOut
}

// GetMinRouteAdvertisement retrieves the value of the leaf MinRouteAdvertisement from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinRouteAdvertisement is set, it can
// safely use t.GetMinRouteAdvertisement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinRouteAdvertisement == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetMinRouteAdvertisement() int16 {
	if t == nil || t.MinRouteAdvertisement == nil {
		return 0
	}
	return *t.MinRouteAdvertisement
}

// GetMultihop retrieves the value of the leaf Multihop from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multihop is set, it can
// safely use t.GetMultihop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multihop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetMultihop() int32 {
	if t == nil || t.Multihop == nil {
		return 0
	}
	return *t.Multihop
}

// GetMultipathEligible retrieves the value of the leaf MultipathEligible from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultipathEligible is set, it can
// safely use t.GetMultipathEligible() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultipathEligible == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetMultipathEligible() bool {
	if t == nil || t.MultipathEligible == nil {
		return false
	}
	return *t.MultipathEligible
}

// GetNextHopSelf retrieves the value of the leaf NextHopSelf from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopSelf is set, it can
// safely use t.GetNextHopSelf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopSelf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetNextHopSelf() bool {
	if t == nil || t.NextHopSelf == nil {
		return false
	}
	return *t.NextHopSelf
}

// GetPassive retrieves the value of the leaf Passive from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Passive is set, it can
// safely use t.GetPassive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Passive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetPassive() bool {
	if t == nil || t.Passive == nil {
		return false
	}
	return *t.Passive
}

// GetPathMtuDiscovery retrieves the value of the leaf PathMtuDiscovery from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathMtuDiscovery is set, it can
// safely use t.GetPathMtuDiscovery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathMtuDiscovery == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetPathMtuDiscovery() bool {
	if t == nil || t.PathMtuDiscovery == nil {
		return false
	}
	return *t.PathMtuDiscovery
}

// GetPeerAs retrieves the value of the leaf PeerAs from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerAs is set, it can
// safely use t.GetPeerAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetPeerAs() uint32 {
	if t == nil || t.PeerAs == nil {
		return 0
	}
	return *t.PeerAs
}

// GetPeerIpTracking retrieves the value of the leaf PeerIpTracking from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerIpTracking is set, it can
// safely use t.GetPeerIpTracking() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerIpTracking == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetPeerIpTracking() bool {
	if t == nil || t.PeerIpTracking == nil {
		return false
	}
	return *t.PeerIpTracking
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetSelectiveLabelIpv4Install retrieves the value of the leaf SelectiveLabelIpv4Install from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SelectiveLabelIpv4Install is set, it can
// safely use t.GetSelectiveLabelIpv4Install() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SelectiveLabelIpv4Install == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetSelectiveLabelIpv4Install() bool {
	if t == nil || t.SelectiveLabelIpv4Install == nil {
		return false
	}
	return *t.SelectiveLabelIpv4Install
}

// GetSplitHorizon retrieves the value of the leaf SplitHorizon from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SplitHorizon is set, it can
// safely use t.GetSplitHorizon() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SplitHorizon == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetSplitHorizon() bool {
	if t == nil || t.SplitHorizon == nil {
		return false
	}
	return *t.SplitHorizon
}

// GetStaticGroup retrieves the value of the leaf StaticGroup from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticGroup is set, it can
// safely use t.GetStaticGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetStaticGroup() bool {
	if t == nil || t.StaticGroup == nil {
		return true
	}
	return *t.StaticGroup
}

// GetTcpMss retrieves the value of the leaf TcpMss from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpMss is set, it can
// safely use t.GetTcpMss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpMss == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetTcpMss() NokiaConf_Configure_Router_Bgp_Group_TcpMss_Union {
	if t == nil || t.TcpMss == nil {
		return nil
	}
	return t.TcpMss
}

// GetThirdPartyNexthop retrieves the value of the leaf ThirdPartyNexthop from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ThirdPartyNexthop is set, it can
// safely use t.GetThirdPartyNexthop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ThirdPartyNexthop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetThirdPartyNexthop() bool {
	if t == nil || t.ThirdPartyNexthop == nil {
		return false
	}
	return *t.ThirdPartyNexthop
}

// GetTtlSecurity retrieves the value of the leaf TtlSecurity from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TtlSecurity is set, it can
// safely use t.GetTtlSecurity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TtlSecurity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetTtlSecurity() uint32 {
	if t == nil || t.TtlSecurity == nil {
		return 0
	}
	return *t.TtlSecurity
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetType() E_NokiaTypesBgp_PeerType {
	if t == nil || t.Type == 0 {
		return NokiaTypesBgp_PeerType_no_type
	}
	return t.Type
}

// GetVpnApplyExport retrieves the value of the leaf VpnApplyExport from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnApplyExport is set, it can
// safely use t.GetVpnApplyExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnApplyExport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetVpnApplyExport() bool {
	if t == nil || t.VpnApplyExport == nil {
		return false
	}
	return *t.VpnApplyExport
}

// GetVpnApplyImport retrieves the value of the leaf VpnApplyImport from the NokiaConf_Configure_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnApplyImport is set, it can
// safely use t.GetVpnApplyImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnApplyImport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group) GetVpnApplyImport() bool {
	if t == nil || t.VpnApplyImport == nil {
		return false
	}
	return *t.VpnApplyImport
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Aigp == nil {
		var v bool = false
		t.Aigp = &v
	}
	if t.AsOverride == nil {
		var v bool = false
		t.AsOverride = &v
	}
	if t.BlockPrefixSid == nil {
		var v bool = false
		t.BlockPrefixSid = &v
	}
	if t.CapabilityNegotiation == nil {
		var v bool = true
		t.CapabilityNegotiation = &v
	}
	if t.DefaultRouteTarget == nil {
		var v bool = false
		t.DefaultRouteTarget = &v
	}
	if t.EgressPeerEngineeringLabelUnicast == nil {
		var v bool = false
		t.EgressPeerEngineeringLabelUnicast = &v
	}
	if t.MultipathEligible == nil {
		var v bool = false
		t.MultipathEligible = &v
	}
	if t.NextHopSelf == nil {
		var v bool = false
		t.NextHopSelf = &v
	}
	if t.Passive == nil {
		var v bool = false
		t.Passive = &v
	}
	if t.StaticGroup == nil {
		var v bool = true
		t.StaticGroup = &v
	}
	if t.Type == 0 {
		t.Type = NokiaTypesBgp_PeerType_no_type
	}
	t.AddPaths.PopulateDefaults()
	t.AdvertiseIpv6NextHops.PopulateDefaults()
	t.Cluster.PopulateDefaults()
	t.DampPeerOscillations.PopulateDefaults()
	t.DefaultLabelPreference.PopulateDefaults()
	t.DefaultPreference.PopulateDefaults()
	t.DynamicNeighbor.PopulateDefaults()
	t.EbgpDefaultRejectPolicy.PopulateDefaults()
	t.EgressEngineering.PopulateDefaults()
	t.ErrorHandling.PopulateDefaults()
	t.Export.PopulateDefaults()
	t.ExtendedNhEncoding.PopulateDefaults()
	t.Family.PopulateDefaults()
	t.GracefulRestart.PopulateDefaults()
	t.HoldTime.PopulateDefaults()
	t.Import.PopulateDefaults()
	t.LinkBandwidth.PopulateDefaults()
	t.LocalAs.PopulateDefaults()
	t.Monitor.PopulateDefaults()
	t.NextHopUnchanged.PopulateDefaults()
	t.OriginValidation.PopulateDefaults()
	t.OutboundRouteFiltering.PopulateDefaults()
	t.RemovePrivate.PopulateDefaults()
	t.SegmentRoutingV6.PopulateDefaults()
	t.SendCommunities.PopulateDefaults()
	t.SendDefault.PopulateDefaults()
	for _, e := range t.PrefixLimit {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Bgp_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Bgp_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group.
func (*NokiaConf_Configure_Router_Bgp_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_AddPaths represents the /nokia-conf/configure/router/bgp/group/add-paths YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_AddPaths struct {
	Evpn         *NokiaConf_Configure_Router_Bgp_Group_AddPaths_Evpn         `path:"evpn" module:"nokia-conf"`
	Ipv4         *NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv4         `path:"ipv4" module:"nokia-conf"`
	Ipv6         *NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv6         `path:"ipv6" module:"nokia-conf"`
	LabelIpv4    *NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv4    `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6    *NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv6    `path:"label-ipv6" module:"nokia-conf"`
	McastVpnIpv4 *NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv4 `path:"mcast-vpn-ipv4" module:"nokia-conf"`
	McastVpnIpv6 *NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv6 `path:"mcast-vpn-ipv6" module:"nokia-conf"`
	MvpnIpv4     *NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv4     `path:"mvpn-ipv4" module:"nokia-conf"`
	MvpnIpv6     *NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv6     `path:"mvpn-ipv6" module:"nokia-conf"`
	VpnIpv4      *NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv4      `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6      *NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv6      `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_AddPaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_AddPaths) IsYANGGoStruct() {}

// GetOrCreateEvpn retrieves the value of the Evpn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths) GetOrCreateEvpn() *NokiaConf_Configure_Router_Bgp_Group_AddPaths_Evpn {
	if t.Evpn != nil {
		return t.Evpn
	}
	t.Evpn = &NokiaConf_Configure_Router_Bgp_Group_AddPaths_Evpn{}
	return t.Evpn
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths) GetOrCreateIpv4() *NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths) GetOrCreateIpv6() *NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv6{}
	return t.Ipv6
}

// GetOrCreateLabelIpv4 retrieves the value of the LabelIpv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths) GetOrCreateLabelIpv4() *NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv4 {
	if t.LabelIpv4 != nil {
		return t.LabelIpv4
	}
	t.LabelIpv4 = &NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv4{}
	return t.LabelIpv4
}

// GetOrCreateLabelIpv6 retrieves the value of the LabelIpv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths) GetOrCreateLabelIpv6() *NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv6 {
	if t.LabelIpv6 != nil {
		return t.LabelIpv6
	}
	t.LabelIpv6 = &NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv6{}
	return t.LabelIpv6
}

// GetOrCreateMcastVpnIpv4 retrieves the value of the McastVpnIpv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths) GetOrCreateMcastVpnIpv4() *NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv4 {
	if t.McastVpnIpv4 != nil {
		return t.McastVpnIpv4
	}
	t.McastVpnIpv4 = &NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv4{}
	return t.McastVpnIpv4
}

// GetOrCreateMcastVpnIpv6 retrieves the value of the McastVpnIpv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths) GetOrCreateMcastVpnIpv6() *NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv6 {
	if t.McastVpnIpv6 != nil {
		return t.McastVpnIpv6
	}
	t.McastVpnIpv6 = &NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv6{}
	return t.McastVpnIpv6
}

// GetOrCreateMvpnIpv4 retrieves the value of the MvpnIpv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths) GetOrCreateMvpnIpv4() *NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv4 {
	if t.MvpnIpv4 != nil {
		return t.MvpnIpv4
	}
	t.MvpnIpv4 = &NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv4{}
	return t.MvpnIpv4
}

// GetOrCreateMvpnIpv6 retrieves the value of the MvpnIpv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths) GetOrCreateMvpnIpv6() *NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv6 {
	if t.MvpnIpv6 != nil {
		return t.MvpnIpv6
	}
	t.MvpnIpv6 = &NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv6{}
	return t.MvpnIpv6
}

// GetOrCreateVpnIpv4 retrieves the value of the VpnIpv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths) GetOrCreateVpnIpv4() *NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv4 {
	if t.VpnIpv4 != nil {
		return t.VpnIpv4
	}
	t.VpnIpv4 = &NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv4{}
	return t.VpnIpv4
}

// GetOrCreateVpnIpv6 retrieves the value of the VpnIpv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths) GetOrCreateVpnIpv6() *NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv6 {
	if t.VpnIpv6 != nil {
		return t.VpnIpv6
	}
	t.VpnIpv6 = &NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv6{}
	return t.VpnIpv6
}

// GetEvpn returns the value of the Evpn struct pointer
// from NokiaConf_Configure_Router_Bgp_Group_AddPaths. If the receiver or the field Evpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths) GetEvpn() *NokiaConf_Configure_Router_Bgp_Group_AddPaths_Evpn {
	if t != nil && t.Evpn != nil {
		return t.Evpn
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Router_Bgp_Group_AddPaths. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths) GetIpv4() *NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Router_Bgp_Group_AddPaths. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths) GetIpv6() *NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetLabelIpv4 returns the value of the LabelIpv4 struct pointer
// from NokiaConf_Configure_Router_Bgp_Group_AddPaths. If the receiver or the field LabelIpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths) GetLabelIpv4() *NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv4 {
	if t != nil && t.LabelIpv4 != nil {
		return t.LabelIpv4
	}
	return nil
}

// GetLabelIpv6 returns the value of the LabelIpv6 struct pointer
// from NokiaConf_Configure_Router_Bgp_Group_AddPaths. If the receiver or the field LabelIpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths) GetLabelIpv6() *NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv6 {
	if t != nil && t.LabelIpv6 != nil {
		return t.LabelIpv6
	}
	return nil
}

// GetMcastVpnIpv4 returns the value of the McastVpnIpv4 struct pointer
// from NokiaConf_Configure_Router_Bgp_Group_AddPaths. If the receiver or the field McastVpnIpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths) GetMcastVpnIpv4() *NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv4 {
	if t != nil && t.McastVpnIpv4 != nil {
		return t.McastVpnIpv4
	}
	return nil
}

// GetMcastVpnIpv6 returns the value of the McastVpnIpv6 struct pointer
// from NokiaConf_Configure_Router_Bgp_Group_AddPaths. If the receiver or the field McastVpnIpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths) GetMcastVpnIpv6() *NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv6 {
	if t != nil && t.McastVpnIpv6 != nil {
		return t.McastVpnIpv6
	}
	return nil
}

// GetMvpnIpv4 returns the value of the MvpnIpv4 struct pointer
// from NokiaConf_Configure_Router_Bgp_Group_AddPaths. If the receiver or the field MvpnIpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths) GetMvpnIpv4() *NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv4 {
	if t != nil && t.MvpnIpv4 != nil {
		return t.MvpnIpv4
	}
	return nil
}

// GetMvpnIpv6 returns the value of the MvpnIpv6 struct pointer
// from NokiaConf_Configure_Router_Bgp_Group_AddPaths. If the receiver or the field MvpnIpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths) GetMvpnIpv6() *NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv6 {
	if t != nil && t.MvpnIpv6 != nil {
		return t.MvpnIpv6
	}
	return nil
}

// GetVpnIpv4 returns the value of the VpnIpv4 struct pointer
// from NokiaConf_Configure_Router_Bgp_Group_AddPaths. If the receiver or the field VpnIpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths) GetVpnIpv4() *NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv4 {
	if t != nil && t.VpnIpv4 != nil {
		return t.VpnIpv4
	}
	return nil
}

// GetVpnIpv6 returns the value of the VpnIpv6 struct pointer
// from NokiaConf_Configure_Router_Bgp_Group_AddPaths. If the receiver or the field VpnIpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths) GetVpnIpv6() *NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv6 {
	if t != nil && t.VpnIpv6 != nil {
		return t.VpnIpv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_AddPaths
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Evpn.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	t.LabelIpv4.PopulateDefaults()
	t.LabelIpv6.PopulateDefaults()
	t.McastVpnIpv4.PopulateDefaults()
	t.McastVpnIpv6.PopulateDefaults()
	t.MvpnIpv4.PopulateDefaults()
	t.MvpnIpv6.PopulateDefaults()
	t.VpnIpv4.PopulateDefaults()
	t.VpnIpv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_AddPaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_AddPaths.
func (*NokiaConf_Configure_Router_Bgp_Group_AddPaths) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_AddPaths_Evpn represents the /nokia-conf/configure/router/bgp/group/add-paths/evpn YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_AddPaths_Evpn struct {
	Receive *bool                                                         `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Router_Bgp_Group_AddPaths_Evpn_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_AddPaths_Evpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_AddPaths_Evpn) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Bgp_Group_AddPaths_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_Evpn) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Bgp_Group_AddPaths_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_Evpn) GetSend() NokiaConf_Configure_Router_Bgp_Group_AddPaths_Evpn_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_AddPaths_Evpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_Evpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_Evpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_AddPaths_Evpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_Evpn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_Evpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_AddPaths_Evpn.
func (*NokiaConf_Configure_Router_Bgp_Group_AddPaths_Evpn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv4 represents the /nokia-conf/configure/router/bgp/group/add-paths/ipv4 YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv4 struct {
	Receive *bool                                                         `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv4_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv4) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv4) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv4) GetSend() NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv4_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv4.
func (*NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv6 represents the /nokia-conf/configure/router/bgp/group/add-paths/ipv6 YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv6 struct {
	Receive *bool                                                         `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv6_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv6) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv6) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv6) GetSend() NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv6_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv6.
func (*NokiaConf_Configure_Router_Bgp_Group_AddPaths_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv4 represents the /nokia-conf/configure/router/bgp/group/add-paths/label-ipv4 YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv4 struct {
	Receive *bool                                                              `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv4_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv4) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv4) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv4) GetSend() NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv4_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv4.
func (*NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv6 represents the /nokia-conf/configure/router/bgp/group/add-paths/label-ipv6 YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv6 struct {
	Receive *bool                                                              `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv6_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv6) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv6) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv6) GetSend() NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv6_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv6.
func (*NokiaConf_Configure_Router_Bgp_Group_AddPaths_LabelIpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv4 represents the /nokia-conf/configure/router/bgp/group/add-paths/mcast-vpn-ipv4 YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv4 struct {
	Receive *bool  `path:"receive" module:"nokia-conf"`
	Send    *int32 `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv4) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv4) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv4) GetSend() int32 {
	if t == nil || t.Send == nil {
		return 0
	}
	return *t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv4.
func (*NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv6 represents the /nokia-conf/configure/router/bgp/group/add-paths/mcast-vpn-ipv6 YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv6 struct {
	Receive *bool  `path:"receive" module:"nokia-conf"`
	Send    *int32 `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv6) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv6) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv6) GetSend() int32 {
	if t == nil || t.Send == nil {
		return 0
	}
	return *t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv6.
func (*NokiaConf_Configure_Router_Bgp_Group_AddPaths_McastVpnIpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv4 represents the /nokia-conf/configure/router/bgp/group/add-paths/mvpn-ipv4 YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv4 struct {
	Receive *bool  `path:"receive" module:"nokia-conf"`
	Send    *int32 `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv4) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv4) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv4) GetSend() int32 {
	if t == nil || t.Send == nil {
		return 0
	}
	return *t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv4.
func (*NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv6 represents the /nokia-conf/configure/router/bgp/group/add-paths/mvpn-ipv6 YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv6 struct {
	Receive *bool  `path:"receive" module:"nokia-conf"`
	Send    *int32 `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv6) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv6) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv6) GetSend() int32 {
	if t == nil || t.Send == nil {
		return 0
	}
	return *t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv6.
func (*NokiaConf_Configure_Router_Bgp_Group_AddPaths_MvpnIpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv4 represents the /nokia-conf/configure/router/bgp/group/add-paths/vpn-ipv4 YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv4 struct {
	Receive *bool                                                            `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv4_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv4) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv4) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv4) GetSend() NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv4_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv4.
func (*NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv6 represents the /nokia-conf/configure/router/bgp/group/add-paths/vpn-ipv6 YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv6 struct {
	Receive *bool                                                            `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv6_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv6) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv6) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv6) GetSend() NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv6_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv6.
func (*NokiaConf_Configure_Router_Bgp_Group_AddPaths_VpnIpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_AdvertiseIpv6NextHops represents the /nokia-conf/configure/router/bgp/group/advertise-ipv6-next-hops YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_AdvertiseIpv6NextHops struct {
	Evpn      *bool `path:"evpn" module:"nokia-conf"`
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
	VpnIpv4   *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6   *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_AdvertiseIpv6NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_AdvertiseIpv6NextHops) IsYANGGoStruct() {}

// GetEvpn retrieves the value of the leaf Evpn from the NokiaConf_Configure_Router_Bgp_Group_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Evpn is set, it can
// safely use t.GetEvpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Evpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_AdvertiseIpv6NextHops) GetEvpn() bool {
	if t == nil || t.Evpn == nil {
		return false
	}
	return *t.Evpn
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Router_Bgp_Group_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_AdvertiseIpv6NextHops) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Router_Bgp_Group_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_AdvertiseIpv6NextHops) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Router_Bgp_Group_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_AdvertiseIpv6NextHops) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Router_Bgp_Group_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_AdvertiseIpv6NextHops) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Router_Bgp_Group_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_AdvertiseIpv6NextHops) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_AdvertiseIpv6NextHops
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_AdvertiseIpv6NextHops) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Evpn == nil {
		var v bool = false
		t.Evpn = &v
	}
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_AdvertiseIpv6NextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_AdvertiseIpv6NextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_AdvertiseIpv6NextHops) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_AdvertiseIpv6NextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_AdvertiseIpv6NextHops.
func (*NokiaConf_Configure_Router_Bgp_Group_AdvertiseIpv6NextHops) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_Cluster represents the /nokia-conf/configure/router/bgp/group/cluster YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_Cluster struct {
	AllowLocalFallback *bool   `path:"allow-local-fallback" module:"nokia-conf"`
	ClusterId          *string `path:"cluster-id" module:"nokia-conf"`
	OrrLocation        *uint32 `path:"orr-location" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_Cluster implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_Cluster) IsYANGGoStruct() {}

// GetAllowLocalFallback retrieves the value of the leaf AllowLocalFallback from the NokiaConf_Configure_Router_Bgp_Group_Cluster
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowLocalFallback is set, it can
// safely use t.GetAllowLocalFallback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowLocalFallback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Cluster) GetAllowLocalFallback() bool {
	if t == nil || t.AllowLocalFallback == nil {
		return false
	}
	return *t.AllowLocalFallback
}

// GetClusterId retrieves the value of the leaf ClusterId from the NokiaConf_Configure_Router_Bgp_Group_Cluster
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClusterId is set, it can
// safely use t.GetClusterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClusterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Cluster) GetClusterId() string {
	if t == nil || t.ClusterId == nil {
		return ""
	}
	return *t.ClusterId
}

// GetOrrLocation retrieves the value of the leaf OrrLocation from the NokiaConf_Configure_Router_Bgp_Group_Cluster
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OrrLocation is set, it can
// safely use t.GetOrrLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OrrLocation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Cluster) GetOrrLocation() uint32 {
	if t == nil || t.OrrLocation == nil {
		return 0
	}
	return *t.OrrLocation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_Cluster
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_Cluster) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowLocalFallback == nil {
		var v bool = false
		t.AllowLocalFallback = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_Cluster) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_Cluster"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_Cluster) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_Cluster) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_Cluster.
func (*NokiaConf_Configure_Router_Bgp_Group_Cluster) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations represents the /nokia-conf/configure/router/bgp/group/damp-peer-oscillations YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations struct {
	ErrorInterval *uint32                                                                 `path:"error-interval" module:"nokia-conf"`
	IdleHoldTime  *NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime `path:"idle-hold-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations) IsYANGGoStruct() {}

// GetOrCreateIdleHoldTime retrieves the value of the IdleHoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations) GetOrCreateIdleHoldTime() *NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime {
	if t.IdleHoldTime != nil {
		return t.IdleHoldTime
	}
	t.IdleHoldTime = &NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime{}
	return t.IdleHoldTime
}

// GetIdleHoldTime returns the value of the IdleHoldTime struct pointer
// from NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations. If the receiver or the field IdleHoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations) GetIdleHoldTime() *NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime {
	if t != nil && t.IdleHoldTime != nil {
		return t.IdleHoldTime
	}
	return nil
}

// GetErrorInterval retrieves the value of the leaf ErrorInterval from the NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ErrorInterval is set, it can
// safely use t.GetErrorInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ErrorInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations) GetErrorInterval() uint32 {
	if t == nil || t.ErrorInterval == nil {
		return 30
	}
	return *t.ErrorInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ErrorInterval == nil {
		var v uint32 = 30
		t.ErrorInterval = &v
	}
	t.IdleHoldTime.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations.
func (*NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime represents the /nokia-conf/configure/router/bgp/group/damp-peer-oscillations/idle-hold-time YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime struct {
	InitialWait *uint32 `path:"initial-wait" module:"nokia-conf"`
	MaxWait     *uint32 `path:"max-wait" module:"nokia-conf"`
	SecondWait  *uint32 `path:"second-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime) IsYANGGoStruct() {}

// GetInitialWait retrieves the value of the leaf InitialWait from the NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialWait is set, it can
// safely use t.GetInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime) GetInitialWait() uint32 {
	if t == nil || t.InitialWait == nil {
		return 0
	}
	return *t.InitialWait
}

// GetMaxWait retrieves the value of the leaf MaxWait from the NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxWait is set, it can
// safely use t.GetMaxWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime) GetMaxWait() uint32 {
	if t == nil || t.MaxWait == nil {
		return 60
	}
	return *t.MaxWait
}

// GetSecondWait retrieves the value of the leaf SecondWait from the NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondWait is set, it can
// safely use t.GetSecondWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime) GetSecondWait() uint32 {
	if t == nil || t.SecondWait == nil {
		return 5
	}
	return *t.SecondWait
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitialWait == nil {
		var v uint32 = 0
		t.InitialWait = &v
	}
	if t.MaxWait == nil {
		var v uint32 = 60
		t.MaxWait = &v
	}
	if t.SecondWait == nil {
		var v uint32 = 5
		t.SecondWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime.
func (*NokiaConf_Configure_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_DefaultLabelPreference represents the /nokia-conf/configure/router/bgp/group/default-label-preference YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_DefaultLabelPreference struct {
	Ebgp *uint32 `path:"ebgp" module:"nokia-conf"`
	Ibgp *uint32 `path:"ibgp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_DefaultLabelPreference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_DefaultLabelPreference) IsYANGGoStruct() {}

// GetEbgp retrieves the value of the leaf Ebgp from the NokiaConf_Configure_Router_Bgp_Group_DefaultLabelPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ebgp is set, it can
// safely use t.GetEbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ebgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_DefaultLabelPreference) GetEbgp() uint32 {
	if t == nil || t.Ebgp == nil {
		return 0
	}
	return *t.Ebgp
}

// GetIbgp retrieves the value of the leaf Ibgp from the NokiaConf_Configure_Router_Bgp_Group_DefaultLabelPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ibgp is set, it can
// safely use t.GetIbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ibgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_DefaultLabelPreference) GetIbgp() uint32 {
	if t == nil || t.Ibgp == nil {
		return 0
	}
	return *t.Ibgp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_DefaultLabelPreference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_DefaultLabelPreference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_DefaultLabelPreference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_DefaultLabelPreference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_DefaultLabelPreference) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_DefaultLabelPreference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_DefaultLabelPreference.
func (*NokiaConf_Configure_Router_Bgp_Group_DefaultLabelPreference) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_DefaultPreference represents the /nokia-conf/configure/router/bgp/group/default-preference YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_DefaultPreference struct {
	Ebgp *uint32 `path:"ebgp" module:"nokia-conf"`
	Ibgp *uint32 `path:"ibgp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_DefaultPreference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_DefaultPreference) IsYANGGoStruct() {}

// GetEbgp retrieves the value of the leaf Ebgp from the NokiaConf_Configure_Router_Bgp_Group_DefaultPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ebgp is set, it can
// safely use t.GetEbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ebgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_DefaultPreference) GetEbgp() uint32 {
	if t == nil || t.Ebgp == nil {
		return 0
	}
	return *t.Ebgp
}

// GetIbgp retrieves the value of the leaf Ibgp from the NokiaConf_Configure_Router_Bgp_Group_DefaultPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ibgp is set, it can
// safely use t.GetIbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ibgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_DefaultPreference) GetIbgp() uint32 {
	if t == nil || t.Ibgp == nil {
		return 0
	}
	return *t.Ibgp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_DefaultPreference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_DefaultPreference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_DefaultPreference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_DefaultPreference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_DefaultPreference) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_DefaultPreference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_DefaultPreference.
func (*NokiaConf_Configure_Router_Bgp_Group_DefaultPreference) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor represents the /nokia-conf/configure/router/bgp/group/dynamic-neighbor YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor struct {
	Match *NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor) IsYANGGoStruct() {}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor) GetOrCreateMatch() *NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match{}
	return t.Match
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor) GetMatch() *NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Match.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor.
func (*NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match represents the /nokia-conf/configure/router/bgp/group/dynamic-neighbor/match YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match struct {
	Prefix map[string]*NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match_Prefix `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match) NewPrefix(IpPrefix string) (*NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match_Prefix)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match_Prefix{
		IpPrefix: &IpPrefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.IpPrefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match) GetOrCreatePrefix(IpPrefix string) *NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match_Prefix {

	key := IpPrefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match) GetPrefix(IpPrefix string) *NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match_Prefix {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match) DeletePrefix(IpPrefix string) {
	key := IpPrefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match_Prefix struct to the
// list Prefix of NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match) AppendPrefix(v *NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match_Prefix) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match.
func (*NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match_Prefix represents the /nokia-conf/configure/router/bgp/group/dynamic-neighbor/match/prefix YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match_Prefix struct {
	AllowedPeerAs      []string `path:"allowed-peer-as" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	IpPrefix           *string  `path:"ip-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match_Prefix) IsYANGGoStruct() {}

// GetAllowedPeerAs retrieves the value of the leaf AllowedPeerAs from the NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowedPeerAs is set, it can
// safely use t.GetAllowedPeerAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowedPeerAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match_Prefix) GetAllowedPeerAs() []string {
	if t == nil || t.AllowedPeerAs == nil {
		return nil
	}
	return t.AllowedPeerAs
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match_Prefix) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match_Prefix) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match_Prefix) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match_Prefix.
func (*NokiaConf_Configure_Router_Bgp_Group_DynamicNeighbor_Match_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_EbgpDefaultRejectPolicy represents the /nokia-conf/configure/router/bgp/group/ebgp-default-reject-policy YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_EbgpDefaultRejectPolicy struct {
	Export *bool `path:"export" module:"nokia-conf"`
	Import *bool `path:"import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_EbgpDefaultRejectPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_EbgpDefaultRejectPolicy) IsYANGGoStruct() {}

// GetExport retrieves the value of the leaf Export from the NokiaConf_Configure_Router_Bgp_Group_EbgpDefaultRejectPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Export is set, it can
// safely use t.GetExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Export == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_EbgpDefaultRejectPolicy) GetExport() bool {
	if t == nil || t.Export == nil {
		return true
	}
	return *t.Export
}

// GetImport retrieves the value of the leaf Import from the NokiaConf_Configure_Router_Bgp_Group_EbgpDefaultRejectPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Import is set, it can
// safely use t.GetImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Import == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_EbgpDefaultRejectPolicy) GetImport() bool {
	if t == nil || t.Import == nil {
		return true
	}
	return *t.Import
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_EbgpDefaultRejectPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_EbgpDefaultRejectPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Export == nil {
		var v bool = true
		t.Export = &v
	}
	if t.Import == nil {
		var v bool = true
		t.Import = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_EbgpDefaultRejectPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_EbgpDefaultRejectPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_EbgpDefaultRejectPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_EbgpDefaultRejectPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_EbgpDefaultRejectPolicy.
func (*NokiaConf_Configure_Router_Bgp_Group_EbgpDefaultRejectPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_EgressEngineering represents the /nokia-conf/configure/router/bgp/group/egress-engineering YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_EgressEngineering struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_EgressEngineering implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_EgressEngineering) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Bgp_Group_EgressEngineering
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_EgressEngineering) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bgp_Group_EgressEngineering
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_EgressEngineering) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bgp_Group_EgressEngineering
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_EgressEngineering) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_EgressEngineering
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_EgressEngineering) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_EgressEngineering) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_EgressEngineering"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_EgressEngineering) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_EgressEngineering) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_EgressEngineering.
func (*NokiaConf_Configure_Router_Bgp_Group_EgressEngineering) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_ErrorHandling represents the /nokia-conf/configure/router/bgp/group/error-handling YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_ErrorHandling struct {
	UpdateFaultTolerance *bool `path:"update-fault-tolerance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_ErrorHandling implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_ErrorHandling) IsYANGGoStruct() {}

// GetUpdateFaultTolerance retrieves the value of the leaf UpdateFaultTolerance from the NokiaConf_Configure_Router_Bgp_Group_ErrorHandling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UpdateFaultTolerance is set, it can
// safely use t.GetUpdateFaultTolerance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UpdateFaultTolerance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_ErrorHandling) GetUpdateFaultTolerance() bool {
	if t == nil || t.UpdateFaultTolerance == nil {
		return false
	}
	return *t.UpdateFaultTolerance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_ErrorHandling
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_ErrorHandling) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_ErrorHandling) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_ErrorHandling"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_ErrorHandling) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_ErrorHandling) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_ErrorHandling.
func (*NokiaConf_Configure_Router_Bgp_Group_ErrorHandling) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_Export represents the /nokia-conf/configure/router/bgp/group/export YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_Export struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Policy             []string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_Export implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_Export) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bgp_Group_Export
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Export) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bgp_Group_Export
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Export) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Router_Bgp_Group_Export
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Export) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_Export
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_Export) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_Export) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_Export"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_Export) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_Export) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_Export.
func (*NokiaConf_Configure_Router_Bgp_Group_Export) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_ExtendedNhEncoding represents the /nokia-conf/configure/router/bgp/group/extended-nh-encoding YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_ExtendedNhEncoding struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	VpnIpv4   *bool `path:"vpn-ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_ExtendedNhEncoding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_ExtendedNhEncoding) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Router_Bgp_Group_ExtendedNhEncoding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_ExtendedNhEncoding) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Router_Bgp_Group_ExtendedNhEncoding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_ExtendedNhEncoding) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Router_Bgp_Group_ExtendedNhEncoding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_ExtendedNhEncoding) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_ExtendedNhEncoding
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_ExtendedNhEncoding) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_ExtendedNhEncoding) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_ExtendedNhEncoding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_ExtendedNhEncoding) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_ExtendedNhEncoding) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_ExtendedNhEncoding.
func (*NokiaConf_Configure_Router_Bgp_Group_ExtendedNhEncoding) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_Family represents the /nokia-conf/configure/router/bgp/group/family YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_Family struct {
	BgpLs        *bool `path:"bgp-ls" module:"nokia-conf"`
	Evpn         *bool `path:"evpn" module:"nokia-conf"`
	FlowIpv4     *bool `path:"flow-ipv4" module:"nokia-conf"`
	FlowIpv6     *bool `path:"flow-ipv6" module:"nokia-conf"`
	Ipv4         *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6         *bool `path:"ipv6" module:"nokia-conf"`
	L2Vpn        *bool `path:"l2-vpn" module:"nokia-conf"`
	LabelIpv4    *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6    *bool `path:"label-ipv6" module:"nokia-conf"`
	McastIpv4    *bool `path:"mcast-ipv4" module:"nokia-conf"`
	McastIpv6    *bool `path:"mcast-ipv6" module:"nokia-conf"`
	McastVpnIpv4 *bool `path:"mcast-vpn-ipv4" module:"nokia-conf"`
	McastVpnIpv6 *bool `path:"mcast-vpn-ipv6" module:"nokia-conf"`
	MdtSafi      *bool `path:"mdt-safi" module:"nokia-conf"`
	MsPw         *bool `path:"ms-pw" module:"nokia-conf"`
	MvpnIpv4     *bool `path:"mvpn-ipv4" module:"nokia-conf"`
	MvpnIpv6     *bool `path:"mvpn-ipv6" module:"nokia-conf"`
	RouteTarget  *bool `path:"route-target" module:"nokia-conf"`
	SrPolicyIpv4 *bool `path:"sr-policy-ipv4" module:"nokia-conf"`
	SrPolicyIpv6 *bool `path:"sr-policy-ipv6" module:"nokia-conf"`
	VpnIpv4      *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6      *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_Family) IsYANGGoStruct() {}

// GetBgpLs retrieves the value of the leaf BgpLs from the NokiaConf_Configure_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpLs is set, it can
// safely use t.GetBgpLs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpLs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Family) GetBgpLs() bool {
	if t == nil || t.BgpLs == nil {
		return false
	}
	return *t.BgpLs
}

// GetEvpn retrieves the value of the leaf Evpn from the NokiaConf_Configure_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Evpn is set, it can
// safely use t.GetEvpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Evpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Family) GetEvpn() bool {
	if t == nil || t.Evpn == nil {
		return false
	}
	return *t.Evpn
}

// GetFlowIpv4 retrieves the value of the leaf FlowIpv4 from the NokiaConf_Configure_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowIpv4 is set, it can
// safely use t.GetFlowIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Family) GetFlowIpv4() bool {
	if t == nil || t.FlowIpv4 == nil {
		return false
	}
	return *t.FlowIpv4
}

// GetFlowIpv6 retrieves the value of the leaf FlowIpv6 from the NokiaConf_Configure_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowIpv6 is set, it can
// safely use t.GetFlowIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Family) GetFlowIpv6() bool {
	if t == nil || t.FlowIpv6 == nil {
		return false
	}
	return *t.FlowIpv6
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Family) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Family) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetL2Vpn retrieves the value of the leaf L2Vpn from the NokiaConf_Configure_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2Vpn is set, it can
// safely use t.GetL2Vpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2Vpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Family) GetL2Vpn() bool {
	if t == nil || t.L2Vpn == nil {
		return false
	}
	return *t.L2Vpn
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Family) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Family) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetMcastIpv4 retrieves the value of the leaf McastIpv4 from the NokiaConf_Configure_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastIpv4 is set, it can
// safely use t.GetMcastIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Family) GetMcastIpv4() bool {
	if t == nil || t.McastIpv4 == nil {
		return false
	}
	return *t.McastIpv4
}

// GetMcastIpv6 retrieves the value of the leaf McastIpv6 from the NokiaConf_Configure_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastIpv6 is set, it can
// safely use t.GetMcastIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Family) GetMcastIpv6() bool {
	if t == nil || t.McastIpv6 == nil {
		return false
	}
	return *t.McastIpv6
}

// GetMcastVpnIpv4 retrieves the value of the leaf McastVpnIpv4 from the NokiaConf_Configure_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastVpnIpv4 is set, it can
// safely use t.GetMcastVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastVpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Family) GetMcastVpnIpv4() bool {
	if t == nil || t.McastVpnIpv4 == nil {
		return false
	}
	return *t.McastVpnIpv4
}

// GetMcastVpnIpv6 retrieves the value of the leaf McastVpnIpv6 from the NokiaConf_Configure_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastVpnIpv6 is set, it can
// safely use t.GetMcastVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastVpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Family) GetMcastVpnIpv6() bool {
	if t == nil || t.McastVpnIpv6 == nil {
		return false
	}
	return *t.McastVpnIpv6
}

// GetMdtSafi retrieves the value of the leaf MdtSafi from the NokiaConf_Configure_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdtSafi is set, it can
// safely use t.GetMdtSafi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdtSafi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Family) GetMdtSafi() bool {
	if t == nil || t.MdtSafi == nil {
		return false
	}
	return *t.MdtSafi
}

// GetMsPw retrieves the value of the leaf MsPw from the NokiaConf_Configure_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MsPw is set, it can
// safely use t.GetMsPw() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MsPw == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Family) GetMsPw() bool {
	if t == nil || t.MsPw == nil {
		return false
	}
	return *t.MsPw
}

// GetMvpnIpv4 retrieves the value of the leaf MvpnIpv4 from the NokiaConf_Configure_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MvpnIpv4 is set, it can
// safely use t.GetMvpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MvpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Family) GetMvpnIpv4() bool {
	if t == nil || t.MvpnIpv4 == nil {
		return false
	}
	return *t.MvpnIpv4
}

// GetMvpnIpv6 retrieves the value of the leaf MvpnIpv6 from the NokiaConf_Configure_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MvpnIpv6 is set, it can
// safely use t.GetMvpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MvpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Family) GetMvpnIpv6() bool {
	if t == nil || t.MvpnIpv6 == nil {
		return false
	}
	return *t.MvpnIpv6
}

// GetRouteTarget retrieves the value of the leaf RouteTarget from the NokiaConf_Configure_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTarget is set, it can
// safely use t.GetRouteTarget() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTarget == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Family) GetRouteTarget() bool {
	if t == nil || t.RouteTarget == nil {
		return false
	}
	return *t.RouteTarget
}

// GetSrPolicyIpv4 retrieves the value of the leaf SrPolicyIpv4 from the NokiaConf_Configure_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrPolicyIpv4 is set, it can
// safely use t.GetSrPolicyIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrPolicyIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Family) GetSrPolicyIpv4() bool {
	if t == nil || t.SrPolicyIpv4 == nil {
		return false
	}
	return *t.SrPolicyIpv4
}

// GetSrPolicyIpv6 retrieves the value of the leaf SrPolicyIpv6 from the NokiaConf_Configure_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrPolicyIpv6 is set, it can
// safely use t.GetSrPolicyIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrPolicyIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Family) GetSrPolicyIpv6() bool {
	if t == nil || t.SrPolicyIpv6 == nil {
		return false
	}
	return *t.SrPolicyIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Family) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Family) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BgpLs == nil {
		var v bool = false
		t.BgpLs = &v
	}
	if t.Evpn == nil {
		var v bool = false
		t.Evpn = &v
	}
	if t.FlowIpv4 == nil {
		var v bool = false
		t.FlowIpv4 = &v
	}
	if t.FlowIpv6 == nil {
		var v bool = false
		t.FlowIpv6 = &v
	}
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.L2Vpn == nil {
		var v bool = false
		t.L2Vpn = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.McastIpv4 == nil {
		var v bool = false
		t.McastIpv4 = &v
	}
	if t.McastIpv6 == nil {
		var v bool = false
		t.McastIpv6 = &v
	}
	if t.McastVpnIpv4 == nil {
		var v bool = false
		t.McastVpnIpv4 = &v
	}
	if t.McastVpnIpv6 == nil {
		var v bool = false
		t.McastVpnIpv6 = &v
	}
	if t.MdtSafi == nil {
		var v bool = false
		t.MdtSafi = &v
	}
	if t.MsPw == nil {
		var v bool = false
		t.MsPw = &v
	}
	if t.MvpnIpv4 == nil {
		var v bool = false
		t.MvpnIpv4 = &v
	}
	if t.MvpnIpv6 == nil {
		var v bool = false
		t.MvpnIpv6 = &v
	}
	if t.RouteTarget == nil {
		var v bool = false
		t.RouteTarget = &v
	}
	if t.SrPolicyIpv4 == nil {
		var v bool = false
		t.SrPolicyIpv4 = &v
	}
	if t.SrPolicyIpv6 == nil {
		var v bool = false
		t.SrPolicyIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_Family.
func (*NokiaConf_Configure_Router_Bgp_Group_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_GracefulRestart represents the /nokia-conf/configure/router/bgp/group/graceful-restart YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_GracefulRestart struct {
	GrNotification  *bool                                                           `path:"gr-notification" module:"nokia-conf"`
	LongLived       *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived `path:"long-lived" module:"nokia-conf" yangPresence:"true"`
	RestartTime     *uint32                                                         `path:"restart-time" module:"nokia-conf"`
	StaleRoutesTime *uint32                                                         `path:"stale-routes-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_GracefulRestart) IsYANGGoStruct() {}

// GetOrCreateLongLived retrieves the value of the LongLived field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart) GetOrCreateLongLived() *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived {
	if t.LongLived != nil {
		return t.LongLived
	}
	t.LongLived = &NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived{}
	return t.LongLived
}

// GetLongLived returns the value of the LongLived struct pointer
// from NokiaConf_Configure_Router_Bgp_Group_GracefulRestart. If the receiver or the field LongLived is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart) GetLongLived() *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived {
	if t != nil && t.LongLived != nil {
		return t.LongLived
	}
	return nil
}

// GetGrNotification retrieves the value of the leaf GrNotification from the NokiaConf_Configure_Router_Bgp_Group_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GrNotification is set, it can
// safely use t.GetGrNotification() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GrNotification == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart) GetGrNotification() bool {
	if t == nil || t.GrNotification == nil {
		return false
	}
	return *t.GrNotification
}

// GetRestartTime retrieves the value of the leaf RestartTime from the NokiaConf_Configure_Router_Bgp_Group_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RestartTime is set, it can
// safely use t.GetRestartTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RestartTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart) GetRestartTime() uint32 {
	if t == nil || t.RestartTime == nil {
		return 300
	}
	return *t.RestartTime
}

// GetStaleRoutesTime retrieves the value of the leaf StaleRoutesTime from the NokiaConf_Configure_Router_Bgp_Group_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaleRoutesTime is set, it can
// safely use t.GetStaleRoutesTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaleRoutesTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart) GetStaleRoutesTime() uint32 {
	if t == nil || t.StaleRoutesTime == nil {
		return 360
	}
	return *t.StaleRoutesTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_GracefulRestart
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.GrNotification == nil {
		var v bool = false
		t.GrNotification = &v
	}
	if t.RestartTime == nil {
		var v uint32 = 300
		t.RestartTime = &v
	}
	if t.StaleRoutesTime == nil {
		var v uint32 = 360
		t.StaleRoutesTime = &v
	}
	t.LongLived.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_GracefulRestart.
func (*NokiaConf_Configure_Router_Bgp_Group_GracefulRestart) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived represents the /nokia-conf/configure/router/bgp/group/graceful-restart/long-lived YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived struct {
	AdvertiseStaleToAllNeighbors *bool                                                                                                            `path:"advertise-stale-to-all-neighbors" module:"nokia-conf"`
	AdvertisedStaleTime          *uint32                                                                                                          `path:"advertised-stale-time" module:"nokia-conf"`
	Family                       map[E_NokiaTypesBgp_LlgrFamilyIdentifiers]*NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_Family `path:"family" module:"nokia-conf"`
	ForwardingBitsSet            E_NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_ForwardingBitsSet                               `path:"forwarding-bits-set" module:"nokia-conf"`
	HelperOverrideRestartTime    *uint32                                                                                                          `path:"helper-override-restart-time" module:"nokia-conf"`
	HelperOverrideStaleTime      *uint32                                                                                                          `path:"helper-override-stale-time" module:"nokia-conf"`
	WithoutNoExport              *bool                                                                                                            `path:"without-no-export" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived) IsYANGGoStruct() {}

// NewFamily creates a new entry in the Family list of the
// NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived) NewFamily(FamilyType E_NokiaTypesBgp_LlgrFamilyIdentifiers) (*NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_Family, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[E_NokiaTypesBgp_LlgrFamilyIdentifiers]*NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_Family)
	}

	key := FamilyType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Family[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Family", key)
	}

	t.Family[key] = &NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_Family{
		FamilyType: FamilyType,
	}

	return t.Family[key], nil
}

// RenameFamily renames an entry in the list Family within
// the NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived) RenameFamily(oldK, newK E_NokiaTypesBgp_LlgrFamilyIdentifiers) error {
	if _, ok := t.Family[newK]; ok {
		return fmt.Errorf("key %v already exists in Family", newK)
	}

	e, ok := t.Family[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Family", oldK)
	}
	e.FamilyType = newK

	t.Family[newK] = e
	delete(t.Family, oldK)
	return nil
}

// GetOrCreateFamily retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived) GetOrCreateFamily(FamilyType E_NokiaTypesBgp_LlgrFamilyIdentifiers) *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_Family {

	key := FamilyType

	if v, ok := t.Family[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFamily(FamilyType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFamily got unexpected error: %v", err))
	}
	return v
}

// GetFamily retrieves the value with the specified key from
// the Family map field of NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived) GetFamily(FamilyType E_NokiaTypesBgp_LlgrFamilyIdentifiers) *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_Family {

	if t == nil {
		return nil
	}

	key := FamilyType

	if lm, ok := t.Family[key]; ok {
		return lm
	}
	return nil
}

// DeleteFamily deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived) DeleteFamily(FamilyType E_NokiaTypesBgp_LlgrFamilyIdentifiers) {
	key := FamilyType

	delete(t.Family, key)
}

// AppendFamily appends the supplied NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_Family struct to the
// list Family of NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_Family already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived) AppendFamily(v *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_Family) error {
	key := v.FamilyType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[E_NokiaTypesBgp_LlgrFamilyIdentifiers]*NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_Family)
	}

	if _, ok := t.Family[key]; ok {
		return fmt.Errorf("duplicate key for list Family %v", key)
	}

	t.Family[key] = v
	return nil
}

// GetAdvertiseStaleToAllNeighbors retrieves the value of the leaf AdvertiseStaleToAllNeighbors from the NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseStaleToAllNeighbors is set, it can
// safely use t.GetAdvertiseStaleToAllNeighbors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseStaleToAllNeighbors == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived) GetAdvertiseStaleToAllNeighbors() bool {
	if t == nil || t.AdvertiseStaleToAllNeighbors == nil {
		return false
	}
	return *t.AdvertiseStaleToAllNeighbors
}

// GetAdvertisedStaleTime retrieves the value of the leaf AdvertisedStaleTime from the NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisedStaleTime is set, it can
// safely use t.GetAdvertisedStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisedStaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived) GetAdvertisedStaleTime() uint32 {
	if t == nil || t.AdvertisedStaleTime == nil {
		return 86400
	}
	return *t.AdvertisedStaleTime
}

// GetForwardingBitsSet retrieves the value of the leaf ForwardingBitsSet from the NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingBitsSet is set, it can
// safely use t.GetForwardingBitsSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingBitsSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived) GetForwardingBitsSet() E_NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_ForwardingBitsSet {
	if t == nil || t.ForwardingBitsSet == 0 {
		return NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_ForwardingBitsSet_none
	}
	return t.ForwardingBitsSet
}

// GetHelperOverrideRestartTime retrieves the value of the leaf HelperOverrideRestartTime from the NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperOverrideRestartTime is set, it can
// safely use t.GetHelperOverrideRestartTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperOverrideRestartTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived) GetHelperOverrideRestartTime() uint32 {
	if t == nil || t.HelperOverrideRestartTime == nil {
		return 0
	}
	return *t.HelperOverrideRestartTime
}

// GetHelperOverrideStaleTime retrieves the value of the leaf HelperOverrideStaleTime from the NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperOverrideStaleTime is set, it can
// safely use t.GetHelperOverrideStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperOverrideStaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived) GetHelperOverrideStaleTime() uint32 {
	if t == nil || t.HelperOverrideStaleTime == nil {
		return 0
	}
	return *t.HelperOverrideStaleTime
}

// GetWithoutNoExport retrieves the value of the leaf WithoutNoExport from the NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WithoutNoExport is set, it can
// safely use t.GetWithoutNoExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WithoutNoExport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived) GetWithoutNoExport() bool {
	if t == nil || t.WithoutNoExport == nil {
		return false
	}
	return *t.WithoutNoExport
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertiseStaleToAllNeighbors == nil {
		var v bool = false
		t.AdvertiseStaleToAllNeighbors = &v
	}
	if t.AdvertisedStaleTime == nil {
		var v uint32 = 86400
		t.AdvertisedStaleTime = &v
	}
	if t.ForwardingBitsSet == 0 {
		t.ForwardingBitsSet = NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_ForwardingBitsSet_none
	}
	if t.WithoutNoExport == nil {
		var v bool = false
		t.WithoutNoExport = &v
	}
	for _, e := range t.Family {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived.
func (*NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_Family represents the /nokia-conf/configure/router/bgp/group/graceful-restart/long-lived/family YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_Family struct {
	AdvertisedStaleTime     *uint32                               `path:"advertised-stale-time" module:"nokia-conf"`
	ApplyGroups             []string                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                              `path:"apply-groups-exclude" module:"nokia-conf"`
	FamilyType              E_NokiaTypesBgp_LlgrFamilyIdentifiers `path:"family-type" module:"nokia-conf"`
	HelperOverrideStaleTime *uint32                               `path:"helper-override-stale-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_Family) IsYANGGoStruct() {}

// GetAdvertisedStaleTime retrieves the value of the leaf AdvertisedStaleTime from the NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisedStaleTime is set, it can
// safely use t.GetAdvertisedStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisedStaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_Family) GetAdvertisedStaleTime() uint32 {
	if t == nil || t.AdvertisedStaleTime == nil {
		return 86400
	}
	return *t.AdvertisedStaleTime
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_Family) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_Family) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFamilyType retrieves the value of the leaf FamilyType from the NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FamilyType is set, it can
// safely use t.GetFamilyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FamilyType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_Family) GetFamilyType() E_NokiaTypesBgp_LlgrFamilyIdentifiers {
	if t == nil || t.FamilyType == 0 {
		return 0
	}
	return t.FamilyType
}

// GetHelperOverrideStaleTime retrieves the value of the leaf HelperOverrideStaleTime from the NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperOverrideStaleTime is set, it can
// safely use t.GetHelperOverrideStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperOverrideStaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_Family) GetHelperOverrideStaleTime() uint32 {
	if t == nil || t.HelperOverrideStaleTime == nil {
		return 16777216
	}
	return *t.HelperOverrideStaleTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertisedStaleTime == nil {
		var v uint32 = 86400
		t.AdvertisedStaleTime = &v
	}
	if t.HelperOverrideStaleTime == nil {
		var v uint32 = 16777216
		t.HelperOverrideStaleTime = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_Family struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_Family) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"family-type": t.FamilyType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_Family.
func (*NokiaConf_Configure_Router_Bgp_Group_GracefulRestart_LongLived_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_HoldTime represents the /nokia-conf/configure/router/bgp/group/hold-time YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_HoldTime struct {
	MinimumHoldTime *int32 `path:"minimum-hold-time" module:"nokia-conf"`
	Seconds         *int32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_HoldTime) IsYANGGoStruct() {}

// GetMinimumHoldTime retrieves the value of the leaf MinimumHoldTime from the NokiaConf_Configure_Router_Bgp_Group_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinimumHoldTime is set, it can
// safely use t.GetMinimumHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinimumHoldTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_HoldTime) GetMinimumHoldTime() int32 {
	if t == nil || t.MinimumHoldTime == nil {
		return 0
	}
	return *t.MinimumHoldTime
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Router_Bgp_Group_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_HoldTime) GetSeconds() int32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MinimumHoldTime == nil {
		var v int32 = 0
		t.MinimumHoldTime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_HoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_HoldTime.
func (*NokiaConf_Configure_Router_Bgp_Group_HoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_Import represents the /nokia-conf/configure/router/bgp/group/import YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_Import struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Policy             []string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_Import implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_Import) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bgp_Group_Import
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Import) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bgp_Group_Import
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Import) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Router_Bgp_Group_Import
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Import) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_Import
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_Import) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_Import) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_Import"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_Import) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_Import) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_Import.
func (*NokiaConf_Configure_Router_Bgp_Group_Import) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth represents the /nokia-conf/configure/router/bgp/group/link-bandwidth YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth struct {
	AcceptFromEbgp     *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp     `path:"accept-from-ebgp" module:"nokia-conf"`
	AddToReceivedEbgp  *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp  `path:"add-to-received-ebgp" module:"nokia-conf"`
	AggregateUsedPaths *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths `path:"aggregate-used-paths" module:"nokia-conf"`
	SendToEbgp         *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_SendToEbgp         `path:"send-to-ebgp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth) IsYANGGoStruct() {}

// GetOrCreateAcceptFromEbgp retrieves the value of the AcceptFromEbgp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth) GetOrCreateAcceptFromEbgp() *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp {
	if t.AcceptFromEbgp != nil {
		return t.AcceptFromEbgp
	}
	t.AcceptFromEbgp = &NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp{}
	return t.AcceptFromEbgp
}

// GetOrCreateAddToReceivedEbgp retrieves the value of the AddToReceivedEbgp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth) GetOrCreateAddToReceivedEbgp() *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp {
	if t.AddToReceivedEbgp != nil {
		return t.AddToReceivedEbgp
	}
	t.AddToReceivedEbgp = &NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp{}
	return t.AddToReceivedEbgp
}

// GetOrCreateAggregateUsedPaths retrieves the value of the AggregateUsedPaths field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth) GetOrCreateAggregateUsedPaths() *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths {
	if t.AggregateUsedPaths != nil {
		return t.AggregateUsedPaths
	}
	t.AggregateUsedPaths = &NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths{}
	return t.AggregateUsedPaths
}

// GetOrCreateSendToEbgp retrieves the value of the SendToEbgp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth) GetOrCreateSendToEbgp() *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_SendToEbgp {
	if t.SendToEbgp != nil {
		return t.SendToEbgp
	}
	t.SendToEbgp = &NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_SendToEbgp{}
	return t.SendToEbgp
}

// GetAcceptFromEbgp returns the value of the AcceptFromEbgp struct pointer
// from NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth. If the receiver or the field AcceptFromEbgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth) GetAcceptFromEbgp() *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp {
	if t != nil && t.AcceptFromEbgp != nil {
		return t.AcceptFromEbgp
	}
	return nil
}

// GetAddToReceivedEbgp returns the value of the AddToReceivedEbgp struct pointer
// from NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth. If the receiver or the field AddToReceivedEbgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth) GetAddToReceivedEbgp() *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp {
	if t != nil && t.AddToReceivedEbgp != nil {
		return t.AddToReceivedEbgp
	}
	return nil
}

// GetAggregateUsedPaths returns the value of the AggregateUsedPaths struct pointer
// from NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth. If the receiver or the field AggregateUsedPaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth) GetAggregateUsedPaths() *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths {
	if t != nil && t.AggregateUsedPaths != nil {
		return t.AggregateUsedPaths
	}
	return nil
}

// GetSendToEbgp returns the value of the SendToEbgp struct pointer
// from NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth. If the receiver or the field SendToEbgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth) GetSendToEbgp() *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_SendToEbgp {
	if t != nil && t.SendToEbgp != nil {
		return t.SendToEbgp
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AcceptFromEbgp.PopulateDefaults()
	t.AddToReceivedEbgp.PopulateDefaults()
	t.AggregateUsedPaths.PopulateDefaults()
	t.SendToEbgp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth.
func (*NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp represents the /nokia-conf/configure/router/bgp/group/link-bandwidth/accept-from-ebgp YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
	VpnIpv4   *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6   *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp.
func (*NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp represents the /nokia-conf/configure/router/bgp/group/link-bandwidth/add-to-received-ebgp YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
	VpnIpv4   *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6   *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp.
func (*NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths represents the /nokia-conf/configure/router/bgp/group/link-bandwidth/aggregate-used-paths YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
	VpnIpv4   *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6   *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths.
func (*NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_SendToEbgp represents the /nokia-conf/configure/router/bgp/group/link-bandwidth/send-to-ebgp YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_SendToEbgp struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
	VpnIpv4   *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6   *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_SendToEbgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_SendToEbgp) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_SendToEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_SendToEbgp) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_SendToEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_SendToEbgp) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_SendToEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_SendToEbgp) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_SendToEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_SendToEbgp) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_SendToEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_SendToEbgp) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_SendToEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_SendToEbgp) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_SendToEbgp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_SendToEbgp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_SendToEbgp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_SendToEbgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_SendToEbgp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_SendToEbgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_SendToEbgp.
func (*NokiaConf_Configure_Router_Bgp_Group_LinkBandwidth_SendToEbgp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_LocalAs represents the /nokia-conf/configure/router/bgp/group/local-as YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_LocalAs struct {
	AsNumber        *uint32 `path:"as-number" module:"nokia-conf"`
	PrependGlobalAs *bool   `path:"prepend-global-as" module:"nokia-conf"`
	Private         *bool   `path:"private" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_LocalAs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_LocalAs) IsYANGGoStruct() {}

// GetAsNumber retrieves the value of the leaf AsNumber from the NokiaConf_Configure_Router_Bgp_Group_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsNumber is set, it can
// safely use t.GetAsNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_LocalAs) GetAsNumber() uint32 {
	if t == nil || t.AsNumber == nil {
		return 0
	}
	return *t.AsNumber
}

// GetPrependGlobalAs retrieves the value of the leaf PrependGlobalAs from the NokiaConf_Configure_Router_Bgp_Group_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrependGlobalAs is set, it can
// safely use t.GetPrependGlobalAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrependGlobalAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_LocalAs) GetPrependGlobalAs() bool {
	if t == nil || t.PrependGlobalAs == nil {
		return true
	}
	return *t.PrependGlobalAs
}

// GetPrivate retrieves the value of the leaf Private from the NokiaConf_Configure_Router_Bgp_Group_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Private is set, it can
// safely use t.GetPrivate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Private == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_LocalAs) GetPrivate() bool {
	if t == nil || t.Private == nil {
		return false
	}
	return *t.Private
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_LocalAs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_LocalAs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PrependGlobalAs == nil {
		var v bool = true
		t.PrependGlobalAs = &v
	}
	if t.Private == nil {
		var v bool = false
		t.Private = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_LocalAs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_LocalAs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_LocalAs) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_LocalAs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_LocalAs.
func (*NokiaConf_Configure_Router_Bgp_Group_LocalAs) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_Monitor represents the /nokia-conf/configure/router/bgp/group/monitor YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_Monitor struct {
	AdminState         E_NokiaTypesSros_AdminState                                      `path:"admin-state" module:"nokia-conf"`
	AllStations        *bool                                                            `path:"all-stations" module:"nokia-conf"`
	ApplyGroups        []string                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	RouteMonitoring    *NokiaConf_Configure_Router_Bgp_Group_Monitor_RouteMonitoring    `path:"route-monitoring" module:"nokia-conf"`
	Station            map[string]*NokiaConf_Configure_Router_Bgp_Group_Monitor_Station `path:"station" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_Monitor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_Monitor) IsYANGGoStruct() {}

// NewStation creates a new entry in the Station list of the
// NokiaConf_Configure_Router_Bgp_Group_Monitor struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Bgp_Group_Monitor) NewStation(StationName string) (*NokiaConf_Configure_Router_Bgp_Group_Monitor_Station, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Station == nil {
		t.Station = make(map[string]*NokiaConf_Configure_Router_Bgp_Group_Monitor_Station)
	}

	key := StationName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Station[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Station", key)
	}

	t.Station[key] = &NokiaConf_Configure_Router_Bgp_Group_Monitor_Station{
		StationName: &StationName,
	}

	return t.Station[key], nil
}

// RenameStation renames an entry in the list Station within
// the NokiaConf_Configure_Router_Bgp_Group_Monitor struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Monitor) RenameStation(oldK, newK string) error {
	if _, ok := t.Station[newK]; ok {
		return fmt.Errorf("key %v already exists in Station", newK)
	}

	e, ok := t.Station[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Station", oldK)
	}
	e.StationName = &newK

	t.Station[newK] = e
	delete(t.Station, oldK)
	return nil
}

// GetOrCreateStation retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_Group_Monitor. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Bgp_Group_Monitor) GetOrCreateStation(StationName string) *NokiaConf_Configure_Router_Bgp_Group_Monitor_Station {

	key := StationName

	if v, ok := t.Station[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStation(StationName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStation got unexpected error: %v", err))
	}
	return v
}

// GetStation retrieves the value with the specified key from
// the Station map field of NokiaConf_Configure_Router_Bgp_Group_Monitor. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group_Monitor) GetStation(StationName string) *NokiaConf_Configure_Router_Bgp_Group_Monitor_Station {

	if t == nil {
		return nil
	}

	key := StationName

	if lm, ok := t.Station[key]; ok {
		return lm
	}
	return nil
}

// DeleteStation deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_Group_Monitor. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Bgp_Group_Monitor) DeleteStation(StationName string) {
	key := StationName

	delete(t.Station, key)
}

// AppendStation appends the supplied NokiaConf_Configure_Router_Bgp_Group_Monitor_Station struct to the
// list Station of NokiaConf_Configure_Router_Bgp_Group_Monitor. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Bgp_Group_Monitor_Station already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Bgp_Group_Monitor) AppendStation(v *NokiaConf_Configure_Router_Bgp_Group_Monitor_Station) error {
	if v.StationName == nil {
		return fmt.Errorf("invalid nil key received for StationName")
	}

	key := *v.StationName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Station == nil {
		t.Station = make(map[string]*NokiaConf_Configure_Router_Bgp_Group_Monitor_Station)
	}

	if _, ok := t.Station[key]; ok {
		return fmt.Errorf("duplicate key for list Station %v", key)
	}

	t.Station[key] = v
	return nil
}

// GetOrCreateRouteMonitoring retrieves the value of the RouteMonitoring field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group_Monitor) GetOrCreateRouteMonitoring() *NokiaConf_Configure_Router_Bgp_Group_Monitor_RouteMonitoring {
	if t.RouteMonitoring != nil {
		return t.RouteMonitoring
	}
	t.RouteMonitoring = &NokiaConf_Configure_Router_Bgp_Group_Monitor_RouteMonitoring{}
	return t.RouteMonitoring
}

// GetRouteMonitoring returns the value of the RouteMonitoring struct pointer
// from NokiaConf_Configure_Router_Bgp_Group_Monitor. If the receiver or the field RouteMonitoring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group_Monitor) GetRouteMonitoring() *NokiaConf_Configure_Router_Bgp_Group_Monitor_RouteMonitoring {
	if t != nil && t.RouteMonitoring != nil {
		return t.RouteMonitoring
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Bgp_Group_Monitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Monitor) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAllStations retrieves the value of the leaf AllStations from the NokiaConf_Configure_Router_Bgp_Group_Monitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllStations is set, it can
// safely use t.GetAllStations() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllStations == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Monitor) GetAllStations() bool {
	if t == nil || t.AllStations == nil {
		return false
	}
	return *t.AllStations
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bgp_Group_Monitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Monitor) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bgp_Group_Monitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Monitor) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_Monitor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_Monitor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AllStations == nil {
		var v bool = false
		t.AllStations = &v
	}
	t.RouteMonitoring.PopulateDefaults()
	for _, e := range t.Station {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_Monitor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_Monitor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_Monitor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_Monitor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_Monitor.
func (*NokiaConf_Configure_Router_Bgp_Group_Monitor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_Monitor_RouteMonitoring represents the /nokia-conf/configure/router/bgp/group/monitor/route-monitoring YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_Monitor_RouteMonitoring struct {
	PostPolicy *bool `path:"post-policy" module:"nokia-conf"`
	PrePolicy  *bool `path:"pre-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_Monitor_RouteMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_Monitor_RouteMonitoring) IsYANGGoStruct() {}

// GetPostPolicy retrieves the value of the leaf PostPolicy from the NokiaConf_Configure_Router_Bgp_Group_Monitor_RouteMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PostPolicy is set, it can
// safely use t.GetPostPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PostPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Monitor_RouteMonitoring) GetPostPolicy() bool {
	if t == nil || t.PostPolicy == nil {
		return false
	}
	return *t.PostPolicy
}

// GetPrePolicy retrieves the value of the leaf PrePolicy from the NokiaConf_Configure_Router_Bgp_Group_Monitor_RouteMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrePolicy is set, it can
// safely use t.GetPrePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Monitor_RouteMonitoring) GetPrePolicy() bool {
	if t == nil || t.PrePolicy == nil {
		return false
	}
	return *t.PrePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_Monitor_RouteMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_Monitor_RouteMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PostPolicy == nil {
		var v bool = false
		t.PostPolicy = &v
	}
	if t.PrePolicy == nil {
		var v bool = false
		t.PrePolicy = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_Monitor_RouteMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_Monitor_RouteMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_Monitor_RouteMonitoring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_Monitor_RouteMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_Monitor_RouteMonitoring.
func (*NokiaConf_Configure_Router_Bgp_Group_Monitor_RouteMonitoring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_Monitor_Station represents the /nokia-conf/configure/router/bgp/group/monitor/station YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_Monitor_Station struct {
	StationName *string `path:"station-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_Monitor_Station implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_Monitor_Station) IsYANGGoStruct() {}

// GetStationName retrieves the value of the leaf StationName from the NokiaConf_Configure_Router_Bgp_Group_Monitor_Station
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StationName is set, it can
// safely use t.GetStationName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StationName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_Monitor_Station) GetStationName() string {
	if t == nil || t.StationName == nil {
		return ""
	}
	return *t.StationName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_Monitor_Station
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_Monitor_Station) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Bgp_Group_Monitor_Station struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Bgp_Group_Monitor_Station) ΛListKeyMap() (map[string]interface{}, error) {
	if t.StationName == nil {
		return nil, fmt.Errorf("nil value for key StationName")
	}

	return map[string]interface{}{
		"station-name": *t.StationName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_Monitor_Station) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_Monitor_Station"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_Monitor_Station) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_Monitor_Station) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_Monitor_Station.
func (*NokiaConf_Configure_Router_Bgp_Group_Monitor_Station) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_NextHopUnchanged represents the /nokia-conf/configure/router/bgp/group/next-hop-unchanged YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_NextHopUnchanged struct {
	Evpn      *bool `path:"evpn" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
	VpnIpv4   *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6   *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_NextHopUnchanged implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_NextHopUnchanged) IsYANGGoStruct() {}

// GetEvpn retrieves the value of the leaf Evpn from the NokiaConf_Configure_Router_Bgp_Group_NextHopUnchanged
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Evpn is set, it can
// safely use t.GetEvpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Evpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_NextHopUnchanged) GetEvpn() bool {
	if t == nil || t.Evpn == nil {
		return false
	}
	return *t.Evpn
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Router_Bgp_Group_NextHopUnchanged
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_NextHopUnchanged) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Router_Bgp_Group_NextHopUnchanged
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_NextHopUnchanged) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Router_Bgp_Group_NextHopUnchanged
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_NextHopUnchanged) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Router_Bgp_Group_NextHopUnchanged
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_NextHopUnchanged) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_NextHopUnchanged
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_NextHopUnchanged) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Evpn == nil {
		var v bool = false
		t.Evpn = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_NextHopUnchanged) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_NextHopUnchanged"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_NextHopUnchanged) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_NextHopUnchanged) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_NextHopUnchanged.
func (*NokiaConf_Configure_Router_Bgp_Group_NextHopUnchanged) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_OriginValidation represents the /nokia-conf/configure/router/bgp/group/origin-validation YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_OriginValidation struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_OriginValidation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_OriginValidation) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Router_Bgp_Group_OriginValidation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_OriginValidation) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Router_Bgp_Group_OriginValidation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_OriginValidation) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Router_Bgp_Group_OriginValidation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_OriginValidation) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Router_Bgp_Group_OriginValidation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_OriginValidation) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_OriginValidation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_OriginValidation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_OriginValidation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_OriginValidation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_OriginValidation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_OriginValidation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_OriginValidation.
func (*NokiaConf_Configure_Router_Bgp_Group_OriginValidation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering represents the /nokia-conf/configure/router/bgp/group/outbound-route-filtering YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering struct {
	ExtendedCommunity *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity `path:"extended-community" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering) IsYANGGoStruct() {}

// GetOrCreateExtendedCommunity retrieves the value of the ExtendedCommunity field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering) GetOrCreateExtendedCommunity() *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity {
	if t.ExtendedCommunity != nil {
		return t.ExtendedCommunity
	}
	t.ExtendedCommunity = &NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity{}
	return t.ExtendedCommunity
}

// GetExtendedCommunity returns the value of the ExtendedCommunity struct pointer
// from NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering. If the receiver or the field ExtendedCommunity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering) GetExtendedCommunity() *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity {
	if t != nil && t.ExtendedCommunity != nil {
		return t.ExtendedCommunity
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ExtendedCommunity.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering.
func (*NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity represents the /nokia-conf/configure/router/bgp/group/outbound-route-filtering/extended-community YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity struct {
	AcceptOrf *bool                                                                                  `path:"accept-orf" module:"nokia-conf"`
	SendOrf   *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf `path:"send-orf" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity) IsYANGGoStruct() {
}

// GetOrCreateSendOrf retrieves the value of the SendOrf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity) GetOrCreateSendOrf() *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf {
	if t.SendOrf != nil {
		return t.SendOrf
	}
	t.SendOrf = &NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf{}
	return t.SendOrf
}

// GetSendOrf returns the value of the SendOrf struct pointer
// from NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity. If the receiver or the field SendOrf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity) GetSendOrf() *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf {
	if t != nil && t.SendOrf != nil {
		return t.SendOrf
	}
	return nil
}

// GetAcceptOrf retrieves the value of the leaf AcceptOrf from the NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcceptOrf is set, it can
// safely use t.GetAcceptOrf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcceptOrf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity) GetAcceptOrf() bool {
	if t == nil || t.AcceptOrf == nil {
		return false
	}
	return *t.AcceptOrf
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SendOrf.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity.
func (*NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf represents the /nokia-conf/configure/router/bgp/group/outbound-route-filtering/extended-community/send-orf YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf struct {
	RouteTarget map[string]*NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget `path:"route-target" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf) IsYANGGoStruct() {
}

// NewRouteTarget creates a new entry in the RouteTarget list of the
// NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf) NewRouteTarget(CommunityName string) (*NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouteTarget == nil {
		t.RouteTarget = make(map[string]*NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget)
	}

	key := CommunityName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RouteTarget[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RouteTarget", key)
	}

	t.RouteTarget[key] = &NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget{
		CommunityName: &CommunityName,
	}

	return t.RouteTarget[key], nil
}

// RenameRouteTarget renames an entry in the list RouteTarget within
// the NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf) RenameRouteTarget(oldK, newK string) error {
	if _, ok := t.RouteTarget[newK]; ok {
		return fmt.Errorf("key %v already exists in RouteTarget", newK)
	}

	e, ok := t.RouteTarget[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RouteTarget", oldK)
	}
	e.CommunityName = &newK

	t.RouteTarget[newK] = e
	delete(t.RouteTarget, oldK)
	return nil
}

// GetOrCreateRouteTarget retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf) GetOrCreateRouteTarget(CommunityName string) *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget {

	key := CommunityName

	if v, ok := t.RouteTarget[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRouteTarget(CommunityName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRouteTarget got unexpected error: %v", err))
	}
	return v
}

// GetRouteTarget retrieves the value with the specified key from
// the RouteTarget map field of NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf) GetRouteTarget(CommunityName string) *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget {

	if t == nil {
		return nil
	}

	key := CommunityName

	if lm, ok := t.RouteTarget[key]; ok {
		return lm
	}
	return nil
}

// DeleteRouteTarget deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf) DeleteRouteTarget(CommunityName string) {
	key := CommunityName

	delete(t.RouteTarget, key)
}

// AppendRouteTarget appends the supplied NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget struct to the
// list RouteTarget of NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf) AppendRouteTarget(v *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) error {
	if v.CommunityName == nil {
		return fmt.Errorf("invalid nil key received for CommunityName")
	}

	key := *v.CommunityName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouteTarget == nil {
		t.RouteTarget = make(map[string]*NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget)
	}

	if _, ok := t.RouteTarget[key]; ok {
		return fmt.Errorf("duplicate key for list RouteTarget %v", key)
	}

	t.RouteTarget[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.RouteTarget {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf.
func (*NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget represents the /nokia-conf/configure/router/bgp/group/outbound-route-filtering/extended-community/send-orf/route-target YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget struct {
	CommunityName *string `path:"community-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) IsYANGGoStruct() {
}

// GetCommunityName retrieves the value of the leaf CommunityName from the NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityName is set, it can
// safely use t.GetCommunityName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) GetCommunityName() string {
	if t == nil || t.CommunityName == nil {
		return ""
	}
	return *t.CommunityName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CommunityName == nil {
		return nil, fmt.Errorf("nil value for key CommunityName")
	}

	return map[string]interface{}{
		"community-name": *t.CommunityName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget.
func (*NokiaConf_Configure_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_PrefixLimit represents the /nokia-conf/configure/router/bgp/group/prefix-limit YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_PrefixLimit struct {
	ApplyGroups        []string                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Family             E_NokiaTypesBgp_IpFamilyIdentifier `path:"family" module:"nokia-conf"`
	IdleTimeout        *int32                             `path:"idle-timeout" module:"nokia-conf"`
	LogOnly            *bool                              `path:"log-only" module:"nokia-conf"`
	Maximum            *uint32                            `path:"maximum" module:"nokia-conf"`
	PostImport         *bool                              `path:"post-import" module:"nokia-conf"`
	Threshold          *uint32                            `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_PrefixLimit) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bgp_Group_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_PrefixLimit) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bgp_Group_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_PrefixLimit) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFamily retrieves the value of the leaf Family from the NokiaConf_Configure_Router_Bgp_Group_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Family is set, it can
// safely use t.GetFamily() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Family == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_PrefixLimit) GetFamily() E_NokiaTypesBgp_IpFamilyIdentifier {
	if t == nil || t.Family == 0 {
		return 0
	}
	return t.Family
}

// GetIdleTimeout retrieves the value of the leaf IdleTimeout from the NokiaConf_Configure_Router_Bgp_Group_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleTimeout is set, it can
// safely use t.GetIdleTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_PrefixLimit) GetIdleTimeout() int32 {
	if t == nil || t.IdleTimeout == nil {
		return 0
	}
	return *t.IdleTimeout
}

// GetLogOnly retrieves the value of the leaf LogOnly from the NokiaConf_Configure_Router_Bgp_Group_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogOnly is set, it can
// safely use t.GetLogOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_PrefixLimit) GetLogOnly() bool {
	if t == nil || t.LogOnly == nil {
		return false
	}
	return *t.LogOnly
}

// GetMaximum retrieves the value of the leaf Maximum from the NokiaConf_Configure_Router_Bgp_Group_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Maximum is set, it can
// safely use t.GetMaximum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Maximum == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_PrefixLimit) GetMaximum() uint32 {
	if t == nil || t.Maximum == nil {
		return 0
	}
	return *t.Maximum
}

// GetPostImport retrieves the value of the leaf PostImport from the NokiaConf_Configure_Router_Bgp_Group_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PostImport is set, it can
// safely use t.GetPostImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PostImport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_PrefixLimit) GetPostImport() bool {
	if t == nil || t.PostImport == nil {
		return false
	}
	return *t.PostImport
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Router_Bgp_Group_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_PrefixLimit) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 90
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_PrefixLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_PrefixLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LogOnly == nil {
		var v bool = false
		t.LogOnly = &v
	}
	if t.PostImport == nil {
		var v bool = false
		t.PostImport = &v
	}
	if t.Threshold == nil {
		var v uint32 = 90
		t.Threshold = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Bgp_Group_PrefixLimit struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Bgp_Group_PrefixLimit) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"family": t.Family,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_PrefixLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_PrefixLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_PrefixLimit.
func (*NokiaConf_Configure_Router_Bgp_Group_PrefixLimit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_RemovePrivate represents the /nokia-conf/configure/router/bgp/group/remove-private YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_RemovePrivate struct {
	Limited    *bool `path:"limited" module:"nokia-conf"`
	Replace    *bool `path:"replace" module:"nokia-conf"`
	SkipPeerAs *bool `path:"skip-peer-as" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_RemovePrivate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_RemovePrivate) IsYANGGoStruct() {}

// GetLimited retrieves the value of the leaf Limited from the NokiaConf_Configure_Router_Bgp_Group_RemovePrivate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Limited is set, it can
// safely use t.GetLimited() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Limited == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_RemovePrivate) GetLimited() bool {
	if t == nil || t.Limited == nil {
		return false
	}
	return *t.Limited
}

// GetReplace retrieves the value of the leaf Replace from the NokiaConf_Configure_Router_Bgp_Group_RemovePrivate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Replace is set, it can
// safely use t.GetReplace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Replace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_RemovePrivate) GetReplace() bool {
	if t == nil || t.Replace == nil {
		return false
	}
	return *t.Replace
}

// GetSkipPeerAs retrieves the value of the leaf SkipPeerAs from the NokiaConf_Configure_Router_Bgp_Group_RemovePrivate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SkipPeerAs is set, it can
// safely use t.GetSkipPeerAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SkipPeerAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_RemovePrivate) GetSkipPeerAs() bool {
	if t == nil || t.SkipPeerAs == nil {
		return false
	}
	return *t.SkipPeerAs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_RemovePrivate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_RemovePrivate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Limited == nil {
		var v bool = false
		t.Limited = &v
	}
	if t.Replace == nil {
		var v bool = false
		t.Replace = &v
	}
	if t.SkipPeerAs == nil {
		var v bool = false
		t.SkipPeerAs = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_RemovePrivate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_RemovePrivate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_RemovePrivate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_RemovePrivate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_RemovePrivate.
func (*NokiaConf_Configure_Router_Bgp_Group_RemovePrivate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6 represents the /nokia-conf/configure/router/bgp/group/segment-routing-v6 YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6 struct {
	RouteAdvertisement *NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement `path:"route-advertisement" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6) IsYANGGoStruct() {}

// GetOrCreateRouteAdvertisement retrieves the value of the RouteAdvertisement field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6) GetOrCreateRouteAdvertisement() *NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement {
	if t.RouteAdvertisement != nil {
		return t.RouteAdvertisement
	}
	t.RouteAdvertisement = &NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement{}
	return t.RouteAdvertisement
}

// GetRouteAdvertisement returns the value of the RouteAdvertisement struct pointer
// from NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6. If the receiver or the field RouteAdvertisement is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6) GetRouteAdvertisement() *NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement {
	if t != nil && t.RouteAdvertisement != nil {
		return t.RouteAdvertisement
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RouteAdvertisement.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6.
func (*NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement represents the /nokia-conf/configure/router/bgp/group/segment-routing-v6/route-advertisement YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement struct {
	DropRoutesWithSrv6Tlvs *bool                                                                                                                                                                             `path:"drop-routes-with-srv6-tlvs" module:"nokia-conf"`
	Family                 map[E_NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType]*NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family `path:"family" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement) IsYANGGoStruct() {}

// NewFamily creates a new entry in the Family list of the
// NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement) NewFamily(FamilyType E_NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType) (*NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[E_NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType]*NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family)
	}

	key := FamilyType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Family[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Family", key)
	}

	t.Family[key] = &NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family{
		FamilyType: FamilyType,
	}

	return t.Family[key], nil
}

// RenameFamily renames an entry in the list Family within
// the NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement) RenameFamily(oldK, newK E_NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType) error {
	if _, ok := t.Family[newK]; ok {
		return fmt.Errorf("key %v already exists in Family", newK)
	}

	e, ok := t.Family[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Family", oldK)
	}
	e.FamilyType = newK

	t.Family[newK] = e
	delete(t.Family, oldK)
	return nil
}

// GetOrCreateFamily retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement) GetOrCreateFamily(FamilyType E_NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType) *NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family {

	key := FamilyType

	if v, ok := t.Family[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFamily(FamilyType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFamily got unexpected error: %v", err))
	}
	return v
}

// GetFamily retrieves the value with the specified key from
// the Family map field of NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement) GetFamily(FamilyType E_NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType) *NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family {

	if t == nil {
		return nil
	}

	key := FamilyType

	if lm, ok := t.Family[key]; ok {
		return lm
	}
	return nil
}

// DeleteFamily deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement) DeleteFamily(FamilyType E_NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType) {
	key := FamilyType

	delete(t.Family, key)
}

// AppendFamily appends the supplied NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family struct to the
// list Family of NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement) AppendFamily(v *NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family) error {
	key := v.FamilyType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[E_NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType]*NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family)
	}

	if _, ok := t.Family[key]; ok {
		return fmt.Errorf("duplicate key for list Family %v", key)
	}

	t.Family[key] = v
	return nil
}

// GetDropRoutesWithSrv6Tlvs retrieves the value of the leaf DropRoutesWithSrv6Tlvs from the NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropRoutesWithSrv6Tlvs is set, it can
// safely use t.GetDropRoutesWithSrv6Tlvs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropRoutesWithSrv6Tlvs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement) GetDropRoutesWithSrv6Tlvs() bool {
	if t == nil || t.DropRoutesWithSrv6Tlvs == nil {
		return false
	}
	return *t.DropRoutesWithSrv6Tlvs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DropRoutesWithSrv6Tlvs == nil {
		var v bool = false
		t.DropRoutesWithSrv6Tlvs = &v
	}
	for _, e := range t.Family {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement.
func (*NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family represents the /nokia-conf/configure/router/bgp/group/segment-routing-v6/route-advertisement/family YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family struct {
	ApplyGroups        []string                                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	FamilyType         E_NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType `path:"family-type" module:"nokia-conf"`
	StripSrv6Tlvs      *bool                                                                                        `path:"strip-srv6-tlvs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFamilyType retrieves the value of the leaf FamilyType from the NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FamilyType is set, it can
// safely use t.GetFamilyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FamilyType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family) GetFamilyType() E_NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType {
	if t == nil || t.FamilyType == 0 {
		return 0
	}
	return t.FamilyType
}

// GetStripSrv6Tlvs retrieves the value of the leaf StripSrv6Tlvs from the NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StripSrv6Tlvs is set, it can
// safely use t.GetStripSrv6Tlvs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StripSrv6Tlvs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family) GetStripSrv6Tlvs() bool {
	if t == nil || t.StripSrv6Tlvs == nil {
		return false
	}
	return *t.StripSrv6Tlvs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.StripSrv6Tlvs == nil {
		var v bool = false
		t.StripSrv6Tlvs = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"family-type": t.FamilyType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family.
func (*NokiaConf_Configure_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_SendCommunities represents the /nokia-conf/configure/router/bgp/group/send-communities YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_SendCommunities struct {
	Extended *bool `path:"extended" module:"nokia-conf"`
	Large    *bool `path:"large" module:"nokia-conf"`
	Standard *bool `path:"standard" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_SendCommunities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_SendCommunities) IsYANGGoStruct() {}

// GetExtended retrieves the value of the leaf Extended from the NokiaConf_Configure_Router_Bgp_Group_SendCommunities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_SendCommunities) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetLarge retrieves the value of the leaf Large from the NokiaConf_Configure_Router_Bgp_Group_SendCommunities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Large is set, it can
// safely use t.GetLarge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Large == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_SendCommunities) GetLarge() bool {
	if t == nil || t.Large == nil {
		return false
	}
	return *t.Large
}

// GetStandard retrieves the value of the leaf Standard from the NokiaConf_Configure_Router_Bgp_Group_SendCommunities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Standard is set, it can
// safely use t.GetStandard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Standard == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_SendCommunities) GetStandard() bool {
	if t == nil || t.Standard == nil {
		return false
	}
	return *t.Standard
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_SendCommunities
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_SendCommunities) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_SendCommunities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_SendCommunities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_SendCommunities) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_SendCommunities) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_SendCommunities.
func (*NokiaConf_Configure_Router_Bgp_Group_SendCommunities) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Group_SendDefault represents the /nokia-conf/configure/router/bgp/group/send-default YANG schema element.
type NokiaConf_Configure_Router_Bgp_Group_SendDefault struct {
	ExportPolicy *string `path:"export-policy" module:"nokia-conf"`
	Ipv4         *bool   `path:"ipv4" module:"nokia-conf"`
	Ipv6         *bool   `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Group_SendDefault implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Group_SendDefault) IsYANGGoStruct() {}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Router_Bgp_Group_SendDefault
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_SendDefault) GetExportPolicy() string {
	if t == nil || t.ExportPolicy == nil {
		return ""
	}
	return *t.ExportPolicy
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Router_Bgp_Group_SendDefault
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_SendDefault) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Router_Bgp_Group_SendDefault
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Group_SendDefault) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Group_SendDefault
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Group_SendDefault) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_SendDefault) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Group_SendDefault"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Group_SendDefault) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Group_SendDefault) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Group_SendDefault.
func (*NokiaConf_Configure_Router_Bgp_Group_SendDefault) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_HoldTime represents the /nokia-conf/configure/router/bgp/hold-time YANG schema element.
type NokiaConf_Configure_Router_Bgp_HoldTime struct {
	MinimumHoldTime *int32 `path:"minimum-hold-time" module:"nokia-conf"`
	Seconds         *int32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_HoldTime) IsYANGGoStruct() {}

// GetMinimumHoldTime retrieves the value of the leaf MinimumHoldTime from the NokiaConf_Configure_Router_Bgp_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinimumHoldTime is set, it can
// safely use t.GetMinimumHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinimumHoldTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_HoldTime) GetMinimumHoldTime() int32 {
	if t == nil || t.MinimumHoldTime == nil {
		return 0
	}
	return *t.MinimumHoldTime
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Router_Bgp_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_HoldTime) GetSeconds() int32 {
	if t == nil || t.Seconds == nil {
		return 90
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MinimumHoldTime == nil {
		var v int32 = 0
		t.MinimumHoldTime = &v
	}
	if t.Seconds == nil {
		var v int32 = 90
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_HoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_HoldTime.
func (*NokiaConf_Configure_Router_Bgp_HoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Import represents the /nokia-conf/configure/router/bgp/import YANG schema element.
type NokiaConf_Configure_Router_Bgp_Import struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Policy             []string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Import implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Import) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bgp_Import
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Import) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bgp_Import
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Import) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Router_Bgp_Import
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Import) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Import
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Import) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Import) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Import"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Import) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Import) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Import.
func (*NokiaConf_Configure_Router_Bgp_Import) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_LabelAllocation represents the /nokia-conf/configure/router/bgp/label-allocation YANG schema element.
type NokiaConf_Configure_Router_Bgp_LabelAllocation struct {
	LabelIpv6 *NokiaConf_Configure_Router_Bgp_LabelAllocation_LabelIpv6 `path:"label-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_LabelAllocation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_LabelAllocation) IsYANGGoStruct() {}

// GetOrCreateLabelIpv6 retrieves the value of the LabelIpv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_LabelAllocation) GetOrCreateLabelIpv6() *NokiaConf_Configure_Router_Bgp_LabelAllocation_LabelIpv6 {
	if t.LabelIpv6 != nil {
		return t.LabelIpv6
	}
	t.LabelIpv6 = &NokiaConf_Configure_Router_Bgp_LabelAllocation_LabelIpv6{}
	return t.LabelIpv6
}

// GetLabelIpv6 returns the value of the LabelIpv6 struct pointer
// from NokiaConf_Configure_Router_Bgp_LabelAllocation. If the receiver or the field LabelIpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_LabelAllocation) GetLabelIpv6() *NokiaConf_Configure_Router_Bgp_LabelAllocation_LabelIpv6 {
	if t != nil && t.LabelIpv6 != nil {
		return t.LabelIpv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_LabelAllocation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_LabelAllocation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LabelIpv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_LabelAllocation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_LabelAllocation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_LabelAllocation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_LabelAllocation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_LabelAllocation.
func (*NokiaConf_Configure_Router_Bgp_LabelAllocation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_LabelAllocation_LabelIpv6 represents the /nokia-conf/configure/router/bgp/label-allocation/label-ipv6 YANG schema element.
type NokiaConf_Configure_Router_Bgp_LabelAllocation_LabelIpv6 struct {
	ExplicitNull *bool `path:"explicit-null" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_LabelAllocation_LabelIpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_LabelAllocation_LabelIpv6) IsYANGGoStruct() {}

// GetExplicitNull retrieves the value of the leaf ExplicitNull from the NokiaConf_Configure_Router_Bgp_LabelAllocation_LabelIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExplicitNull is set, it can
// safely use t.GetExplicitNull() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExplicitNull == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_LabelAllocation_LabelIpv6) GetExplicitNull() bool {
	if t == nil || t.ExplicitNull == nil {
		return true
	}
	return *t.ExplicitNull
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_LabelAllocation_LabelIpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_LabelAllocation_LabelIpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ExplicitNull == nil {
		var v bool = true
		t.ExplicitNull = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_LabelAllocation_LabelIpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_LabelAllocation_LabelIpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_LabelAllocation_LabelIpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_LabelAllocation_LabelIpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_LabelAllocation_LabelIpv6.
func (*NokiaConf_Configure_Router_Bgp_LabelAllocation_LabelIpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_LocalAs represents the /nokia-conf/configure/router/bgp/local-as YANG schema element.
type NokiaConf_Configure_Router_Bgp_LocalAs struct {
	AsNumber        *uint32 `path:"as-number" module:"nokia-conf"`
	PrependGlobalAs *bool   `path:"prepend-global-as" module:"nokia-conf"`
	Private         *bool   `path:"private" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_LocalAs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_LocalAs) IsYANGGoStruct() {}

// GetAsNumber retrieves the value of the leaf AsNumber from the NokiaConf_Configure_Router_Bgp_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsNumber is set, it can
// safely use t.GetAsNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_LocalAs) GetAsNumber() uint32 {
	if t == nil || t.AsNumber == nil {
		return 0
	}
	return *t.AsNumber
}

// GetPrependGlobalAs retrieves the value of the leaf PrependGlobalAs from the NokiaConf_Configure_Router_Bgp_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrependGlobalAs is set, it can
// safely use t.GetPrependGlobalAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrependGlobalAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_LocalAs) GetPrependGlobalAs() bool {
	if t == nil || t.PrependGlobalAs == nil {
		return true
	}
	return *t.PrependGlobalAs
}

// GetPrivate retrieves the value of the leaf Private from the NokiaConf_Configure_Router_Bgp_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Private is set, it can
// safely use t.GetPrivate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Private == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_LocalAs) GetPrivate() bool {
	if t == nil || t.Private == nil {
		return false
	}
	return *t.Private
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_LocalAs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_LocalAs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PrependGlobalAs == nil {
		var v bool = true
		t.PrependGlobalAs = &v
	}
	if t.Private == nil {
		var v bool = false
		t.Private = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_LocalAs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_LocalAs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_LocalAs) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_LocalAs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_LocalAs.
func (*NokiaConf_Configure_Router_Bgp_LocalAs) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Monitor represents the /nokia-conf/configure/router/bgp/monitor YANG schema element.
type NokiaConf_Configure_Router_Bgp_Monitor struct {
	AdminState         E_NokiaTypesSros_AdminState                                `path:"admin-state" module:"nokia-conf"`
	AllStations        *bool                                                      `path:"all-stations" module:"nokia-conf"`
	ApplyGroups        []string                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	RouteMonitoring    *NokiaConf_Configure_Router_Bgp_Monitor_RouteMonitoring    `path:"route-monitoring" module:"nokia-conf"`
	Station            map[string]*NokiaConf_Configure_Router_Bgp_Monitor_Station `path:"station" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Monitor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Monitor) IsYANGGoStruct() {}

// NewStation creates a new entry in the Station list of the
// NokiaConf_Configure_Router_Bgp_Monitor struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Bgp_Monitor) NewStation(StationName string) (*NokiaConf_Configure_Router_Bgp_Monitor_Station, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Station == nil {
		t.Station = make(map[string]*NokiaConf_Configure_Router_Bgp_Monitor_Station)
	}

	key := StationName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Station[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Station", key)
	}

	t.Station[key] = &NokiaConf_Configure_Router_Bgp_Monitor_Station{
		StationName: &StationName,
	}

	return t.Station[key], nil
}

// RenameStation renames an entry in the list Station within
// the NokiaConf_Configure_Router_Bgp_Monitor struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Bgp_Monitor) RenameStation(oldK, newK string) error {
	if _, ok := t.Station[newK]; ok {
		return fmt.Errorf("key %v already exists in Station", newK)
	}

	e, ok := t.Station[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Station", oldK)
	}
	e.StationName = &newK

	t.Station[newK] = e
	delete(t.Station, oldK)
	return nil
}

// GetOrCreateStation retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_Monitor. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Bgp_Monitor) GetOrCreateStation(StationName string) *NokiaConf_Configure_Router_Bgp_Monitor_Station {

	key := StationName

	if v, ok := t.Station[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStation(StationName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStation got unexpected error: %v", err))
	}
	return v
}

// GetStation retrieves the value with the specified key from
// the Station map field of NokiaConf_Configure_Router_Bgp_Monitor. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Monitor) GetStation(StationName string) *NokiaConf_Configure_Router_Bgp_Monitor_Station {

	if t == nil {
		return nil
	}

	key := StationName

	if lm, ok := t.Station[key]; ok {
		return lm
	}
	return nil
}

// DeleteStation deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_Monitor. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Bgp_Monitor) DeleteStation(StationName string) {
	key := StationName

	delete(t.Station, key)
}

// AppendStation appends the supplied NokiaConf_Configure_Router_Bgp_Monitor_Station struct to the
// list Station of NokiaConf_Configure_Router_Bgp_Monitor. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Bgp_Monitor_Station already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Bgp_Monitor) AppendStation(v *NokiaConf_Configure_Router_Bgp_Monitor_Station) error {
	if v.StationName == nil {
		return fmt.Errorf("invalid nil key received for StationName")
	}

	key := *v.StationName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Station == nil {
		t.Station = make(map[string]*NokiaConf_Configure_Router_Bgp_Monitor_Station)
	}

	if _, ok := t.Station[key]; ok {
		return fmt.Errorf("duplicate key for list Station %v", key)
	}

	t.Station[key] = v
	return nil
}

// GetOrCreateRouteMonitoring retrieves the value of the RouteMonitoring field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Monitor) GetOrCreateRouteMonitoring() *NokiaConf_Configure_Router_Bgp_Monitor_RouteMonitoring {
	if t.RouteMonitoring != nil {
		return t.RouteMonitoring
	}
	t.RouteMonitoring = &NokiaConf_Configure_Router_Bgp_Monitor_RouteMonitoring{}
	return t.RouteMonitoring
}

// GetRouteMonitoring returns the value of the RouteMonitoring struct pointer
// from NokiaConf_Configure_Router_Bgp_Monitor. If the receiver or the field RouteMonitoring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Monitor) GetRouteMonitoring() *NokiaConf_Configure_Router_Bgp_Monitor_RouteMonitoring {
	if t != nil && t.RouteMonitoring != nil {
		return t.RouteMonitoring
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Bgp_Monitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Monitor) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAllStations retrieves the value of the leaf AllStations from the NokiaConf_Configure_Router_Bgp_Monitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllStations is set, it can
// safely use t.GetAllStations() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllStations == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Monitor) GetAllStations() bool {
	if t == nil || t.AllStations == nil {
		return false
	}
	return *t.AllStations
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bgp_Monitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Monitor) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bgp_Monitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Monitor) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Monitor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Monitor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AllStations == nil {
		var v bool = false
		t.AllStations = &v
	}
	t.RouteMonitoring.PopulateDefaults()
	for _, e := range t.Station {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Monitor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Monitor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Monitor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Monitor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Monitor.
func (*NokiaConf_Configure_Router_Bgp_Monitor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Monitor_RouteMonitoring represents the /nokia-conf/configure/router/bgp/monitor/route-monitoring YANG schema element.
type NokiaConf_Configure_Router_Bgp_Monitor_RouteMonitoring struct {
	PostPolicy *bool `path:"post-policy" module:"nokia-conf"`
	PrePolicy  *bool `path:"pre-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Monitor_RouteMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Monitor_RouteMonitoring) IsYANGGoStruct() {}

// GetPostPolicy retrieves the value of the leaf PostPolicy from the NokiaConf_Configure_Router_Bgp_Monitor_RouteMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PostPolicy is set, it can
// safely use t.GetPostPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PostPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Monitor_RouteMonitoring) GetPostPolicy() bool {
	if t == nil || t.PostPolicy == nil {
		return false
	}
	return *t.PostPolicy
}

// GetPrePolicy retrieves the value of the leaf PrePolicy from the NokiaConf_Configure_Router_Bgp_Monitor_RouteMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrePolicy is set, it can
// safely use t.GetPrePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Monitor_RouteMonitoring) GetPrePolicy() bool {
	if t == nil || t.PrePolicy == nil {
		return false
	}
	return *t.PrePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Monitor_RouteMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Monitor_RouteMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PostPolicy == nil {
		var v bool = false
		t.PostPolicy = &v
	}
	if t.PrePolicy == nil {
		var v bool = false
		t.PrePolicy = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Monitor_RouteMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Monitor_RouteMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Monitor_RouteMonitoring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Monitor_RouteMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Monitor_RouteMonitoring.
func (*NokiaConf_Configure_Router_Bgp_Monitor_RouteMonitoring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Monitor_Station represents the /nokia-conf/configure/router/bgp/monitor/station YANG schema element.
type NokiaConf_Configure_Router_Bgp_Monitor_Station struct {
	StationName *string `path:"station-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Monitor_Station implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Monitor_Station) IsYANGGoStruct() {}

// GetStationName retrieves the value of the leaf StationName from the NokiaConf_Configure_Router_Bgp_Monitor_Station
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StationName is set, it can
// safely use t.GetStationName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StationName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Monitor_Station) GetStationName() string {
	if t == nil || t.StationName == nil {
		return ""
	}
	return *t.StationName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Monitor_Station
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Monitor_Station) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Bgp_Monitor_Station struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Bgp_Monitor_Station) ΛListKeyMap() (map[string]interface{}, error) {
	if t.StationName == nil {
		return nil, fmt.Errorf("nil value for key StationName")
	}

	return map[string]interface{}{
		"station-name": *t.StationName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Monitor_Station) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Monitor_Station"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Monitor_Station) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Monitor_Station) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Monitor_Station.
func (*NokiaConf_Configure_Router_Bgp_Monitor_Station) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Multipath represents the /nokia-conf/configure/router/bgp/multipath YANG schema element.
type NokiaConf_Configure_Router_Bgp_Multipath struct {
	Ebgp        *uint32                                                                                                           `path:"ebgp" module:"nokia-conf"`
	Family      map[E_NokiaConf_Configure_Router_Bgp_Multipath_Family_FamilyType]*NokiaConf_Configure_Router_Bgp_Multipath_Family `path:"family" module:"nokia-conf"`
	Ibgp        *uint32                                                                                                           `path:"ibgp" module:"nokia-conf"`
	MaxPaths    *uint32                                                                                                           `path:"max-paths" module:"nokia-conf"`
	Restrict    E_NokiaTypesBgp_Restrict                                                                                          `path:"restrict" module:"nokia-conf"`
	UnequalCost *bool                                                                                                             `path:"unequal-cost" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Multipath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Multipath) IsYANGGoStruct() {}

// NewFamily creates a new entry in the Family list of the
// NokiaConf_Configure_Router_Bgp_Multipath struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Bgp_Multipath) NewFamily(FamilyType E_NokiaConf_Configure_Router_Bgp_Multipath_Family_FamilyType) (*NokiaConf_Configure_Router_Bgp_Multipath_Family, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[E_NokiaConf_Configure_Router_Bgp_Multipath_Family_FamilyType]*NokiaConf_Configure_Router_Bgp_Multipath_Family)
	}

	key := FamilyType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Family[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Family", key)
	}

	t.Family[key] = &NokiaConf_Configure_Router_Bgp_Multipath_Family{
		FamilyType: FamilyType,
	}

	return t.Family[key], nil
}

// RenameFamily renames an entry in the list Family within
// the NokiaConf_Configure_Router_Bgp_Multipath struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Bgp_Multipath) RenameFamily(oldK, newK E_NokiaConf_Configure_Router_Bgp_Multipath_Family_FamilyType) error {
	if _, ok := t.Family[newK]; ok {
		return fmt.Errorf("key %v already exists in Family", newK)
	}

	e, ok := t.Family[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Family", oldK)
	}
	e.FamilyType = newK

	t.Family[newK] = e
	delete(t.Family, oldK)
	return nil
}

// GetOrCreateFamily retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_Multipath. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Bgp_Multipath) GetOrCreateFamily(FamilyType E_NokiaConf_Configure_Router_Bgp_Multipath_Family_FamilyType) *NokiaConf_Configure_Router_Bgp_Multipath_Family {

	key := FamilyType

	if v, ok := t.Family[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFamily(FamilyType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFamily got unexpected error: %v", err))
	}
	return v
}

// GetFamily retrieves the value with the specified key from
// the Family map field of NokiaConf_Configure_Router_Bgp_Multipath. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Multipath) GetFamily(FamilyType E_NokiaConf_Configure_Router_Bgp_Multipath_Family_FamilyType) *NokiaConf_Configure_Router_Bgp_Multipath_Family {

	if t == nil {
		return nil
	}

	key := FamilyType

	if lm, ok := t.Family[key]; ok {
		return lm
	}
	return nil
}

// DeleteFamily deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_Multipath. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Bgp_Multipath) DeleteFamily(FamilyType E_NokiaConf_Configure_Router_Bgp_Multipath_Family_FamilyType) {
	key := FamilyType

	delete(t.Family, key)
}

// AppendFamily appends the supplied NokiaConf_Configure_Router_Bgp_Multipath_Family struct to the
// list Family of NokiaConf_Configure_Router_Bgp_Multipath. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Bgp_Multipath_Family already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Bgp_Multipath) AppendFamily(v *NokiaConf_Configure_Router_Bgp_Multipath_Family) error {
	key := v.FamilyType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[E_NokiaConf_Configure_Router_Bgp_Multipath_Family_FamilyType]*NokiaConf_Configure_Router_Bgp_Multipath_Family)
	}

	if _, ok := t.Family[key]; ok {
		return fmt.Errorf("duplicate key for list Family %v", key)
	}

	t.Family[key] = v
	return nil
}

// GetEbgp retrieves the value of the leaf Ebgp from the NokiaConf_Configure_Router_Bgp_Multipath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ebgp is set, it can
// safely use t.GetEbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ebgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Multipath) GetEbgp() uint32 {
	if t == nil || t.Ebgp == nil {
		return 0
	}
	return *t.Ebgp
}

// GetIbgp retrieves the value of the leaf Ibgp from the NokiaConf_Configure_Router_Bgp_Multipath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ibgp is set, it can
// safely use t.GetIbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ibgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Multipath) GetIbgp() uint32 {
	if t == nil || t.Ibgp == nil {
		return 0
	}
	return *t.Ibgp
}

// GetMaxPaths retrieves the value of the leaf MaxPaths from the NokiaConf_Configure_Router_Bgp_Multipath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPaths is set, it can
// safely use t.GetMaxPaths() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPaths == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Multipath) GetMaxPaths() uint32 {
	if t == nil || t.MaxPaths == nil {
		return 1
	}
	return *t.MaxPaths
}

// GetRestrict retrieves the value of the leaf Restrict from the NokiaConf_Configure_Router_Bgp_Multipath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Restrict is set, it can
// safely use t.GetRestrict() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Restrict == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Multipath) GetRestrict() E_NokiaTypesBgp_Restrict {
	if t == nil || t.Restrict == 0 {
		return NokiaTypesBgp_Restrict_same_as_path_length
	}
	return t.Restrict
}

// GetUnequalCost retrieves the value of the leaf UnequalCost from the NokiaConf_Configure_Router_Bgp_Multipath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnequalCost is set, it can
// safely use t.GetUnequalCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnequalCost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Multipath) GetUnequalCost() bool {
	if t == nil || t.UnequalCost == nil {
		return false
	}
	return *t.UnequalCost
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Multipath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Multipath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxPaths == nil {
		var v uint32 = 1
		t.MaxPaths = &v
	}
	if t.Restrict == 0 {
		t.Restrict = NokiaTypesBgp_Restrict_same_as_path_length
	}
	if t.UnequalCost == nil {
		var v bool = false
		t.UnequalCost = &v
	}
	for _, e := range t.Family {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Multipath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Multipath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Multipath) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Multipath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Multipath.
func (*NokiaConf_Configure_Router_Bgp_Multipath) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Multipath_Family represents the /nokia-conf/configure/router/bgp/multipath/family YANG schema element.
type NokiaConf_Configure_Router_Bgp_Multipath_Family struct {
	ApplyGroups        []string                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Ebgp               *uint32                                                      `path:"ebgp" module:"nokia-conf"`
	FamilyType         E_NokiaConf_Configure_Router_Bgp_Multipath_Family_FamilyType `path:"family-type" module:"nokia-conf"`
	Ibgp               *uint32                                                      `path:"ibgp" module:"nokia-conf"`
	MaxPaths           *uint32                                                      `path:"max-paths" module:"nokia-conf"`
	Restrict           E_NokiaTypesBgp_Restrict                                     `path:"restrict" module:"nokia-conf"`
	UnequalCost        *bool                                                        `path:"unequal-cost" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Multipath_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Multipath_Family) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bgp_Multipath_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Multipath_Family) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bgp_Multipath_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Multipath_Family) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEbgp retrieves the value of the leaf Ebgp from the NokiaConf_Configure_Router_Bgp_Multipath_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ebgp is set, it can
// safely use t.GetEbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ebgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Multipath_Family) GetEbgp() uint32 {
	if t == nil || t.Ebgp == nil {
		return 0
	}
	return *t.Ebgp
}

// GetFamilyType retrieves the value of the leaf FamilyType from the NokiaConf_Configure_Router_Bgp_Multipath_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FamilyType is set, it can
// safely use t.GetFamilyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FamilyType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Multipath_Family) GetFamilyType() E_NokiaConf_Configure_Router_Bgp_Multipath_Family_FamilyType {
	if t == nil || t.FamilyType == 0 {
		return 0
	}
	return t.FamilyType
}

// GetIbgp retrieves the value of the leaf Ibgp from the NokiaConf_Configure_Router_Bgp_Multipath_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ibgp is set, it can
// safely use t.GetIbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ibgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Multipath_Family) GetIbgp() uint32 {
	if t == nil || t.Ibgp == nil {
		return 0
	}
	return *t.Ibgp
}

// GetMaxPaths retrieves the value of the leaf MaxPaths from the NokiaConf_Configure_Router_Bgp_Multipath_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPaths is set, it can
// safely use t.GetMaxPaths() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPaths == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Multipath_Family) GetMaxPaths() uint32 {
	if t == nil || t.MaxPaths == nil {
		return 0
	}
	return *t.MaxPaths
}

// GetRestrict retrieves the value of the leaf Restrict from the NokiaConf_Configure_Router_Bgp_Multipath_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Restrict is set, it can
// safely use t.GetRestrict() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Restrict == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Multipath_Family) GetRestrict() E_NokiaTypesBgp_Restrict {
	if t == nil || t.Restrict == 0 {
		return NokiaTypesBgp_Restrict_same_as_path_length
	}
	return t.Restrict
}

// GetUnequalCost retrieves the value of the leaf UnequalCost from the NokiaConf_Configure_Router_Bgp_Multipath_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnequalCost is set, it can
// safely use t.GetUnequalCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnequalCost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Multipath_Family) GetUnequalCost() bool {
	if t == nil || t.UnequalCost == nil {
		return false
	}
	return *t.UnequalCost
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Multipath_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Multipath_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Restrict == 0 {
		t.Restrict = NokiaTypesBgp_Restrict_same_as_path_length
	}
	if t.UnequalCost == nil {
		var v bool = false
		t.UnequalCost = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Bgp_Multipath_Family struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Bgp_Multipath_Family) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"family-type": t.FamilyType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Multipath_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Multipath_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Multipath_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Multipath_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Multipath_Family.
func (*NokiaConf_Configure_Router_Bgp_Multipath_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor represents the /nokia-conf/configure/router/bgp/neighbor YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor struct {
	AddPaths                          *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths                                           `path:"add-paths" module:"nokia-conf" yangPresence:"true"`
	AdminState                        E_NokiaTypesSros_AdminState                                                                 `path:"admin-state" module:"nokia-conf"`
	AdvertiseInactive                 *bool                                                                                       `path:"advertise-inactive" module:"nokia-conf"`
	AdvertiseIpv6NextHops             *NokiaConf_Configure_Router_Bgp_Neighbor_AdvertiseIpv6NextHops                              `path:"advertise-ipv6-next-hops" module:"nokia-conf" yangPresence:"true"`
	AdvertiseLdpPrefix                *bool                                                                                       `path:"advertise-ldp-prefix" module:"nokia-conf"`
	AggregatorIdZero                  *bool                                                                                       `path:"aggregator-id-zero" module:"nokia-conf"`
	Aigp                              *bool                                                                                       `path:"aigp" module:"nokia-conf"`
	ApplyGroups                       []string                                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude                []string                                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	AsOverride                        *bool                                                                                       `path:"as-override" module:"nokia-conf"`
	Asn_4Byte                         *bool                                                                                       `path:"asn-4-byte" module:"nokia-conf"`
	AuthenticationKey                 *string                                                                                     `path:"authentication-key" module:"nokia-conf"`
	AuthenticationKeychain            *string                                                                                     `path:"authentication-keychain" module:"nokia-conf"`
	BfdLiveness                       *bool                                                                                       `path:"bfd-liveness" module:"nokia-conf"`
	BlockPrefixSid                    *bool                                                                                       `path:"block-prefix-sid" module:"nokia-conf"`
	CapabilityNegotiation             *bool                                                                                       `path:"capability-negotiation" module:"nokia-conf"`
	ClientReflect                     *bool                                                                                       `path:"client-reflect" module:"nokia-conf"`
	Cluster                           *NokiaConf_Configure_Router_Bgp_Neighbor_Cluster                                            `path:"cluster" module:"nokia-conf"`
	ConnectRetry                      *int32                                                                                      `path:"connect-retry" module:"nokia-conf"`
	DampPeerOscillations              *NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations                               `path:"damp-peer-oscillations" module:"nokia-conf" yangPresence:"true"`
	Damping                           *bool                                                                                       `path:"damping" module:"nokia-conf"`
	DefRecvEvpnEncap                  E_NokiaTypesBgp_Encap                                                                       `path:"def-recv-evpn-encap" module:"nokia-conf"`
	DefaultLabelPreference            *NokiaConf_Configure_Router_Bgp_Neighbor_DefaultLabelPreference                             `path:"default-label-preference" module:"nokia-conf"`
	DefaultPreference                 *NokiaConf_Configure_Router_Bgp_Neighbor_DefaultPreference                                  `path:"default-preference" module:"nokia-conf"`
	DefaultRouteTarget                *bool                                                                                       `path:"default-route-target" module:"nokia-conf"`
	Description                       *string                                                                                     `path:"description" module:"nokia-conf"`
	EbgpDefaultRejectPolicy           *NokiaConf_Configure_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy                            `path:"ebgp-default-reject-policy" module:"nokia-conf" yangPresence:"true"`
	EgressEngineering                 *NokiaConf_Configure_Router_Bgp_Neighbor_EgressEngineering                                  `path:"egress-engineering" module:"nokia-conf" yangPresence:"true"`
	EgressPeerEngineeringLabelUnicast *bool                                                                                       `path:"egress-peer-engineering-label-unicast" module:"nokia-conf"`
	EnforceFirstAs                    *bool                                                                                       `path:"enforce-first-as" module:"nokia-conf"`
	ErrorHandling                     *NokiaConf_Configure_Router_Bgp_Neighbor_ErrorHandling                                      `path:"error-handling" module:"nokia-conf"`
	Export                            *NokiaConf_Configure_Router_Bgp_Neighbor_Export                                             `path:"export" module:"nokia-conf" yangPresence:"true"`
	ExtendedNhEncoding                *NokiaConf_Configure_Router_Bgp_Neighbor_ExtendedNhEncoding                                 `path:"extended-nh-encoding" module:"nokia-conf" yangPresence:"true"`
	Family                            *NokiaConf_Configure_Router_Bgp_Neighbor_Family                                             `path:"family" module:"nokia-conf" yangPresence:"true"`
	FastExternalFailover              *bool                                                                                       `path:"fast-external-failover" module:"nokia-conf"`
	GracefulRestart                   *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart                                    `path:"graceful-restart" module:"nokia-conf" yangPresence:"true"`
	Group                             *string                                                                                     `path:"group" module:"nokia-conf"`
	HoldTime                          *NokiaConf_Configure_Router_Bgp_Neighbor_HoldTime                                           `path:"hold-time" module:"nokia-conf"`
	Import                            *NokiaConf_Configure_Router_Bgp_Neighbor_Import                                             `path:"import" module:"nokia-conf" yangPresence:"true"`
	InitialSendDelayZero              *bool                                                                                       `path:"initial-send-delay-zero" module:"nokia-conf"`
	IpAddress                         *string                                                                                     `path:"ip-address" module:"nokia-conf"`
	Keepalive                         *int32                                                                                      `path:"keepalive" module:"nokia-conf"`
	L2VpnCiscoInterop                 *bool                                                                                       `path:"l2vpn-cisco-interop" module:"nokia-conf"`
	LabelPreference                   *uint32                                                                                     `path:"label-preference" module:"nokia-conf"`
	LinkBandwidth                     *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth                                      `path:"link-bandwidth" module:"nokia-conf"`
	LocalAddress                      *string                                                                                     `path:"local-address" module:"nokia-conf"`
	LocalAs                           *NokiaConf_Configure_Router_Bgp_Neighbor_LocalAs                                            `path:"local-as" module:"nokia-conf"`
	LocalPreference                   *int64                                                                                      `path:"local-preference" module:"nokia-conf"`
	LoopDetect                        E_NokiaTypesBgp_LoopDetect                                                                  `path:"loop-detect" module:"nokia-conf"`
	LoopDetectThreshold               *uint32                                                                                     `path:"loop-detect-threshold" module:"nokia-conf"`
	MedOut                            NokiaConf_Configure_Router_Bgp_Neighbor_MedOut_Union                                        `path:"med-out" module:"nokia-conf"`
	MinRouteAdvertisement             *int16                                                                                      `path:"min-route-advertisement" module:"nokia-conf"`
	Monitor                           *NokiaConf_Configure_Router_Bgp_Neighbor_Monitor                                            `path:"monitor" module:"nokia-conf" yangPresence:"true"`
	Multihop                          *int32                                                                                      `path:"multihop" module:"nokia-conf"`
	MultipathEligible                 *bool                                                                                       `path:"multipath-eligible" module:"nokia-conf"`
	NextHopSelf                       *bool                                                                                       `path:"next-hop-self" module:"nokia-conf"`
	NextHopUnchanged                  *NokiaConf_Configure_Router_Bgp_Neighbor_NextHopUnchanged                                   `path:"next-hop-unchanged" module:"nokia-conf" yangPresence:"true"`
	OriginValidation                  *NokiaConf_Configure_Router_Bgp_Neighbor_OriginValidation                                   `path:"origin-validation" module:"nokia-conf" yangPresence:"true"`
	OutboundRouteFiltering            *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering                             `path:"outbound-route-filtering" module:"nokia-conf" yangPresence:"true"`
	Passive                           *bool                                                                                       `path:"passive" module:"nokia-conf"`
	PathMtuDiscovery                  *bool                                                                                       `path:"path-mtu-discovery" module:"nokia-conf"`
	PeerAs                            *uint32                                                                                     `path:"peer-as" module:"nokia-conf"`
	PeerCreationType                  E_NokiaTypesBgp_PeerCreationType                                                            `path:"peer-creation-type" module:"nokia-conf"`
	PeerIpTracking                    *bool                                                                                       `path:"peer-ip-tracking" module:"nokia-conf"`
	Preference                        *uint32                                                                                     `path:"preference" module:"nokia-conf"`
	PrefixLimit                       map[E_NokiaTypesBgp_IpFamilyIdentifier]*NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit `path:"prefix-limit" module:"nokia-conf"`
	RemovePrivate                     *NokiaConf_Configure_Router_Bgp_Neighbor_RemovePrivate                                      `path:"remove-private" module:"nokia-conf" yangPresence:"true"`
	SegmentRoutingV6                  *NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6                                   `path:"segment-routing-v6" module:"nokia-conf" yangPresence:"true"`
	SelectiveLabelIpv4Install         *bool                                                                                       `path:"selective-label-ipv4-install" module:"nokia-conf"`
	SendCommunities                   *NokiaConf_Configure_Router_Bgp_Neighbor_SendCommunities                                    `path:"send-communities" module:"nokia-conf"`
	SendDefault                       *NokiaConf_Configure_Router_Bgp_Neighbor_SendDefault                                        `path:"send-default" module:"nokia-conf" yangPresence:"true"`
	SplitHorizon                      *bool                                                                                       `path:"split-horizon" module:"nokia-conf"`
	TcpMss                            NokiaConf_Configure_Router_Bgp_Neighbor_TcpMss_Union                                        `path:"tcp-mss" module:"nokia-conf"`
	ThirdPartyNexthop                 *bool                                                                                       `path:"third-party-nexthop" module:"nokia-conf"`
	TtlSecurity                       *uint32                                                                                     `path:"ttl-security" module:"nokia-conf"`
	Type                              E_NokiaTypesBgp_PeerType                                                                    `path:"type" module:"nokia-conf"`
	VpnApplyExport                    *bool                                                                                       `path:"vpn-apply-export" module:"nokia-conf"`
	VpnApplyImport                    *bool                                                                                       `path:"vpn-apply-import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor) IsYANGGoStruct() {}

// NewPrefixLimit creates a new entry in the PrefixLimit list of the
// NokiaConf_Configure_Router_Bgp_Neighbor struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) NewPrefixLimit(Family E_NokiaTypesBgp_IpFamilyIdentifier) (*NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixLimit == nil {
		t.PrefixLimit = make(map[E_NokiaTypesBgp_IpFamilyIdentifier]*NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit)
	}

	key := Family

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrefixLimit[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrefixLimit", key)
	}

	t.PrefixLimit[key] = &NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit{
		Family: Family,
	}

	return t.PrefixLimit[key], nil
}

// RenamePrefixLimit renames an entry in the list PrefixLimit within
// the NokiaConf_Configure_Router_Bgp_Neighbor struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) RenamePrefixLimit(oldK, newK E_NokiaTypesBgp_IpFamilyIdentifier) error {
	if _, ok := t.PrefixLimit[newK]; ok {
		return fmt.Errorf("key %v already exists in PrefixLimit", newK)
	}

	e, ok := t.PrefixLimit[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrefixLimit", oldK)
	}
	e.Family = newK

	t.PrefixLimit[newK] = e
	delete(t.PrefixLimit, oldK)
	return nil
}

// GetOrCreatePrefixLimit retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_Neighbor. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetOrCreatePrefixLimit(Family E_NokiaTypesBgp_IpFamilyIdentifier) *NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit {

	key := Family

	if v, ok := t.PrefixLimit[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefixLimit(Family)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefixLimit got unexpected error: %v", err))
	}
	return v
}

// GetPrefixLimit retrieves the value with the specified key from
// the PrefixLimit map field of NokiaConf_Configure_Router_Bgp_Neighbor. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetPrefixLimit(Family E_NokiaTypesBgp_IpFamilyIdentifier) *NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit {

	if t == nil {
		return nil
	}

	key := Family

	if lm, ok := t.PrefixLimit[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefixLimit deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_Neighbor. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) DeletePrefixLimit(Family E_NokiaTypesBgp_IpFamilyIdentifier) {
	key := Family

	delete(t.PrefixLimit, key)
}

// AppendPrefixLimit appends the supplied NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit struct to the
// list PrefixLimit of NokiaConf_Configure_Router_Bgp_Neighbor. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) AppendPrefixLimit(v *NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit) error {
	key := v.Family

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixLimit == nil {
		t.PrefixLimit = make(map[E_NokiaTypesBgp_IpFamilyIdentifier]*NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit)
	}

	if _, ok := t.PrefixLimit[key]; ok {
		return fmt.Errorf("duplicate key for list PrefixLimit %v", key)
	}

	t.PrefixLimit[key] = v
	return nil
}

// GetOrCreateAddPaths retrieves the value of the AddPaths field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetOrCreateAddPaths() *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths {
	if t.AddPaths != nil {
		return t.AddPaths
	}
	t.AddPaths = &NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths{}
	return t.AddPaths
}

// GetOrCreateAdvertiseIpv6NextHops retrieves the value of the AdvertiseIpv6NextHops field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetOrCreateAdvertiseIpv6NextHops() *NokiaConf_Configure_Router_Bgp_Neighbor_AdvertiseIpv6NextHops {
	if t.AdvertiseIpv6NextHops != nil {
		return t.AdvertiseIpv6NextHops
	}
	t.AdvertiseIpv6NextHops = &NokiaConf_Configure_Router_Bgp_Neighbor_AdvertiseIpv6NextHops{}
	return t.AdvertiseIpv6NextHops
}

// GetOrCreateCluster retrieves the value of the Cluster field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetOrCreateCluster() *NokiaConf_Configure_Router_Bgp_Neighbor_Cluster {
	if t.Cluster != nil {
		return t.Cluster
	}
	t.Cluster = &NokiaConf_Configure_Router_Bgp_Neighbor_Cluster{}
	return t.Cluster
}

// GetOrCreateDampPeerOscillations retrieves the value of the DampPeerOscillations field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetOrCreateDampPeerOscillations() *NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations {
	if t.DampPeerOscillations != nil {
		return t.DampPeerOscillations
	}
	t.DampPeerOscillations = &NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations{}
	return t.DampPeerOscillations
}

// GetOrCreateDefaultLabelPreference retrieves the value of the DefaultLabelPreference field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetOrCreateDefaultLabelPreference() *NokiaConf_Configure_Router_Bgp_Neighbor_DefaultLabelPreference {
	if t.DefaultLabelPreference != nil {
		return t.DefaultLabelPreference
	}
	t.DefaultLabelPreference = &NokiaConf_Configure_Router_Bgp_Neighbor_DefaultLabelPreference{}
	return t.DefaultLabelPreference
}

// GetOrCreateDefaultPreference retrieves the value of the DefaultPreference field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetOrCreateDefaultPreference() *NokiaConf_Configure_Router_Bgp_Neighbor_DefaultPreference {
	if t.DefaultPreference != nil {
		return t.DefaultPreference
	}
	t.DefaultPreference = &NokiaConf_Configure_Router_Bgp_Neighbor_DefaultPreference{}
	return t.DefaultPreference
}

// GetOrCreateEbgpDefaultRejectPolicy retrieves the value of the EbgpDefaultRejectPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetOrCreateEbgpDefaultRejectPolicy() *NokiaConf_Configure_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy {
	if t.EbgpDefaultRejectPolicy != nil {
		return t.EbgpDefaultRejectPolicy
	}
	t.EbgpDefaultRejectPolicy = &NokiaConf_Configure_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy{}
	return t.EbgpDefaultRejectPolicy
}

// GetOrCreateEgressEngineering retrieves the value of the EgressEngineering field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetOrCreateEgressEngineering() *NokiaConf_Configure_Router_Bgp_Neighbor_EgressEngineering {
	if t.EgressEngineering != nil {
		return t.EgressEngineering
	}
	t.EgressEngineering = &NokiaConf_Configure_Router_Bgp_Neighbor_EgressEngineering{}
	return t.EgressEngineering
}

// GetOrCreateErrorHandling retrieves the value of the ErrorHandling field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetOrCreateErrorHandling() *NokiaConf_Configure_Router_Bgp_Neighbor_ErrorHandling {
	if t.ErrorHandling != nil {
		return t.ErrorHandling
	}
	t.ErrorHandling = &NokiaConf_Configure_Router_Bgp_Neighbor_ErrorHandling{}
	return t.ErrorHandling
}

// GetOrCreateExport retrieves the value of the Export field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetOrCreateExport() *NokiaConf_Configure_Router_Bgp_Neighbor_Export {
	if t.Export != nil {
		return t.Export
	}
	t.Export = &NokiaConf_Configure_Router_Bgp_Neighbor_Export{}
	return t.Export
}

// GetOrCreateExtendedNhEncoding retrieves the value of the ExtendedNhEncoding field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetOrCreateExtendedNhEncoding() *NokiaConf_Configure_Router_Bgp_Neighbor_ExtendedNhEncoding {
	if t.ExtendedNhEncoding != nil {
		return t.ExtendedNhEncoding
	}
	t.ExtendedNhEncoding = &NokiaConf_Configure_Router_Bgp_Neighbor_ExtendedNhEncoding{}
	return t.ExtendedNhEncoding
}

// GetOrCreateFamily retrieves the value of the Family field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetOrCreateFamily() *NokiaConf_Configure_Router_Bgp_Neighbor_Family {
	if t.Family != nil {
		return t.Family
	}
	t.Family = &NokiaConf_Configure_Router_Bgp_Neighbor_Family{}
	return t.Family
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetOrCreateGracefulRestart() *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetOrCreateHoldTime() *NokiaConf_Configure_Router_Bgp_Neighbor_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &NokiaConf_Configure_Router_Bgp_Neighbor_HoldTime{}
	return t.HoldTime
}

// GetOrCreateImport retrieves the value of the Import field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetOrCreateImport() *NokiaConf_Configure_Router_Bgp_Neighbor_Import {
	if t.Import != nil {
		return t.Import
	}
	t.Import = &NokiaConf_Configure_Router_Bgp_Neighbor_Import{}
	return t.Import
}

// GetOrCreateLinkBandwidth retrieves the value of the LinkBandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetOrCreateLinkBandwidth() *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth {
	if t.LinkBandwidth != nil {
		return t.LinkBandwidth
	}
	t.LinkBandwidth = &NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth{}
	return t.LinkBandwidth
}

// GetOrCreateLocalAs retrieves the value of the LocalAs field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetOrCreateLocalAs() *NokiaConf_Configure_Router_Bgp_Neighbor_LocalAs {
	if t.LocalAs != nil {
		return t.LocalAs
	}
	t.LocalAs = &NokiaConf_Configure_Router_Bgp_Neighbor_LocalAs{}
	return t.LocalAs
}

// GetOrCreateMonitor retrieves the value of the Monitor field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetOrCreateMonitor() *NokiaConf_Configure_Router_Bgp_Neighbor_Monitor {
	if t.Monitor != nil {
		return t.Monitor
	}
	t.Monitor = &NokiaConf_Configure_Router_Bgp_Neighbor_Monitor{}
	return t.Monitor
}

// GetOrCreateNextHopUnchanged retrieves the value of the NextHopUnchanged field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetOrCreateNextHopUnchanged() *NokiaConf_Configure_Router_Bgp_Neighbor_NextHopUnchanged {
	if t.NextHopUnchanged != nil {
		return t.NextHopUnchanged
	}
	t.NextHopUnchanged = &NokiaConf_Configure_Router_Bgp_Neighbor_NextHopUnchanged{}
	return t.NextHopUnchanged
}

// GetOrCreateOriginValidation retrieves the value of the OriginValidation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetOrCreateOriginValidation() *NokiaConf_Configure_Router_Bgp_Neighbor_OriginValidation {
	if t.OriginValidation != nil {
		return t.OriginValidation
	}
	t.OriginValidation = &NokiaConf_Configure_Router_Bgp_Neighbor_OriginValidation{}
	return t.OriginValidation
}

// GetOrCreateOutboundRouteFiltering retrieves the value of the OutboundRouteFiltering field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetOrCreateOutboundRouteFiltering() *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering {
	if t.OutboundRouteFiltering != nil {
		return t.OutboundRouteFiltering
	}
	t.OutboundRouteFiltering = &NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering{}
	return t.OutboundRouteFiltering
}

// GetOrCreateRemovePrivate retrieves the value of the RemovePrivate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetOrCreateRemovePrivate() *NokiaConf_Configure_Router_Bgp_Neighbor_RemovePrivate {
	if t.RemovePrivate != nil {
		return t.RemovePrivate
	}
	t.RemovePrivate = &NokiaConf_Configure_Router_Bgp_Neighbor_RemovePrivate{}
	return t.RemovePrivate
}

// GetOrCreateSegmentRoutingV6 retrieves the value of the SegmentRoutingV6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetOrCreateSegmentRoutingV6() *NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6 {
	if t.SegmentRoutingV6 != nil {
		return t.SegmentRoutingV6
	}
	t.SegmentRoutingV6 = &NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6{}
	return t.SegmentRoutingV6
}

// GetOrCreateSendCommunities retrieves the value of the SendCommunities field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetOrCreateSendCommunities() *NokiaConf_Configure_Router_Bgp_Neighbor_SendCommunities {
	if t.SendCommunities != nil {
		return t.SendCommunities
	}
	t.SendCommunities = &NokiaConf_Configure_Router_Bgp_Neighbor_SendCommunities{}
	return t.SendCommunities
}

// GetOrCreateSendDefault retrieves the value of the SendDefault field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetOrCreateSendDefault() *NokiaConf_Configure_Router_Bgp_Neighbor_SendDefault {
	if t.SendDefault != nil {
		return t.SendDefault
	}
	t.SendDefault = &NokiaConf_Configure_Router_Bgp_Neighbor_SendDefault{}
	return t.SendDefault
}

// GetAddPaths returns the value of the AddPaths struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor. If the receiver or the field AddPaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetAddPaths() *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths {
	if t != nil && t.AddPaths != nil {
		return t.AddPaths
	}
	return nil
}

// GetAdvertiseIpv6NextHops returns the value of the AdvertiseIpv6NextHops struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor. If the receiver or the field AdvertiseIpv6NextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetAdvertiseIpv6NextHops() *NokiaConf_Configure_Router_Bgp_Neighbor_AdvertiseIpv6NextHops {
	if t != nil && t.AdvertiseIpv6NextHops != nil {
		return t.AdvertiseIpv6NextHops
	}
	return nil
}

// GetCluster returns the value of the Cluster struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor. If the receiver or the field Cluster is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetCluster() *NokiaConf_Configure_Router_Bgp_Neighbor_Cluster {
	if t != nil && t.Cluster != nil {
		return t.Cluster
	}
	return nil
}

// GetDampPeerOscillations returns the value of the DampPeerOscillations struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor. If the receiver or the field DampPeerOscillations is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetDampPeerOscillations() *NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations {
	if t != nil && t.DampPeerOscillations != nil {
		return t.DampPeerOscillations
	}
	return nil
}

// GetDefaultLabelPreference returns the value of the DefaultLabelPreference struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor. If the receiver or the field DefaultLabelPreference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetDefaultLabelPreference() *NokiaConf_Configure_Router_Bgp_Neighbor_DefaultLabelPreference {
	if t != nil && t.DefaultLabelPreference != nil {
		return t.DefaultLabelPreference
	}
	return nil
}

// GetDefaultPreference returns the value of the DefaultPreference struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor. If the receiver or the field DefaultPreference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetDefaultPreference() *NokiaConf_Configure_Router_Bgp_Neighbor_DefaultPreference {
	if t != nil && t.DefaultPreference != nil {
		return t.DefaultPreference
	}
	return nil
}

// GetEbgpDefaultRejectPolicy returns the value of the EbgpDefaultRejectPolicy struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor. If the receiver or the field EbgpDefaultRejectPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetEbgpDefaultRejectPolicy() *NokiaConf_Configure_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy {
	if t != nil && t.EbgpDefaultRejectPolicy != nil {
		return t.EbgpDefaultRejectPolicy
	}
	return nil
}

// GetEgressEngineering returns the value of the EgressEngineering struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor. If the receiver or the field EgressEngineering is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetEgressEngineering() *NokiaConf_Configure_Router_Bgp_Neighbor_EgressEngineering {
	if t != nil && t.EgressEngineering != nil {
		return t.EgressEngineering
	}
	return nil
}

// GetErrorHandling returns the value of the ErrorHandling struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor. If the receiver or the field ErrorHandling is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetErrorHandling() *NokiaConf_Configure_Router_Bgp_Neighbor_ErrorHandling {
	if t != nil && t.ErrorHandling != nil {
		return t.ErrorHandling
	}
	return nil
}

// GetExport returns the value of the Export struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor. If the receiver or the field Export is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetExport() *NokiaConf_Configure_Router_Bgp_Neighbor_Export {
	if t != nil && t.Export != nil {
		return t.Export
	}
	return nil
}

// GetExtendedNhEncoding returns the value of the ExtendedNhEncoding struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor. If the receiver or the field ExtendedNhEncoding is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetExtendedNhEncoding() *NokiaConf_Configure_Router_Bgp_Neighbor_ExtendedNhEncoding {
	if t != nil && t.ExtendedNhEncoding != nil {
		return t.ExtendedNhEncoding
	}
	return nil
}

// GetFamily returns the value of the Family struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor. If the receiver or the field Family is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetFamily() *NokiaConf_Configure_Router_Bgp_Neighbor_Family {
	if t != nil && t.Family != nil {
		return t.Family
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetGracefulRestart() *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetHoldTime() *NokiaConf_Configure_Router_Bgp_Neighbor_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetImport returns the value of the Import struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor. If the receiver or the field Import is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetImport() *NokiaConf_Configure_Router_Bgp_Neighbor_Import {
	if t != nil && t.Import != nil {
		return t.Import
	}
	return nil
}

// GetLinkBandwidth returns the value of the LinkBandwidth struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor. If the receiver or the field LinkBandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetLinkBandwidth() *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth {
	if t != nil && t.LinkBandwidth != nil {
		return t.LinkBandwidth
	}
	return nil
}

// GetLocalAs returns the value of the LocalAs struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor. If the receiver or the field LocalAs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetLocalAs() *NokiaConf_Configure_Router_Bgp_Neighbor_LocalAs {
	if t != nil && t.LocalAs != nil {
		return t.LocalAs
	}
	return nil
}

// GetMonitor returns the value of the Monitor struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor. If the receiver or the field Monitor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetMonitor() *NokiaConf_Configure_Router_Bgp_Neighbor_Monitor {
	if t != nil && t.Monitor != nil {
		return t.Monitor
	}
	return nil
}

// GetNextHopUnchanged returns the value of the NextHopUnchanged struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor. If the receiver or the field NextHopUnchanged is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetNextHopUnchanged() *NokiaConf_Configure_Router_Bgp_Neighbor_NextHopUnchanged {
	if t != nil && t.NextHopUnchanged != nil {
		return t.NextHopUnchanged
	}
	return nil
}

// GetOriginValidation returns the value of the OriginValidation struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor. If the receiver or the field OriginValidation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetOriginValidation() *NokiaConf_Configure_Router_Bgp_Neighbor_OriginValidation {
	if t != nil && t.OriginValidation != nil {
		return t.OriginValidation
	}
	return nil
}

// GetOutboundRouteFiltering returns the value of the OutboundRouteFiltering struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor. If the receiver or the field OutboundRouteFiltering is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetOutboundRouteFiltering() *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering {
	if t != nil && t.OutboundRouteFiltering != nil {
		return t.OutboundRouteFiltering
	}
	return nil
}

// GetRemovePrivate returns the value of the RemovePrivate struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor. If the receiver or the field RemovePrivate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetRemovePrivate() *NokiaConf_Configure_Router_Bgp_Neighbor_RemovePrivate {
	if t != nil && t.RemovePrivate != nil {
		return t.RemovePrivate
	}
	return nil
}

// GetSegmentRoutingV6 returns the value of the SegmentRoutingV6 struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor. If the receiver or the field SegmentRoutingV6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetSegmentRoutingV6() *NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6 {
	if t != nil && t.SegmentRoutingV6 != nil {
		return t.SegmentRoutingV6
	}
	return nil
}

// GetSendCommunities returns the value of the SendCommunities struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor. If the receiver or the field SendCommunities is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetSendCommunities() *NokiaConf_Configure_Router_Bgp_Neighbor_SendCommunities {
	if t != nil && t.SendCommunities != nil {
		return t.SendCommunities
	}
	return nil
}

// GetSendDefault returns the value of the SendDefault struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor. If the receiver or the field SendDefault is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetSendDefault() *NokiaConf_Configure_Router_Bgp_Neighbor_SendDefault {
	if t != nil && t.SendDefault != nil {
		return t.SendDefault
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAdvertiseInactive retrieves the value of the leaf AdvertiseInactive from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseInactive is set, it can
// safely use t.GetAdvertiseInactive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseInactive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetAdvertiseInactive() bool {
	if t == nil || t.AdvertiseInactive == nil {
		return false
	}
	return *t.AdvertiseInactive
}

// GetAdvertiseLdpPrefix retrieves the value of the leaf AdvertiseLdpPrefix from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseLdpPrefix is set, it can
// safely use t.GetAdvertiseLdpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseLdpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetAdvertiseLdpPrefix() bool {
	if t == nil || t.AdvertiseLdpPrefix == nil {
		return false
	}
	return *t.AdvertiseLdpPrefix
}

// GetAggregatorIdZero retrieves the value of the leaf AggregatorIdZero from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AggregatorIdZero is set, it can
// safely use t.GetAggregatorIdZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AggregatorIdZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetAggregatorIdZero() bool {
	if t == nil || t.AggregatorIdZero == nil {
		return false
	}
	return *t.AggregatorIdZero
}

// GetAigp retrieves the value of the leaf Aigp from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aigp is set, it can
// safely use t.GetAigp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aigp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetAigp() bool {
	if t == nil || t.Aigp == nil {
		return false
	}
	return *t.Aigp
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAsOverride retrieves the value of the leaf AsOverride from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsOverride is set, it can
// safely use t.GetAsOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetAsOverride() bool {
	if t == nil || t.AsOverride == nil {
		return false
	}
	return *t.AsOverride
}

// GetAsn_4Byte retrieves the value of the leaf Asn_4Byte from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Asn_4Byte is set, it can
// safely use t.GetAsn_4Byte() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Asn_4Byte == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetAsn_4Byte() bool {
	if t == nil || t.Asn_4Byte == nil {
		return false
	}
	return *t.Asn_4Byte
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationKeychain retrieves the value of the leaf AuthenticationKeychain from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKeychain is set, it can
// safely use t.GetAuthenticationKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKeychain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetAuthenticationKeychain() string {
	if t == nil || t.AuthenticationKeychain == nil {
		return ""
	}
	return *t.AuthenticationKeychain
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetBlockPrefixSid retrieves the value of the leaf BlockPrefixSid from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockPrefixSid is set, it can
// safely use t.GetBlockPrefixSid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockPrefixSid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetBlockPrefixSid() bool {
	if t == nil || t.BlockPrefixSid == nil {
		return false
	}
	return *t.BlockPrefixSid
}

// GetCapabilityNegotiation retrieves the value of the leaf CapabilityNegotiation from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CapabilityNegotiation is set, it can
// safely use t.GetCapabilityNegotiation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CapabilityNegotiation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetCapabilityNegotiation() bool {
	if t == nil || t.CapabilityNegotiation == nil {
		return false
	}
	return *t.CapabilityNegotiation
}

// GetClientReflect retrieves the value of the leaf ClientReflect from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientReflect is set, it can
// safely use t.GetClientReflect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientReflect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetClientReflect() bool {
	if t == nil || t.ClientReflect == nil {
		return false
	}
	return *t.ClientReflect
}

// GetConnectRetry retrieves the value of the leaf ConnectRetry from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectRetry is set, it can
// safely use t.GetConnectRetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectRetry == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetConnectRetry() int32 {
	if t == nil || t.ConnectRetry == nil {
		return 0
	}
	return *t.ConnectRetry
}

// GetDamping retrieves the value of the leaf Damping from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Damping is set, it can
// safely use t.GetDamping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Damping == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetDamping() bool {
	if t == nil || t.Damping == nil {
		return false
	}
	return *t.Damping
}

// GetDefRecvEvpnEncap retrieves the value of the leaf DefRecvEvpnEncap from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefRecvEvpnEncap is set, it can
// safely use t.GetDefRecvEvpnEncap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefRecvEvpnEncap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetDefRecvEvpnEncap() E_NokiaTypesBgp_Encap {
	if t == nil || t.DefRecvEvpnEncap == 0 {
		return 0
	}
	return t.DefRecvEvpnEncap
}

// GetDefaultRouteTarget retrieves the value of the leaf DefaultRouteTarget from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultRouteTarget is set, it can
// safely use t.GetDefaultRouteTarget() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultRouteTarget == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetDefaultRouteTarget() bool {
	if t == nil || t.DefaultRouteTarget == nil {
		return false
	}
	return *t.DefaultRouteTarget
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEgressPeerEngineeringLabelUnicast retrieves the value of the leaf EgressPeerEngineeringLabelUnicast from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EgressPeerEngineeringLabelUnicast is set, it can
// safely use t.GetEgressPeerEngineeringLabelUnicast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EgressPeerEngineeringLabelUnicast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetEgressPeerEngineeringLabelUnicast() bool {
	if t == nil || t.EgressPeerEngineeringLabelUnicast == nil {
		return false
	}
	return *t.EgressPeerEngineeringLabelUnicast
}

// GetEnforceFirstAs retrieves the value of the leaf EnforceFirstAs from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnforceFirstAs is set, it can
// safely use t.GetEnforceFirstAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnforceFirstAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetEnforceFirstAs() bool {
	if t == nil || t.EnforceFirstAs == nil {
		return false
	}
	return *t.EnforceFirstAs
}

// GetFastExternalFailover retrieves the value of the leaf FastExternalFailover from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastExternalFailover is set, it can
// safely use t.GetFastExternalFailover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastExternalFailover == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetFastExternalFailover() bool {
	if t == nil || t.FastExternalFailover == nil {
		return false
	}
	return *t.FastExternalFailover
}

// GetGroup retrieves the value of the leaf Group from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetGroup() string {
	if t == nil || t.Group == nil {
		return ""
	}
	return *t.Group
}

// GetInitialSendDelayZero retrieves the value of the leaf InitialSendDelayZero from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialSendDelayZero is set, it can
// safely use t.GetInitialSendDelayZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialSendDelayZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetInitialSendDelayZero() bool {
	if t == nil || t.InitialSendDelayZero == nil {
		return false
	}
	return *t.InitialSendDelayZero
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetKeepalive retrieves the value of the leaf Keepalive from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keepalive is set, it can
// safely use t.GetKeepalive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keepalive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetKeepalive() int32 {
	if t == nil || t.Keepalive == nil {
		return 0
	}
	return *t.Keepalive
}

// GetL2VpnCiscoInterop retrieves the value of the leaf L2VpnCiscoInterop from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2VpnCiscoInterop is set, it can
// safely use t.GetL2VpnCiscoInterop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2VpnCiscoInterop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetL2VpnCiscoInterop() bool {
	if t == nil || t.L2VpnCiscoInterop == nil {
		return false
	}
	return *t.L2VpnCiscoInterop
}

// GetLabelPreference retrieves the value of the leaf LabelPreference from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelPreference is set, it can
// safely use t.GetLabelPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetLabelPreference() uint32 {
	if t == nil || t.LabelPreference == nil {
		return 0
	}
	return *t.LabelPreference
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetLocalPreference retrieves the value of the leaf LocalPreference from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPreference is set, it can
// safely use t.GetLocalPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetLocalPreference() int64 {
	if t == nil || t.LocalPreference == nil {
		return 0
	}
	return *t.LocalPreference
}

// GetLoopDetect retrieves the value of the leaf LoopDetect from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopDetect is set, it can
// safely use t.GetLoopDetect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopDetect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetLoopDetect() E_NokiaTypesBgp_LoopDetect {
	if t == nil || t.LoopDetect == 0 {
		return 0
	}
	return t.LoopDetect
}

// GetLoopDetectThreshold retrieves the value of the leaf LoopDetectThreshold from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopDetectThreshold is set, it can
// safely use t.GetLoopDetectThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopDetectThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetLoopDetectThreshold() uint32 {
	if t == nil || t.LoopDetectThreshold == nil {
		return 0
	}
	return *t.LoopDetectThreshold
}

// GetMedOut retrieves the value of the leaf MedOut from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MedOut is set, it can
// safely use t.GetMedOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MedOut == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetMedOut() NokiaConf_Configure_Router_Bgp_Neighbor_MedOut_Union {
	if t == nil || t.MedOut == nil {
		return nil
	}
	return t.MedOut
}

// GetMinRouteAdvertisement retrieves the value of the leaf MinRouteAdvertisement from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinRouteAdvertisement is set, it can
// safely use t.GetMinRouteAdvertisement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinRouteAdvertisement == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetMinRouteAdvertisement() int16 {
	if t == nil || t.MinRouteAdvertisement == nil {
		return 0
	}
	return *t.MinRouteAdvertisement
}

// GetMultihop retrieves the value of the leaf Multihop from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multihop is set, it can
// safely use t.GetMultihop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multihop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetMultihop() int32 {
	if t == nil || t.Multihop == nil {
		return 0
	}
	return *t.Multihop
}

// GetMultipathEligible retrieves the value of the leaf MultipathEligible from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultipathEligible is set, it can
// safely use t.GetMultipathEligible() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultipathEligible == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetMultipathEligible() bool {
	if t == nil || t.MultipathEligible == nil {
		return false
	}
	return *t.MultipathEligible
}

// GetNextHopSelf retrieves the value of the leaf NextHopSelf from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopSelf is set, it can
// safely use t.GetNextHopSelf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopSelf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetNextHopSelf() bool {
	if t == nil || t.NextHopSelf == nil {
		return false
	}
	return *t.NextHopSelf
}

// GetPassive retrieves the value of the leaf Passive from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Passive is set, it can
// safely use t.GetPassive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Passive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetPassive() bool {
	if t == nil || t.Passive == nil {
		return false
	}
	return *t.Passive
}

// GetPathMtuDiscovery retrieves the value of the leaf PathMtuDiscovery from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathMtuDiscovery is set, it can
// safely use t.GetPathMtuDiscovery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathMtuDiscovery == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetPathMtuDiscovery() bool {
	if t == nil || t.PathMtuDiscovery == nil {
		return false
	}
	return *t.PathMtuDiscovery
}

// GetPeerAs retrieves the value of the leaf PeerAs from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerAs is set, it can
// safely use t.GetPeerAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetPeerAs() uint32 {
	if t == nil || t.PeerAs == nil {
		return 0
	}
	return *t.PeerAs
}

// GetPeerCreationType retrieves the value of the leaf PeerCreationType from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerCreationType is set, it can
// safely use t.GetPeerCreationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerCreationType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetPeerCreationType() E_NokiaTypesBgp_PeerCreationType {
	if t == nil || t.PeerCreationType == 0 {
		return NokiaTypesBgp_PeerCreationType_static
	}
	return t.PeerCreationType
}

// GetPeerIpTracking retrieves the value of the leaf PeerIpTracking from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerIpTracking is set, it can
// safely use t.GetPeerIpTracking() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerIpTracking == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetPeerIpTracking() bool {
	if t == nil || t.PeerIpTracking == nil {
		return false
	}
	return *t.PeerIpTracking
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetSelectiveLabelIpv4Install retrieves the value of the leaf SelectiveLabelIpv4Install from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SelectiveLabelIpv4Install is set, it can
// safely use t.GetSelectiveLabelIpv4Install() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SelectiveLabelIpv4Install == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetSelectiveLabelIpv4Install() bool {
	if t == nil || t.SelectiveLabelIpv4Install == nil {
		return false
	}
	return *t.SelectiveLabelIpv4Install
}

// GetSplitHorizon retrieves the value of the leaf SplitHorizon from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SplitHorizon is set, it can
// safely use t.GetSplitHorizon() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SplitHorizon == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetSplitHorizon() bool {
	if t == nil || t.SplitHorizon == nil {
		return false
	}
	return *t.SplitHorizon
}

// GetTcpMss retrieves the value of the leaf TcpMss from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpMss is set, it can
// safely use t.GetTcpMss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpMss == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetTcpMss() NokiaConf_Configure_Router_Bgp_Neighbor_TcpMss_Union {
	if t == nil || t.TcpMss == nil {
		return nil
	}
	return t.TcpMss
}

// GetThirdPartyNexthop retrieves the value of the leaf ThirdPartyNexthop from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ThirdPartyNexthop is set, it can
// safely use t.GetThirdPartyNexthop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ThirdPartyNexthop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetThirdPartyNexthop() bool {
	if t == nil || t.ThirdPartyNexthop == nil {
		return false
	}
	return *t.ThirdPartyNexthop
}

// GetTtlSecurity retrieves the value of the leaf TtlSecurity from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TtlSecurity is set, it can
// safely use t.GetTtlSecurity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TtlSecurity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetTtlSecurity() uint32 {
	if t == nil || t.TtlSecurity == nil {
		return 0
	}
	return *t.TtlSecurity
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetType() E_NokiaTypesBgp_PeerType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// GetVpnApplyExport retrieves the value of the leaf VpnApplyExport from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnApplyExport is set, it can
// safely use t.GetVpnApplyExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnApplyExport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetVpnApplyExport() bool {
	if t == nil || t.VpnApplyExport == nil {
		return false
	}
	return *t.VpnApplyExport
}

// GetVpnApplyImport retrieves the value of the leaf VpnApplyImport from the NokiaConf_Configure_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnApplyImport is set, it can
// safely use t.GetVpnApplyImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnApplyImport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) GetVpnApplyImport() bool {
	if t == nil || t.VpnApplyImport == nil {
		return false
	}
	return *t.VpnApplyImport
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.AdvertiseLdpPrefix == nil {
		var v bool = false
		t.AdvertiseLdpPrefix = &v
	}
	if t.BlockPrefixSid == nil {
		var v bool = false
		t.BlockPrefixSid = &v
	}
	if t.EgressPeerEngineeringLabelUnicast == nil {
		var v bool = false
		t.EgressPeerEngineeringLabelUnicast = &v
	}
	if t.L2VpnCiscoInterop == nil {
		var v bool = false
		t.L2VpnCiscoInterop = &v
	}
	if t.PeerCreationType == 0 {
		t.PeerCreationType = NokiaTypesBgp_PeerCreationType_static
	}
	t.AddPaths.PopulateDefaults()
	t.AdvertiseIpv6NextHops.PopulateDefaults()
	t.Cluster.PopulateDefaults()
	t.DampPeerOscillations.PopulateDefaults()
	t.DefaultLabelPreference.PopulateDefaults()
	t.DefaultPreference.PopulateDefaults()
	t.EbgpDefaultRejectPolicy.PopulateDefaults()
	t.EgressEngineering.PopulateDefaults()
	t.ErrorHandling.PopulateDefaults()
	t.Export.PopulateDefaults()
	t.ExtendedNhEncoding.PopulateDefaults()
	t.Family.PopulateDefaults()
	t.GracefulRestart.PopulateDefaults()
	t.HoldTime.PopulateDefaults()
	t.Import.PopulateDefaults()
	t.LinkBandwidth.PopulateDefaults()
	t.LocalAs.PopulateDefaults()
	t.Monitor.PopulateDefaults()
	t.NextHopUnchanged.PopulateDefaults()
	t.OriginValidation.PopulateDefaults()
	t.OutboundRouteFiltering.PopulateDefaults()
	t.RemovePrivate.PopulateDefaults()
	t.SegmentRoutingV6.PopulateDefaults()
	t.SendCommunities.PopulateDefaults()
	t.SendDefault.PopulateDefaults()
	for _, e := range t.PrefixLimit {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Bgp_Neighbor struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor.
func (*NokiaConf_Configure_Router_Bgp_Neighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_NeighborTrust represents the /nokia-conf/configure/router/bgp/neighbor-trust YANG schema element.
type NokiaConf_Configure_Router_Bgp_NeighborTrust struct {
	VpnIpv4 *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6 *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_NeighborTrust implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_NeighborTrust) IsYANGGoStruct() {}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Router_Bgp_NeighborTrust
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NeighborTrust) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Router_Bgp_NeighborTrust
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NeighborTrust) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_NeighborTrust
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_NeighborTrust) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_NeighborTrust) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_NeighborTrust"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_NeighborTrust) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_NeighborTrust) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_NeighborTrust.
func (*NokiaConf_Configure_Router_Bgp_NeighborTrust) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths represents the /nokia-conf/configure/router/bgp/neighbor/add-paths YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths struct {
	Evpn         *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Evpn         `path:"evpn" module:"nokia-conf"`
	Ipv4         *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv4         `path:"ipv4" module:"nokia-conf"`
	Ipv6         *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv6         `path:"ipv6" module:"nokia-conf"`
	LabelIpv4    *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv4    `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6    *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv6    `path:"label-ipv6" module:"nokia-conf"`
	McastVpnIpv4 *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4 `path:"mcast-vpn-ipv4" module:"nokia-conf"`
	McastVpnIpv6 *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6 `path:"mcast-vpn-ipv6" module:"nokia-conf"`
	MvpnIpv4     *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv4     `path:"mvpn-ipv4" module:"nokia-conf"`
	MvpnIpv6     *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv6     `path:"mvpn-ipv6" module:"nokia-conf"`
	VpnIpv4      *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv4      `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6      *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv6      `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths) IsYANGGoStruct() {}

// GetOrCreateEvpn retrieves the value of the Evpn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths) GetOrCreateEvpn() *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Evpn {
	if t.Evpn != nil {
		return t.Evpn
	}
	t.Evpn = &NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Evpn{}
	return t.Evpn
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths) GetOrCreateIpv4() *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths) GetOrCreateIpv6() *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv6{}
	return t.Ipv6
}

// GetOrCreateLabelIpv4 retrieves the value of the LabelIpv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths) GetOrCreateLabelIpv4() *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv4 {
	if t.LabelIpv4 != nil {
		return t.LabelIpv4
	}
	t.LabelIpv4 = &NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv4{}
	return t.LabelIpv4
}

// GetOrCreateLabelIpv6 retrieves the value of the LabelIpv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths) GetOrCreateLabelIpv6() *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv6 {
	if t.LabelIpv6 != nil {
		return t.LabelIpv6
	}
	t.LabelIpv6 = &NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv6{}
	return t.LabelIpv6
}

// GetOrCreateMcastVpnIpv4 retrieves the value of the McastVpnIpv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths) GetOrCreateMcastVpnIpv4() *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4 {
	if t.McastVpnIpv4 != nil {
		return t.McastVpnIpv4
	}
	t.McastVpnIpv4 = &NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4{}
	return t.McastVpnIpv4
}

// GetOrCreateMcastVpnIpv6 retrieves the value of the McastVpnIpv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths) GetOrCreateMcastVpnIpv6() *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6 {
	if t.McastVpnIpv6 != nil {
		return t.McastVpnIpv6
	}
	t.McastVpnIpv6 = &NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6{}
	return t.McastVpnIpv6
}

// GetOrCreateMvpnIpv4 retrieves the value of the MvpnIpv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths) GetOrCreateMvpnIpv4() *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv4 {
	if t.MvpnIpv4 != nil {
		return t.MvpnIpv4
	}
	t.MvpnIpv4 = &NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv4{}
	return t.MvpnIpv4
}

// GetOrCreateMvpnIpv6 retrieves the value of the MvpnIpv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths) GetOrCreateMvpnIpv6() *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv6 {
	if t.MvpnIpv6 != nil {
		return t.MvpnIpv6
	}
	t.MvpnIpv6 = &NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv6{}
	return t.MvpnIpv6
}

// GetOrCreateVpnIpv4 retrieves the value of the VpnIpv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths) GetOrCreateVpnIpv4() *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv4 {
	if t.VpnIpv4 != nil {
		return t.VpnIpv4
	}
	t.VpnIpv4 = &NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv4{}
	return t.VpnIpv4
}

// GetOrCreateVpnIpv6 retrieves the value of the VpnIpv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths) GetOrCreateVpnIpv6() *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv6 {
	if t.VpnIpv6 != nil {
		return t.VpnIpv6
	}
	t.VpnIpv6 = &NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv6{}
	return t.VpnIpv6
}

// GetEvpn returns the value of the Evpn struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths. If the receiver or the field Evpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths) GetEvpn() *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Evpn {
	if t != nil && t.Evpn != nil {
		return t.Evpn
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths) GetIpv4() *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths) GetIpv6() *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetLabelIpv4 returns the value of the LabelIpv4 struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths. If the receiver or the field LabelIpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths) GetLabelIpv4() *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv4 {
	if t != nil && t.LabelIpv4 != nil {
		return t.LabelIpv4
	}
	return nil
}

// GetLabelIpv6 returns the value of the LabelIpv6 struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths. If the receiver or the field LabelIpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths) GetLabelIpv6() *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv6 {
	if t != nil && t.LabelIpv6 != nil {
		return t.LabelIpv6
	}
	return nil
}

// GetMcastVpnIpv4 returns the value of the McastVpnIpv4 struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths. If the receiver or the field McastVpnIpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths) GetMcastVpnIpv4() *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4 {
	if t != nil && t.McastVpnIpv4 != nil {
		return t.McastVpnIpv4
	}
	return nil
}

// GetMcastVpnIpv6 returns the value of the McastVpnIpv6 struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths. If the receiver or the field McastVpnIpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths) GetMcastVpnIpv6() *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6 {
	if t != nil && t.McastVpnIpv6 != nil {
		return t.McastVpnIpv6
	}
	return nil
}

// GetMvpnIpv4 returns the value of the MvpnIpv4 struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths. If the receiver or the field MvpnIpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths) GetMvpnIpv4() *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv4 {
	if t != nil && t.MvpnIpv4 != nil {
		return t.MvpnIpv4
	}
	return nil
}

// GetMvpnIpv6 returns the value of the MvpnIpv6 struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths. If the receiver or the field MvpnIpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths) GetMvpnIpv6() *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv6 {
	if t != nil && t.MvpnIpv6 != nil {
		return t.MvpnIpv6
	}
	return nil
}

// GetVpnIpv4 returns the value of the VpnIpv4 struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths. If the receiver or the field VpnIpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths) GetVpnIpv4() *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv4 {
	if t != nil && t.VpnIpv4 != nil {
		return t.VpnIpv4
	}
	return nil
}

// GetVpnIpv6 returns the value of the VpnIpv6 struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths. If the receiver or the field VpnIpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths) GetVpnIpv6() *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv6 {
	if t != nil && t.VpnIpv6 != nil {
		return t.VpnIpv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Evpn.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	t.LabelIpv4.PopulateDefaults()
	t.LabelIpv6.PopulateDefaults()
	t.McastVpnIpv4.PopulateDefaults()
	t.McastVpnIpv6.PopulateDefaults()
	t.MvpnIpv4.PopulateDefaults()
	t.MvpnIpv6.PopulateDefaults()
	t.VpnIpv4.PopulateDefaults()
	t.VpnIpv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Evpn represents the /nokia-conf/configure/router/bgp/neighbor/add-paths/evpn YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Evpn struct {
	Receive *bool                                                            `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Evpn_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Evpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Evpn) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Evpn) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Evpn) GetSend() NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Evpn_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Evpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Evpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Evpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Evpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Evpn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Evpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Evpn.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Evpn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv4 represents the /nokia-conf/configure/router/bgp/neighbor/add-paths/ipv4 YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv4 struct {
	Receive *bool                                                            `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv4_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv4) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv4) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv4) GetSend() NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv4_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv4.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv6 represents the /nokia-conf/configure/router/bgp/neighbor/add-paths/ipv6 YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv6 struct {
	Receive *bool                                                            `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv6_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv6) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv6) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv6) GetSend() NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv6_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv6.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv4 represents the /nokia-conf/configure/router/bgp/neighbor/add-paths/label-ipv4 YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv4 struct {
	Receive *bool                                                                 `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv4_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv4) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv4) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv4) GetSend() NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv4_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv4.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv6 represents the /nokia-conf/configure/router/bgp/neighbor/add-paths/label-ipv6 YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv6 struct {
	Receive *bool                                                                 `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv6_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv6) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv6) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv6) GetSend() NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv6_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv6.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_LabelIpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4 represents the /nokia-conf/configure/router/bgp/neighbor/add-paths/mcast-vpn-ipv4 YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4 struct {
	Receive *bool  `path:"receive" module:"nokia-conf"`
	Send    *int32 `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4) GetSend() int32 {
	if t == nil || t.Send == nil {
		return 0
	}
	return *t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6 represents the /nokia-conf/configure/router/bgp/neighbor/add-paths/mcast-vpn-ipv6 YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6 struct {
	Receive *bool  `path:"receive" module:"nokia-conf"`
	Send    *int32 `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6) GetSend() int32 {
	if t == nil || t.Send == nil {
		return 0
	}
	return *t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv4 represents the /nokia-conf/configure/router/bgp/neighbor/add-paths/mvpn-ipv4 YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv4 struct {
	Receive *bool  `path:"receive" module:"nokia-conf"`
	Send    *int32 `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv4) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv4) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv4) GetSend() int32 {
	if t == nil || t.Send == nil {
		return 0
	}
	return *t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv4.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv6 represents the /nokia-conf/configure/router/bgp/neighbor/add-paths/mvpn-ipv6 YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv6 struct {
	Receive *bool  `path:"receive" module:"nokia-conf"`
	Send    *int32 `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv6) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv6) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv6) GetSend() int32 {
	if t == nil || t.Send == nil {
		return 0
	}
	return *t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv6.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_MvpnIpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv4 represents the /nokia-conf/configure/router/bgp/neighbor/add-paths/vpn-ipv4 YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv4 struct {
	Receive *bool                                                               `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv4_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv4) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv4) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv4) GetSend() NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv4_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv4.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv6 represents the /nokia-conf/configure/router/bgp/neighbor/add-paths/vpn-ipv6 YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv6 struct {
	Receive *bool                                                               `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv6_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv6) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv6) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv6) GetSend() NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv6_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv6.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_AddPaths_VpnIpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_AdvertiseIpv6NextHops represents the /nokia-conf/configure/router/bgp/neighbor/advertise-ipv6-next-hops YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_AdvertiseIpv6NextHops struct {
	Evpn      *bool `path:"evpn" module:"nokia-conf"`
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
	VpnIpv4   *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6   *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_AdvertiseIpv6NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_AdvertiseIpv6NextHops) IsYANGGoStruct() {}

// GetEvpn retrieves the value of the leaf Evpn from the NokiaConf_Configure_Router_Bgp_Neighbor_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Evpn is set, it can
// safely use t.GetEvpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Evpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AdvertiseIpv6NextHops) GetEvpn() bool {
	if t == nil || t.Evpn == nil {
		return false
	}
	return *t.Evpn
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Router_Bgp_Neighbor_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AdvertiseIpv6NextHops) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Router_Bgp_Neighbor_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AdvertiseIpv6NextHops) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Router_Bgp_Neighbor_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AdvertiseIpv6NextHops) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Router_Bgp_Neighbor_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AdvertiseIpv6NextHops) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Router_Bgp_Neighbor_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AdvertiseIpv6NextHops) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_AdvertiseIpv6NextHops
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AdvertiseIpv6NextHops) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Evpn == nil {
		var v bool = false
		t.Evpn = &v
	}
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AdvertiseIpv6NextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_AdvertiseIpv6NextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AdvertiseIpv6NextHops) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_AdvertiseIpv6NextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_AdvertiseIpv6NextHops.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_AdvertiseIpv6NextHops) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_Cluster represents the /nokia-conf/configure/router/bgp/neighbor/cluster YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_Cluster struct {
	AllowLocalFallback *bool   `path:"allow-local-fallback" module:"nokia-conf"`
	ClusterId          *string `path:"cluster-id" module:"nokia-conf"`
	OrrLocation        *uint32 `path:"orr-location" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_Cluster implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_Cluster) IsYANGGoStruct() {}

// GetAllowLocalFallback retrieves the value of the leaf AllowLocalFallback from the NokiaConf_Configure_Router_Bgp_Neighbor_Cluster
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowLocalFallback is set, it can
// safely use t.GetAllowLocalFallback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowLocalFallback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Cluster) GetAllowLocalFallback() bool {
	if t == nil || t.AllowLocalFallback == nil {
		return false
	}
	return *t.AllowLocalFallback
}

// GetClusterId retrieves the value of the leaf ClusterId from the NokiaConf_Configure_Router_Bgp_Neighbor_Cluster
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClusterId is set, it can
// safely use t.GetClusterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClusterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Cluster) GetClusterId() string {
	if t == nil || t.ClusterId == nil {
		return ""
	}
	return *t.ClusterId
}

// GetOrrLocation retrieves the value of the leaf OrrLocation from the NokiaConf_Configure_Router_Bgp_Neighbor_Cluster
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OrrLocation is set, it can
// safely use t.GetOrrLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OrrLocation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Cluster) GetOrrLocation() uint32 {
	if t == nil || t.OrrLocation == nil {
		return 0
	}
	return *t.OrrLocation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_Cluster
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Cluster) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowLocalFallback == nil {
		var v bool = false
		t.AllowLocalFallback = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Cluster) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_Cluster"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Cluster) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Cluster) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_Cluster.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_Cluster) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations represents the /nokia-conf/configure/router/bgp/neighbor/damp-peer-oscillations YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations struct {
	ErrorInterval *uint32                                                                    `path:"error-interval" module:"nokia-conf"`
	IdleHoldTime  *NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime `path:"idle-hold-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations) IsYANGGoStruct() {}

// GetOrCreateIdleHoldTime retrieves the value of the IdleHoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations) GetOrCreateIdleHoldTime() *NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime {
	if t.IdleHoldTime != nil {
		return t.IdleHoldTime
	}
	t.IdleHoldTime = &NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime{}
	return t.IdleHoldTime
}

// GetIdleHoldTime returns the value of the IdleHoldTime struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations. If the receiver or the field IdleHoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations) GetIdleHoldTime() *NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime {
	if t != nil && t.IdleHoldTime != nil {
		return t.IdleHoldTime
	}
	return nil
}

// GetErrorInterval retrieves the value of the leaf ErrorInterval from the NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ErrorInterval is set, it can
// safely use t.GetErrorInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ErrorInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations) GetErrorInterval() uint32 {
	if t == nil || t.ErrorInterval == nil {
		return 30
	}
	return *t.ErrorInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ErrorInterval == nil {
		var v uint32 = 30
		t.ErrorInterval = &v
	}
	t.IdleHoldTime.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime represents the /nokia-conf/configure/router/bgp/neighbor/damp-peer-oscillations/idle-hold-time YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime struct {
	InitialWait *uint32 `path:"initial-wait" module:"nokia-conf"`
	MaxWait     *uint32 `path:"max-wait" module:"nokia-conf"`
	SecondWait  *uint32 `path:"second-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime) IsYANGGoStruct() {}

// GetInitialWait retrieves the value of the leaf InitialWait from the NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialWait is set, it can
// safely use t.GetInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime) GetInitialWait() uint32 {
	if t == nil || t.InitialWait == nil {
		return 0
	}
	return *t.InitialWait
}

// GetMaxWait retrieves the value of the leaf MaxWait from the NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxWait is set, it can
// safely use t.GetMaxWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime) GetMaxWait() uint32 {
	if t == nil || t.MaxWait == nil {
		return 60
	}
	return *t.MaxWait
}

// GetSecondWait retrieves the value of the leaf SecondWait from the NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondWait is set, it can
// safely use t.GetSecondWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime) GetSecondWait() uint32 {
	if t == nil || t.SecondWait == nil {
		return 5
	}
	return *t.SecondWait
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitialWait == nil {
		var v uint32 = 0
		t.InitialWait = &v
	}
	if t.MaxWait == nil {
		var v uint32 = 60
		t.MaxWait = &v
	}
	if t.SecondWait == nil {
		var v uint32 = 5
		t.SecondWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_DefaultLabelPreference represents the /nokia-conf/configure/router/bgp/neighbor/default-label-preference YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_DefaultLabelPreference struct {
	Ebgp *uint32 `path:"ebgp" module:"nokia-conf"`
	Ibgp *uint32 `path:"ibgp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_DefaultLabelPreference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_DefaultLabelPreference) IsYANGGoStruct() {}

// GetEbgp retrieves the value of the leaf Ebgp from the NokiaConf_Configure_Router_Bgp_Neighbor_DefaultLabelPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ebgp is set, it can
// safely use t.GetEbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ebgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_DefaultLabelPreference) GetEbgp() uint32 {
	if t == nil || t.Ebgp == nil {
		return 0
	}
	return *t.Ebgp
}

// GetIbgp retrieves the value of the leaf Ibgp from the NokiaConf_Configure_Router_Bgp_Neighbor_DefaultLabelPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ibgp is set, it can
// safely use t.GetIbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ibgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_DefaultLabelPreference) GetIbgp() uint32 {
	if t == nil || t.Ibgp == nil {
		return 0
	}
	return *t.Ibgp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_DefaultLabelPreference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_DefaultLabelPreference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_DefaultLabelPreference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_DefaultLabelPreference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_DefaultLabelPreference) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_DefaultLabelPreference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_DefaultLabelPreference.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_DefaultLabelPreference) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_DefaultPreference represents the /nokia-conf/configure/router/bgp/neighbor/default-preference YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_DefaultPreference struct {
	Ebgp *uint32 `path:"ebgp" module:"nokia-conf"`
	Ibgp *uint32 `path:"ibgp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_DefaultPreference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_DefaultPreference) IsYANGGoStruct() {}

// GetEbgp retrieves the value of the leaf Ebgp from the NokiaConf_Configure_Router_Bgp_Neighbor_DefaultPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ebgp is set, it can
// safely use t.GetEbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ebgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_DefaultPreference) GetEbgp() uint32 {
	if t == nil || t.Ebgp == nil {
		return 0
	}
	return *t.Ebgp
}

// GetIbgp retrieves the value of the leaf Ibgp from the NokiaConf_Configure_Router_Bgp_Neighbor_DefaultPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ibgp is set, it can
// safely use t.GetIbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ibgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_DefaultPreference) GetIbgp() uint32 {
	if t == nil || t.Ibgp == nil {
		return 0
	}
	return *t.Ibgp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_DefaultPreference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_DefaultPreference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_DefaultPreference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_DefaultPreference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_DefaultPreference) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_DefaultPreference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_DefaultPreference.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_DefaultPreference) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy represents the /nokia-conf/configure/router/bgp/neighbor/ebgp-default-reject-policy YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy struct {
	Export *bool `path:"export" module:"nokia-conf"`
	Import *bool `path:"import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy) IsYANGGoStruct() {}

// GetExport retrieves the value of the leaf Export from the NokiaConf_Configure_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Export is set, it can
// safely use t.GetExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Export == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy) GetExport() bool {
	if t == nil || t.Export == nil {
		return true
	}
	return *t.Export
}

// GetImport retrieves the value of the leaf Import from the NokiaConf_Configure_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Import is set, it can
// safely use t.GetImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Import == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy) GetImport() bool {
	if t == nil || t.Import == nil {
		return true
	}
	return *t.Import
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Export == nil {
		var v bool = true
		t.Export = &v
	}
	if t.Import == nil {
		var v bool = true
		t.Import = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_EgressEngineering represents the /nokia-conf/configure/router/bgp/neighbor/egress-engineering YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_EgressEngineering struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_EgressEngineering implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_EgressEngineering) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Bgp_Neighbor_EgressEngineering
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_EgressEngineering) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bgp_Neighbor_EgressEngineering
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_EgressEngineering) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bgp_Neighbor_EgressEngineering
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_EgressEngineering) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_EgressEngineering
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_EgressEngineering) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_EgressEngineering) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_EgressEngineering"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_EgressEngineering) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_EgressEngineering) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_EgressEngineering.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_EgressEngineering) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_ErrorHandling represents the /nokia-conf/configure/router/bgp/neighbor/error-handling YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_ErrorHandling struct {
	UpdateFaultTolerance *bool `path:"update-fault-tolerance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_ErrorHandling implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_ErrorHandling) IsYANGGoStruct() {}

// GetUpdateFaultTolerance retrieves the value of the leaf UpdateFaultTolerance from the NokiaConf_Configure_Router_Bgp_Neighbor_ErrorHandling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UpdateFaultTolerance is set, it can
// safely use t.GetUpdateFaultTolerance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UpdateFaultTolerance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_ErrorHandling) GetUpdateFaultTolerance() bool {
	if t == nil || t.UpdateFaultTolerance == nil {
		return false
	}
	return *t.UpdateFaultTolerance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_ErrorHandling
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_ErrorHandling) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_ErrorHandling) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_ErrorHandling"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_ErrorHandling) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_ErrorHandling) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_ErrorHandling.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_ErrorHandling) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_Export represents the /nokia-conf/configure/router/bgp/neighbor/export YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_Export struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Policy             []string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_Export implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_Export) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bgp_Neighbor_Export
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Export) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bgp_Neighbor_Export
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Export) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Router_Bgp_Neighbor_Export
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Export) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_Export
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Export) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Export) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_Export"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Export) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Export) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_Export.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_Export) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_ExtendedNhEncoding represents the /nokia-conf/configure/router/bgp/neighbor/extended-nh-encoding YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_ExtendedNhEncoding struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	VpnIpv4   *bool `path:"vpn-ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_ExtendedNhEncoding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_ExtendedNhEncoding) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Router_Bgp_Neighbor_ExtendedNhEncoding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_ExtendedNhEncoding) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Router_Bgp_Neighbor_ExtendedNhEncoding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_ExtendedNhEncoding) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Router_Bgp_Neighbor_ExtendedNhEncoding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_ExtendedNhEncoding) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_ExtendedNhEncoding
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_ExtendedNhEncoding) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_ExtendedNhEncoding) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_ExtendedNhEncoding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_ExtendedNhEncoding) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_ExtendedNhEncoding) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_ExtendedNhEncoding.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_ExtendedNhEncoding) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_Family represents the /nokia-conf/configure/router/bgp/neighbor/family YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_Family struct {
	BgpLs        *bool `path:"bgp-ls" module:"nokia-conf"`
	Evpn         *bool `path:"evpn" module:"nokia-conf"`
	FlowIpv4     *bool `path:"flow-ipv4" module:"nokia-conf"`
	FlowIpv6     *bool `path:"flow-ipv6" module:"nokia-conf"`
	Ipv4         *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6         *bool `path:"ipv6" module:"nokia-conf"`
	L2Vpn        *bool `path:"l2-vpn" module:"nokia-conf"`
	LabelIpv4    *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6    *bool `path:"label-ipv6" module:"nokia-conf"`
	McastIpv4    *bool `path:"mcast-ipv4" module:"nokia-conf"`
	McastIpv6    *bool `path:"mcast-ipv6" module:"nokia-conf"`
	McastVpnIpv4 *bool `path:"mcast-vpn-ipv4" module:"nokia-conf"`
	McastVpnIpv6 *bool `path:"mcast-vpn-ipv6" module:"nokia-conf"`
	MdtSafi      *bool `path:"mdt-safi" module:"nokia-conf"`
	MsPw         *bool `path:"ms-pw" module:"nokia-conf"`
	MvpnIpv4     *bool `path:"mvpn-ipv4" module:"nokia-conf"`
	MvpnIpv6     *bool `path:"mvpn-ipv6" module:"nokia-conf"`
	RouteTarget  *bool `path:"route-target" module:"nokia-conf"`
	SrPolicyIpv4 *bool `path:"sr-policy-ipv4" module:"nokia-conf"`
	SrPolicyIpv6 *bool `path:"sr-policy-ipv6" module:"nokia-conf"`
	VpnIpv4      *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6      *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_Family) IsYANGGoStruct() {}

// GetBgpLs retrieves the value of the leaf BgpLs from the NokiaConf_Configure_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpLs is set, it can
// safely use t.GetBgpLs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpLs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Family) GetBgpLs() bool {
	if t == nil || t.BgpLs == nil {
		return false
	}
	return *t.BgpLs
}

// GetEvpn retrieves the value of the leaf Evpn from the NokiaConf_Configure_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Evpn is set, it can
// safely use t.GetEvpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Evpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Family) GetEvpn() bool {
	if t == nil || t.Evpn == nil {
		return false
	}
	return *t.Evpn
}

// GetFlowIpv4 retrieves the value of the leaf FlowIpv4 from the NokiaConf_Configure_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowIpv4 is set, it can
// safely use t.GetFlowIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Family) GetFlowIpv4() bool {
	if t == nil || t.FlowIpv4 == nil {
		return false
	}
	return *t.FlowIpv4
}

// GetFlowIpv6 retrieves the value of the leaf FlowIpv6 from the NokiaConf_Configure_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowIpv6 is set, it can
// safely use t.GetFlowIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Family) GetFlowIpv6() bool {
	if t == nil || t.FlowIpv6 == nil {
		return false
	}
	return *t.FlowIpv6
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Family) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Family) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetL2Vpn retrieves the value of the leaf L2Vpn from the NokiaConf_Configure_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2Vpn is set, it can
// safely use t.GetL2Vpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2Vpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Family) GetL2Vpn() bool {
	if t == nil || t.L2Vpn == nil {
		return false
	}
	return *t.L2Vpn
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Family) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Family) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetMcastIpv4 retrieves the value of the leaf McastIpv4 from the NokiaConf_Configure_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastIpv4 is set, it can
// safely use t.GetMcastIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Family) GetMcastIpv4() bool {
	if t == nil || t.McastIpv4 == nil {
		return false
	}
	return *t.McastIpv4
}

// GetMcastIpv6 retrieves the value of the leaf McastIpv6 from the NokiaConf_Configure_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastIpv6 is set, it can
// safely use t.GetMcastIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Family) GetMcastIpv6() bool {
	if t == nil || t.McastIpv6 == nil {
		return false
	}
	return *t.McastIpv6
}

// GetMcastVpnIpv4 retrieves the value of the leaf McastVpnIpv4 from the NokiaConf_Configure_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastVpnIpv4 is set, it can
// safely use t.GetMcastVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastVpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Family) GetMcastVpnIpv4() bool {
	if t == nil || t.McastVpnIpv4 == nil {
		return false
	}
	return *t.McastVpnIpv4
}

// GetMcastVpnIpv6 retrieves the value of the leaf McastVpnIpv6 from the NokiaConf_Configure_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastVpnIpv6 is set, it can
// safely use t.GetMcastVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastVpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Family) GetMcastVpnIpv6() bool {
	if t == nil || t.McastVpnIpv6 == nil {
		return false
	}
	return *t.McastVpnIpv6
}

// GetMdtSafi retrieves the value of the leaf MdtSafi from the NokiaConf_Configure_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdtSafi is set, it can
// safely use t.GetMdtSafi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdtSafi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Family) GetMdtSafi() bool {
	if t == nil || t.MdtSafi == nil {
		return false
	}
	return *t.MdtSafi
}

// GetMsPw retrieves the value of the leaf MsPw from the NokiaConf_Configure_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MsPw is set, it can
// safely use t.GetMsPw() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MsPw == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Family) GetMsPw() bool {
	if t == nil || t.MsPw == nil {
		return false
	}
	return *t.MsPw
}

// GetMvpnIpv4 retrieves the value of the leaf MvpnIpv4 from the NokiaConf_Configure_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MvpnIpv4 is set, it can
// safely use t.GetMvpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MvpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Family) GetMvpnIpv4() bool {
	if t == nil || t.MvpnIpv4 == nil {
		return false
	}
	return *t.MvpnIpv4
}

// GetMvpnIpv6 retrieves the value of the leaf MvpnIpv6 from the NokiaConf_Configure_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MvpnIpv6 is set, it can
// safely use t.GetMvpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MvpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Family) GetMvpnIpv6() bool {
	if t == nil || t.MvpnIpv6 == nil {
		return false
	}
	return *t.MvpnIpv6
}

// GetRouteTarget retrieves the value of the leaf RouteTarget from the NokiaConf_Configure_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTarget is set, it can
// safely use t.GetRouteTarget() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTarget == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Family) GetRouteTarget() bool {
	if t == nil || t.RouteTarget == nil {
		return false
	}
	return *t.RouteTarget
}

// GetSrPolicyIpv4 retrieves the value of the leaf SrPolicyIpv4 from the NokiaConf_Configure_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrPolicyIpv4 is set, it can
// safely use t.GetSrPolicyIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrPolicyIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Family) GetSrPolicyIpv4() bool {
	if t == nil || t.SrPolicyIpv4 == nil {
		return false
	}
	return *t.SrPolicyIpv4
}

// GetSrPolicyIpv6 retrieves the value of the leaf SrPolicyIpv6 from the NokiaConf_Configure_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrPolicyIpv6 is set, it can
// safely use t.GetSrPolicyIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrPolicyIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Family) GetSrPolicyIpv6() bool {
	if t == nil || t.SrPolicyIpv6 == nil {
		return false
	}
	return *t.SrPolicyIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Family) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Family) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BgpLs == nil {
		var v bool = false
		t.BgpLs = &v
	}
	if t.Evpn == nil {
		var v bool = false
		t.Evpn = &v
	}
	if t.FlowIpv4 == nil {
		var v bool = false
		t.FlowIpv4 = &v
	}
	if t.FlowIpv6 == nil {
		var v bool = false
		t.FlowIpv6 = &v
	}
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.L2Vpn == nil {
		var v bool = false
		t.L2Vpn = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.McastIpv4 == nil {
		var v bool = false
		t.McastIpv4 = &v
	}
	if t.McastIpv6 == nil {
		var v bool = false
		t.McastIpv6 = &v
	}
	if t.McastVpnIpv4 == nil {
		var v bool = false
		t.McastVpnIpv4 = &v
	}
	if t.McastVpnIpv6 == nil {
		var v bool = false
		t.McastVpnIpv6 = &v
	}
	if t.MdtSafi == nil {
		var v bool = false
		t.MdtSafi = &v
	}
	if t.MsPw == nil {
		var v bool = false
		t.MsPw = &v
	}
	if t.MvpnIpv4 == nil {
		var v bool = false
		t.MvpnIpv4 = &v
	}
	if t.MvpnIpv6 == nil {
		var v bool = false
		t.MvpnIpv6 = &v
	}
	if t.RouteTarget == nil {
		var v bool = false
		t.RouteTarget = &v
	}
	if t.SrPolicyIpv4 == nil {
		var v bool = false
		t.SrPolicyIpv4 = &v
	}
	if t.SrPolicyIpv6 == nil {
		var v bool = false
		t.SrPolicyIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_Family.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart represents the /nokia-conf/configure/router/bgp/neighbor/graceful-restart YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart struct {
	GrNotification  *bool                                                              `path:"gr-notification" module:"nokia-conf"`
	LongLived       *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived `path:"long-lived" module:"nokia-conf" yangPresence:"true"`
	RestartTime     *uint32                                                            `path:"restart-time" module:"nokia-conf"`
	StaleRoutesTime *uint32                                                            `path:"stale-routes-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart) IsYANGGoStruct() {}

// GetOrCreateLongLived retrieves the value of the LongLived field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart) GetOrCreateLongLived() *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived {
	if t.LongLived != nil {
		return t.LongLived
	}
	t.LongLived = &NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived{}
	return t.LongLived
}

// GetLongLived returns the value of the LongLived struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart. If the receiver or the field LongLived is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart) GetLongLived() *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived {
	if t != nil && t.LongLived != nil {
		return t.LongLived
	}
	return nil
}

// GetGrNotification retrieves the value of the leaf GrNotification from the NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GrNotification is set, it can
// safely use t.GetGrNotification() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GrNotification == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart) GetGrNotification() bool {
	if t == nil || t.GrNotification == nil {
		return false
	}
	return *t.GrNotification
}

// GetRestartTime retrieves the value of the leaf RestartTime from the NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RestartTime is set, it can
// safely use t.GetRestartTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RestartTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart) GetRestartTime() uint32 {
	if t == nil || t.RestartTime == nil {
		return 300
	}
	return *t.RestartTime
}

// GetStaleRoutesTime retrieves the value of the leaf StaleRoutesTime from the NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaleRoutesTime is set, it can
// safely use t.GetStaleRoutesTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaleRoutesTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart) GetStaleRoutesTime() uint32 {
	if t == nil || t.StaleRoutesTime == nil {
		return 360
	}
	return *t.StaleRoutesTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.GrNotification == nil {
		var v bool = false
		t.GrNotification = &v
	}
	if t.RestartTime == nil {
		var v uint32 = 300
		t.RestartTime = &v
	}
	if t.StaleRoutesTime == nil {
		var v uint32 = 360
		t.StaleRoutesTime = &v
	}
	t.LongLived.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived represents the /nokia-conf/configure/router/bgp/neighbor/graceful-restart/long-lived YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived struct {
	AdvertiseStaleToAllNeighbors *bool                                                                                                               `path:"advertise-stale-to-all-neighbors" module:"nokia-conf"`
	AdvertisedStaleTime          *uint32                                                                                                             `path:"advertised-stale-time" module:"nokia-conf"`
	Family                       map[E_NokiaTypesBgp_LlgrFamilyIdentifiers]*NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family `path:"family" module:"nokia-conf"`
	ForwardingBitsSet            E_NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_ForwardingBitsSet                               `path:"forwarding-bits-set" module:"nokia-conf"`
	HelperOverrideRestartTime    *uint32                                                                                                             `path:"helper-override-restart-time" module:"nokia-conf"`
	HelperOverrideStaleTime      *uint32                                                                                                             `path:"helper-override-stale-time" module:"nokia-conf"`
	WithoutNoExport              *bool                                                                                                               `path:"without-no-export" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived) IsYANGGoStruct() {}

// NewFamily creates a new entry in the Family list of the
// NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived) NewFamily(FamilyType E_NokiaTypesBgp_LlgrFamilyIdentifiers) (*NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[E_NokiaTypesBgp_LlgrFamilyIdentifiers]*NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family)
	}

	key := FamilyType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Family[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Family", key)
	}

	t.Family[key] = &NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family{
		FamilyType: FamilyType,
	}

	return t.Family[key], nil
}

// RenameFamily renames an entry in the list Family within
// the NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived) RenameFamily(oldK, newK E_NokiaTypesBgp_LlgrFamilyIdentifiers) error {
	if _, ok := t.Family[newK]; ok {
		return fmt.Errorf("key %v already exists in Family", newK)
	}

	e, ok := t.Family[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Family", oldK)
	}
	e.FamilyType = newK

	t.Family[newK] = e
	delete(t.Family, oldK)
	return nil
}

// GetOrCreateFamily retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived) GetOrCreateFamily(FamilyType E_NokiaTypesBgp_LlgrFamilyIdentifiers) *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family {

	key := FamilyType

	if v, ok := t.Family[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFamily(FamilyType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFamily got unexpected error: %v", err))
	}
	return v
}

// GetFamily retrieves the value with the specified key from
// the Family map field of NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived) GetFamily(FamilyType E_NokiaTypesBgp_LlgrFamilyIdentifiers) *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family {

	if t == nil {
		return nil
	}

	key := FamilyType

	if lm, ok := t.Family[key]; ok {
		return lm
	}
	return nil
}

// DeleteFamily deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived) DeleteFamily(FamilyType E_NokiaTypesBgp_LlgrFamilyIdentifiers) {
	key := FamilyType

	delete(t.Family, key)
}

// AppendFamily appends the supplied NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family struct to the
// list Family of NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived) AppendFamily(v *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family) error {
	key := v.FamilyType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[E_NokiaTypesBgp_LlgrFamilyIdentifiers]*NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family)
	}

	if _, ok := t.Family[key]; ok {
		return fmt.Errorf("duplicate key for list Family %v", key)
	}

	t.Family[key] = v
	return nil
}

// GetAdvertiseStaleToAllNeighbors retrieves the value of the leaf AdvertiseStaleToAllNeighbors from the NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseStaleToAllNeighbors is set, it can
// safely use t.GetAdvertiseStaleToAllNeighbors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseStaleToAllNeighbors == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived) GetAdvertiseStaleToAllNeighbors() bool {
	if t == nil || t.AdvertiseStaleToAllNeighbors == nil {
		return false
	}
	return *t.AdvertiseStaleToAllNeighbors
}

// GetAdvertisedStaleTime retrieves the value of the leaf AdvertisedStaleTime from the NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisedStaleTime is set, it can
// safely use t.GetAdvertisedStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisedStaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived) GetAdvertisedStaleTime() uint32 {
	if t == nil || t.AdvertisedStaleTime == nil {
		return 86400
	}
	return *t.AdvertisedStaleTime
}

// GetForwardingBitsSet retrieves the value of the leaf ForwardingBitsSet from the NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingBitsSet is set, it can
// safely use t.GetForwardingBitsSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingBitsSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived) GetForwardingBitsSet() E_NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_ForwardingBitsSet {
	if t == nil || t.ForwardingBitsSet == 0 {
		return NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_ForwardingBitsSet_none
	}
	return t.ForwardingBitsSet
}

// GetHelperOverrideRestartTime retrieves the value of the leaf HelperOverrideRestartTime from the NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperOverrideRestartTime is set, it can
// safely use t.GetHelperOverrideRestartTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperOverrideRestartTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived) GetHelperOverrideRestartTime() uint32 {
	if t == nil || t.HelperOverrideRestartTime == nil {
		return 0
	}
	return *t.HelperOverrideRestartTime
}

// GetHelperOverrideStaleTime retrieves the value of the leaf HelperOverrideStaleTime from the NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperOverrideStaleTime is set, it can
// safely use t.GetHelperOverrideStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperOverrideStaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived) GetHelperOverrideStaleTime() uint32 {
	if t == nil || t.HelperOverrideStaleTime == nil {
		return 0
	}
	return *t.HelperOverrideStaleTime
}

// GetWithoutNoExport retrieves the value of the leaf WithoutNoExport from the NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WithoutNoExport is set, it can
// safely use t.GetWithoutNoExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WithoutNoExport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived) GetWithoutNoExport() bool {
	if t == nil || t.WithoutNoExport == nil {
		return false
	}
	return *t.WithoutNoExport
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertiseStaleToAllNeighbors == nil {
		var v bool = false
		t.AdvertiseStaleToAllNeighbors = &v
	}
	if t.AdvertisedStaleTime == nil {
		var v uint32 = 86400
		t.AdvertisedStaleTime = &v
	}
	if t.ForwardingBitsSet == 0 {
		t.ForwardingBitsSet = NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_ForwardingBitsSet_none
	}
	if t.WithoutNoExport == nil {
		var v bool = false
		t.WithoutNoExport = &v
	}
	for _, e := range t.Family {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family represents the /nokia-conf/configure/router/bgp/neighbor/graceful-restart/long-lived/family YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family struct {
	AdvertisedStaleTime     *uint32                               `path:"advertised-stale-time" module:"nokia-conf"`
	ApplyGroups             []string                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                              `path:"apply-groups-exclude" module:"nokia-conf"`
	FamilyType              E_NokiaTypesBgp_LlgrFamilyIdentifiers `path:"family-type" module:"nokia-conf"`
	HelperOverrideStaleTime *uint32                               `path:"helper-override-stale-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family) IsYANGGoStruct() {}

// GetAdvertisedStaleTime retrieves the value of the leaf AdvertisedStaleTime from the NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisedStaleTime is set, it can
// safely use t.GetAdvertisedStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisedStaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family) GetAdvertisedStaleTime() uint32 {
	if t == nil || t.AdvertisedStaleTime == nil {
		return 86400
	}
	return *t.AdvertisedStaleTime
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFamilyType retrieves the value of the leaf FamilyType from the NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FamilyType is set, it can
// safely use t.GetFamilyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FamilyType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family) GetFamilyType() E_NokiaTypesBgp_LlgrFamilyIdentifiers {
	if t == nil || t.FamilyType == 0 {
		return 0
	}
	return t.FamilyType
}

// GetHelperOverrideStaleTime retrieves the value of the leaf HelperOverrideStaleTime from the NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperOverrideStaleTime is set, it can
// safely use t.GetHelperOverrideStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperOverrideStaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family) GetHelperOverrideStaleTime() uint32 {
	if t == nil || t.HelperOverrideStaleTime == nil {
		return 16777216
	}
	return *t.HelperOverrideStaleTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertisedStaleTime == nil {
		var v uint32 = 86400
		t.AdvertisedStaleTime = &v
	}
	if t.HelperOverrideStaleTime == nil {
		var v uint32 = 16777216
		t.HelperOverrideStaleTime = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"family-type": t.FamilyType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_HoldTime represents the /nokia-conf/configure/router/bgp/neighbor/hold-time YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_HoldTime struct {
	MinimumHoldTime *int32 `path:"minimum-hold-time" module:"nokia-conf"`
	Seconds         *int32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_HoldTime) IsYANGGoStruct() {}

// GetMinimumHoldTime retrieves the value of the leaf MinimumHoldTime from the NokiaConf_Configure_Router_Bgp_Neighbor_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinimumHoldTime is set, it can
// safely use t.GetMinimumHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinimumHoldTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_HoldTime) GetMinimumHoldTime() int32 {
	if t == nil || t.MinimumHoldTime == nil {
		return 0
	}
	return *t.MinimumHoldTime
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Router_Bgp_Neighbor_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_HoldTime) GetSeconds() int32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MinimumHoldTime == nil {
		var v int32 = 0
		t.MinimumHoldTime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_HoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_HoldTime.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_HoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_Import represents the /nokia-conf/configure/router/bgp/neighbor/import YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_Import struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Policy             []string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_Import implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_Import) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bgp_Neighbor_Import
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Import) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bgp_Neighbor_Import
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Import) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Router_Bgp_Neighbor_Import
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Import) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_Import
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Import) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Import) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_Import"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Import) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Import) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_Import.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_Import) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth represents the /nokia-conf/configure/router/bgp/neighbor/link-bandwidth YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth struct {
	AcceptFromEbgp     *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp     `path:"accept-from-ebgp" module:"nokia-conf" yangPresence:"true"`
	AddToReceivedEbgp  *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp  `path:"add-to-received-ebgp" module:"nokia-conf" yangPresence:"true"`
	AggregateUsedPaths *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths `path:"aggregate-used-paths" module:"nokia-conf" yangPresence:"true"`
	SendToEbgp         *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp         `path:"send-to-ebgp" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth) IsYANGGoStruct() {}

// GetOrCreateAcceptFromEbgp retrieves the value of the AcceptFromEbgp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth) GetOrCreateAcceptFromEbgp() *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp {
	if t.AcceptFromEbgp != nil {
		return t.AcceptFromEbgp
	}
	t.AcceptFromEbgp = &NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp{}
	return t.AcceptFromEbgp
}

// GetOrCreateAddToReceivedEbgp retrieves the value of the AddToReceivedEbgp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth) GetOrCreateAddToReceivedEbgp() *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp {
	if t.AddToReceivedEbgp != nil {
		return t.AddToReceivedEbgp
	}
	t.AddToReceivedEbgp = &NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp{}
	return t.AddToReceivedEbgp
}

// GetOrCreateAggregateUsedPaths retrieves the value of the AggregateUsedPaths field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth) GetOrCreateAggregateUsedPaths() *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths {
	if t.AggregateUsedPaths != nil {
		return t.AggregateUsedPaths
	}
	t.AggregateUsedPaths = &NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths{}
	return t.AggregateUsedPaths
}

// GetOrCreateSendToEbgp retrieves the value of the SendToEbgp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth) GetOrCreateSendToEbgp() *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp {
	if t.SendToEbgp != nil {
		return t.SendToEbgp
	}
	t.SendToEbgp = &NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp{}
	return t.SendToEbgp
}

// GetAcceptFromEbgp returns the value of the AcceptFromEbgp struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth. If the receiver or the field AcceptFromEbgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth) GetAcceptFromEbgp() *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp {
	if t != nil && t.AcceptFromEbgp != nil {
		return t.AcceptFromEbgp
	}
	return nil
}

// GetAddToReceivedEbgp returns the value of the AddToReceivedEbgp struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth. If the receiver or the field AddToReceivedEbgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth) GetAddToReceivedEbgp() *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp {
	if t != nil && t.AddToReceivedEbgp != nil {
		return t.AddToReceivedEbgp
	}
	return nil
}

// GetAggregateUsedPaths returns the value of the AggregateUsedPaths struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth. If the receiver or the field AggregateUsedPaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth) GetAggregateUsedPaths() *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths {
	if t != nil && t.AggregateUsedPaths != nil {
		return t.AggregateUsedPaths
	}
	return nil
}

// GetSendToEbgp returns the value of the SendToEbgp struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth. If the receiver or the field SendToEbgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth) GetSendToEbgp() *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp {
	if t != nil && t.SendToEbgp != nil {
		return t.SendToEbgp
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AcceptFromEbgp.PopulateDefaults()
	t.AddToReceivedEbgp.PopulateDefaults()
	t.AggregateUsedPaths.PopulateDefaults()
	t.SendToEbgp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp represents the /nokia-conf/configure/router/bgp/neighbor/link-bandwidth/accept-from-ebgp YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
	VpnIpv4   *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6   *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp represents the /nokia-conf/configure/router/bgp/neighbor/link-bandwidth/add-to-received-ebgp YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
	VpnIpv4   *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6   *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths represents the /nokia-conf/configure/router/bgp/neighbor/link-bandwidth/aggregate-used-paths YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
	VpnIpv4   *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6   *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp represents the /nokia-conf/configure/router/bgp/neighbor/link-bandwidth/send-to-ebgp YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
	VpnIpv4   *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6   *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_LocalAs represents the /nokia-conf/configure/router/bgp/neighbor/local-as YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_LocalAs struct {
	AsNumber        *uint32 `path:"as-number" module:"nokia-conf"`
	PrependGlobalAs *bool   `path:"prepend-global-as" module:"nokia-conf"`
	Private         *bool   `path:"private" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_LocalAs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_LocalAs) IsYANGGoStruct() {}

// GetAsNumber retrieves the value of the leaf AsNumber from the NokiaConf_Configure_Router_Bgp_Neighbor_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsNumber is set, it can
// safely use t.GetAsNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LocalAs) GetAsNumber() uint32 {
	if t == nil || t.AsNumber == nil {
		return 0
	}
	return *t.AsNumber
}

// GetPrependGlobalAs retrieves the value of the leaf PrependGlobalAs from the NokiaConf_Configure_Router_Bgp_Neighbor_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrependGlobalAs is set, it can
// safely use t.GetPrependGlobalAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrependGlobalAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LocalAs) GetPrependGlobalAs() bool {
	if t == nil || t.PrependGlobalAs == nil {
		return true
	}
	return *t.PrependGlobalAs
}

// GetPrivate retrieves the value of the leaf Private from the NokiaConf_Configure_Router_Bgp_Neighbor_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Private is set, it can
// safely use t.GetPrivate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Private == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LocalAs) GetPrivate() bool {
	if t == nil || t.Private == nil {
		return false
	}
	return *t.Private
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_LocalAs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LocalAs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PrependGlobalAs == nil {
		var v bool = true
		t.PrependGlobalAs = &v
	}
	if t.Private == nil {
		var v bool = false
		t.Private = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LocalAs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_LocalAs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LocalAs) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_LocalAs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_LocalAs.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_LocalAs) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_Monitor represents the /nokia-conf/configure/router/bgp/neighbor/monitor YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_Monitor struct {
	AdminState         E_NokiaTypesSros_AdminState                                         `path:"admin-state" module:"nokia-conf"`
	AllStations        *bool                                                               `path:"all-stations" module:"nokia-conf"`
	ApplyGroups        []string                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	RouteMonitoring    *NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_RouteMonitoring    `path:"route-monitoring" module:"nokia-conf"`
	Station            map[string]*NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_Station `path:"station" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_Monitor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_Monitor) IsYANGGoStruct() {}

// NewStation creates a new entry in the Station list of the
// NokiaConf_Configure_Router_Bgp_Neighbor_Monitor struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Monitor) NewStation(StationName string) (*NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_Station, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Station == nil {
		t.Station = make(map[string]*NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_Station)
	}

	key := StationName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Station[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Station", key)
	}

	t.Station[key] = &NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_Station{
		StationName: &StationName,
	}

	return t.Station[key], nil
}

// RenameStation renames an entry in the list Station within
// the NokiaConf_Configure_Router_Bgp_Neighbor_Monitor struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Monitor) RenameStation(oldK, newK string) error {
	if _, ok := t.Station[newK]; ok {
		return fmt.Errorf("key %v already exists in Station", newK)
	}

	e, ok := t.Station[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Station", oldK)
	}
	e.StationName = &newK

	t.Station[newK] = e
	delete(t.Station, oldK)
	return nil
}

// GetOrCreateStation retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_Neighbor_Monitor. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Monitor) GetOrCreateStation(StationName string) *NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_Station {

	key := StationName

	if v, ok := t.Station[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStation(StationName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStation got unexpected error: %v", err))
	}
	return v
}

// GetStation retrieves the value with the specified key from
// the Station map field of NokiaConf_Configure_Router_Bgp_Neighbor_Monitor. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Monitor) GetStation(StationName string) *NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_Station {

	if t == nil {
		return nil
	}

	key := StationName

	if lm, ok := t.Station[key]; ok {
		return lm
	}
	return nil
}

// DeleteStation deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_Neighbor_Monitor. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Monitor) DeleteStation(StationName string) {
	key := StationName

	delete(t.Station, key)
}

// AppendStation appends the supplied NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_Station struct to the
// list Station of NokiaConf_Configure_Router_Bgp_Neighbor_Monitor. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_Station already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Monitor) AppendStation(v *NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_Station) error {
	if v.StationName == nil {
		return fmt.Errorf("invalid nil key received for StationName")
	}

	key := *v.StationName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Station == nil {
		t.Station = make(map[string]*NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_Station)
	}

	if _, ok := t.Station[key]; ok {
		return fmt.Errorf("duplicate key for list Station %v", key)
	}

	t.Station[key] = v
	return nil
}

// GetOrCreateRouteMonitoring retrieves the value of the RouteMonitoring field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Monitor) GetOrCreateRouteMonitoring() *NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_RouteMonitoring {
	if t.RouteMonitoring != nil {
		return t.RouteMonitoring
	}
	t.RouteMonitoring = &NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_RouteMonitoring{}
	return t.RouteMonitoring
}

// GetRouteMonitoring returns the value of the RouteMonitoring struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor_Monitor. If the receiver or the field RouteMonitoring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Monitor) GetRouteMonitoring() *NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_RouteMonitoring {
	if t != nil && t.RouteMonitoring != nil {
		return t.RouteMonitoring
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Bgp_Neighbor_Monitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Monitor) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAllStations retrieves the value of the leaf AllStations from the NokiaConf_Configure_Router_Bgp_Neighbor_Monitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllStations is set, it can
// safely use t.GetAllStations() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllStations == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Monitor) GetAllStations() bool {
	if t == nil || t.AllStations == nil {
		return false
	}
	return *t.AllStations
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bgp_Neighbor_Monitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Monitor) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bgp_Neighbor_Monitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Monitor) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_Monitor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Monitor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AllStations == nil {
		var v bool = false
		t.AllStations = &v
	}
	t.RouteMonitoring.PopulateDefaults()
	for _, e := range t.Station {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Monitor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_Monitor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Monitor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Monitor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_Monitor.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_Monitor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_RouteMonitoring represents the /nokia-conf/configure/router/bgp/neighbor/monitor/route-monitoring YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_RouteMonitoring struct {
	PostPolicy *bool `path:"post-policy" module:"nokia-conf"`
	PrePolicy  *bool `path:"pre-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_RouteMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_RouteMonitoring) IsYANGGoStruct() {}

// GetPostPolicy retrieves the value of the leaf PostPolicy from the NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_RouteMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PostPolicy is set, it can
// safely use t.GetPostPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PostPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_RouteMonitoring) GetPostPolicy() bool {
	if t == nil || t.PostPolicy == nil {
		return false
	}
	return *t.PostPolicy
}

// GetPrePolicy retrieves the value of the leaf PrePolicy from the NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_RouteMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrePolicy is set, it can
// safely use t.GetPrePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_RouteMonitoring) GetPrePolicy() bool {
	if t == nil || t.PrePolicy == nil {
		return false
	}
	return *t.PrePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_RouteMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_RouteMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PostPolicy == nil {
		var v bool = false
		t.PostPolicy = &v
	}
	if t.PrePolicy == nil {
		var v bool = false
		t.PrePolicy = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_RouteMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_RouteMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_RouteMonitoring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_RouteMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_RouteMonitoring.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_RouteMonitoring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_Station represents the /nokia-conf/configure/router/bgp/neighbor/monitor/station YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_Station struct {
	StationName *string `path:"station-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_Station implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_Station) IsYANGGoStruct() {}

// GetStationName retrieves the value of the leaf StationName from the NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_Station
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StationName is set, it can
// safely use t.GetStationName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StationName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_Station) GetStationName() string {
	if t == nil || t.StationName == nil {
		return ""
	}
	return *t.StationName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_Station
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_Station) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_Station struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_Station) ΛListKeyMap() (map[string]interface{}, error) {
	if t.StationName == nil {
		return nil, fmt.Errorf("nil value for key StationName")
	}

	return map[string]interface{}{
		"station-name": *t.StationName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_Station) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_Station"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_Station) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_Station) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_Station.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_Monitor_Station) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_NextHopUnchanged represents the /nokia-conf/configure/router/bgp/neighbor/next-hop-unchanged YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_NextHopUnchanged struct {
	Evpn      *bool `path:"evpn" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
	VpnIpv4   *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6   *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_NextHopUnchanged implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_NextHopUnchanged) IsYANGGoStruct() {}

// GetEvpn retrieves the value of the leaf Evpn from the NokiaConf_Configure_Router_Bgp_Neighbor_NextHopUnchanged
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Evpn is set, it can
// safely use t.GetEvpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Evpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_NextHopUnchanged) GetEvpn() bool {
	if t == nil || t.Evpn == nil {
		return false
	}
	return *t.Evpn
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Router_Bgp_Neighbor_NextHopUnchanged
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_NextHopUnchanged) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Router_Bgp_Neighbor_NextHopUnchanged
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_NextHopUnchanged) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Router_Bgp_Neighbor_NextHopUnchanged
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_NextHopUnchanged) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Router_Bgp_Neighbor_NextHopUnchanged
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_NextHopUnchanged) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_NextHopUnchanged
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_NextHopUnchanged) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Evpn == nil {
		var v bool = false
		t.Evpn = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_NextHopUnchanged) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_NextHopUnchanged"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_NextHopUnchanged) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_NextHopUnchanged) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_NextHopUnchanged.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_NextHopUnchanged) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_OriginValidation represents the /nokia-conf/configure/router/bgp/neighbor/origin-validation YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_OriginValidation struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_OriginValidation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_OriginValidation) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Router_Bgp_Neighbor_OriginValidation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_OriginValidation) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Router_Bgp_Neighbor_OriginValidation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_OriginValidation) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Router_Bgp_Neighbor_OriginValidation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_OriginValidation) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Router_Bgp_Neighbor_OriginValidation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_OriginValidation) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_OriginValidation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_OriginValidation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_OriginValidation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_OriginValidation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_OriginValidation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_OriginValidation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_OriginValidation.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_OriginValidation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering represents the /nokia-conf/configure/router/bgp/neighbor/outbound-route-filtering YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering struct {
	ExtendedCommunity *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity `path:"extended-community" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering) IsYANGGoStruct() {}

// GetOrCreateExtendedCommunity retrieves the value of the ExtendedCommunity field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering) GetOrCreateExtendedCommunity() *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity {
	if t.ExtendedCommunity != nil {
		return t.ExtendedCommunity
	}
	t.ExtendedCommunity = &NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity{}
	return t.ExtendedCommunity
}

// GetExtendedCommunity returns the value of the ExtendedCommunity struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering. If the receiver or the field ExtendedCommunity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering) GetExtendedCommunity() *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity {
	if t != nil && t.ExtendedCommunity != nil {
		return t.ExtendedCommunity
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ExtendedCommunity.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity represents the /nokia-conf/configure/router/bgp/neighbor/outbound-route-filtering/extended-community YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity struct {
	AcceptOrf *bool                                                                                     `path:"accept-orf" module:"nokia-conf"`
	SendOrf   *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf `path:"send-orf" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity) IsYANGGoStruct() {
}

// GetOrCreateSendOrf retrieves the value of the SendOrf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity) GetOrCreateSendOrf() *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf {
	if t.SendOrf != nil {
		return t.SendOrf
	}
	t.SendOrf = &NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf{}
	return t.SendOrf
}

// GetSendOrf returns the value of the SendOrf struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity. If the receiver or the field SendOrf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity) GetSendOrf() *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf {
	if t != nil && t.SendOrf != nil {
		return t.SendOrf
	}
	return nil
}

// GetAcceptOrf retrieves the value of the leaf AcceptOrf from the NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcceptOrf is set, it can
// safely use t.GetAcceptOrf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcceptOrf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity) GetAcceptOrf() bool {
	if t == nil || t.AcceptOrf == nil {
		return false
	}
	return *t.AcceptOrf
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SendOrf.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf represents the /nokia-conf/configure/router/bgp/neighbor/outbound-route-filtering/extended-community/send-orf YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf struct {
	RouteTarget map[string]*NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget `path:"route-target" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf) IsYANGGoStruct() {
}

// NewRouteTarget creates a new entry in the RouteTarget list of the
// NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf) NewRouteTarget(CommunityName string) (*NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouteTarget == nil {
		t.RouteTarget = make(map[string]*NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget)
	}

	key := CommunityName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RouteTarget[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RouteTarget", key)
	}

	t.RouteTarget[key] = &NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget{
		CommunityName: &CommunityName,
	}

	return t.RouteTarget[key], nil
}

// RenameRouteTarget renames an entry in the list RouteTarget within
// the NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf) RenameRouteTarget(oldK, newK string) error {
	if _, ok := t.RouteTarget[newK]; ok {
		return fmt.Errorf("key %v already exists in RouteTarget", newK)
	}

	e, ok := t.RouteTarget[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RouteTarget", oldK)
	}
	e.CommunityName = &newK

	t.RouteTarget[newK] = e
	delete(t.RouteTarget, oldK)
	return nil
}

// GetOrCreateRouteTarget retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf) GetOrCreateRouteTarget(CommunityName string) *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget {

	key := CommunityName

	if v, ok := t.RouteTarget[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRouteTarget(CommunityName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRouteTarget got unexpected error: %v", err))
	}
	return v
}

// GetRouteTarget retrieves the value with the specified key from
// the RouteTarget map field of NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf) GetRouteTarget(CommunityName string) *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget {

	if t == nil {
		return nil
	}

	key := CommunityName

	if lm, ok := t.RouteTarget[key]; ok {
		return lm
	}
	return nil
}

// DeleteRouteTarget deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf) DeleteRouteTarget(CommunityName string) {
	key := CommunityName

	delete(t.RouteTarget, key)
}

// AppendRouteTarget appends the supplied NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget struct to the
// list RouteTarget of NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf) AppendRouteTarget(v *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) error {
	if v.CommunityName == nil {
		return fmt.Errorf("invalid nil key received for CommunityName")
	}

	key := *v.CommunityName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouteTarget == nil {
		t.RouteTarget = make(map[string]*NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget)
	}

	if _, ok := t.RouteTarget[key]; ok {
		return fmt.Errorf("duplicate key for list RouteTarget %v", key)
	}

	t.RouteTarget[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.RouteTarget {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget represents the /nokia-conf/configure/router/bgp/neighbor/outbound-route-filtering/extended-community/send-orf/route-target YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget struct {
	CommunityName *string `path:"community-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) IsYANGGoStruct() {
}

// GetCommunityName retrieves the value of the leaf CommunityName from the NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityName is set, it can
// safely use t.GetCommunityName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) GetCommunityName() string {
	if t == nil || t.CommunityName == nil {
		return ""
	}
	return *t.CommunityName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CommunityName == nil {
		return nil, fmt.Errorf("nil value for key CommunityName")
	}

	return map[string]interface{}{
		"community-name": *t.CommunityName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit represents the /nokia-conf/configure/router/bgp/neighbor/prefix-limit YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit struct {
	ApplyGroups        []string                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Family             E_NokiaTypesBgp_IpFamilyIdentifier `path:"family" module:"nokia-conf"`
	IdleTimeout        *int32                             `path:"idle-timeout" module:"nokia-conf"`
	LogOnly            *bool                              `path:"log-only" module:"nokia-conf"`
	Maximum            *uint32                            `path:"maximum" module:"nokia-conf"`
	PostImport         *bool                              `path:"post-import" module:"nokia-conf"`
	Threshold          *uint32                            `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFamily retrieves the value of the leaf Family from the NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Family is set, it can
// safely use t.GetFamily() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Family == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit) GetFamily() E_NokiaTypesBgp_IpFamilyIdentifier {
	if t == nil || t.Family == 0 {
		return 0
	}
	return t.Family
}

// GetIdleTimeout retrieves the value of the leaf IdleTimeout from the NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleTimeout is set, it can
// safely use t.GetIdleTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit) GetIdleTimeout() int32 {
	if t == nil || t.IdleTimeout == nil {
		return 0
	}
	return *t.IdleTimeout
}

// GetLogOnly retrieves the value of the leaf LogOnly from the NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogOnly is set, it can
// safely use t.GetLogOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit) GetLogOnly() bool {
	if t == nil || t.LogOnly == nil {
		return false
	}
	return *t.LogOnly
}

// GetMaximum retrieves the value of the leaf Maximum from the NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Maximum is set, it can
// safely use t.GetMaximum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Maximum == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit) GetMaximum() uint32 {
	if t == nil || t.Maximum == nil {
		return 0
	}
	return *t.Maximum
}

// GetPostImport retrieves the value of the leaf PostImport from the NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PostImport is set, it can
// safely use t.GetPostImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PostImport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit) GetPostImport() bool {
	if t == nil || t.PostImport == nil {
		return false
	}
	return *t.PostImport
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 90
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LogOnly == nil {
		var v bool = false
		t.LogOnly = &v
	}
	if t.PostImport == nil {
		var v bool = false
		t.PostImport = &v
	}
	if t.Threshold == nil {
		var v uint32 = 90
		t.Threshold = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"family": t.Family,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_PrefixLimit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_RemovePrivate represents the /nokia-conf/configure/router/bgp/neighbor/remove-private YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_RemovePrivate struct {
	Limited    *bool `path:"limited" module:"nokia-conf"`
	Replace    *bool `path:"replace" module:"nokia-conf"`
	SkipPeerAs *bool `path:"skip-peer-as" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_RemovePrivate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_RemovePrivate) IsYANGGoStruct() {}

// GetLimited retrieves the value of the leaf Limited from the NokiaConf_Configure_Router_Bgp_Neighbor_RemovePrivate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Limited is set, it can
// safely use t.GetLimited() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Limited == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_RemovePrivate) GetLimited() bool {
	if t == nil || t.Limited == nil {
		return false
	}
	return *t.Limited
}

// GetReplace retrieves the value of the leaf Replace from the NokiaConf_Configure_Router_Bgp_Neighbor_RemovePrivate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Replace is set, it can
// safely use t.GetReplace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Replace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_RemovePrivate) GetReplace() bool {
	if t == nil || t.Replace == nil {
		return false
	}
	return *t.Replace
}

// GetSkipPeerAs retrieves the value of the leaf SkipPeerAs from the NokiaConf_Configure_Router_Bgp_Neighbor_RemovePrivate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SkipPeerAs is set, it can
// safely use t.GetSkipPeerAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SkipPeerAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_RemovePrivate) GetSkipPeerAs() bool {
	if t == nil || t.SkipPeerAs == nil {
		return false
	}
	return *t.SkipPeerAs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_RemovePrivate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_RemovePrivate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Limited == nil {
		var v bool = false
		t.Limited = &v
	}
	if t.Replace == nil {
		var v bool = false
		t.Replace = &v
	}
	if t.SkipPeerAs == nil {
		var v bool = false
		t.SkipPeerAs = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_RemovePrivate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_RemovePrivate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_RemovePrivate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_RemovePrivate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_RemovePrivate.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_RemovePrivate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6 represents the /nokia-conf/configure/router/bgp/neighbor/segment-routing-v6 YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6 struct {
	RouteAdvertisement *NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement `path:"route-advertisement" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6) IsYANGGoStruct() {}

// GetOrCreateRouteAdvertisement retrieves the value of the RouteAdvertisement field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6) GetOrCreateRouteAdvertisement() *NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement {
	if t.RouteAdvertisement != nil {
		return t.RouteAdvertisement
	}
	t.RouteAdvertisement = &NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement{}
	return t.RouteAdvertisement
}

// GetRouteAdvertisement returns the value of the RouteAdvertisement struct pointer
// from NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6. If the receiver or the field RouteAdvertisement is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6) GetRouteAdvertisement() *NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement {
	if t != nil && t.RouteAdvertisement != nil {
		return t.RouteAdvertisement
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RouteAdvertisement.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement represents the /nokia-conf/configure/router/bgp/neighbor/segment-routing-v6/route-advertisement YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement struct {
	DropRoutesWithSrv6Tlvs *bool                                                                                                                                                                                   `path:"drop-routes-with-srv6-tlvs" module:"nokia-conf"`
	Family                 map[E_NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType]*NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family `path:"family" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement) IsYANGGoStruct() {
}

// NewFamily creates a new entry in the Family list of the
// NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement) NewFamily(FamilyType E_NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType) (*NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[E_NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType]*NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family)
	}

	key := FamilyType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Family[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Family", key)
	}

	t.Family[key] = &NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family{
		FamilyType: FamilyType,
	}

	return t.Family[key], nil
}

// RenameFamily renames an entry in the list Family within
// the NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement) RenameFamily(oldK, newK E_NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType) error {
	if _, ok := t.Family[newK]; ok {
		return fmt.Errorf("key %v already exists in Family", newK)
	}

	e, ok := t.Family[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Family", oldK)
	}
	e.FamilyType = newK

	t.Family[newK] = e
	delete(t.Family, oldK)
	return nil
}

// GetOrCreateFamily retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement) GetOrCreateFamily(FamilyType E_NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType) *NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family {

	key := FamilyType

	if v, ok := t.Family[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFamily(FamilyType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFamily got unexpected error: %v", err))
	}
	return v
}

// GetFamily retrieves the value with the specified key from
// the Family map field of NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement) GetFamily(FamilyType E_NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType) *NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family {

	if t == nil {
		return nil
	}

	key := FamilyType

	if lm, ok := t.Family[key]; ok {
		return lm
	}
	return nil
}

// DeleteFamily deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement) DeleteFamily(FamilyType E_NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType) {
	key := FamilyType

	delete(t.Family, key)
}

// AppendFamily appends the supplied NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family struct to the
// list Family of NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement) AppendFamily(v *NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family) error {
	key := v.FamilyType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[E_NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType]*NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family)
	}

	if _, ok := t.Family[key]; ok {
		return fmt.Errorf("duplicate key for list Family %v", key)
	}

	t.Family[key] = v
	return nil
}

// GetDropRoutesWithSrv6Tlvs retrieves the value of the leaf DropRoutesWithSrv6Tlvs from the NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropRoutesWithSrv6Tlvs is set, it can
// safely use t.GetDropRoutesWithSrv6Tlvs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropRoutesWithSrv6Tlvs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement) GetDropRoutesWithSrv6Tlvs() bool {
	if t == nil || t.DropRoutesWithSrv6Tlvs == nil {
		return false
	}
	return *t.DropRoutesWithSrv6Tlvs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DropRoutesWithSrv6Tlvs == nil {
		var v bool = false
		t.DropRoutesWithSrv6Tlvs = &v
	}
	for _, e := range t.Family {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family represents the /nokia-conf/configure/router/bgp/neighbor/segment-routing-v6/route-advertisement/family YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family struct {
	ApplyGroups        []string                                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	FamilyType         E_NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType `path:"family-type" module:"nokia-conf"`
	StripSrv6Tlvs      *bool                                                                                           `path:"strip-srv6-tlvs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFamilyType retrieves the value of the leaf FamilyType from the NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FamilyType is set, it can
// safely use t.GetFamilyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FamilyType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family) GetFamilyType() E_NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType {
	if t == nil || t.FamilyType == 0 {
		return 0
	}
	return t.FamilyType
}

// GetStripSrv6Tlvs retrieves the value of the leaf StripSrv6Tlvs from the NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StripSrv6Tlvs is set, it can
// safely use t.GetStripSrv6Tlvs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StripSrv6Tlvs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family) GetStripSrv6Tlvs() bool {
	if t == nil || t.StripSrv6Tlvs == nil {
		return false
	}
	return *t.StripSrv6Tlvs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.StripSrv6Tlvs == nil {
		var v bool = false
		t.StripSrv6Tlvs = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"family-type": t.FamilyType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_SendCommunities represents the /nokia-conf/configure/router/bgp/neighbor/send-communities YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_SendCommunities struct {
	Extended *bool `path:"extended" module:"nokia-conf"`
	Large    *bool `path:"large" module:"nokia-conf"`
	Standard *bool `path:"standard" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_SendCommunities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_SendCommunities) IsYANGGoStruct() {}

// GetExtended retrieves the value of the leaf Extended from the NokiaConf_Configure_Router_Bgp_Neighbor_SendCommunities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SendCommunities) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetLarge retrieves the value of the leaf Large from the NokiaConf_Configure_Router_Bgp_Neighbor_SendCommunities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Large is set, it can
// safely use t.GetLarge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Large == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SendCommunities) GetLarge() bool {
	if t == nil || t.Large == nil {
		return false
	}
	return *t.Large
}

// GetStandard retrieves the value of the leaf Standard from the NokiaConf_Configure_Router_Bgp_Neighbor_SendCommunities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Standard is set, it can
// safely use t.GetStandard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Standard == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SendCommunities) GetStandard() bool {
	if t == nil || t.Standard == nil {
		return false
	}
	return *t.Standard
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_SendCommunities
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SendCommunities) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SendCommunities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_SendCommunities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SendCommunities) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SendCommunities) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_SendCommunities.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_SendCommunities) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_Neighbor_SendDefault represents the /nokia-conf/configure/router/bgp/neighbor/send-default YANG schema element.
type NokiaConf_Configure_Router_Bgp_Neighbor_SendDefault struct {
	ExportPolicy *string `path:"export-policy" module:"nokia-conf"`
	Ipv4         *bool   `path:"ipv4" module:"nokia-conf"`
	Ipv6         *bool   `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_Neighbor_SendDefault implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_SendDefault) IsYANGGoStruct() {}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Router_Bgp_Neighbor_SendDefault
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SendDefault) GetExportPolicy() string {
	if t == nil || t.ExportPolicy == nil {
		return ""
	}
	return *t.ExportPolicy
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Router_Bgp_Neighbor_SendDefault
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SendDefault) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Router_Bgp_Neighbor_SendDefault
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SendDefault) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_Neighbor_SendDefault
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SendDefault) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SendDefault) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_Neighbor_SendDefault"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SendDefault) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_Neighbor_SendDefault) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_Neighbor_SendDefault.
func (*NokiaConf_Configure_Router_Bgp_Neighbor_SendDefault) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_NextHopResolution represents the /nokia-conf/configure/router/bgp/next-hop-resolution YANG schema element.
type NokiaConf_Configure_Router_Bgp_NextHopResolution struct {
	AllowUnresolvedLeaking *bool                                                            `path:"allow-unresolved-leaking" module:"nokia-conf"`
	LabeledRoutes          *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes  `path:"labeled-routes" module:"nokia-conf"`
	Policy                 *string                                                          `path:"policy" module:"nokia-conf"`
	ShortcutTunnel         *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel `path:"shortcut-tunnel" module:"nokia-conf"`
	UseBgpRoutes           *bool                                                            `path:"use-bgp-routes" module:"nokia-conf"`
	VpnFamilyPolicy        *string                                                          `path:"vpn-family-policy" module:"nokia-conf"`
	WeightedEcmp           *bool                                                            `path:"weighted-ecmp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_NextHopResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_NextHopResolution) IsYANGGoStruct() {}

// GetOrCreateLabeledRoutes retrieves the value of the LabeledRoutes field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution) GetOrCreateLabeledRoutes() *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes {
	if t.LabeledRoutes != nil {
		return t.LabeledRoutes
	}
	t.LabeledRoutes = &NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes{}
	return t.LabeledRoutes
}

// GetOrCreateShortcutTunnel retrieves the value of the ShortcutTunnel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution) GetOrCreateShortcutTunnel() *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel {
	if t.ShortcutTunnel != nil {
		return t.ShortcutTunnel
	}
	t.ShortcutTunnel = &NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel{}
	return t.ShortcutTunnel
}

// GetLabeledRoutes returns the value of the LabeledRoutes struct pointer
// from NokiaConf_Configure_Router_Bgp_NextHopResolution. If the receiver or the field LabeledRoutes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution) GetLabeledRoutes() *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes {
	if t != nil && t.LabeledRoutes != nil {
		return t.LabeledRoutes
	}
	return nil
}

// GetShortcutTunnel returns the value of the ShortcutTunnel struct pointer
// from NokiaConf_Configure_Router_Bgp_NextHopResolution. If the receiver or the field ShortcutTunnel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution) GetShortcutTunnel() *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel {
	if t != nil && t.ShortcutTunnel != nil {
		return t.ShortcutTunnel
	}
	return nil
}

// GetAllowUnresolvedLeaking retrieves the value of the leaf AllowUnresolvedLeaking from the NokiaConf_Configure_Router_Bgp_NextHopResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowUnresolvedLeaking is set, it can
// safely use t.GetAllowUnresolvedLeaking() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowUnresolvedLeaking == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution) GetAllowUnresolvedLeaking() bool {
	if t == nil || t.AllowUnresolvedLeaking == nil {
		return false
	}
	return *t.AllowUnresolvedLeaking
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Router_Bgp_NextHopResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// GetUseBgpRoutes retrieves the value of the leaf UseBgpRoutes from the NokiaConf_Configure_Router_Bgp_NextHopResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseBgpRoutes is set, it can
// safely use t.GetUseBgpRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseBgpRoutes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution) GetUseBgpRoutes() bool {
	if t == nil || t.UseBgpRoutes == nil {
		return false
	}
	return *t.UseBgpRoutes
}

// GetVpnFamilyPolicy retrieves the value of the leaf VpnFamilyPolicy from the NokiaConf_Configure_Router_Bgp_NextHopResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnFamilyPolicy is set, it can
// safely use t.GetVpnFamilyPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnFamilyPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution) GetVpnFamilyPolicy() string {
	if t == nil || t.VpnFamilyPolicy == nil {
		return ""
	}
	return *t.VpnFamilyPolicy
}

// GetWeightedEcmp retrieves the value of the leaf WeightedEcmp from the NokiaConf_Configure_Router_Bgp_NextHopResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WeightedEcmp is set, it can
// safely use t.GetWeightedEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WeightedEcmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution) GetWeightedEcmp() bool {
	if t == nil || t.WeightedEcmp == nil {
		return false
	}
	return *t.WeightedEcmp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_NextHopResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowUnresolvedLeaking == nil {
		var v bool = false
		t.AllowUnresolvedLeaking = &v
	}
	if t.UseBgpRoutes == nil {
		var v bool = false
		t.UseBgpRoutes = &v
	}
	if t.WeightedEcmp == nil {
		var v bool = false
		t.WeightedEcmp = &v
	}
	t.LabeledRoutes.PopulateDefaults()
	t.ShortcutTunnel.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_NextHopResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_NextHopResolution.
func (*NokiaConf_Configure_Router_Bgp_NextHopResolution) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes represents the /nokia-conf/configure/router/bgp/next-hop-resolution/labeled-routes YANG schema element.
type NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes struct {
	AllowStatic        *bool                                                                           `path:"allow-static" module:"nokia-conf"`
	PreferTransportFrr *bool                                                                           `path:"prefer-transport-frr" module:"nokia-conf"`
	RrUseRouteTable    *bool                                                                           `path:"rr-use-route-table" module:"nokia-conf"`
	TransportTunnel    *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel `path:"transport-tunnel" module:"nokia-conf"`
	UseBgpRoutes       *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_UseBgpRoutes    `path:"use-bgp-routes" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes) IsYANGGoStruct() {}

// GetOrCreateTransportTunnel retrieves the value of the TransportTunnel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes) GetOrCreateTransportTunnel() *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel {
	if t.TransportTunnel != nil {
		return t.TransportTunnel
	}
	t.TransportTunnel = &NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel{}
	return t.TransportTunnel
}

// GetOrCreateUseBgpRoutes retrieves the value of the UseBgpRoutes field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes) GetOrCreateUseBgpRoutes() *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_UseBgpRoutes {
	if t.UseBgpRoutes != nil {
		return t.UseBgpRoutes
	}
	t.UseBgpRoutes = &NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_UseBgpRoutes{}
	return t.UseBgpRoutes
}

// GetTransportTunnel returns the value of the TransportTunnel struct pointer
// from NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes. If the receiver or the field TransportTunnel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes) GetTransportTunnel() *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel {
	if t != nil && t.TransportTunnel != nil {
		return t.TransportTunnel
	}
	return nil
}

// GetUseBgpRoutes returns the value of the UseBgpRoutes struct pointer
// from NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes. If the receiver or the field UseBgpRoutes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes) GetUseBgpRoutes() *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_UseBgpRoutes {
	if t != nil && t.UseBgpRoutes != nil {
		return t.UseBgpRoutes
	}
	return nil
}

// GetAllowStatic retrieves the value of the leaf AllowStatic from the NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowStatic is set, it can
// safely use t.GetAllowStatic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowStatic == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes) GetAllowStatic() bool {
	if t == nil || t.AllowStatic == nil {
		return false
	}
	return *t.AllowStatic
}

// GetPreferTransportFrr retrieves the value of the leaf PreferTransportFrr from the NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferTransportFrr is set, it can
// safely use t.GetPreferTransportFrr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferTransportFrr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes) GetPreferTransportFrr() bool {
	if t == nil || t.PreferTransportFrr == nil {
		return false
	}
	return *t.PreferTransportFrr
}

// GetRrUseRouteTable retrieves the value of the leaf RrUseRouteTable from the NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RrUseRouteTable is set, it can
// safely use t.GetRrUseRouteTable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RrUseRouteTable == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes) GetRrUseRouteTable() bool {
	if t == nil || t.RrUseRouteTable == nil {
		return false
	}
	return *t.RrUseRouteTable
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowStatic == nil {
		var v bool = false
		t.AllowStatic = &v
	}
	if t.PreferTransportFrr == nil {
		var v bool = false
		t.PreferTransportFrr = &v
	}
	if t.RrUseRouteTable == nil {
		var v bool = false
		t.RrUseRouteTable = &v
	}
	t.TransportTunnel.PopulateDefaults()
	t.UseBgpRoutes.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes.
func (*NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel represents the /nokia-conf/configure/router/bgp/next-hop-resolution/labeled-routes/transport-tunnel YANG schema element.
type NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel struct {
	Family map[E_NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_FamilyType]*NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family `path:"family" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel) IsYANGGoStruct() {
}

// NewFamily creates a new entry in the Family list of the
// NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel) NewFamily(FamilyType E_NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_FamilyType) (*NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[E_NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_FamilyType]*NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family)
	}

	key := FamilyType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Family[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Family", key)
	}

	t.Family[key] = &NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family{
		FamilyType: FamilyType,
	}

	return t.Family[key], nil
}

// RenameFamily renames an entry in the list Family within
// the NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel) RenameFamily(oldK, newK E_NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_FamilyType) error {
	if _, ok := t.Family[newK]; ok {
		return fmt.Errorf("key %v already exists in Family", newK)
	}

	e, ok := t.Family[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Family", oldK)
	}
	e.FamilyType = newK

	t.Family[newK] = e
	delete(t.Family, oldK)
	return nil
}

// GetOrCreateFamily retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel) GetOrCreateFamily(FamilyType E_NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_FamilyType) *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family {

	key := FamilyType

	if v, ok := t.Family[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFamily(FamilyType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFamily got unexpected error: %v", err))
	}
	return v
}

// GetFamily retrieves the value with the specified key from
// the Family map field of NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel) GetFamily(FamilyType E_NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_FamilyType) *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family {

	if t == nil {
		return nil
	}

	key := FamilyType

	if lm, ok := t.Family[key]; ok {
		return lm
	}
	return nil
}

// DeleteFamily deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel) DeleteFamily(FamilyType E_NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_FamilyType) {
	key := FamilyType

	delete(t.Family, key)
}

// AppendFamily appends the supplied NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family struct to the
// list Family of NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel) AppendFamily(v *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family) error {
	key := v.FamilyType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[E_NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_FamilyType]*NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family)
	}

	if _, ok := t.Family[key]; ok {
		return fmt.Errorf("duplicate key for list Family %v", key)
	}

	t.Family[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Family {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel.
func (*NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family represents the /nokia-conf/configure/router/bgp/next-hop-resolution/labeled-routes/transport-tunnel/family YANG schema element.
type NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family struct {
	AllowFlexAlgoFallback      *bool                                                                                                   `path:"allow-flex-algo-fallback" module:"nokia-conf"`
	ApplyGroups                []string                                                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude         []string                                                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	EnforceStrictTunnelTagging *bool                                                                                                   `path:"enforce-strict-tunnel-tagging" module:"nokia-conf"`
	FamilyType                 E_NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_FamilyType      `path:"family-type" module:"nokia-conf"`
	Resolution                 E_NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_Resolution      `path:"resolution" module:"nokia-conf"`
	ResolutionFilter           *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter `path:"resolution-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family) IsYANGGoStruct() {
}

// GetOrCreateResolutionFilter retrieves the value of the ResolutionFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family) GetOrCreateResolutionFilter() *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter {
	if t.ResolutionFilter != nil {
		return t.ResolutionFilter
	}
	t.ResolutionFilter = &NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter{}
	return t.ResolutionFilter
}

// GetResolutionFilter returns the value of the ResolutionFilter struct pointer
// from NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family. If the receiver or the field ResolutionFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family) GetResolutionFilter() *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter {
	if t != nil && t.ResolutionFilter != nil {
		return t.ResolutionFilter
	}
	return nil
}

// GetAllowFlexAlgoFallback retrieves the value of the leaf AllowFlexAlgoFallback from the NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowFlexAlgoFallback is set, it can
// safely use t.GetAllowFlexAlgoFallback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowFlexAlgoFallback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family) GetAllowFlexAlgoFallback() bool {
	if t == nil || t.AllowFlexAlgoFallback == nil {
		return false
	}
	return *t.AllowFlexAlgoFallback
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnforceStrictTunnelTagging retrieves the value of the leaf EnforceStrictTunnelTagging from the NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnforceStrictTunnelTagging is set, it can
// safely use t.GetEnforceStrictTunnelTagging() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnforceStrictTunnelTagging == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family) GetEnforceStrictTunnelTagging() bool {
	if t == nil || t.EnforceStrictTunnelTagging == nil {
		return false
	}
	return *t.EnforceStrictTunnelTagging
}

// GetFamilyType retrieves the value of the leaf FamilyType from the NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FamilyType is set, it can
// safely use t.GetFamilyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FamilyType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family) GetFamilyType() E_NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_FamilyType {
	if t == nil || t.FamilyType == 0 {
		return 0
	}
	return t.FamilyType
}

// GetResolution retrieves the value of the leaf Resolution from the NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Resolution is set, it can
// safely use t.GetResolution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Resolution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family) GetResolution() E_NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_Resolution {
	if t == nil || t.Resolution == 0 {
		return NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_Resolution_filter
	}
	return t.Resolution
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowFlexAlgoFallback == nil {
		var v bool = false
		t.AllowFlexAlgoFallback = &v
	}
	if t.EnforceStrictTunnelTagging == nil {
		var v bool = false
		t.EnforceStrictTunnelTagging = &v
	}
	if t.Resolution == 0 {
		t.Resolution = NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_Resolution_filter
	}
	t.ResolutionFilter.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"family-type": t.FamilyType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family.
func (*NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter represents the /nokia-conf/configure/router/bgp/next-hop-resolution/labeled-routes/transport-tunnel/family/resolution-filter YANG schema element.
type NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter struct {
	Bgp           *bool `path:"bgp" module:"nokia-conf"`
	Ldp           *bool `path:"ldp" module:"nokia-conf"`
	MplsFwdPolicy *bool `path:"mpls-fwd-policy" module:"nokia-conf"`
	RibApi        *bool `path:"rib-api" module:"nokia-conf"`
	Rsvp          *bool `path:"rsvp" module:"nokia-conf"`
	SrIsis        *bool `path:"sr-isis" module:"nokia-conf"`
	SrOspf        *bool `path:"sr-ospf" module:"nokia-conf"`
	SrOspf3       *bool `path:"sr-ospf3" module:"nokia-conf"`
	SrPolicy      *bool `path:"sr-policy" module:"nokia-conf"`
	SrTe          *bool `path:"sr-te" module:"nokia-conf"`
	Udp           *bool `path:"udp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter) IsYANGGoStruct() {
}

// GetBgp retrieves the value of the leaf Bgp from the NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bgp is set, it can
// safely use t.GetBgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter) GetBgp() bool {
	if t == nil || t.Bgp == nil {
		return false
	}
	return *t.Bgp
}

// GetLdp retrieves the value of the leaf Ldp from the NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ldp is set, it can
// safely use t.GetLdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ldp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter) GetLdp() bool {
	if t == nil || t.Ldp == nil {
		return true
	}
	return *t.Ldp
}

// GetMplsFwdPolicy retrieves the value of the leaf MplsFwdPolicy from the NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsFwdPolicy is set, it can
// safely use t.GetMplsFwdPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsFwdPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter) GetMplsFwdPolicy() bool {
	if t == nil || t.MplsFwdPolicy == nil {
		return false
	}
	return *t.MplsFwdPolicy
}

// GetRibApi retrieves the value of the leaf RibApi from the NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RibApi is set, it can
// safely use t.GetRibApi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RibApi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter) GetRibApi() bool {
	if t == nil || t.RibApi == nil {
		return false
	}
	return *t.RibApi
}

// GetRsvp retrieves the value of the leaf Rsvp from the NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rsvp is set, it can
// safely use t.GetRsvp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rsvp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter) GetRsvp() bool {
	if t == nil || t.Rsvp == nil {
		return false
	}
	return *t.Rsvp
}

// GetSrIsis retrieves the value of the leaf SrIsis from the NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrIsis is set, it can
// safely use t.GetSrIsis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrIsis == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter) GetSrIsis() bool {
	if t == nil || t.SrIsis == nil {
		return false
	}
	return *t.SrIsis
}

// GetSrOspf retrieves the value of the leaf SrOspf from the NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrOspf is set, it can
// safely use t.GetSrOspf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrOspf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter) GetSrOspf() bool {
	if t == nil || t.SrOspf == nil {
		return false
	}
	return *t.SrOspf
}

// GetSrOspf3 retrieves the value of the leaf SrOspf3 from the NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrOspf3 is set, it can
// safely use t.GetSrOspf3() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrOspf3 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter) GetSrOspf3() bool {
	if t == nil || t.SrOspf3 == nil {
		return false
	}
	return *t.SrOspf3
}

// GetSrPolicy retrieves the value of the leaf SrPolicy from the NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrPolicy is set, it can
// safely use t.GetSrPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter) GetSrPolicy() bool {
	if t == nil || t.SrPolicy == nil {
		return false
	}
	return *t.SrPolicy
}

// GetSrTe retrieves the value of the leaf SrTe from the NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrTe is set, it can
// safely use t.GetSrTe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrTe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter) GetSrTe() bool {
	if t == nil || t.SrTe == nil {
		return false
	}
	return *t.SrTe
}

// GetUdp retrieves the value of the leaf Udp from the NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Udp is set, it can
// safely use t.GetUdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Udp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter) GetUdp() bool {
	if t == nil || t.Udp == nil {
		return false
	}
	return *t.Udp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ldp == nil {
		var v bool = true
		t.Ldp = &v
	}
	if t.MplsFwdPolicy == nil {
		var v bool = false
		t.MplsFwdPolicy = &v
	}
	if t.RibApi == nil {
		var v bool = false
		t.RibApi = &v
	}
	if t.Rsvp == nil {
		var v bool = false
		t.Rsvp = &v
	}
	if t.SrIsis == nil {
		var v bool = false
		t.SrIsis = &v
	}
	if t.SrOspf == nil {
		var v bool = false
		t.SrOspf = &v
	}
	if t.SrOspf3 == nil {
		var v bool = false
		t.SrOspf3 = &v
	}
	if t.SrPolicy == nil {
		var v bool = false
		t.SrPolicy = &v
	}
	if t.SrTe == nil {
		var v bool = false
		t.SrTe = &v
	}
	if t.Udp == nil {
		var v bool = false
		t.Udp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter.
func (*NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_UseBgpRoutes represents the /nokia-conf/configure/router/bgp/next-hop-resolution/labeled-routes/use-bgp-routes YANG schema element.
type NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_UseBgpRoutes struct {
	LabelIpv6ExplicitNull *bool `path:"label-ipv6-explicit-null" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_UseBgpRoutes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_UseBgpRoutes) IsYANGGoStruct() {
}

// GetLabelIpv6ExplicitNull retrieves the value of the leaf LabelIpv6ExplicitNull from the NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_UseBgpRoutes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6ExplicitNull is set, it can
// safely use t.GetLabelIpv6ExplicitNull() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6ExplicitNull == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_UseBgpRoutes) GetLabelIpv6ExplicitNull() bool {
	if t == nil || t.LabelIpv6ExplicitNull == nil {
		return false
	}
	return *t.LabelIpv6ExplicitNull
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_UseBgpRoutes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_UseBgpRoutes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LabelIpv6ExplicitNull == nil {
		var v bool = false
		t.LabelIpv6ExplicitNull = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_UseBgpRoutes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_UseBgpRoutes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_UseBgpRoutes) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_UseBgpRoutes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_UseBgpRoutes.
func (*NokiaConf_Configure_Router_Bgp_NextHopResolution_LabeledRoutes_UseBgpRoutes) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel represents the /nokia-conf/configure/router/bgp/next-hop-resolution/shortcut-tunnel YANG schema element.
type NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel struct {
	Family map[E_NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_FamilyType]*NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family `path:"family" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel) IsYANGGoStruct() {}

// NewFamily creates a new entry in the Family list of the
// NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel) NewFamily(FamilyType E_NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_FamilyType) (*NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[E_NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_FamilyType]*NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family)
	}

	key := FamilyType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Family[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Family", key)
	}

	t.Family[key] = &NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family{
		FamilyType: FamilyType,
	}

	return t.Family[key], nil
}

// RenameFamily renames an entry in the list Family within
// the NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel) RenameFamily(oldK, newK E_NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_FamilyType) error {
	if _, ok := t.Family[newK]; ok {
		return fmt.Errorf("key %v already exists in Family", newK)
	}

	e, ok := t.Family[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Family", oldK)
	}
	e.FamilyType = newK

	t.Family[newK] = e
	delete(t.Family, oldK)
	return nil
}

// GetOrCreateFamily retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel) GetOrCreateFamily(FamilyType E_NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_FamilyType) *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family {

	key := FamilyType

	if v, ok := t.Family[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFamily(FamilyType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFamily got unexpected error: %v", err))
	}
	return v
}

// GetFamily retrieves the value with the specified key from
// the Family map field of NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel) GetFamily(FamilyType E_NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_FamilyType) *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family {

	if t == nil {
		return nil
	}

	key := FamilyType

	if lm, ok := t.Family[key]; ok {
		return lm
	}
	return nil
}

// DeleteFamily deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel) DeleteFamily(FamilyType E_NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_FamilyType) {
	key := FamilyType

	delete(t.Family, key)
}

// AppendFamily appends the supplied NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family struct to the
// list Family of NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel) AppendFamily(v *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family) error {
	key := v.FamilyType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[E_NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_FamilyType]*NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family)
	}

	if _, ok := t.Family[key]; ok {
		return fmt.Errorf("duplicate key for list Family %v", key)
	}

	t.Family[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Family {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel.
func (*NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family represents the /nokia-conf/configure/router/bgp/next-hop-resolution/shortcut-tunnel/family YANG schema element.
type NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family struct {
	AllowFlexAlgoFallback      *bool                                                                                    `path:"allow-flex-algo-fallback" module:"nokia-conf"`
	ApplyGroups                []string                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude         []string                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	DisallowIgp                *bool                                                                                    `path:"disallow-igp" module:"nokia-conf"`
	EnforceStrictTunnelTagging *bool                                                                                    `path:"enforce-strict-tunnel-tagging" module:"nokia-conf"`
	FamilyType                 E_NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_FamilyType      `path:"family-type" module:"nokia-conf"`
	Resolution                 E_NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_Resolution      `path:"resolution" module:"nokia-conf"`
	ResolutionFilter           *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter `path:"resolution-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family) IsYANGGoStruct() {}

// GetOrCreateResolutionFilter retrieves the value of the ResolutionFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family) GetOrCreateResolutionFilter() *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter {
	if t.ResolutionFilter != nil {
		return t.ResolutionFilter
	}
	t.ResolutionFilter = &NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter{}
	return t.ResolutionFilter
}

// GetResolutionFilter returns the value of the ResolutionFilter struct pointer
// from NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family. If the receiver or the field ResolutionFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family) GetResolutionFilter() *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter {
	if t != nil && t.ResolutionFilter != nil {
		return t.ResolutionFilter
	}
	return nil
}

// GetAllowFlexAlgoFallback retrieves the value of the leaf AllowFlexAlgoFallback from the NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowFlexAlgoFallback is set, it can
// safely use t.GetAllowFlexAlgoFallback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowFlexAlgoFallback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family) GetAllowFlexAlgoFallback() bool {
	if t == nil || t.AllowFlexAlgoFallback == nil {
		return false
	}
	return *t.AllowFlexAlgoFallback
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDisallowIgp retrieves the value of the leaf DisallowIgp from the NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DisallowIgp is set, it can
// safely use t.GetDisallowIgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DisallowIgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family) GetDisallowIgp() bool {
	if t == nil || t.DisallowIgp == nil {
		return false
	}
	return *t.DisallowIgp
}

// GetEnforceStrictTunnelTagging retrieves the value of the leaf EnforceStrictTunnelTagging from the NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnforceStrictTunnelTagging is set, it can
// safely use t.GetEnforceStrictTunnelTagging() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnforceStrictTunnelTagging == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family) GetEnforceStrictTunnelTagging() bool {
	if t == nil || t.EnforceStrictTunnelTagging == nil {
		return false
	}
	return *t.EnforceStrictTunnelTagging
}

// GetFamilyType retrieves the value of the leaf FamilyType from the NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FamilyType is set, it can
// safely use t.GetFamilyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FamilyType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family) GetFamilyType() E_NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_FamilyType {
	if t == nil || t.FamilyType == 0 {
		return 0
	}
	return t.FamilyType
}

// GetResolution retrieves the value of the leaf Resolution from the NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Resolution is set, it can
// safely use t.GetResolution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Resolution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family) GetResolution() E_NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_Resolution {
	if t == nil || t.Resolution == 0 {
		return NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_Resolution_none
	}
	return t.Resolution
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowFlexAlgoFallback == nil {
		var v bool = false
		t.AllowFlexAlgoFallback = &v
	}
	if t.DisallowIgp == nil {
		var v bool = false
		t.DisallowIgp = &v
	}
	if t.EnforceStrictTunnelTagging == nil {
		var v bool = false
		t.EnforceStrictTunnelTagging = &v
	}
	if t.Resolution == 0 {
		t.Resolution = NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_Resolution_none
	}
	t.ResolutionFilter.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"family-type": t.FamilyType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family.
func (*NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter represents the /nokia-conf/configure/router/bgp/next-hop-resolution/shortcut-tunnel/family/resolution-filter YANG schema element.
type NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter struct {
	Bgp           *bool `path:"bgp" module:"nokia-conf"`
	Ldp           *bool `path:"ldp" module:"nokia-conf"`
	MplsFwdPolicy *bool `path:"mpls-fwd-policy" module:"nokia-conf"`
	RibApi        *bool `path:"rib-api" module:"nokia-conf"`
	Rsvp          *bool `path:"rsvp" module:"nokia-conf"`
	SrIsis        *bool `path:"sr-isis" module:"nokia-conf"`
	SrOspf        *bool `path:"sr-ospf" module:"nokia-conf"`
	SrOspf3       *bool `path:"sr-ospf3" module:"nokia-conf"`
	SrPolicy      *bool `path:"sr-policy" module:"nokia-conf"`
	SrTe          *bool `path:"sr-te" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter) IsYANGGoStruct() {
}

// GetBgp retrieves the value of the leaf Bgp from the NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bgp is set, it can
// safely use t.GetBgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter) GetBgp() bool {
	if t == nil || t.Bgp == nil {
		return false
	}
	return *t.Bgp
}

// GetLdp retrieves the value of the leaf Ldp from the NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ldp is set, it can
// safely use t.GetLdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ldp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter) GetLdp() bool {
	if t == nil || t.Ldp == nil {
		return false
	}
	return *t.Ldp
}

// GetMplsFwdPolicy retrieves the value of the leaf MplsFwdPolicy from the NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsFwdPolicy is set, it can
// safely use t.GetMplsFwdPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsFwdPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter) GetMplsFwdPolicy() bool {
	if t == nil || t.MplsFwdPolicy == nil {
		return false
	}
	return *t.MplsFwdPolicy
}

// GetRibApi retrieves the value of the leaf RibApi from the NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RibApi is set, it can
// safely use t.GetRibApi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RibApi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter) GetRibApi() bool {
	if t == nil || t.RibApi == nil {
		return false
	}
	return *t.RibApi
}

// GetRsvp retrieves the value of the leaf Rsvp from the NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rsvp is set, it can
// safely use t.GetRsvp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rsvp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter) GetRsvp() bool {
	if t == nil || t.Rsvp == nil {
		return false
	}
	return *t.Rsvp
}

// GetSrIsis retrieves the value of the leaf SrIsis from the NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrIsis is set, it can
// safely use t.GetSrIsis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrIsis == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter) GetSrIsis() bool {
	if t == nil || t.SrIsis == nil {
		return false
	}
	return *t.SrIsis
}

// GetSrOspf retrieves the value of the leaf SrOspf from the NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrOspf is set, it can
// safely use t.GetSrOspf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrOspf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter) GetSrOspf() bool {
	if t == nil || t.SrOspf == nil {
		return false
	}
	return *t.SrOspf
}

// GetSrOspf3 retrieves the value of the leaf SrOspf3 from the NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrOspf3 is set, it can
// safely use t.GetSrOspf3() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrOspf3 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter) GetSrOspf3() bool {
	if t == nil || t.SrOspf3 == nil {
		return false
	}
	return *t.SrOspf3
}

// GetSrPolicy retrieves the value of the leaf SrPolicy from the NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrPolicy is set, it can
// safely use t.GetSrPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter) GetSrPolicy() bool {
	if t == nil || t.SrPolicy == nil {
		return false
	}
	return *t.SrPolicy
}

// GetSrTe retrieves the value of the leaf SrTe from the NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrTe is set, it can
// safely use t.GetSrTe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrTe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter) GetSrTe() bool {
	if t == nil || t.SrTe == nil {
		return false
	}
	return *t.SrTe
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Bgp == nil {
		var v bool = false
		t.Bgp = &v
	}
	if t.Ldp == nil {
		var v bool = false
		t.Ldp = &v
	}
	if t.MplsFwdPolicy == nil {
		var v bool = false
		t.MplsFwdPolicy = &v
	}
	if t.RibApi == nil {
		var v bool = false
		t.RibApi = &v
	}
	if t.Rsvp == nil {
		var v bool = false
		t.Rsvp = &v
	}
	if t.SrIsis == nil {
		var v bool = false
		t.SrIsis = &v
	}
	if t.SrOspf == nil {
		var v bool = false
		t.SrOspf = &v
	}
	if t.SrOspf3 == nil {
		var v bool = false
		t.SrOspf3 = &v
	}
	if t.SrPolicy == nil {
		var v bool = false
		t.SrPolicy = &v
	}
	if t.SrTe == nil {
		var v bool = false
		t.SrTe = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter.
func (*NokiaConf_Configure_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_OptimalRouteReflection represents the /nokia-conf/configure/router/bgp/optimal-route-reflection YANG schema element.
type NokiaConf_Configure_Router_Bgp_OptimalRouteReflection struct {
	Location map[uint32]*NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location `path:"location" module:"nokia-conf"`
	SpfWait  *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_SpfWait             `path:"spf-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_OptimalRouteReflection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_OptimalRouteReflection) IsYANGGoStruct() {}

// NewLocation creates a new entry in the Location list of the
// NokiaConf_Configure_Router_Bgp_OptimalRouteReflection struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection) NewLocation(LocationId uint32) (*NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Location == nil {
		t.Location = make(map[uint32]*NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location)
	}

	key := LocationId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Location[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Location", key)
	}

	t.Location[key] = &NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location{
		LocationId: &LocationId,
	}

	return t.Location[key], nil
}

// RenameLocation renames an entry in the list Location within
// the NokiaConf_Configure_Router_Bgp_OptimalRouteReflection struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection) RenameLocation(oldK, newK uint32) error {
	if _, ok := t.Location[newK]; ok {
		return fmt.Errorf("key %v already exists in Location", newK)
	}

	e, ok := t.Location[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Location", oldK)
	}
	e.LocationId = &newK

	t.Location[newK] = e
	delete(t.Location, oldK)
	return nil
}

// GetOrCreateLocation retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_OptimalRouteReflection. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection) GetOrCreateLocation(LocationId uint32) *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location {

	key := LocationId

	if v, ok := t.Location[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLocation(LocationId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLocation got unexpected error: %v", err))
	}
	return v
}

// GetLocation retrieves the value with the specified key from
// the Location map field of NokiaConf_Configure_Router_Bgp_OptimalRouteReflection. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection) GetLocation(LocationId uint32) *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location {

	if t == nil {
		return nil
	}

	key := LocationId

	if lm, ok := t.Location[key]; ok {
		return lm
	}
	return nil
}

// DeleteLocation deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_OptimalRouteReflection. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection) DeleteLocation(LocationId uint32) {
	key := LocationId

	delete(t.Location, key)
}

// AppendLocation appends the supplied NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location struct to the
// list Location of NokiaConf_Configure_Router_Bgp_OptimalRouteReflection. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection) AppendLocation(v *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location) error {
	if v.LocationId == nil {
		return fmt.Errorf("invalid nil key received for LocationId")
	}

	key := *v.LocationId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Location == nil {
		t.Location = make(map[uint32]*NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location)
	}

	if _, ok := t.Location[key]; ok {
		return fmt.Errorf("duplicate key for list Location %v", key)
	}

	t.Location[key] = v
	return nil
}

// GetOrCreateSpfWait retrieves the value of the SpfWait field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection) GetOrCreateSpfWait() *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_SpfWait {
	if t.SpfWait != nil {
		return t.SpfWait
	}
	t.SpfWait = &NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_SpfWait{}
	return t.SpfWait
}

// GetSpfWait returns the value of the SpfWait struct pointer
// from NokiaConf_Configure_Router_Bgp_OptimalRouteReflection. If the receiver or the field SpfWait is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection) GetSpfWait() *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_SpfWait {
	if t != nil && t.SpfWait != nil {
		return t.SpfWait
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_OptimalRouteReflection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SpfWait.PopulateDefaults()
	for _, e := range t.Location {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_OptimalRouteReflection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_OptimalRouteReflection.
func (*NokiaConf_Configure_Router_Bgp_OptimalRouteReflection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location represents the /nokia-conf/configure/router/bgp/optimal-route-reflection/location YANG schema element.
type NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location struct {
	ApplyGroups          []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string `path:"apply-groups-exclude" module:"nokia-conf"`
	LocationId           *uint32  `path:"location-id" module:"nokia-conf"`
	PrimaryIpAddress     *string  `path:"primary-ip-address" module:"nokia-conf"`
	PrimaryIpv6Address   *string  `path:"primary-ipv6-address" module:"nokia-conf"`
	SecondaryIpAddress   *string  `path:"secondary-ip-address" module:"nokia-conf"`
	SecondaryIpv6Address *string  `path:"secondary-ipv6-address" module:"nokia-conf"`
	TertiaryIpAddress    *string  `path:"tertiary-ip-address" module:"nokia-conf"`
	TertiaryIpv6Address  *string  `path:"tertiary-ipv6-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLocationId retrieves the value of the leaf LocationId from the NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocationId is set, it can
// safely use t.GetLocationId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocationId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location) GetLocationId() uint32 {
	if t == nil || t.LocationId == nil {
		return 0
	}
	return *t.LocationId
}

// GetPrimaryIpAddress retrieves the value of the leaf PrimaryIpAddress from the NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrimaryIpAddress is set, it can
// safely use t.GetPrimaryIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrimaryIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location) GetPrimaryIpAddress() string {
	if t == nil || t.PrimaryIpAddress == nil {
		return ""
	}
	return *t.PrimaryIpAddress
}

// GetPrimaryIpv6Address retrieves the value of the leaf PrimaryIpv6Address from the NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrimaryIpv6Address is set, it can
// safely use t.GetPrimaryIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrimaryIpv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location) GetPrimaryIpv6Address() string {
	if t == nil || t.PrimaryIpv6Address == nil {
		return ""
	}
	return *t.PrimaryIpv6Address
}

// GetSecondaryIpAddress retrieves the value of the leaf SecondaryIpAddress from the NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondaryIpAddress is set, it can
// safely use t.GetSecondaryIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondaryIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location) GetSecondaryIpAddress() string {
	if t == nil || t.SecondaryIpAddress == nil {
		return ""
	}
	return *t.SecondaryIpAddress
}

// GetSecondaryIpv6Address retrieves the value of the leaf SecondaryIpv6Address from the NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondaryIpv6Address is set, it can
// safely use t.GetSecondaryIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondaryIpv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location) GetSecondaryIpv6Address() string {
	if t == nil || t.SecondaryIpv6Address == nil {
		return ""
	}
	return *t.SecondaryIpv6Address
}

// GetTertiaryIpAddress retrieves the value of the leaf TertiaryIpAddress from the NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TertiaryIpAddress is set, it can
// safely use t.GetTertiaryIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TertiaryIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location) GetTertiaryIpAddress() string {
	if t == nil || t.TertiaryIpAddress == nil {
		return ""
	}
	return *t.TertiaryIpAddress
}

// GetTertiaryIpv6Address retrieves the value of the leaf TertiaryIpv6Address from the NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TertiaryIpv6Address is set, it can
// safely use t.GetTertiaryIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TertiaryIpv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location) GetTertiaryIpv6Address() string {
	if t == nil || t.TertiaryIpv6Address == nil {
		return ""
	}
	return *t.TertiaryIpv6Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LocationId == nil {
		return nil, fmt.Errorf("nil value for key LocationId")
	}

	return map[string]interface{}{
		"location-id": *t.LocationId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location.
func (*NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_Location) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_SpfWait represents the /nokia-conf/configure/router/bgp/optimal-route-reflection/spf-wait YANG schema element.
type NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_SpfWait struct {
	InitialWait *uint32 `path:"initial-wait" module:"nokia-conf"`
	MaxWait     *uint32 `path:"max-wait" module:"nokia-conf"`
	SecondWait  *uint32 `path:"second-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_SpfWait implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_SpfWait) IsYANGGoStruct() {}

// GetInitialWait retrieves the value of the leaf InitialWait from the NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialWait is set, it can
// safely use t.GetInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_SpfWait) GetInitialWait() uint32 {
	if t == nil || t.InitialWait == nil {
		return 5
	}
	return *t.InitialWait
}

// GetMaxWait retrieves the value of the leaf MaxWait from the NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxWait is set, it can
// safely use t.GetMaxWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_SpfWait) GetMaxWait() uint32 {
	if t == nil || t.MaxWait == nil {
		return 60
	}
	return *t.MaxWait
}

// GetSecondWait retrieves the value of the leaf SecondWait from the NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondWait is set, it can
// safely use t.GetSecondWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_SpfWait) GetSecondWait() uint32 {
	if t == nil || t.SecondWait == nil {
		return 15
	}
	return *t.SecondWait
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_SpfWait
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_SpfWait) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitialWait == nil {
		var v uint32 = 5
		t.InitialWait = &v
	}
	if t.MaxWait == nil {
		var v uint32 = 60
		t.MaxWait = &v
	}
	if t.SecondWait == nil {
		var v uint32 = 15
		t.SecondWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_SpfWait) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_SpfWait"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_SpfWait) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_SpfWait) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_SpfWait.
func (*NokiaConf_Configure_Router_Bgp_OptimalRouteReflection_SpfWait) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering represents the /nokia-conf/configure/router/bgp/outbound-route-filtering YANG schema element.
type NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering struct {
	ExtendedCommunity *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity `path:"extended-community" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering) IsYANGGoStruct() {}

// GetOrCreateExtendedCommunity retrieves the value of the ExtendedCommunity field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering) GetOrCreateExtendedCommunity() *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity {
	if t.ExtendedCommunity != nil {
		return t.ExtendedCommunity
	}
	t.ExtendedCommunity = &NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity{}
	return t.ExtendedCommunity
}

// GetExtendedCommunity returns the value of the ExtendedCommunity struct pointer
// from NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering. If the receiver or the field ExtendedCommunity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering) GetExtendedCommunity() *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity {
	if t != nil && t.ExtendedCommunity != nil {
		return t.ExtendedCommunity
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ExtendedCommunity.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering.
func (*NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity represents the /nokia-conf/configure/router/bgp/outbound-route-filtering/extended-community YANG schema element.
type NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity struct {
	AcceptOrf *bool                                                                            `path:"accept-orf" module:"nokia-conf"`
	SendOrf   *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf `path:"send-orf" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity) IsYANGGoStruct() {}

// GetOrCreateSendOrf retrieves the value of the SendOrf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity) GetOrCreateSendOrf() *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf {
	if t.SendOrf != nil {
		return t.SendOrf
	}
	t.SendOrf = &NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf{}
	return t.SendOrf
}

// GetSendOrf returns the value of the SendOrf struct pointer
// from NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity. If the receiver or the field SendOrf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity) GetSendOrf() *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf {
	if t != nil && t.SendOrf != nil {
		return t.SendOrf
	}
	return nil
}

// GetAcceptOrf retrieves the value of the leaf AcceptOrf from the NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcceptOrf is set, it can
// safely use t.GetAcceptOrf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcceptOrf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity) GetAcceptOrf() bool {
	if t == nil || t.AcceptOrf == nil {
		return false
	}
	return *t.AcceptOrf
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AcceptOrf == nil {
		var v bool = false
		t.AcceptOrf = &v
	}
	t.SendOrf.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity.
func (*NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf represents the /nokia-conf/configure/router/bgp/outbound-route-filtering/extended-community/send-orf YANG schema element.
type NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf struct {
	RouteTarget map[string]*NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget `path:"route-target" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf) IsYANGGoStruct() {
}

// NewRouteTarget creates a new entry in the RouteTarget list of the
// NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf) NewRouteTarget(CommunityName string) (*NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouteTarget == nil {
		t.RouteTarget = make(map[string]*NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget)
	}

	key := CommunityName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RouteTarget[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RouteTarget", key)
	}

	t.RouteTarget[key] = &NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget{
		CommunityName: &CommunityName,
	}

	return t.RouteTarget[key], nil
}

// RenameRouteTarget renames an entry in the list RouteTarget within
// the NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf) RenameRouteTarget(oldK, newK string) error {
	if _, ok := t.RouteTarget[newK]; ok {
		return fmt.Errorf("key %v already exists in RouteTarget", newK)
	}

	e, ok := t.RouteTarget[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RouteTarget", oldK)
	}
	e.CommunityName = &newK

	t.RouteTarget[newK] = e
	delete(t.RouteTarget, oldK)
	return nil
}

// GetOrCreateRouteTarget retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf) GetOrCreateRouteTarget(CommunityName string) *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget {

	key := CommunityName

	if v, ok := t.RouteTarget[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRouteTarget(CommunityName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRouteTarget got unexpected error: %v", err))
	}
	return v
}

// GetRouteTarget retrieves the value with the specified key from
// the RouteTarget map field of NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf) GetRouteTarget(CommunityName string) *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget {

	if t == nil {
		return nil
	}

	key := CommunityName

	if lm, ok := t.RouteTarget[key]; ok {
		return lm
	}
	return nil
}

// DeleteRouteTarget deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf) DeleteRouteTarget(CommunityName string) {
	key := CommunityName

	delete(t.RouteTarget, key)
}

// AppendRouteTarget appends the supplied NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget struct to the
// list RouteTarget of NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf) AppendRouteTarget(v *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) error {
	if v.CommunityName == nil {
		return fmt.Errorf("invalid nil key received for CommunityName")
	}

	key := *v.CommunityName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouteTarget == nil {
		t.RouteTarget = make(map[string]*NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget)
	}

	if _, ok := t.RouteTarget[key]; ok {
		return fmt.Errorf("duplicate key for list RouteTarget %v", key)
	}

	t.RouteTarget[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.RouteTarget {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf.
func (*NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget represents the /nokia-conf/configure/router/bgp/outbound-route-filtering/extended-community/send-orf/route-target YANG schema element.
type NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget struct {
	CommunityName *string `path:"community-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) IsYANGGoStruct() {
}

// GetCommunityName retrieves the value of the leaf CommunityName from the NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityName is set, it can
// safely use t.GetCommunityName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) GetCommunityName() string {
	if t == nil || t.CommunityName == nil {
		return ""
	}
	return *t.CommunityName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CommunityName == nil {
		return nil, fmt.Errorf("nil value for key CommunityName")
	}

	return map[string]interface{}{
		"community-name": *t.CommunityName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget.
func (*NokiaConf_Configure_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_RapidUpdate represents the /nokia-conf/configure/router/bgp/rapid-update YANG schema element.
type NokiaConf_Configure_Router_Bgp_RapidUpdate struct {
	Evpn         *bool `path:"evpn" module:"nokia-conf"`
	L2Vpn        *bool `path:"l2-vpn" module:"nokia-conf"`
	LabelIpv4    *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6    *bool `path:"label-ipv6" module:"nokia-conf"`
	McastVpnIpv4 *bool `path:"mcast-vpn-ipv4" module:"nokia-conf"`
	McastVpnIpv6 *bool `path:"mcast-vpn-ipv6" module:"nokia-conf"`
	MdtSafi      *bool `path:"mdt-safi" module:"nokia-conf"`
	MvpnIpv4     *bool `path:"mvpn-ipv4" module:"nokia-conf"`
	MvpnIpv6     *bool `path:"mvpn-ipv6" module:"nokia-conf"`
	VpnIpv4      *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6      *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_RapidUpdate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_RapidUpdate) IsYANGGoStruct() {}

// GetEvpn retrieves the value of the leaf Evpn from the NokiaConf_Configure_Router_Bgp_RapidUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Evpn is set, it can
// safely use t.GetEvpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Evpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_RapidUpdate) GetEvpn() bool {
	if t == nil || t.Evpn == nil {
		return false
	}
	return *t.Evpn
}

// GetL2Vpn retrieves the value of the leaf L2Vpn from the NokiaConf_Configure_Router_Bgp_RapidUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2Vpn is set, it can
// safely use t.GetL2Vpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2Vpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_RapidUpdate) GetL2Vpn() bool {
	if t == nil || t.L2Vpn == nil {
		return false
	}
	return *t.L2Vpn
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Router_Bgp_RapidUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_RapidUpdate) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Router_Bgp_RapidUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_RapidUpdate) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetMcastVpnIpv4 retrieves the value of the leaf McastVpnIpv4 from the NokiaConf_Configure_Router_Bgp_RapidUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastVpnIpv4 is set, it can
// safely use t.GetMcastVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastVpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_RapidUpdate) GetMcastVpnIpv4() bool {
	if t == nil || t.McastVpnIpv4 == nil {
		return false
	}
	return *t.McastVpnIpv4
}

// GetMcastVpnIpv6 retrieves the value of the leaf McastVpnIpv6 from the NokiaConf_Configure_Router_Bgp_RapidUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastVpnIpv6 is set, it can
// safely use t.GetMcastVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastVpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_RapidUpdate) GetMcastVpnIpv6() bool {
	if t == nil || t.McastVpnIpv6 == nil {
		return false
	}
	return *t.McastVpnIpv6
}

// GetMdtSafi retrieves the value of the leaf MdtSafi from the NokiaConf_Configure_Router_Bgp_RapidUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdtSafi is set, it can
// safely use t.GetMdtSafi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdtSafi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_RapidUpdate) GetMdtSafi() bool {
	if t == nil || t.MdtSafi == nil {
		return false
	}
	return *t.MdtSafi
}

// GetMvpnIpv4 retrieves the value of the leaf MvpnIpv4 from the NokiaConf_Configure_Router_Bgp_RapidUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MvpnIpv4 is set, it can
// safely use t.GetMvpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MvpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_RapidUpdate) GetMvpnIpv4() bool {
	if t == nil || t.MvpnIpv4 == nil {
		return false
	}
	return *t.MvpnIpv4
}

// GetMvpnIpv6 retrieves the value of the leaf MvpnIpv6 from the NokiaConf_Configure_Router_Bgp_RapidUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MvpnIpv6 is set, it can
// safely use t.GetMvpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MvpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_RapidUpdate) GetMvpnIpv6() bool {
	if t == nil || t.MvpnIpv6 == nil {
		return false
	}
	return *t.MvpnIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Router_Bgp_RapidUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_RapidUpdate) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Router_Bgp_RapidUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_RapidUpdate) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_RapidUpdate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_RapidUpdate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Evpn == nil {
		var v bool = false
		t.Evpn = &v
	}
	if t.L2Vpn == nil {
		var v bool = false
		t.L2Vpn = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.McastVpnIpv4 == nil {
		var v bool = false
		t.McastVpnIpv4 = &v
	}
	if t.McastVpnIpv6 == nil {
		var v bool = false
		t.McastVpnIpv6 = &v
	}
	if t.MdtSafi == nil {
		var v bool = false
		t.MdtSafi = &v
	}
	if t.MvpnIpv4 == nil {
		var v bool = false
		t.MvpnIpv4 = &v
	}
	if t.MvpnIpv6 == nil {
		var v bool = false
		t.MvpnIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_RapidUpdate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_RapidUpdate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_RapidUpdate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_RapidUpdate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_RapidUpdate.
func (*NokiaConf_Configure_Router_Bgp_RapidUpdate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_RemovePrivate represents the /nokia-conf/configure/router/bgp/remove-private YANG schema element.
type NokiaConf_Configure_Router_Bgp_RemovePrivate struct {
	Limited    *bool `path:"limited" module:"nokia-conf"`
	Replace    *bool `path:"replace" module:"nokia-conf"`
	SkipPeerAs *bool `path:"skip-peer-as" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_RemovePrivate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_RemovePrivate) IsYANGGoStruct() {}

// GetLimited retrieves the value of the leaf Limited from the NokiaConf_Configure_Router_Bgp_RemovePrivate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Limited is set, it can
// safely use t.GetLimited() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Limited == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_RemovePrivate) GetLimited() bool {
	if t == nil || t.Limited == nil {
		return false
	}
	return *t.Limited
}

// GetReplace retrieves the value of the leaf Replace from the NokiaConf_Configure_Router_Bgp_RemovePrivate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Replace is set, it can
// safely use t.GetReplace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Replace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_RemovePrivate) GetReplace() bool {
	if t == nil || t.Replace == nil {
		return false
	}
	return *t.Replace
}

// GetSkipPeerAs retrieves the value of the leaf SkipPeerAs from the NokiaConf_Configure_Router_Bgp_RemovePrivate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SkipPeerAs is set, it can
// safely use t.GetSkipPeerAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SkipPeerAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_RemovePrivate) GetSkipPeerAs() bool {
	if t == nil || t.SkipPeerAs == nil {
		return false
	}
	return *t.SkipPeerAs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_RemovePrivate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_RemovePrivate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Limited == nil {
		var v bool = false
		t.Limited = &v
	}
	if t.Replace == nil {
		var v bool = false
		t.Replace = &v
	}
	if t.SkipPeerAs == nil {
		var v bool = false
		t.SkipPeerAs = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_RemovePrivate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_RemovePrivate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_RemovePrivate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_RemovePrivate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_RemovePrivate.
func (*NokiaConf_Configure_Router_Bgp_RemovePrivate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_RibManagement represents the /nokia-conf/configure/router/bgp/rib-management YANG schema element.
type NokiaConf_Configure_Router_Bgp_RibManagement struct {
	Ipv4      *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4      `path:"ipv4" module:"nokia-conf"`
	Ipv6      *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6      `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4 `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6 `path:"label-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_RibManagement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_RibManagement) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement) GetOrCreateIpv4() *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement) GetOrCreateIpv6() *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6{}
	return t.Ipv6
}

// GetOrCreateLabelIpv4 retrieves the value of the LabelIpv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement) GetOrCreateLabelIpv4() *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4 {
	if t.LabelIpv4 != nil {
		return t.LabelIpv4
	}
	t.LabelIpv4 = &NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4{}
	return t.LabelIpv4
}

// GetOrCreateLabelIpv6 retrieves the value of the LabelIpv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement) GetOrCreateLabelIpv6() *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6 {
	if t.LabelIpv6 != nil {
		return t.LabelIpv6
	}
	t.LabelIpv6 = &NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6{}
	return t.LabelIpv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Router_Bgp_RibManagement. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement) GetIpv4() *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Router_Bgp_RibManagement. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement) GetIpv6() *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetLabelIpv4 returns the value of the LabelIpv4 struct pointer
// from NokiaConf_Configure_Router_Bgp_RibManagement. If the receiver or the field LabelIpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement) GetLabelIpv4() *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4 {
	if t != nil && t.LabelIpv4 != nil {
		return t.LabelIpv4
	}
	return nil
}

// GetLabelIpv6 returns the value of the LabelIpv6 struct pointer
// from NokiaConf_Configure_Router_Bgp_RibManagement. If the receiver or the field LabelIpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement) GetLabelIpv6() *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6 {
	if t != nil && t.LabelIpv6 != nil {
		return t.LabelIpv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_RibManagement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	t.LabelIpv4.PopulateDefaults()
	t.LabelIpv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_RibManagement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_RibManagement.
func (*NokiaConf_Configure_Router_Bgp_RibManagement) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4 represents the /nokia-conf/configure/router/bgp/rib-management/ipv4 YANG schema element.
type NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4 struct {
	LeakImport       *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_LeakImport       `path:"leak-import" module:"nokia-conf"`
	RouteTableImport *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_RouteTableImport `path:"route-table-import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4) IsYANGGoStruct() {}

// GetOrCreateLeakImport retrieves the value of the LeakImport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4) GetOrCreateLeakImport() *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_LeakImport {
	if t.LeakImport != nil {
		return t.LeakImport
	}
	t.LeakImport = &NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_LeakImport{}
	return t.LeakImport
}

// GetOrCreateRouteTableImport retrieves the value of the RouteTableImport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4) GetOrCreateRouteTableImport() *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_RouteTableImport {
	if t.RouteTableImport != nil {
		return t.RouteTableImport
	}
	t.RouteTableImport = &NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_RouteTableImport{}
	return t.RouteTableImport
}

// GetLeakImport returns the value of the LeakImport struct pointer
// from NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4. If the receiver or the field LeakImport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4) GetLeakImport() *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_LeakImport {
	if t != nil && t.LeakImport != nil {
		return t.LeakImport
	}
	return nil
}

// GetRouteTableImport returns the value of the RouteTableImport struct pointer
// from NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4. If the receiver or the field RouteTableImport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4) GetRouteTableImport() *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_RouteTableImport {
	if t != nil && t.RouteTableImport != nil {
		return t.RouteTableImport
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LeakImport.PopulateDefaults()
	t.RouteTableImport.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4.
func (*NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_LeakImport represents the /nokia-conf/configure/router/bgp/rib-management/ipv4/leak-import YANG schema element.
type NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_LeakImport struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Policy             []string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_LeakImport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_LeakImport) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_LeakImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_LeakImport) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_LeakImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_LeakImport) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_LeakImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_LeakImport) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_LeakImport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_LeakImport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_LeakImport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_LeakImport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_LeakImport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_LeakImport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_LeakImport.
func (*NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_LeakImport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_RouteTableImport represents the /nokia-conf/configure/router/bgp/rib-management/ipv4/route-table-import YANG schema element.
type NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_RouteTableImport struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	PolicyName         *string  `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_RouteTableImport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_RouteTableImport) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_RouteTableImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_RouteTableImport) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_RouteTableImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_RouteTableImport) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_RouteTableImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_RouteTableImport) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_RouteTableImport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_RouteTableImport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_RouteTableImport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_RouteTableImport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_RouteTableImport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_RouteTableImport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_RouteTableImport.
func (*NokiaConf_Configure_Router_Bgp_RibManagement_Ipv4_RouteTableImport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6 represents the /nokia-conf/configure/router/bgp/rib-management/ipv6 YANG schema element.
type NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6 struct {
	LeakImport       *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_LeakImport       `path:"leak-import" module:"nokia-conf"`
	RouteTableImport *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_RouteTableImport `path:"route-table-import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6) IsYANGGoStruct() {}

// GetOrCreateLeakImport retrieves the value of the LeakImport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6) GetOrCreateLeakImport() *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_LeakImport {
	if t.LeakImport != nil {
		return t.LeakImport
	}
	t.LeakImport = &NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_LeakImport{}
	return t.LeakImport
}

// GetOrCreateRouteTableImport retrieves the value of the RouteTableImport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6) GetOrCreateRouteTableImport() *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_RouteTableImport {
	if t.RouteTableImport != nil {
		return t.RouteTableImport
	}
	t.RouteTableImport = &NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_RouteTableImport{}
	return t.RouteTableImport
}

// GetLeakImport returns the value of the LeakImport struct pointer
// from NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6. If the receiver or the field LeakImport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6) GetLeakImport() *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_LeakImport {
	if t != nil && t.LeakImport != nil {
		return t.LeakImport
	}
	return nil
}

// GetRouteTableImport returns the value of the RouteTableImport struct pointer
// from NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6. If the receiver or the field RouteTableImport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6) GetRouteTableImport() *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_RouteTableImport {
	if t != nil && t.RouteTableImport != nil {
		return t.RouteTableImport
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LeakImport.PopulateDefaults()
	t.RouteTableImport.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6.
func (*NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_LeakImport represents the /nokia-conf/configure/router/bgp/rib-management/ipv6/leak-import YANG schema element.
type NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_LeakImport struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Policy             []string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_LeakImport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_LeakImport) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_LeakImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_LeakImport) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_LeakImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_LeakImport) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_LeakImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_LeakImport) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_LeakImport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_LeakImport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_LeakImport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_LeakImport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_LeakImport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_LeakImport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_LeakImport.
func (*NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_LeakImport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_RouteTableImport represents the /nokia-conf/configure/router/bgp/rib-management/ipv6/route-table-import YANG schema element.
type NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_RouteTableImport struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	PolicyName         *string  `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_RouteTableImport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_RouteTableImport) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_RouteTableImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_RouteTableImport) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_RouteTableImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_RouteTableImport) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_RouteTableImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_RouteTableImport) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_RouteTableImport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_RouteTableImport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_RouteTableImport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_RouteTableImport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_RouteTableImport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_RouteTableImport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_RouteTableImport.
func (*NokiaConf_Configure_Router_Bgp_RibManagement_Ipv6_RouteTableImport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4 represents the /nokia-conf/configure/router/bgp/rib-management/label-ipv4 YANG schema element.
type NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4 struct {
	LeakImport       *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_LeakImport       `path:"leak-import" module:"nokia-conf"`
	RouteTableImport *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport `path:"route-table-import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4) IsYANGGoStruct() {}

// GetOrCreateLeakImport retrieves the value of the LeakImport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4) GetOrCreateLeakImport() *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_LeakImport {
	if t.LeakImport != nil {
		return t.LeakImport
	}
	t.LeakImport = &NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_LeakImport{}
	return t.LeakImport
}

// GetOrCreateRouteTableImport retrieves the value of the RouteTableImport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4) GetOrCreateRouteTableImport() *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport {
	if t.RouteTableImport != nil {
		return t.RouteTableImport
	}
	t.RouteTableImport = &NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport{}
	return t.RouteTableImport
}

// GetLeakImport returns the value of the LeakImport struct pointer
// from NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4. If the receiver or the field LeakImport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4) GetLeakImport() *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_LeakImport {
	if t != nil && t.LeakImport != nil {
		return t.LeakImport
	}
	return nil
}

// GetRouteTableImport returns the value of the RouteTableImport struct pointer
// from NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4. If the receiver or the field RouteTableImport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4) GetRouteTableImport() *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport {
	if t != nil && t.RouteTableImport != nil {
		return t.RouteTableImport
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LeakImport.PopulateDefaults()
	t.RouteTableImport.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4.
func (*NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_LeakImport represents the /nokia-conf/configure/router/bgp/rib-management/label-ipv4/leak-import YANG schema element.
type NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_LeakImport struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Policy             []string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_LeakImport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_LeakImport) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_LeakImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_LeakImport) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_LeakImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_LeakImport) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_LeakImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_LeakImport) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_LeakImport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_LeakImport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_LeakImport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_LeakImport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_LeakImport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_LeakImport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_LeakImport.
func (*NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_LeakImport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport represents the /nokia-conf/configure/router/bgp/rib-management/label-ipv4/route-table-import YANG schema element.
type NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	PolicyName         *string  `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport.
func (*NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6 represents the /nokia-conf/configure/router/bgp/rib-management/label-ipv6 YANG schema element.
type NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6 struct {
	RouteTableImport *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport `path:"route-table-import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6) IsYANGGoStruct() {}

// GetOrCreateRouteTableImport retrieves the value of the RouteTableImport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6) GetOrCreateRouteTableImport() *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport {
	if t.RouteTableImport != nil {
		return t.RouteTableImport
	}
	t.RouteTableImport = &NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport{}
	return t.RouteTableImport
}

// GetRouteTableImport returns the value of the RouteTableImport struct pointer
// from NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6. If the receiver or the field RouteTableImport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6) GetRouteTableImport() *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport {
	if t != nil && t.RouteTableImport != nil {
		return t.RouteTableImport
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RouteTableImport.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6.
func (*NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport represents the /nokia-conf/configure/router/bgp/rib-management/label-ipv6/route-table-import YANG schema element.
type NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	PolicyName         *string  `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport.
func (*NokiaConf_Configure_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_RouteTargetList represents the /nokia-conf/configure/router/bgp/route-target-list YANG schema element.
type NokiaConf_Configure_Router_Bgp_RouteTargetList struct {
	CommunityName *string `path:"community-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_RouteTargetList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_RouteTargetList) IsYANGGoStruct() {}

// GetCommunityName retrieves the value of the leaf CommunityName from the NokiaConf_Configure_Router_Bgp_RouteTargetList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityName is set, it can
// safely use t.GetCommunityName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_RouteTargetList) GetCommunityName() string {
	if t == nil || t.CommunityName == nil {
		return ""
	}
	return *t.CommunityName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_RouteTargetList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_RouteTargetList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Bgp_RouteTargetList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Bgp_RouteTargetList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CommunityName == nil {
		return nil, fmt.Errorf("nil value for key CommunityName")
	}

	return map[string]interface{}{
		"community-name": *t.CommunityName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_RouteTargetList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_RouteTargetList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_RouteTargetList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_RouteTargetList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_RouteTargetList.
func (*NokiaConf_Configure_Router_Bgp_RouteTargetList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_SegmentRouting represents the /nokia-conf/configure/router/bgp/segment-routing YANG schema element.
type NokiaConf_Configure_Router_Bgp_SegmentRouting struct {
	AdminState         E_NokiaTypesSros_AdminState                                   `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	PrefixSidRange     *NokiaConf_Configure_Router_Bgp_SegmentRouting_PrefixSidRange `path:"prefix-sid-range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_SegmentRouting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_SegmentRouting) IsYANGGoStruct() {}

// GetOrCreatePrefixSidRange retrieves the value of the PrefixSidRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRouting) GetOrCreatePrefixSidRange() *NokiaConf_Configure_Router_Bgp_SegmentRouting_PrefixSidRange {
	if t.PrefixSidRange != nil {
		return t.PrefixSidRange
	}
	t.PrefixSidRange = &NokiaConf_Configure_Router_Bgp_SegmentRouting_PrefixSidRange{}
	return t.PrefixSidRange
}

// GetPrefixSidRange returns the value of the PrefixSidRange struct pointer
// from NokiaConf_Configure_Router_Bgp_SegmentRouting. If the receiver or the field PrefixSidRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRouting) GetPrefixSidRange() *NokiaConf_Configure_Router_Bgp_SegmentRouting_PrefixSidRange {
	if t != nil && t.PrefixSidRange != nil {
		return t.PrefixSidRange
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Bgp_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRouting) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bgp_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRouting) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bgp_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRouting) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_SegmentRouting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRouting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.PrefixSidRange.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRouting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_SegmentRouting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRouting) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRouting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_SegmentRouting.
func (*NokiaConf_Configure_Router_Bgp_SegmentRouting) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_SegmentRoutingV6 represents the /nokia-conf/configure/router/bgp/segment-routing-v6 YANG schema element.
type NokiaConf_Configure_Router_Bgp_SegmentRoutingV6 struct {
	Family        map[E_NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family_FamilyType]*NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family `path:"family" module:"nokia-conf"`
	SourceAddress *string                                                                                                                         `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_SegmentRoutingV6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_SegmentRoutingV6) IsYANGGoStruct() {}

// NewFamily creates a new entry in the Family list of the
// NokiaConf_Configure_Router_Bgp_SegmentRoutingV6 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRoutingV6) NewFamily(FamilyType E_NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family_FamilyType) (*NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[E_NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family_FamilyType]*NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family)
	}

	key := FamilyType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Family[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Family", key)
	}

	t.Family[key] = &NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family{
		FamilyType: FamilyType,
	}

	return t.Family[key], nil
}

// RenameFamily renames an entry in the list Family within
// the NokiaConf_Configure_Router_Bgp_SegmentRoutingV6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRoutingV6) RenameFamily(oldK, newK E_NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family_FamilyType) error {
	if _, ok := t.Family[newK]; ok {
		return fmt.Errorf("key %v already exists in Family", newK)
	}

	e, ok := t.Family[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Family", oldK)
	}
	e.FamilyType = newK

	t.Family[newK] = e
	delete(t.Family, oldK)
	return nil
}

// GetOrCreateFamily retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_SegmentRoutingV6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRoutingV6) GetOrCreateFamily(FamilyType E_NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family_FamilyType) *NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family {

	key := FamilyType

	if v, ok := t.Family[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFamily(FamilyType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFamily got unexpected error: %v", err))
	}
	return v
}

// GetFamily retrieves the value with the specified key from
// the Family map field of NokiaConf_Configure_Router_Bgp_SegmentRoutingV6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRoutingV6) GetFamily(FamilyType E_NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family_FamilyType) *NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family {

	if t == nil {
		return nil
	}

	key := FamilyType

	if lm, ok := t.Family[key]; ok {
		return lm
	}
	return nil
}

// DeleteFamily deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bgp_SegmentRoutingV6. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRoutingV6) DeleteFamily(FamilyType E_NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family_FamilyType) {
	key := FamilyType

	delete(t.Family, key)
}

// AppendFamily appends the supplied NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family struct to the
// list Family of NokiaConf_Configure_Router_Bgp_SegmentRoutingV6. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRoutingV6) AppendFamily(v *NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family) error {
	key := v.FamilyType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[E_NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family_FamilyType]*NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family)
	}

	if _, ok := t.Family[key]; ok {
		return fmt.Errorf("duplicate key for list Family %v", key)
	}

	t.Family[key] = v
	return nil
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Router_Bgp_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRoutingV6) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_SegmentRoutingV6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRoutingV6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Family {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRoutingV6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_SegmentRoutingV6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRoutingV6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRoutingV6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_SegmentRoutingV6.
func (*NokiaConf_Configure_Router_Bgp_SegmentRoutingV6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family represents the /nokia-conf/configure/router/bgp/segment-routing-v6/family YANG schema element.
type NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family struct {
	AddSrv6Tlvs            *NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family_AddSrv6Tlvs `path:"add-srv6-tlvs" module:"nokia-conf" yangPresence:"true"`
	ApplyGroups            []string                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	FamilyType             E_NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family_FamilyType `path:"family-type" module:"nokia-conf"`
	IgnoreReceivedSrv6Tlvs *bool                                                               `path:"ignore-received-srv6-tlvs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family) IsYANGGoStruct() {}

// GetOrCreateAddSrv6Tlvs retrieves the value of the AddSrv6Tlvs field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family) GetOrCreateAddSrv6Tlvs() *NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family_AddSrv6Tlvs {
	if t.AddSrv6Tlvs != nil {
		return t.AddSrv6Tlvs
	}
	t.AddSrv6Tlvs = &NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family_AddSrv6Tlvs{}
	return t.AddSrv6Tlvs
}

// GetAddSrv6Tlvs returns the value of the AddSrv6Tlvs struct pointer
// from NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family. If the receiver or the field AddSrv6Tlvs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family) GetAddSrv6Tlvs() *NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family_AddSrv6Tlvs {
	if t != nil && t.AddSrv6Tlvs != nil {
		return t.AddSrv6Tlvs
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFamilyType retrieves the value of the leaf FamilyType from the NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FamilyType is set, it can
// safely use t.GetFamilyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FamilyType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family) GetFamilyType() E_NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family_FamilyType {
	if t == nil || t.FamilyType == 0 {
		return 0
	}
	return t.FamilyType
}

// GetIgnoreReceivedSrv6Tlvs retrieves the value of the leaf IgnoreReceivedSrv6Tlvs from the NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreReceivedSrv6Tlvs is set, it can
// safely use t.GetIgnoreReceivedSrv6Tlvs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreReceivedSrv6Tlvs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family) GetIgnoreReceivedSrv6Tlvs() bool {
	if t == nil || t.IgnoreReceivedSrv6Tlvs == nil {
		return true
	}
	return *t.IgnoreReceivedSrv6Tlvs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IgnoreReceivedSrv6Tlvs == nil {
		var v bool = true
		t.IgnoreReceivedSrv6Tlvs = &v
	}
	t.AddSrv6Tlvs.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"family-type": t.FamilyType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family.
func (*NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family_AddSrv6Tlvs represents the /nokia-conf/configure/router/bgp/segment-routing-v6/family/add-srv6-tlvs YANG schema element.
type NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family_AddSrv6Tlvs struct {
	LocatorName *string `path:"locator-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family_AddSrv6Tlvs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family_AddSrv6Tlvs) IsYANGGoStruct() {}

// GetLocatorName retrieves the value of the leaf LocatorName from the NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family_AddSrv6Tlvs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocatorName is set, it can
// safely use t.GetLocatorName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocatorName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family_AddSrv6Tlvs) GetLocatorName() string {
	if t == nil || t.LocatorName == nil {
		return ""
	}
	return *t.LocatorName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family_AddSrv6Tlvs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family_AddSrv6Tlvs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family_AddSrv6Tlvs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family_AddSrv6Tlvs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family_AddSrv6Tlvs) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family_AddSrv6Tlvs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family_AddSrv6Tlvs.
func (*NokiaConf_Configure_Router_Bgp_SegmentRoutingV6_Family_AddSrv6Tlvs) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_SegmentRouting_PrefixSidRange represents the /nokia-conf/configure/router/bgp/segment-routing/prefix-sid-range YANG schema element.
type NokiaConf_Configure_Router_Bgp_SegmentRouting_PrefixSidRange struct {
	Global     YANGEmpty `path:"global" module:"nokia-conf"`
	MaxIndex   *uint32   `path:"max-index" module:"nokia-conf"`
	StartLabel *uint32   `path:"start-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_SegmentRouting_PrefixSidRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_SegmentRouting_PrefixSidRange) IsYANGGoStruct() {}

// GetGlobal retrieves the value of the leaf Global from the NokiaConf_Configure_Router_Bgp_SegmentRouting_PrefixSidRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Global is set, it can
// safely use t.GetGlobal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Global == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRouting_PrefixSidRange) GetGlobal() YANGEmpty {
	if t == nil || t.Global == false {
		return false
	}
	return t.Global
}

// GetMaxIndex retrieves the value of the leaf MaxIndex from the NokiaConf_Configure_Router_Bgp_SegmentRouting_PrefixSidRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxIndex is set, it can
// safely use t.GetMaxIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRouting_PrefixSidRange) GetMaxIndex() uint32 {
	if t == nil || t.MaxIndex == nil {
		return 1
	}
	return *t.MaxIndex
}

// GetStartLabel retrieves the value of the leaf StartLabel from the NokiaConf_Configure_Router_Bgp_SegmentRouting_PrefixSidRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartLabel is set, it can
// safely use t.GetStartLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRouting_PrefixSidRange) GetStartLabel() uint32 {
	if t == nil || t.StartLabel == nil {
		return 0
	}
	return *t.StartLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_SegmentRouting_PrefixSidRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRouting_PrefixSidRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxIndex == nil {
		var v uint32 = 1
		t.MaxIndex = &v
	}
	if t.StartLabel == nil {
		var v uint32 = 0
		t.StartLabel = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRouting_PrefixSidRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_SegmentRouting_PrefixSidRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRouting_PrefixSidRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_SegmentRouting_PrefixSidRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_SegmentRouting_PrefixSidRange.
func (*NokiaConf_Configure_Router_Bgp_SegmentRouting_PrefixSidRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_SendCommunities represents the /nokia-conf/configure/router/bgp/send-communities YANG schema element.
type NokiaConf_Configure_Router_Bgp_SendCommunities struct {
	Extended *bool `path:"extended" module:"nokia-conf"`
	Large    *bool `path:"large" module:"nokia-conf"`
	Standard *bool `path:"standard" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_SendCommunities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_SendCommunities) IsYANGGoStruct() {}

// GetExtended retrieves the value of the leaf Extended from the NokiaConf_Configure_Router_Bgp_SendCommunities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_SendCommunities) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return true
	}
	return *t.Extended
}

// GetLarge retrieves the value of the leaf Large from the NokiaConf_Configure_Router_Bgp_SendCommunities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Large is set, it can
// safely use t.GetLarge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Large == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_SendCommunities) GetLarge() bool {
	if t == nil || t.Large == nil {
		return true
	}
	return *t.Large
}

// GetStandard retrieves the value of the leaf Standard from the NokiaConf_Configure_Router_Bgp_SendCommunities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Standard is set, it can
// safely use t.GetStandard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Standard == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_SendCommunities) GetStandard() bool {
	if t == nil || t.Standard == nil {
		return true
	}
	return *t.Standard
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_SendCommunities
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_SendCommunities) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Extended == nil {
		var v bool = true
		t.Extended = &v
	}
	if t.Large == nil {
		var v bool = true
		t.Large = &v
	}
	if t.Standard == nil {
		var v bool = true
		t.Standard = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_SendCommunities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_SendCommunities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_SendCommunities) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_SendCommunities) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_SendCommunities.
func (*NokiaConf_Configure_Router_Bgp_SendCommunities) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bgp_SendDefault represents the /nokia-conf/configure/router/bgp/send-default YANG schema element.
type NokiaConf_Configure_Router_Bgp_SendDefault struct {
	ExportPolicy *string `path:"export-policy" module:"nokia-conf"`
	Ipv4         *bool   `path:"ipv4" module:"nokia-conf"`
	Ipv6         *bool   `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bgp_SendDefault implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bgp_SendDefault) IsYANGGoStruct() {}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Router_Bgp_SendDefault
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_SendDefault) GetExportPolicy() string {
	if t == nil || t.ExportPolicy == nil {
		return ""
	}
	return *t.ExportPolicy
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Router_Bgp_SendDefault
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_SendDefault) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Router_Bgp_SendDefault
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bgp_SendDefault) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bgp_SendDefault
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bgp_SendDefault) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_SendDefault) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bgp_SendDefault"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bgp_SendDefault) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bgp_SendDefault) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bgp_SendDefault.
func (*NokiaConf_Configure_Router_Bgp_SendDefault) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bier represents the /nokia-conf/configure/router/bier YANG schema element.
type NokiaConf_Configure_Router_Bier struct {
	AdminState         E_NokiaTypesSros_AdminState                          `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	BfdLiveness        []E_NokiaConf_Configure_Router_Bier_BfdLiveness      `path:"bfd-liveness" module:"nokia-conf"`
	FastReroute        *bool                                                `path:"fast-reroute" module:"nokia-conf"`
	Template           map[string]*NokiaConf_Configure_Router_Bier_Template `path:"template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bier) IsYANGGoStruct() {}

// NewTemplate creates a new entry in the Template list of the
// NokiaConf_Configure_Router_Bier struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Bier) NewTemplate(TemplateName string) (*NokiaConf_Configure_Router_Bier_Template, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Template == nil {
		t.Template = make(map[string]*NokiaConf_Configure_Router_Bier_Template)
	}

	key := TemplateName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Template[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Template", key)
	}

	t.Template[key] = &NokiaConf_Configure_Router_Bier_Template{
		TemplateName: &TemplateName,
	}

	return t.Template[key], nil
}

// RenameTemplate renames an entry in the list Template within
// the NokiaConf_Configure_Router_Bier struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Bier) RenameTemplate(oldK, newK string) error {
	if _, ok := t.Template[newK]; ok {
		return fmt.Errorf("key %v already exists in Template", newK)
	}

	e, ok := t.Template[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Template", oldK)
	}
	e.TemplateName = &newK

	t.Template[newK] = e
	delete(t.Template, oldK)
	return nil
}

// GetOrCreateTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bier. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Bier) GetOrCreateTemplate(TemplateName string) *NokiaConf_Configure_Router_Bier_Template {

	key := TemplateName

	if v, ok := t.Template[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTemplate(TemplateName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTemplate got unexpected error: %v", err))
	}
	return v
}

// GetTemplate retrieves the value with the specified key from
// the Template map field of NokiaConf_Configure_Router_Bier. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Bier) GetTemplate(TemplateName string) *NokiaConf_Configure_Router_Bier_Template {

	if t == nil {
		return nil
	}

	key := TemplateName

	if lm, ok := t.Template[key]; ok {
		return lm
	}
	return nil
}

// DeleteTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bier. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Bier) DeleteTemplate(TemplateName string) {
	key := TemplateName

	delete(t.Template, key)
}

// AppendTemplate appends the supplied NokiaConf_Configure_Router_Bier_Template struct to the
// list Template of NokiaConf_Configure_Router_Bier. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Bier_Template already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Bier) AppendTemplate(v *NokiaConf_Configure_Router_Bier_Template) error {
	if v.TemplateName == nil {
		return fmt.Errorf("invalid nil key received for TemplateName")
	}

	key := *v.TemplateName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Template == nil {
		t.Template = make(map[string]*NokiaConf_Configure_Router_Bier_Template)
	}

	if _, ok := t.Template[key]; ok {
		return fmt.Errorf("duplicate key for list Template %v", key)
	}

	t.Template[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Bier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bier) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bier) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bier) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Router_Bier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bier) GetBfdLiveness() []E_NokiaConf_Configure_Router_Bier_BfdLiveness {
	if t == nil || t.BfdLiveness == nil {
		return nil
	}
	return t.BfdLiveness
}

// GetFastReroute retrieves the value of the leaf FastReroute from the NokiaConf_Configure_Router_Bier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastReroute is set, it can
// safely use t.GetFastReroute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastReroute == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bier) GetFastReroute() bool {
	if t == nil || t.FastReroute == nil {
		return false
	}
	return *t.FastReroute
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.FastReroute == nil {
		var v bool = false
		t.FastReroute = &v
	}
	for _, e := range t.Template {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bier) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bier.
func (*NokiaConf_Configure_Router_Bier) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bier_Template represents the /nokia-conf/configure/router/bier/template YANG schema element.
type NokiaConf_Configure_Router_Bier_Template struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                                    `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	SubDomain          map[NokiaConf_Configure_Router_Bier_Template_SubDomain_Key]*NokiaConf_Configure_Router_Bier_Template_SubDomain `path:"sub-domain" module:"nokia-conf"`
	TemplateName       *string                                                                                                        `path:"template-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bier_Template implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bier_Template) IsYANGGoStruct() {}

// NokiaConf_Configure_Router_Bier_Template_SubDomain_Key represents the key for list SubDomain of element /nokia-conf/configure/router/bier/template.
type NokiaConf_Configure_Router_Bier_Template_SubDomain_Key struct {
	Start uint32 `path:"start"`
	End   uint32 `path:"end"`
}

// NewSubDomain creates a new entry in the SubDomain list of the
// NokiaConf_Configure_Router_Bier_Template struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Bier_Template) NewSubDomain(Start uint32, End uint32) (*NokiaConf_Configure_Router_Bier_Template_SubDomain, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SubDomain == nil {
		t.SubDomain = make(map[NokiaConf_Configure_Router_Bier_Template_SubDomain_Key]*NokiaConf_Configure_Router_Bier_Template_SubDomain)
	}

	key := NokiaConf_Configure_Router_Bier_Template_SubDomain_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SubDomain[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SubDomain", key)
	}

	t.SubDomain[key] = &NokiaConf_Configure_Router_Bier_Template_SubDomain{
		Start: &Start,
		End:   &End,
	}

	return t.SubDomain[key], nil
}

// RenameSubDomain renames an entry in the list SubDomain within
// the NokiaConf_Configure_Router_Bier_Template struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Bier_Template) RenameSubDomain(oldK, newK NokiaConf_Configure_Router_Bier_Template_SubDomain_Key) error {
	if _, ok := t.SubDomain[newK]; ok {
		return fmt.Errorf("key %v already exists in SubDomain", newK)
	}

	e, ok := t.SubDomain[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SubDomain", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.SubDomain[newK] = e
	delete(t.SubDomain, oldK)
	return nil
}

// GetOrCreateSubDomain retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bier_Template. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Bier_Template) GetOrCreateSubDomain(Start uint32, End uint32) *NokiaConf_Configure_Router_Bier_Template_SubDomain {

	key := NokiaConf_Configure_Router_Bier_Template_SubDomain_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.SubDomain[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubDomain(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubDomain got unexpected error: %v", err))
	}
	return v
}

// GetSubDomain retrieves the value with the specified key from
// the SubDomain map field of NokiaConf_Configure_Router_Bier_Template. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Bier_Template) GetSubDomain(Start uint32, End uint32) *NokiaConf_Configure_Router_Bier_Template_SubDomain {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Router_Bier_Template_SubDomain_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.SubDomain[key]; ok {
		return lm
	}
	return nil
}

// DeleteSubDomain deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Bier_Template. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Bier_Template) DeleteSubDomain(Start uint32, End uint32) {
	key := NokiaConf_Configure_Router_Bier_Template_SubDomain_Key{
		Start: Start,
		End:   End,
	}

	delete(t.SubDomain, key)
}

// AppendSubDomain appends the supplied NokiaConf_Configure_Router_Bier_Template_SubDomain struct to the
// list SubDomain of NokiaConf_Configure_Router_Bier_Template. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Bier_Template_SubDomain already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Bier_Template) AppendSubDomain(v *NokiaConf_Configure_Router_Bier_Template_SubDomain) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := NokiaConf_Configure_Router_Bier_Template_SubDomain_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SubDomain == nil {
		t.SubDomain = make(map[NokiaConf_Configure_Router_Bier_Template_SubDomain_Key]*NokiaConf_Configure_Router_Bier_Template_SubDomain)
	}

	if _, ok := t.SubDomain[key]; ok {
		return fmt.Errorf("duplicate key for list SubDomain %v", key)
	}

	t.SubDomain[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Bier_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bier_Template) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bier_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bier_Template) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bier_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bier_Template) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetTemplateName retrieves the value of the leaf TemplateName from the NokiaConf_Configure_Router_Bier_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TemplateName is set, it can
// safely use t.GetTemplateName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TemplateName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bier_Template) GetTemplateName() string {
	if t == nil || t.TemplateName == nil {
		return ""
	}
	return *t.TemplateName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bier_Template
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bier_Template) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.SubDomain {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Bier_Template struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Bier_Template) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TemplateName == nil {
		return nil, fmt.Errorf("nil value for key TemplateName")
	}

	return map[string]interface{}{
		"template-name": *t.TemplateName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bier_Template) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bier_Template"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bier_Template) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bier_Template) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bier_Template.
func (*NokiaConf_Configure_Router_Bier_Template) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Bier_Template_SubDomain represents the /nokia-conf/configure/router/bier/template/sub-domain YANG schema element.
type NokiaConf_Configure_Router_Bier_Template_SubDomain struct {
	ApplyGroups        []string                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	BfrId              *uint32                                                            `path:"bfr-id" module:"nokia-conf"`
	End                *uint32                                                            `path:"end" module:"nokia-conf"`
	MultiTopology      E_NokiaConf_Configure_Router_Bier_Template_SubDomain_MultiTopology `path:"multi-topology" module:"nokia-conf"`
	Prefix             *string                                                            `path:"prefix" module:"nokia-conf"`
	Start              *uint32                                                            `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Bier_Template_SubDomain implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Bier_Template_SubDomain) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Bier_Template_SubDomain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bier_Template_SubDomain) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Bier_Template_SubDomain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bier_Template_SubDomain) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBfrId retrieves the value of the leaf BfrId from the NokiaConf_Configure_Router_Bier_Template_SubDomain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfrId is set, it can
// safely use t.GetBfrId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfrId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bier_Template_SubDomain) GetBfrId() uint32 {
	if t == nil || t.BfrId == nil {
		return 0
	}
	return *t.BfrId
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Router_Bier_Template_SubDomain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bier_Template_SubDomain) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetMultiTopology retrieves the value of the leaf MultiTopology from the NokiaConf_Configure_Router_Bier_Template_SubDomain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultiTopology is set, it can
// safely use t.GetMultiTopology() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultiTopology == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bier_Template_SubDomain) GetMultiTopology() E_NokiaConf_Configure_Router_Bier_Template_SubDomain_MultiTopology {
	if t == nil || t.MultiTopology == 0 {
		return NokiaConf_Configure_Router_Bier_Template_SubDomain_MultiTopology_ipv4_unicast
	}
	return t.MultiTopology
}

// GetPrefix retrieves the value of the leaf Prefix from the NokiaConf_Configure_Router_Bier_Template_SubDomain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bier_Template_SubDomain) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return "0.0.0.0"
	}
	return *t.Prefix
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Router_Bier_Template_SubDomain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Bier_Template_SubDomain) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Bier_Template_SubDomain
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Bier_Template_SubDomain) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MultiTopology == 0 {
		t.MultiTopology = NokiaConf_Configure_Router_Bier_Template_SubDomain_MultiTopology_ipv4_unicast
	}
	if t.Prefix == nil {
		var v string = "0.0.0.0"
		t.Prefix = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Bier_Template_SubDomain struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Bier_Template_SubDomain) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bier_Template_SubDomain) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Bier_Template_SubDomain"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Bier_Template_SubDomain) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Bier_Template_SubDomain) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Bier_Template_SubDomain.
func (*NokiaConf_Configure_Router_Bier_Template_SubDomain) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Confederation represents the /nokia-conf/configure/router/confederation YANG schema element.
type NokiaConf_Configure_Router_Confederation struct {
	ConfedAsNum *uint32                                                      `path:"confed-as-num" module:"nokia-conf"`
	Members     map[uint32]*NokiaConf_Configure_Router_Confederation_Members `path:"members" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Confederation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Confederation) IsYANGGoStruct() {}

// NewMembers creates a new entry in the Members list of the
// NokiaConf_Configure_Router_Confederation struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Confederation) NewMembers(AsNumber uint32) (*NokiaConf_Configure_Router_Confederation_Members, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Members == nil {
		t.Members = make(map[uint32]*NokiaConf_Configure_Router_Confederation_Members)
	}

	key := AsNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Members[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Members", key)
	}

	t.Members[key] = &NokiaConf_Configure_Router_Confederation_Members{
		AsNumber: &AsNumber,
	}

	return t.Members[key], nil
}

// RenameMembers renames an entry in the list Members within
// the NokiaConf_Configure_Router_Confederation struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Confederation) RenameMembers(oldK, newK uint32) error {
	if _, ok := t.Members[newK]; ok {
		return fmt.Errorf("key %v already exists in Members", newK)
	}

	e, ok := t.Members[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Members", oldK)
	}
	e.AsNumber = &newK

	t.Members[newK] = e
	delete(t.Members, oldK)
	return nil
}

// GetOrCreateMembers retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Confederation. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Confederation) GetOrCreateMembers(AsNumber uint32) *NokiaConf_Configure_Router_Confederation_Members {

	key := AsNumber

	if v, ok := t.Members[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMembers(AsNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMembers got unexpected error: %v", err))
	}
	return v
}

// GetMembers retrieves the value with the specified key from
// the Members map field of NokiaConf_Configure_Router_Confederation. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Confederation) GetMembers(AsNumber uint32) *NokiaConf_Configure_Router_Confederation_Members {

	if t == nil {
		return nil
	}

	key := AsNumber

	if lm, ok := t.Members[key]; ok {
		return lm
	}
	return nil
}

// DeleteMembers deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Confederation. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Confederation) DeleteMembers(AsNumber uint32) {
	key := AsNumber

	delete(t.Members, key)
}

// AppendMembers appends the supplied NokiaConf_Configure_Router_Confederation_Members struct to the
// list Members of NokiaConf_Configure_Router_Confederation. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Confederation_Members already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Confederation) AppendMembers(v *NokiaConf_Configure_Router_Confederation_Members) error {
	if v.AsNumber == nil {
		return fmt.Errorf("invalid nil key received for AsNumber")
	}

	key := *v.AsNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Members == nil {
		t.Members = make(map[uint32]*NokiaConf_Configure_Router_Confederation_Members)
	}

	if _, ok := t.Members[key]; ok {
		return fmt.Errorf("duplicate key for list Members %v", key)
	}

	t.Members[key] = v
	return nil
}

// GetConfedAsNum retrieves the value of the leaf ConfedAsNum from the NokiaConf_Configure_Router_Confederation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConfedAsNum is set, it can
// safely use t.GetConfedAsNum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConfedAsNum == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Confederation) GetConfedAsNum() uint32 {
	if t == nil || t.ConfedAsNum == nil {
		return 0
	}
	return *t.ConfedAsNum
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Confederation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Confederation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Members {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Confederation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Confederation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Confederation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Confederation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Confederation.
func (*NokiaConf_Configure_Router_Confederation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Confederation_Members represents the /nokia-conf/configure/router/confederation/members YANG schema element.
type NokiaConf_Configure_Router_Confederation_Members struct {
	AsNumber *uint32 `path:"as-number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Confederation_Members implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Confederation_Members) IsYANGGoStruct() {}

// GetAsNumber retrieves the value of the leaf AsNumber from the NokiaConf_Configure_Router_Confederation_Members
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsNumber is set, it can
// safely use t.GetAsNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Confederation_Members) GetAsNumber() uint32 {
	if t == nil || t.AsNumber == nil {
		return 0
	}
	return *t.AsNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Confederation_Members
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Confederation_Members) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Confederation_Members struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Confederation_Members) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AsNumber == nil {
		return nil, fmt.Errorf("nil value for key AsNumber")
	}

	return map[string]interface{}{
		"as-number": *t.AsNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Confederation_Members) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Confederation_Members"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Confederation_Members) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Confederation_Members) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Confederation_Members.
func (*NokiaConf_Configure_Router_Confederation_Members) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer represents the /nokia-conf/configure/router/dhcp-server YANG schema element.
type NokiaConf_Configure_Router_DhcpServer struct {
	ApplyGroups        []string                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Dhcpv4             map[string]*NokiaConf_Configure_Router_DhcpServer_Dhcpv4 `path:"dhcpv4" module:"nokia-conf"`
	Dhcpv6             map[string]*NokiaConf_Configure_Router_DhcpServer_Dhcpv6 `path:"dhcpv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer) IsYANGGoStruct() {}

// NewDhcpv4 creates a new entry in the Dhcpv4 list of the
// NokiaConf_Configure_Router_DhcpServer struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_DhcpServer) NewDhcpv4(Name string) (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dhcpv4 == nil {
		t.Dhcpv4 = make(map[string]*NokiaConf_Configure_Router_DhcpServer_Dhcpv4)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dhcpv4[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dhcpv4", key)
	}

	t.Dhcpv4[key] = &NokiaConf_Configure_Router_DhcpServer_Dhcpv4{
		Name: &Name,
	}

	return t.Dhcpv4[key], nil
}

// RenameDhcpv4 renames an entry in the list Dhcpv4 within
// the NokiaConf_Configure_Router_DhcpServer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_DhcpServer) RenameDhcpv4(oldK, newK string) error {
	if _, ok := t.Dhcpv4[newK]; ok {
		return fmt.Errorf("key %v already exists in Dhcpv4", newK)
	}

	e, ok := t.Dhcpv4[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dhcpv4", oldK)
	}
	e.Name = &newK

	t.Dhcpv4[newK] = e
	delete(t.Dhcpv4, oldK)
	return nil
}

// GetOrCreateDhcpv4 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_DhcpServer) GetOrCreateDhcpv4(Name string) *NokiaConf_Configure_Router_DhcpServer_Dhcpv4 {

	key := Name

	if v, ok := t.Dhcpv4[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDhcpv4(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDhcpv4 got unexpected error: %v", err))
	}
	return v
}

// GetDhcpv4 retrieves the value with the specified key from
// the Dhcpv4 map field of NokiaConf_Configure_Router_DhcpServer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer) GetDhcpv4(Name string) *NokiaConf_Configure_Router_DhcpServer_Dhcpv4 {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Dhcpv4[key]; ok {
		return lm
	}
	return nil
}

// DeleteDhcpv4 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_DhcpServer) DeleteDhcpv4(Name string) {
	key := Name

	delete(t.Dhcpv4, key)
}

// AppendDhcpv4 appends the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv4 struct to the
// list Dhcpv4 of NokiaConf_Configure_Router_DhcpServer. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv4 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_DhcpServer) AppendDhcpv4(v *NokiaConf_Configure_Router_DhcpServer_Dhcpv4) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dhcpv4 == nil {
		t.Dhcpv4 = make(map[string]*NokiaConf_Configure_Router_DhcpServer_Dhcpv4)
	}

	if _, ok := t.Dhcpv4[key]; ok {
		return fmt.Errorf("duplicate key for list Dhcpv4 %v", key)
	}

	t.Dhcpv4[key] = v
	return nil
}

// NewDhcpv6 creates a new entry in the Dhcpv6 list of the
// NokiaConf_Configure_Router_DhcpServer struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_DhcpServer) NewDhcpv6(Name string) (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dhcpv6 == nil {
		t.Dhcpv6 = make(map[string]*NokiaConf_Configure_Router_DhcpServer_Dhcpv6)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dhcpv6[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dhcpv6", key)
	}

	t.Dhcpv6[key] = &NokiaConf_Configure_Router_DhcpServer_Dhcpv6{
		Name: &Name,
	}

	return t.Dhcpv6[key], nil
}

// RenameDhcpv6 renames an entry in the list Dhcpv6 within
// the NokiaConf_Configure_Router_DhcpServer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_DhcpServer) RenameDhcpv6(oldK, newK string) error {
	if _, ok := t.Dhcpv6[newK]; ok {
		return fmt.Errorf("key %v already exists in Dhcpv6", newK)
	}

	e, ok := t.Dhcpv6[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dhcpv6", oldK)
	}
	e.Name = &newK

	t.Dhcpv6[newK] = e
	delete(t.Dhcpv6, oldK)
	return nil
}

// GetOrCreateDhcpv6 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_DhcpServer) GetOrCreateDhcpv6(Name string) *NokiaConf_Configure_Router_DhcpServer_Dhcpv6 {

	key := Name

	if v, ok := t.Dhcpv6[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDhcpv6(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDhcpv6 got unexpected error: %v", err))
	}
	return v
}

// GetDhcpv6 retrieves the value with the specified key from
// the Dhcpv6 map field of NokiaConf_Configure_Router_DhcpServer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer) GetDhcpv6(Name string) *NokiaConf_Configure_Router_DhcpServer_Dhcpv6 {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Dhcpv6[key]; ok {
		return lm
	}
	return nil
}

// DeleteDhcpv6 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_DhcpServer) DeleteDhcpv6(Name string) {
	key := Name

	delete(t.Dhcpv6, key)
}

// AppendDhcpv6 appends the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv6 struct to the
// list Dhcpv6 of NokiaConf_Configure_Router_DhcpServer. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv6 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_DhcpServer) AppendDhcpv6(v *NokiaConf_Configure_Router_DhcpServer_Dhcpv6) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dhcpv6 == nil {
		t.Dhcpv6 = make(map[string]*NokiaConf_Configure_Router_DhcpServer_Dhcpv6)
	}

	if _, ok := t.Dhcpv6[key]; ok {
		return fmt.Errorf("duplicate key for list Dhcpv6 %v", key)
	}

	t.Dhcpv6[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_DhcpServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_DhcpServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Dhcpv4 {
		e.PopulateDefaults()
	}
	for _, e := range t.Dhcpv6 {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer.
func (*NokiaConf_Configure_Router_DhcpServer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv4 represents the /nokia-conf/configure/router/dhcp-server/dhcpv4 YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv4 struct {
	AdminState         E_NokiaTypesSros_AdminState                                       `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                           `path:"description" module:"nokia-conf"`
	Failover           *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover            `path:"failover" module:"nokia-conf"`
	ForceRenews        *bool                                                             `path:"force-renews" module:"nokia-conf"`
	LeaseHold          *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold           `path:"lease-hold" module:"nokia-conf"`
	Name               *string                                                           `path:"name" module:"nokia-conf"`
	Pool               map[string]*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool     `path:"pool" module:"nokia-conf"`
	PoolSelection      *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection       `path:"pool-selection" module:"nokia-conf"`
	UserDb             *string                                                           `path:"user-db" module:"nokia-conf"`
	UserIdentification E_NokiaConf_Configure_Router_DhcpServer_Dhcpv4_UserIdentification `path:"user-identification" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4) IsYANGGoStruct() {}

// NewPool creates a new entry in the Pool list of the
// NokiaConf_Configure_Router_DhcpServer_Dhcpv4 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4) NewPool(PoolName string) (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool)
	}

	key := PoolName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Pool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Pool", key)
	}

	t.Pool[key] = &NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool{
		PoolName: &PoolName,
	}

	return t.Pool[key], nil
}

// RenamePool renames an entry in the list Pool within
// the NokiaConf_Configure_Router_DhcpServer_Dhcpv4 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4) RenamePool(oldK, newK string) error {
	if _, ok := t.Pool[newK]; ok {
		return fmt.Errorf("key %v already exists in Pool", newK)
	}

	e, ok := t.Pool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Pool", oldK)
	}
	e.PoolName = &newK

	t.Pool[newK] = e
	delete(t.Pool, oldK)
	return nil
}

// GetOrCreatePool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer_Dhcpv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4) GetOrCreatePool(PoolName string) *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool {

	key := PoolName

	if v, ok := t.Pool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPool(PoolName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePool got unexpected error: %v", err))
	}
	return v
}

// GetPool retrieves the value with the specified key from
// the Pool map field of NokiaConf_Configure_Router_DhcpServer_Dhcpv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4) GetPool(PoolName string) *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool {

	if t == nil {
		return nil
	}

	key := PoolName

	if lm, ok := t.Pool[key]; ok {
		return lm
	}
	return nil
}

// DeletePool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer_Dhcpv4. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4) DeletePool(PoolName string) {
	key := PoolName

	delete(t.Pool, key)
}

// AppendPool appends the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool struct to the
// list Pool of NokiaConf_Configure_Router_DhcpServer_Dhcpv4. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4) AppendPool(v *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool) error {
	if v.PoolName == nil {
		return fmt.Errorf("invalid nil key received for PoolName")
	}

	key := *v.PoolName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool)
	}

	if _, ok := t.Pool[key]; ok {
		return fmt.Errorf("duplicate key for list Pool %v", key)
	}

	t.Pool[key] = v
	return nil
}

// GetOrCreateFailover retrieves the value of the Failover field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4) GetOrCreateFailover() *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover {
	if t.Failover != nil {
		return t.Failover
	}
	t.Failover = &NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover{}
	return t.Failover
}

// GetOrCreateLeaseHold retrieves the value of the LeaseHold field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4) GetOrCreateLeaseHold() *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold {
	if t.LeaseHold != nil {
		return t.LeaseHold
	}
	t.LeaseHold = &NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold{}
	return t.LeaseHold
}

// GetOrCreatePoolSelection retrieves the value of the PoolSelection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4) GetOrCreatePoolSelection() *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection {
	if t.PoolSelection != nil {
		return t.PoolSelection
	}
	t.PoolSelection = &NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection{}
	return t.PoolSelection
}

// GetFailover returns the value of the Failover struct pointer
// from NokiaConf_Configure_Router_DhcpServer_Dhcpv4. If the receiver or the field Failover is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4) GetFailover() *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover {
	if t != nil && t.Failover != nil {
		return t.Failover
	}
	return nil
}

// GetLeaseHold returns the value of the LeaseHold struct pointer
// from NokiaConf_Configure_Router_DhcpServer_Dhcpv4. If the receiver or the field LeaseHold is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4) GetLeaseHold() *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold {
	if t != nil && t.LeaseHold != nil {
		return t.LeaseHold
	}
	return nil
}

// GetPoolSelection returns the value of the PoolSelection struct pointer
// from NokiaConf_Configure_Router_DhcpServer_Dhcpv4. If the receiver or the field PoolSelection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4) GetPoolSelection() *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection {
	if t != nil && t.PoolSelection != nil {
		return t.PoolSelection
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetForceRenews retrieves the value of the leaf ForceRenews from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForceRenews is set, it can
// safely use t.GetForceRenews() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForceRenews == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4) GetForceRenews() bool {
	if t == nil || t.ForceRenews == nil {
		return false
	}
	return *t.ForceRenews
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetUserDb retrieves the value of the leaf UserDb from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserDb is set, it can
// safely use t.GetUserDb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserDb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4) GetUserDb() string {
	if t == nil || t.UserDb == nil {
		return ""
	}
	return *t.UserDb
}

// GetUserIdentification retrieves the value of the leaf UserIdentification from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserIdentification is set, it can
// safely use t.GetUserIdentification() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserIdentification == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4) GetUserIdentification() E_NokiaConf_Configure_Router_DhcpServer_Dhcpv4_UserIdentification {
	if t == nil || t.UserIdentification == 0 {
		return 0
	}
	return t.UserIdentification
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ForceRenews == nil {
		var v bool = false
		t.ForceRenews = &v
	}
	t.Failover.PopulateDefaults()
	t.LeaseHold.PopulateDefaults()
	t.PoolSelection.PopulateDefaults()
	for _, e := range t.Pool {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_DhcpServer_Dhcpv4 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv4.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover represents the /nokia-conf/configure/router/dhcp-server/dhcpv4/failover YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover struct {
	AdminState            E_NokiaTypesSros_AdminState                                            `path:"admin-state" module:"nokia-conf"`
	ApplyGroups           []string                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	IgnoreMcltOnTakeover  *bool                                                                  `path:"ignore-mclt-on-takeover" module:"nokia-conf"`
	MaximumClientLeadTime *uint32                                                                `path:"maximum-client-lead-time" module:"nokia-conf"`
	PartnerDownDelay      *uint32                                                                `path:"partner-down-delay" module:"nokia-conf"`
	Peer                  map[string]*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover_Peer `path:"peer" module:"nokia-conf"`
	StartupWaitTime       *uint32                                                                `path:"startup-wait-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover) IsYANGGoStruct() {}

// NewPeer creates a new entry in the Peer list of the
// NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover) NewPeer(Address string) (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover_Peer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover_Peer)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover_Peer{
		Address: &Address,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover) RenamePeer(oldK, newK string) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.Address = &newK

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover) GetOrCreatePeer(Address string) *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover_Peer {

	key := Address

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover) GetPeer(Address string) *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover_Peer {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover) DeletePeer(Address string) {
	key := Address

	delete(t.Peer, key)
}

// AppendPeer appends the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover_Peer struct to the
// list Peer of NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover_Peer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover) AppendPeer(v *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover_Peer) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIgnoreMcltOnTakeover retrieves the value of the leaf IgnoreMcltOnTakeover from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreMcltOnTakeover is set, it can
// safely use t.GetIgnoreMcltOnTakeover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreMcltOnTakeover == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover) GetIgnoreMcltOnTakeover() bool {
	if t == nil || t.IgnoreMcltOnTakeover == nil {
		return false
	}
	return *t.IgnoreMcltOnTakeover
}

// GetMaximumClientLeadTime retrieves the value of the leaf MaximumClientLeadTime from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumClientLeadTime is set, it can
// safely use t.GetMaximumClientLeadTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumClientLeadTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover) GetMaximumClientLeadTime() uint32 {
	if t == nil || t.MaximumClientLeadTime == nil {
		return 600
	}
	return *t.MaximumClientLeadTime
}

// GetPartnerDownDelay retrieves the value of the leaf PartnerDownDelay from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PartnerDownDelay is set, it can
// safely use t.GetPartnerDownDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PartnerDownDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover) GetPartnerDownDelay() uint32 {
	if t == nil || t.PartnerDownDelay == nil {
		return 86399
	}
	return *t.PartnerDownDelay
}

// GetStartupWaitTime retrieves the value of the leaf StartupWaitTime from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartupWaitTime is set, it can
// safely use t.GetStartupWaitTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartupWaitTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover) GetStartupWaitTime() uint32 {
	if t == nil || t.StartupWaitTime == nil {
		return 120
	}
	return *t.StartupWaitTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.IgnoreMcltOnTakeover == nil {
		var v bool = false
		t.IgnoreMcltOnTakeover = &v
	}
	if t.MaximumClientLeadTime == nil {
		var v uint32 = 600
		t.MaximumClientLeadTime = &v
	}
	if t.PartnerDownDelay == nil {
		var v uint32 = 86399
		t.PartnerDownDelay = &v
	}
	if t.StartupWaitTime == nil {
		var v uint32 = 120
		t.StartupWaitTime = &v
	}
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover_Peer represents the /nokia-conf/configure/router/dhcp-server/dhcpv4/failover/peer YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover_Peer struct {
	Address            *string  `path:"address" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	SyncTag            *string  `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover_Peer) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover_Peer) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover_Peer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover_Peer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover_Peer) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover_Peer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover_Peer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover_Peer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover_Peer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover_Peer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover_Peer.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Failover_Peer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold represents the /nokia-conf/configure/router/dhcp-server/dhcpv4/lease-hold YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold struct {
	AdditionalScenarios *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios `path:"additional-scenarios" module:"nokia-conf"`
	Time                *uint32                                                                     `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold) IsYANGGoStruct() {}

// GetOrCreateAdditionalScenarios retrieves the value of the AdditionalScenarios field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold) GetOrCreateAdditionalScenarios() *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios {
	if t.AdditionalScenarios != nil {
		return t.AdditionalScenarios
	}
	t.AdditionalScenarios = &NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios{}
	return t.AdditionalScenarios
}

// GetAdditionalScenarios returns the value of the AdditionalScenarios struct pointer
// from NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold. If the receiver or the field AdditionalScenarios is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold) GetAdditionalScenarios() *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios {
	if t != nil && t.AdditionalScenarios != nil {
		return t.AdditionalScenarios
	}
	return nil
}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold) GetTime() uint32 {
	if t == nil || t.Time == nil {
		return 0
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AdditionalScenarios.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios represents the /nokia-conf/configure/router/dhcp-server/dhcpv4/lease-hold/additional-scenarios YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios struct {
	InternalLeaseIpsec *bool `path:"internal-lease-ipsec" module:"nokia-conf"`
	SolicitedRelease   *bool `path:"solicited-release" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios) IsYANGGoStruct() {}

// GetInternalLeaseIpsec retrieves the value of the leaf InternalLeaseIpsec from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InternalLeaseIpsec is set, it can
// safely use t.GetInternalLeaseIpsec() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InternalLeaseIpsec == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios) GetInternalLeaseIpsec() bool {
	if t == nil || t.InternalLeaseIpsec == nil {
		return false
	}
	return *t.InternalLeaseIpsec
}

// GetSolicitedRelease retrieves the value of the leaf SolicitedRelease from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SolicitedRelease is set, it can
// safely use t.GetSolicitedRelease() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SolicitedRelease == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios) GetSolicitedRelease() bool {
	if t == nil || t.SolicitedRelease == nil {
		return false
	}
	return *t.SolicitedRelease
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InternalLeaseIpsec == nil {
		var v bool = false
		t.InternalLeaseIpsec = &v
	}
	if t.SolicitedRelease == nil {
		var v bool = false
		t.SolicitedRelease = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool represents the /nokia-conf/configure/router/dhcp-server/dhcpv4/pool YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool struct {
	ApplyGroups          []string                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Description          *string                                                              `path:"description" module:"nokia-conf"`
	Failover             *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover          `path:"failover" module:"nokia-conf"`
	MaxLeaseTime         *uint32                                                              `path:"max-lease-time" module:"nokia-conf"`
	MinLeaseTime         *uint32                                                              `path:"min-lease-time" module:"nokia-conf"`
	MinimumFree          *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_MinimumFree       `path:"minimum-free" module:"nokia-conf"`
	NakNonMatchingSubnet *bool                                                                `path:"nak-non-matching-subnet" module:"nokia-conf"`
	OfferTime            *uint32                                                              `path:"offer-time" module:"nokia-conf"`
	Options              *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options           `path:"options" module:"nokia-conf"`
	PoolName             *string                                                              `path:"pool-name" module:"nokia-conf"`
	Subnet               map[string]*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet `path:"subnet" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool) IsYANGGoStruct() {}

// NewSubnet creates a new entry in the Subnet list of the
// NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool) NewSubnet(Ipv4Prefix string) (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subnet == nil {
		t.Subnet = make(map[string]*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet)
	}

	key := Ipv4Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subnet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subnet", key)
	}

	t.Subnet[key] = &NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet{
		Ipv4Prefix: &Ipv4Prefix,
	}

	return t.Subnet[key], nil
}

// RenameSubnet renames an entry in the list Subnet within
// the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool) RenameSubnet(oldK, newK string) error {
	if _, ok := t.Subnet[newK]; ok {
		return fmt.Errorf("key %v already exists in Subnet", newK)
	}

	e, ok := t.Subnet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Subnet", oldK)
	}
	e.Ipv4Prefix = &newK

	t.Subnet[newK] = e
	delete(t.Subnet, oldK)
	return nil
}

// GetOrCreateSubnet retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool) GetOrCreateSubnet(Ipv4Prefix string) *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet {

	key := Ipv4Prefix

	if v, ok := t.Subnet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubnet(Ipv4Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubnet got unexpected error: %v", err))
	}
	return v
}

// GetSubnet retrieves the value with the specified key from
// the Subnet map field of NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool) GetSubnet(Ipv4Prefix string) *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet {

	if t == nil {
		return nil
	}

	key := Ipv4Prefix

	if lm, ok := t.Subnet[key]; ok {
		return lm
	}
	return nil
}

// DeleteSubnet deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool) DeleteSubnet(Ipv4Prefix string) {
	key := Ipv4Prefix

	delete(t.Subnet, key)
}

// AppendSubnet appends the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet struct to the
// list Subnet of NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool) AppendSubnet(v *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet) error {
	if v.Ipv4Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv4Prefix")
	}

	key := *v.Ipv4Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subnet == nil {
		t.Subnet = make(map[string]*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet)
	}

	if _, ok := t.Subnet[key]; ok {
		return fmt.Errorf("duplicate key for list Subnet %v", key)
	}

	t.Subnet[key] = v
	return nil
}

// GetOrCreateFailover retrieves the value of the Failover field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool) GetOrCreateFailover() *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover {
	if t.Failover != nil {
		return t.Failover
	}
	t.Failover = &NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover{}
	return t.Failover
}

// GetOrCreateMinimumFree retrieves the value of the MinimumFree field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool) GetOrCreateMinimumFree() *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_MinimumFree {
	if t.MinimumFree != nil {
		return t.MinimumFree
	}
	t.MinimumFree = &NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_MinimumFree{}
	return t.MinimumFree
}

// GetOrCreateOptions retrieves the value of the Options field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool) GetOrCreateOptions() *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options {
	if t.Options != nil {
		return t.Options
	}
	t.Options = &NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options{}
	return t.Options
}

// GetFailover returns the value of the Failover struct pointer
// from NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool. If the receiver or the field Failover is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool) GetFailover() *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover {
	if t != nil && t.Failover != nil {
		return t.Failover
	}
	return nil
}

// GetMinimumFree returns the value of the MinimumFree struct pointer
// from NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool. If the receiver or the field MinimumFree is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool) GetMinimumFree() *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_MinimumFree {
	if t != nil && t.MinimumFree != nil {
		return t.MinimumFree
	}
	return nil
}

// GetOptions returns the value of the Options struct pointer
// from NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool. If the receiver or the field Options is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool) GetOptions() *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options {
	if t != nil && t.Options != nil {
		return t.Options
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMaxLeaseTime retrieves the value of the leaf MaxLeaseTime from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLeaseTime is set, it can
// safely use t.GetMaxLeaseTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLeaseTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool) GetMaxLeaseTime() uint32 {
	if t == nil || t.MaxLeaseTime == nil {
		return 864000
	}
	return *t.MaxLeaseTime
}

// GetMinLeaseTime retrieves the value of the leaf MinLeaseTime from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinLeaseTime is set, it can
// safely use t.GetMinLeaseTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinLeaseTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool) GetMinLeaseTime() uint32 {
	if t == nil || t.MinLeaseTime == nil {
		return 600
	}
	return *t.MinLeaseTime
}

// GetNakNonMatchingSubnet retrieves the value of the leaf NakNonMatchingSubnet from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NakNonMatchingSubnet is set, it can
// safely use t.GetNakNonMatchingSubnet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NakNonMatchingSubnet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool) GetNakNonMatchingSubnet() bool {
	if t == nil || t.NakNonMatchingSubnet == nil {
		return false
	}
	return *t.NakNonMatchingSubnet
}

// GetOfferTime retrieves the value of the leaf OfferTime from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OfferTime is set, it can
// safely use t.GetOfferTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OfferTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool) GetOfferTime() uint32 {
	if t == nil || t.OfferTime == nil {
		return 60
	}
	return *t.OfferTime
}

// GetPoolName retrieves the value of the leaf PoolName from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PoolName is set, it can
// safely use t.GetPoolName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PoolName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool) GetPoolName() string {
	if t == nil || t.PoolName == nil {
		return ""
	}
	return *t.PoolName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxLeaseTime == nil {
		var v uint32 = 864000
		t.MaxLeaseTime = &v
	}
	if t.MinLeaseTime == nil {
		var v uint32 = 600
		t.MinLeaseTime = &v
	}
	if t.NakNonMatchingSubnet == nil {
		var v bool = false
		t.NakNonMatchingSubnet = &v
	}
	if t.OfferTime == nil {
		var v uint32 = 60
		t.OfferTime = &v
	}
	t.Failover.PopulateDefaults()
	t.MinimumFree.PopulateDefaults()
	t.Options.PopulateDefaults()
	for _, e := range t.Subnet {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PoolName == nil {
		return nil, fmt.Errorf("nil value for key PoolName")
	}

	return map[string]interface{}{
		"pool-name": *t.PoolName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection represents the /nokia-conf/configure/router/dhcp-server/dhcpv4/pool-selection YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection struct {
	UseGiAddress      *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress      `path:"use-gi-address" module:"nokia-conf" yangPresence:"true"`
	UsePoolFromClient *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient `path:"use-pool-from-client" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection) IsYANGGoStruct() {}

// GetOrCreateUseGiAddress retrieves the value of the UseGiAddress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection) GetOrCreateUseGiAddress() *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress {
	if t.UseGiAddress != nil {
		return t.UseGiAddress
	}
	t.UseGiAddress = &NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress{}
	return t.UseGiAddress
}

// GetOrCreateUsePoolFromClient retrieves the value of the UsePoolFromClient field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection) GetOrCreateUsePoolFromClient() *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient {
	if t.UsePoolFromClient != nil {
		return t.UsePoolFromClient
	}
	t.UsePoolFromClient = &NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient{}
	return t.UsePoolFromClient
}

// GetUseGiAddress returns the value of the UseGiAddress struct pointer
// from NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection. If the receiver or the field UseGiAddress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection) GetUseGiAddress() *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress {
	if t != nil && t.UseGiAddress != nil {
		return t.UseGiAddress
	}
	return nil
}

// GetUsePoolFromClient returns the value of the UsePoolFromClient struct pointer
// from NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection. If the receiver or the field UsePoolFromClient is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection) GetUsePoolFromClient() *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient {
	if t != nil && t.UsePoolFromClient != nil {
		return t.UsePoolFromClient
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.UseGiAddress.PopulateDefaults()
	t.UsePoolFromClient.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress represents the /nokia-conf/configure/router/dhcp-server/dhcpv4/pool-selection/use-gi-address YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress struct {
	Scope E_NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress_Scope `path:"scope" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress) IsYANGGoStruct() {}

// GetScope retrieves the value of the leaf Scope from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scope is set, it can
// safely use t.GetScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scope == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress) GetScope() E_NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress_Scope {
	if t == nil || t.Scope == 0 {
		return NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress_Scope_subnet
	}
	return t.Scope
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Scope == 0 {
		t.Scope = NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress_Scope_subnet
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient represents the /nokia-conf/configure/router/dhcp-server/dhcpv4/pool-selection/use-pool-from-client YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient struct {
	Delimiter *string `path:"delimiter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient) IsYANGGoStruct() {
}

// GetDelimiter retrieves the value of the leaf Delimiter from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Delimiter is set, it can
// safely use t.GetDelimiter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Delimiter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient) GetDelimiter() string {
	if t == nil || t.Delimiter == nil {
		return ""
	}
	return *t.Delimiter
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover represents the /nokia-conf/configure/router/dhcp-server/dhcpv4/pool/failover YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover struct {
	AdminState            E_NokiaTypesSros_AdminState                                                 `path:"admin-state" module:"nokia-conf"`
	ApplyGroups           []string                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	IgnoreMcltOnTakeover  *bool                                                                       `path:"ignore-mclt-on-takeover" module:"nokia-conf"`
	MaximumClientLeadTime *uint32                                                                     `path:"maximum-client-lead-time" module:"nokia-conf"`
	PartnerDownDelay      *uint32                                                                     `path:"partner-down-delay" module:"nokia-conf"`
	Peer                  map[string]*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer `path:"peer" module:"nokia-conf"`
	StartupWaitTime       *uint32                                                                     `path:"startup-wait-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover) IsYANGGoStruct() {}

// NewPeer creates a new entry in the Peer list of the
// NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover) NewPeer(Address string) (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer{
		Address: &Address,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover) RenamePeer(oldK, newK string) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.Address = &newK

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover) GetOrCreatePeer(Address string) *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer {

	key := Address

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover) GetPeer(Address string) *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover) DeletePeer(Address string) {
	key := Address

	delete(t.Peer, key)
}

// AppendPeer appends the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer struct to the
// list Peer of NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover) AppendPeer(v *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIgnoreMcltOnTakeover retrieves the value of the leaf IgnoreMcltOnTakeover from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreMcltOnTakeover is set, it can
// safely use t.GetIgnoreMcltOnTakeover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreMcltOnTakeover == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover) GetIgnoreMcltOnTakeover() bool {
	if t == nil || t.IgnoreMcltOnTakeover == nil {
		return false
	}
	return *t.IgnoreMcltOnTakeover
}

// GetMaximumClientLeadTime retrieves the value of the leaf MaximumClientLeadTime from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumClientLeadTime is set, it can
// safely use t.GetMaximumClientLeadTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumClientLeadTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover) GetMaximumClientLeadTime() uint32 {
	if t == nil || t.MaximumClientLeadTime == nil {
		return 600
	}
	return *t.MaximumClientLeadTime
}

// GetPartnerDownDelay retrieves the value of the leaf PartnerDownDelay from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PartnerDownDelay is set, it can
// safely use t.GetPartnerDownDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PartnerDownDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover) GetPartnerDownDelay() uint32 {
	if t == nil || t.PartnerDownDelay == nil {
		return 86399
	}
	return *t.PartnerDownDelay
}

// GetStartupWaitTime retrieves the value of the leaf StartupWaitTime from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartupWaitTime is set, it can
// safely use t.GetStartupWaitTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartupWaitTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover) GetStartupWaitTime() uint32 {
	if t == nil || t.StartupWaitTime == nil {
		return 120
	}
	return *t.StartupWaitTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.IgnoreMcltOnTakeover == nil {
		var v bool = false
		t.IgnoreMcltOnTakeover = &v
	}
	if t.MaximumClientLeadTime == nil {
		var v uint32 = 600
		t.MaximumClientLeadTime = &v
	}
	if t.PartnerDownDelay == nil {
		var v uint32 = 86399
		t.PartnerDownDelay = &v
	}
	if t.StartupWaitTime == nil {
		var v uint32 = 120
		t.StartupWaitTime = &v
	}
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer represents the /nokia-conf/configure/router/dhcp-server/dhcpv4/pool/failover/peer YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer struct {
	Address            *string  `path:"address" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	SyncTag            *string  `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_MinimumFree represents the /nokia-conf/configure/router/dhcp-server/dhcpv4/pool/minimum-free YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_MinimumFree struct {
	Absolute          *uint32 `path:"absolute" module:"nokia-conf"`
	EventWhenDepleted *bool   `path:"event-when-depleted" module:"nokia-conf"`
	Percent           *uint32 `path:"percent" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_MinimumFree implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_MinimumFree) IsYANGGoStruct() {}

// GetAbsolute retrieves the value of the leaf Absolute from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_MinimumFree
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Absolute is set, it can
// safely use t.GetAbsolute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Absolute == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_MinimumFree) GetAbsolute() uint32 {
	if t == nil || t.Absolute == nil {
		return 1
	}
	return *t.Absolute
}

// GetEventWhenDepleted retrieves the value of the leaf EventWhenDepleted from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_MinimumFree
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventWhenDepleted is set, it can
// safely use t.GetEventWhenDepleted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventWhenDepleted == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_MinimumFree) GetEventWhenDepleted() bool {
	if t == nil || t.EventWhenDepleted == nil {
		return false
	}
	return *t.EventWhenDepleted
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_MinimumFree
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_MinimumFree) GetPercent() uint32 {
	if t == nil || t.Percent == nil {
		return 1
	}
	return *t.Percent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_MinimumFree
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_MinimumFree) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Absolute == nil {
		var v uint32 = 1
		t.Absolute = &v
	}
	if t.EventWhenDepleted == nil {
		var v bool = false
		t.EventWhenDepleted = &v
	}
	if t.Percent == nil {
		var v uint32 = 1
		t.Percent = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_MinimumFree) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_MinimumFree"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_MinimumFree) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_MinimumFree) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_MinimumFree.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_MinimumFree) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options represents the /nokia-conf/configure/router/dhcp-server/dhcpv4/pool/options YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options struct {
	Option map[NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option_Number_Union]*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option `path:"option" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options) IsYANGGoStruct() {}

// NewOption creates a new entry in the Option list of the
// NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options) NewOption(Number NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option_Number_Union) (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option_Number_Union]*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option)
	}

	key := Number

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Option[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Option", key)
	}

	t.Option[key] = &NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option{
		Number: Number,
	}

	return t.Option[key], nil
}

// RenameOption renames an entry in the list Option within
// the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options) RenameOption(oldK, newK NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option_Number_Union) error {
	if _, ok := t.Option[newK]; ok {
		return fmt.Errorf("key %v already exists in Option", newK)
	}

	e, ok := t.Option[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Option", oldK)
	}
	e.Number = newK

	t.Option[newK] = e
	delete(t.Option, oldK)
	return nil
}

// GetOrCreateOption retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options) GetOrCreateOption(Number NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option_Number_Union) *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option {

	key := Number

	if v, ok := t.Option[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOption(Number)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOption got unexpected error: %v", err))
	}
	return v
}

// GetOption retrieves the value with the specified key from
// the Option map field of NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options) GetOption(Number NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option_Number_Union) *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option {

	if t == nil {
		return nil
	}

	key := Number

	if lm, ok := t.Option[key]; ok {
		return lm
	}
	return nil
}

// DeleteOption deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options) DeleteOption(Number NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option_Number_Union) {
	key := Number

	delete(t.Option, key)
}

// AppendOption appends the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option struct to the
// list Option of NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options) AppendOption(v *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option) error {
	key := v.Number

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option_Number_Union]*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option)
	}

	if _, ok := t.Option[key]; ok {
		return fmt.Errorf("duplicate key for list Option %v", key)
	}

	t.Option[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Option {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option represents the /nokia-conf/configure/router/dhcp-server/dhcpv4/pool/options/option YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option struct {
	ApplyGroups        []string                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	AsciiString        *string                                                                            `path:"ascii-string" module:"nokia-conf"`
	Duration           *uint32                                                                            `path:"duration" module:"nokia-conf"`
	Empty              YANGEmpty                                                                          `path:"empty" module:"nokia-conf"`
	HexString          *string                                                                            `path:"hex-string" module:"nokia-conf"`
	Ipv4Address        []string                                                                           `path:"ipv4-address" module:"nokia-conf"`
	NetbiosNodeType    E_NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option_NetbiosNodeType `path:"netbios-node-type" module:"nokia-conf"`
	Number             NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option_Number_Union      `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetDuration retrieves the value of the leaf Duration from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Duration is set, it can
// safely use t.GetDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Duration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option) GetDuration() uint32 {
	if t == nil || t.Duration == nil {
		return 0
	}
	return *t.Duration
}

// GetEmpty retrieves the value of the leaf Empty from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Empty is set, it can
// safely use t.GetEmpty() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Empty == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option) GetEmpty() YANGEmpty {
	if t == nil || t.Empty == false {
		return false
	}
	return t.Empty
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option) GetIpv4Address() []string {
	if t == nil || t.Ipv4Address == nil {
		return nil
	}
	return t.Ipv4Address
}

// GetNetbiosNodeType retrieves the value of the leaf NetbiosNodeType from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetbiosNodeType is set, it can
// safely use t.GetNetbiosNodeType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetbiosNodeType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option) GetNetbiosNodeType() E_NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option_NetbiosNodeType {
	if t == nil || t.NetbiosNodeType == 0 {
		return 0
	}
	return t.NetbiosNodeType
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option) GetNumber() NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option_Number_Union {
	if t == nil || t.Number == nil {
		return nil
	}
	return t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"number": t.Number,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Options_Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet represents the /nokia-conf/configure/router/dhcp-server/dhcpv4/pool/subnet YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet struct {
	AddressRange       map[NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange_Key]*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange         `path:"address-range" module:"nokia-conf"`
	ApplyGroups        []string                                                                                                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Drain              *bool                                                                                                                                                        `path:"drain" module:"nokia-conf"`
	ExcludeAddresses   map[NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses_Key]*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses `path:"exclude-addresses" module:"nokia-conf"`
	Ipv4Prefix         *string                                                                                                                                                      `path:"ipv4-prefix" module:"nokia-conf"`
	MaximumDeclined    *uint32                                                                                                                                                      `path:"maximum-declined" module:"nokia-conf"`
	MinimumFree        *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree                                                                                        `path:"minimum-free" module:"nokia-conf"`
	Options            *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options                                                                                            `path:"options" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet) IsYANGGoStruct() {}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange_Key represents the key for list AddressRange of element /nokia-conf/configure/router/dhcp-server/dhcpv4/pool/subnet.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses_Key represents the key for list ExcludeAddresses of element /nokia-conf/configure/router/dhcp-server/dhcpv4/pool/subnet.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// NewAddressRange creates a new entry in the AddressRange list of the
// NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet) NewAddressRange(Start string, End string) (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AddressRange == nil {
		t.AddressRange = make(map[NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange_Key]*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange)
	}

	key := NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AddressRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AddressRange", key)
	}

	t.AddressRange[key] = &NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange{
		Start: &Start,
		End:   &End,
	}

	return t.AddressRange[key], nil
}

// RenameAddressRange renames an entry in the list AddressRange within
// the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet) RenameAddressRange(oldK, newK NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange_Key) error {
	if _, ok := t.AddressRange[newK]; ok {
		return fmt.Errorf("key %v already exists in AddressRange", newK)
	}

	e, ok := t.AddressRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AddressRange", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.AddressRange[newK] = e
	delete(t.AddressRange, oldK)
	return nil
}

// GetOrCreateAddressRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet) GetOrCreateAddressRange(Start string, End string) *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange {

	key := NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.AddressRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddressRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddressRange got unexpected error: %v", err))
	}
	return v
}

// GetAddressRange retrieves the value with the specified key from
// the AddressRange map field of NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet) GetAddressRange(Start string, End string) *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.AddressRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddressRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet) DeleteAddressRange(Start string, End string) {
	key := NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange_Key{
		Start: Start,
		End:   End,
	}

	delete(t.AddressRange, key)
}

// AppendAddressRange appends the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange struct to the
// list AddressRange of NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet) AppendAddressRange(v *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AddressRange == nil {
		t.AddressRange = make(map[NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange_Key]*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange)
	}

	if _, ok := t.AddressRange[key]; ok {
		return fmt.Errorf("duplicate key for list AddressRange %v", key)
	}

	t.AddressRange[key] = v
	return nil
}

// NewExcludeAddresses creates a new entry in the ExcludeAddresses list of the
// NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet) NewExcludeAddresses(Start string, End string) (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExcludeAddresses == nil {
		t.ExcludeAddresses = make(map[NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses_Key]*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses)
	}

	key := NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ExcludeAddresses[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ExcludeAddresses", key)
	}

	t.ExcludeAddresses[key] = &NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses{
		Start: &Start,
		End:   &End,
	}

	return t.ExcludeAddresses[key], nil
}

// RenameExcludeAddresses renames an entry in the list ExcludeAddresses within
// the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet) RenameExcludeAddresses(oldK, newK NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses_Key) error {
	if _, ok := t.ExcludeAddresses[newK]; ok {
		return fmt.Errorf("key %v already exists in ExcludeAddresses", newK)
	}

	e, ok := t.ExcludeAddresses[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ExcludeAddresses", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.ExcludeAddresses[newK] = e
	delete(t.ExcludeAddresses, oldK)
	return nil
}

// GetOrCreateExcludeAddresses retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet) GetOrCreateExcludeAddresses(Start string, End string) *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses {

	key := NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.ExcludeAddresses[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExcludeAddresses(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExcludeAddresses got unexpected error: %v", err))
	}
	return v
}

// GetExcludeAddresses retrieves the value with the specified key from
// the ExcludeAddresses map field of NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet) GetExcludeAddresses(Start string, End string) *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.ExcludeAddresses[key]; ok {
		return lm
	}
	return nil
}

// DeleteExcludeAddresses deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet) DeleteExcludeAddresses(Start string, End string) {
	key := NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses_Key{
		Start: Start,
		End:   End,
	}

	delete(t.ExcludeAddresses, key)
}

// AppendExcludeAddresses appends the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses struct to the
// list ExcludeAddresses of NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet) AppendExcludeAddresses(v *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExcludeAddresses == nil {
		t.ExcludeAddresses = make(map[NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses_Key]*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses)
	}

	if _, ok := t.ExcludeAddresses[key]; ok {
		return fmt.Errorf("duplicate key for list ExcludeAddresses %v", key)
	}

	t.ExcludeAddresses[key] = v
	return nil
}

// GetOrCreateMinimumFree retrieves the value of the MinimumFree field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet) GetOrCreateMinimumFree() *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree {
	if t.MinimumFree != nil {
		return t.MinimumFree
	}
	t.MinimumFree = &NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree{}
	return t.MinimumFree
}

// GetOrCreateOptions retrieves the value of the Options field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet) GetOrCreateOptions() *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options {
	if t.Options != nil {
		return t.Options
	}
	t.Options = &NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options{}
	return t.Options
}

// GetMinimumFree returns the value of the MinimumFree struct pointer
// from NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet. If the receiver or the field MinimumFree is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet) GetMinimumFree() *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree {
	if t != nil && t.MinimumFree != nil {
		return t.MinimumFree
	}
	return nil
}

// GetOptions returns the value of the Options struct pointer
// from NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet. If the receiver or the field Options is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet) GetOptions() *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options {
	if t != nil && t.Options != nil {
		return t.Options
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDrain retrieves the value of the leaf Drain from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drain is set, it can
// safely use t.GetDrain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet) GetDrain() bool {
	if t == nil || t.Drain == nil {
		return false
	}
	return *t.Drain
}

// GetIpv4Prefix retrieves the value of the leaf Ipv4Prefix from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Prefix is set, it can
// safely use t.GetIpv4Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet) GetIpv4Prefix() string {
	if t == nil || t.Ipv4Prefix == nil {
		return ""
	}
	return *t.Ipv4Prefix
}

// GetMaximumDeclined retrieves the value of the leaf MaximumDeclined from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumDeclined is set, it can
// safely use t.GetMaximumDeclined() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumDeclined == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet) GetMaximumDeclined() uint32 {
	if t == nil || t.MaximumDeclined == nil {
		return 64
	}
	return *t.MaximumDeclined
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Drain == nil {
		var v bool = false
		t.Drain = &v
	}
	if t.MaximumDeclined == nil {
		var v uint32 = 64
		t.MaximumDeclined = &v
	}
	t.MinimumFree.PopulateDefaults()
	t.Options.PopulateDefaults()
	for _, e := range t.AddressRange {
		e.PopulateDefaults()
	}
	for _, e := range t.ExcludeAddresses {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Prefix")
	}

	return map[string]interface{}{
		"ipv4-prefix": *t.Ipv4Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange represents the /nokia-conf/configure/router/dhcp-server/dhcpv4/pool/subnet/address-range YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange struct {
	ApplyGroups         []string                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                             `path:"apply-groups-exclude" module:"nokia-conf"`
	End                 *string                              `path:"end" module:"nokia-conf"`
	FailoverControlType E_NokiaTypesDhcp_FailoverControlType `path:"failover-control-type" module:"nokia-conf"`
	Start               *string                              `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetFailoverControlType retrieves the value of the leaf FailoverControlType from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FailoverControlType is set, it can
// safely use t.GetFailoverControlType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FailoverControlType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange) GetFailoverControlType() E_NokiaTypesDhcp_FailoverControlType {
	if t == nil || t.FailoverControlType == 0 {
		return NokiaTypesDhcp_FailoverControlType_local
	}
	return t.FailoverControlType
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FailoverControlType == 0 {
		t.FailoverControlType = NokiaTypesDhcp_FailoverControlType_local
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses represents the /nokia-conf/configure/router/dhcp-server/dhcpv4/pool/subnet/exclude-addresses YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses struct {
	End   *string `path:"end" module:"nokia-conf"`
	Start *string `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree represents the /nokia-conf/configure/router/dhcp-server/dhcpv4/pool/subnet/minimum-free YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree struct {
	Absolute          *uint32 `path:"absolute" module:"nokia-conf"`
	EventWhenDepleted *bool   `path:"event-when-depleted" module:"nokia-conf"`
	Percent           *uint32 `path:"percent" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree) IsYANGGoStruct() {}

// GetAbsolute retrieves the value of the leaf Absolute from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Absolute is set, it can
// safely use t.GetAbsolute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Absolute == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree) GetAbsolute() uint32 {
	if t == nil || t.Absolute == nil {
		return 1
	}
	return *t.Absolute
}

// GetEventWhenDepleted retrieves the value of the leaf EventWhenDepleted from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventWhenDepleted is set, it can
// safely use t.GetEventWhenDepleted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventWhenDepleted == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree) GetEventWhenDepleted() bool {
	if t == nil || t.EventWhenDepleted == nil {
		return false
	}
	return *t.EventWhenDepleted
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree) GetPercent() uint32 {
	if t == nil || t.Percent == nil {
		return 1
	}
	return *t.Percent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Absolute == nil {
		var v uint32 = 1
		t.Absolute = &v
	}
	if t.EventWhenDepleted == nil {
		var v bool = false
		t.EventWhenDepleted = &v
	}
	if t.Percent == nil {
		var v uint32 = 1
		t.Percent = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options represents the /nokia-conf/configure/router/dhcp-server/dhcpv4/pool/subnet/options YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options struct {
	Option map[NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union]*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option `path:"option" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options) IsYANGGoStruct() {}

// NewOption creates a new entry in the Option list of the
// NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options) NewOption(Number NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union) (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union]*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option)
	}

	key := Number

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Option[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Option", key)
	}

	t.Option[key] = &NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option{
		Number: Number,
	}

	return t.Option[key], nil
}

// RenameOption renames an entry in the list Option within
// the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options) RenameOption(oldK, newK NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union) error {
	if _, ok := t.Option[newK]; ok {
		return fmt.Errorf("key %v already exists in Option", newK)
	}

	e, ok := t.Option[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Option", oldK)
	}
	e.Number = newK

	t.Option[newK] = e
	delete(t.Option, oldK)
	return nil
}

// GetOrCreateOption retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options) GetOrCreateOption(Number NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union) *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option {

	key := Number

	if v, ok := t.Option[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOption(Number)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOption got unexpected error: %v", err))
	}
	return v
}

// GetOption retrieves the value with the specified key from
// the Option map field of NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options) GetOption(Number NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union) *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option {

	if t == nil {
		return nil
	}

	key := Number

	if lm, ok := t.Option[key]; ok {
		return lm
	}
	return nil
}

// DeleteOption deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options) DeleteOption(Number NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union) {
	key := Number

	delete(t.Option, key)
}

// AppendOption appends the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option struct to the
// list Option of NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options) AppendOption(v *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) error {
	key := v.Number

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union]*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option)
	}

	if _, ok := t.Option[key]; ok {
		return fmt.Errorf("duplicate key for list Option %v", key)
	}

	t.Option[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Option {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option represents the /nokia-conf/configure/router/dhcp-server/dhcpv4/pool/subnet/options/option YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option struct {
	ApplyGroups        []string                                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	AsciiString        *string                                                                                   `path:"ascii-string" module:"nokia-conf"`
	Duration           *uint32                                                                                   `path:"duration" module:"nokia-conf"`
	Empty              YANGEmpty                                                                                 `path:"empty" module:"nokia-conf"`
	HexString          *string                                                                                   `path:"hex-string" module:"nokia-conf"`
	Ipv4Address        []string                                                                                  `path:"ipv4-address" module:"nokia-conf"`
	NetbiosNodeType    E_NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_NetbiosNodeType `path:"netbios-node-type" module:"nokia-conf"`
	Number             NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union      `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetDuration retrieves the value of the leaf Duration from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Duration is set, it can
// safely use t.GetDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Duration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) GetDuration() uint32 {
	if t == nil || t.Duration == nil {
		return 0
	}
	return *t.Duration
}

// GetEmpty retrieves the value of the leaf Empty from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Empty is set, it can
// safely use t.GetEmpty() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Empty == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) GetEmpty() YANGEmpty {
	if t == nil || t.Empty == false {
		return false
	}
	return t.Empty
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) GetIpv4Address() []string {
	if t == nil || t.Ipv4Address == nil {
		return nil
	}
	return t.Ipv4Address
}

// GetNetbiosNodeType retrieves the value of the leaf NetbiosNodeType from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetbiosNodeType is set, it can
// safely use t.GetNetbiosNodeType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetbiosNodeType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) GetNetbiosNodeType() E_NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_NetbiosNodeType {
	if t == nil || t.NetbiosNodeType == 0 {
		return 0
	}
	return t.NetbiosNodeType
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) GetNumber() NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union {
	if t == nil || t.Number == nil {
		return nil
	}
	return t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"number": t.Number,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv6 represents the /nokia-conf/configure/router/dhcp-server/dhcpv6 YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv6 struct {
	AdminState         E_NokiaTypesSros_AdminState                                       `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	AutoProvisioned    *bool                                                             `path:"auto-provisioned" module:"nokia-conf"`
	Defaults           *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults            `path:"defaults" module:"nokia-conf"`
	Description        *string                                                           `path:"description" module:"nokia-conf"`
	Failover           *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover            `path:"failover" module:"nokia-conf"`
	IgnoreRapidCommit  *bool                                                             `path:"ignore-rapid-commit" module:"nokia-conf"`
	InterfaceIdMapping *bool                                                             `path:"interface-id-mapping" module:"nokia-conf"`
	LeaseHold          *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold           `path:"lease-hold" module:"nokia-conf"`
	LeaseQuery         *bool                                                             `path:"lease-query" module:"nokia-conf"`
	Name               *string                                                           `path:"name" module:"nokia-conf"`
	Pool               map[string]*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool     `path:"pool" module:"nokia-conf"`
	PoolSelection      *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection       `path:"pool-selection" module:"nokia-conf"`
	ServerId           *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId            `path:"server-id" module:"nokia-conf"`
	UserIdentification E_NokiaConf_Configure_Router_DhcpServer_Dhcpv6_UserIdentification `path:"user-identification" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6) IsYANGGoStruct() {}

// NewPool creates a new entry in the Pool list of the
// NokiaConf_Configure_Router_DhcpServer_Dhcpv6 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6) NewPool(PoolName string) (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool)
	}

	key := PoolName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Pool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Pool", key)
	}

	t.Pool[key] = &NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool{
		PoolName: &PoolName,
	}

	return t.Pool[key], nil
}

// RenamePool renames an entry in the list Pool within
// the NokiaConf_Configure_Router_DhcpServer_Dhcpv6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6) RenamePool(oldK, newK string) error {
	if _, ok := t.Pool[newK]; ok {
		return fmt.Errorf("key %v already exists in Pool", newK)
	}

	e, ok := t.Pool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Pool", oldK)
	}
	e.PoolName = &newK

	t.Pool[newK] = e
	delete(t.Pool, oldK)
	return nil
}

// GetOrCreatePool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer_Dhcpv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6) GetOrCreatePool(PoolName string) *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool {

	key := PoolName

	if v, ok := t.Pool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPool(PoolName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePool got unexpected error: %v", err))
	}
	return v
}

// GetPool retrieves the value with the specified key from
// the Pool map field of NokiaConf_Configure_Router_DhcpServer_Dhcpv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6) GetPool(PoolName string) *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool {

	if t == nil {
		return nil
	}

	key := PoolName

	if lm, ok := t.Pool[key]; ok {
		return lm
	}
	return nil
}

// DeletePool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer_Dhcpv6. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6) DeletePool(PoolName string) {
	key := PoolName

	delete(t.Pool, key)
}

// AppendPool appends the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool struct to the
// list Pool of NokiaConf_Configure_Router_DhcpServer_Dhcpv6. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6) AppendPool(v *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool) error {
	if v.PoolName == nil {
		return fmt.Errorf("invalid nil key received for PoolName")
	}

	key := *v.PoolName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool)
	}

	if _, ok := t.Pool[key]; ok {
		return fmt.Errorf("duplicate key for list Pool %v", key)
	}

	t.Pool[key] = v
	return nil
}

// GetOrCreateDefaults retrieves the value of the Defaults field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6) GetOrCreateDefaults() *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults {
	if t.Defaults != nil {
		return t.Defaults
	}
	t.Defaults = &NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults{}
	return t.Defaults
}

// GetOrCreateFailover retrieves the value of the Failover field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6) GetOrCreateFailover() *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover {
	if t.Failover != nil {
		return t.Failover
	}
	t.Failover = &NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover{}
	return t.Failover
}

// GetOrCreateLeaseHold retrieves the value of the LeaseHold field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6) GetOrCreateLeaseHold() *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold {
	if t.LeaseHold != nil {
		return t.LeaseHold
	}
	t.LeaseHold = &NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold{}
	return t.LeaseHold
}

// GetOrCreatePoolSelection retrieves the value of the PoolSelection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6) GetOrCreatePoolSelection() *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection {
	if t.PoolSelection != nil {
		return t.PoolSelection
	}
	t.PoolSelection = &NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection{}
	return t.PoolSelection
}

// GetOrCreateServerId retrieves the value of the ServerId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6) GetOrCreateServerId() *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId {
	if t.ServerId != nil {
		return t.ServerId
	}
	t.ServerId = &NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId{}
	return t.ServerId
}

// GetDefaults returns the value of the Defaults struct pointer
// from NokiaConf_Configure_Router_DhcpServer_Dhcpv6. If the receiver or the field Defaults is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6) GetDefaults() *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults {
	if t != nil && t.Defaults != nil {
		return t.Defaults
	}
	return nil
}

// GetFailover returns the value of the Failover struct pointer
// from NokiaConf_Configure_Router_DhcpServer_Dhcpv6. If the receiver or the field Failover is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6) GetFailover() *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover {
	if t != nil && t.Failover != nil {
		return t.Failover
	}
	return nil
}

// GetLeaseHold returns the value of the LeaseHold struct pointer
// from NokiaConf_Configure_Router_DhcpServer_Dhcpv6. If the receiver or the field LeaseHold is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6) GetLeaseHold() *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold {
	if t != nil && t.LeaseHold != nil {
		return t.LeaseHold
	}
	return nil
}

// GetPoolSelection returns the value of the PoolSelection struct pointer
// from NokiaConf_Configure_Router_DhcpServer_Dhcpv6. If the receiver or the field PoolSelection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6) GetPoolSelection() *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection {
	if t != nil && t.PoolSelection != nil {
		return t.PoolSelection
	}
	return nil
}

// GetServerId returns the value of the ServerId struct pointer
// from NokiaConf_Configure_Router_DhcpServer_Dhcpv6. If the receiver or the field ServerId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6) GetServerId() *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId {
	if t != nil && t.ServerId != nil {
		return t.ServerId
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAutoProvisioned retrieves the value of the leaf AutoProvisioned from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoProvisioned is set, it can
// safely use t.GetAutoProvisioned() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoProvisioned == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6) GetAutoProvisioned() bool {
	if t == nil || t.AutoProvisioned == nil {
		return false
	}
	return *t.AutoProvisioned
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIgnoreRapidCommit retrieves the value of the leaf IgnoreRapidCommit from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreRapidCommit is set, it can
// safely use t.GetIgnoreRapidCommit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreRapidCommit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6) GetIgnoreRapidCommit() bool {
	if t == nil || t.IgnoreRapidCommit == nil {
		return false
	}
	return *t.IgnoreRapidCommit
}

// GetInterfaceIdMapping retrieves the value of the leaf InterfaceIdMapping from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceIdMapping is set, it can
// safely use t.GetInterfaceIdMapping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceIdMapping == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6) GetInterfaceIdMapping() bool {
	if t == nil || t.InterfaceIdMapping == nil {
		return false
	}
	return *t.InterfaceIdMapping
}

// GetLeaseQuery retrieves the value of the leaf LeaseQuery from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LeaseQuery is set, it can
// safely use t.GetLeaseQuery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LeaseQuery == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6) GetLeaseQuery() bool {
	if t == nil || t.LeaseQuery == nil {
		return false
	}
	return *t.LeaseQuery
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetUserIdentification retrieves the value of the leaf UserIdentification from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserIdentification is set, it can
// safely use t.GetUserIdentification() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserIdentification == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6) GetUserIdentification() E_NokiaConf_Configure_Router_DhcpServer_Dhcpv6_UserIdentification {
	if t == nil || t.UserIdentification == 0 {
		return 0
	}
	return t.UserIdentification
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AutoProvisioned == nil {
		var v bool = false
		t.AutoProvisioned = &v
	}
	if t.IgnoreRapidCommit == nil {
		var v bool = false
		t.IgnoreRapidCommit = &v
	}
	if t.InterfaceIdMapping == nil {
		var v bool = false
		t.InterfaceIdMapping = &v
	}
	if t.LeaseQuery == nil {
		var v bool = false
		t.LeaseQuery = &v
	}
	t.Defaults.PopulateDefaults()
	t.Failover.PopulateDefaults()
	t.LeaseHold.PopulateDefaults()
	t.PoolSelection.PopulateDefaults()
	t.ServerId.PopulateDefaults()
	for _, e := range t.Pool {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_DhcpServer_Dhcpv6 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv6.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults represents the /nokia-conf/configure/router/dhcp-server/dhcpv6/defaults YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults struct {
	ApplyGroups        []string                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Options            *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options `path:"options" module:"nokia-conf"`
	PreferredLifetime  *uint32                                                        `path:"preferred-lifetime" module:"nokia-conf"`
	RebindTime         *uint32                                                        `path:"rebind-time" module:"nokia-conf"`
	RenewTime          *uint32                                                        `path:"renew-time" module:"nokia-conf"`
	ValidLifetime      *uint32                                                        `path:"valid-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults) IsYANGGoStruct() {}

// GetOrCreateOptions retrieves the value of the Options field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults) GetOrCreateOptions() *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options {
	if t.Options != nil {
		return t.Options
	}
	t.Options = &NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options{}
	return t.Options
}

// GetOptions returns the value of the Options struct pointer
// from NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults. If the receiver or the field Options is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults) GetOptions() *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options {
	if t != nil && t.Options != nil {
		return t.Options
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPreferredLifetime retrieves the value of the leaf PreferredLifetime from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferredLifetime is set, it can
// safely use t.GetPreferredLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferredLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults) GetPreferredLifetime() uint32 {
	if t == nil || t.PreferredLifetime == nil {
		return 3600
	}
	return *t.PreferredLifetime
}

// GetRebindTime retrieves the value of the leaf RebindTime from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RebindTime is set, it can
// safely use t.GetRebindTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RebindTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults) GetRebindTime() uint32 {
	if t == nil || t.RebindTime == nil {
		return 2880
	}
	return *t.RebindTime
}

// GetRenewTime retrieves the value of the leaf RenewTime from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RenewTime is set, it can
// safely use t.GetRenewTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RenewTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults) GetRenewTime() uint32 {
	if t == nil || t.RenewTime == nil {
		return 1800
	}
	return *t.RenewTime
}

// GetValidLifetime retrieves the value of the leaf ValidLifetime from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidLifetime is set, it can
// safely use t.GetValidLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults) GetValidLifetime() uint32 {
	if t == nil || t.ValidLifetime == nil {
		return 86400
	}
	return *t.ValidLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PreferredLifetime == nil {
		var v uint32 = 3600
		t.PreferredLifetime = &v
	}
	if t.RebindTime == nil {
		var v uint32 = 2880
		t.RebindTime = &v
	}
	if t.RenewTime == nil {
		var v uint32 = 1800
		t.RenewTime = &v
	}
	if t.ValidLifetime == nil {
		var v uint32 = 86400
		t.ValidLifetime = &v
	}
	t.Options.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options represents the /nokia-conf/configure/router/dhcp-server/dhcpv6/defaults/options YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options struct {
	Option map[NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union]*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option `path:"option" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options) IsYANGGoStruct() {}

// NewOption creates a new entry in the Option list of the
// NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options) NewOption(Number NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union) (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union]*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option)
	}

	key := Number

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Option[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Option", key)
	}

	t.Option[key] = &NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option{
		Number: Number,
	}

	return t.Option[key], nil
}

// RenameOption renames an entry in the list Option within
// the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options) RenameOption(oldK, newK NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union) error {
	if _, ok := t.Option[newK]; ok {
		return fmt.Errorf("key %v already exists in Option", newK)
	}

	e, ok := t.Option[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Option", oldK)
	}
	e.Number = newK

	t.Option[newK] = e
	delete(t.Option, oldK)
	return nil
}

// GetOrCreateOption retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options) GetOrCreateOption(Number NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union) *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option {

	key := Number

	if v, ok := t.Option[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOption(Number)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOption got unexpected error: %v", err))
	}
	return v
}

// GetOption retrieves the value with the specified key from
// the Option map field of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options) GetOption(Number NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union) *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option {

	if t == nil {
		return nil
	}

	key := Number

	if lm, ok := t.Option[key]; ok {
		return lm
	}
	return nil
}

// DeleteOption deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options) DeleteOption(Number NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union) {
	key := Number

	delete(t.Option, key)
}

// AppendOption appends the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option struct to the
// list Option of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options) AppendOption(v *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option) error {
	key := v.Number

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union]*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option)
	}

	if _, ok := t.Option[key]; ok {
		return fmt.Errorf("duplicate key for list Option %v", key)
	}

	t.Option[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Option {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option represents the /nokia-conf/configure/router/dhcp-server/dhcpv6/defaults/options/option YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option struct {
	ApplyGroups        []string                                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	AsciiString        *string                                                                           `path:"ascii-string" module:"nokia-conf"`
	DomainString       *string                                                                           `path:"domain-string" module:"nokia-conf"`
	Duration           *uint32                                                                           `path:"duration" module:"nokia-conf"`
	Empty              YANGEmpty                                                                         `path:"empty" module:"nokia-conf"`
	HexString          *string                                                                           `path:"hex-string" module:"nokia-conf"`
	Ipv6Address        []string                                                                          `path:"ipv6-address" module:"nokia-conf"`
	Number             NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetDomainString retrieves the value of the leaf DomainString from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainString is set, it can
// safely use t.GetDomainString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option) GetDomainString() string {
	if t == nil || t.DomainString == nil {
		return ""
	}
	return *t.DomainString
}

// GetDuration retrieves the value of the leaf Duration from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Duration is set, it can
// safely use t.GetDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Duration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option) GetDuration() uint32 {
	if t == nil || t.Duration == nil {
		return 0
	}
	return *t.Duration
}

// GetEmpty retrieves the value of the leaf Empty from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Empty is set, it can
// safely use t.GetEmpty() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Empty == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option) GetEmpty() YANGEmpty {
	if t == nil || t.Empty == false {
		return false
	}
	return t.Empty
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option) GetIpv6Address() []string {
	if t == nil || t.Ipv6Address == nil {
		return nil
	}
	return t.Ipv6Address
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option) GetNumber() NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union {
	if t == nil || t.Number == nil {
		return nil
	}
	return t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"number": t.Number,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Defaults_Options_Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover represents the /nokia-conf/configure/router/dhcp-server/dhcpv6/failover YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover struct {
	AdminState            E_NokiaTypesSros_AdminState                                            `path:"admin-state" module:"nokia-conf"`
	ApplyGroups           []string                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	IgnoreMcltOnTakeover  *bool                                                                  `path:"ignore-mclt-on-takeover" module:"nokia-conf"`
	MaximumClientLeadTime *uint32                                                                `path:"maximum-client-lead-time" module:"nokia-conf"`
	PartnerDownDelay      *uint32                                                                `path:"partner-down-delay" module:"nokia-conf"`
	Peer                  map[string]*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover_Peer `path:"peer" module:"nokia-conf"`
	StartupWaitTime       *uint32                                                                `path:"startup-wait-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover) IsYANGGoStruct() {}

// NewPeer creates a new entry in the Peer list of the
// NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover) NewPeer(Address string) (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover_Peer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover_Peer)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover_Peer{
		Address: &Address,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover) RenamePeer(oldK, newK string) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.Address = &newK

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover) GetOrCreatePeer(Address string) *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover_Peer {

	key := Address

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover) GetPeer(Address string) *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover_Peer {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover) DeletePeer(Address string) {
	key := Address

	delete(t.Peer, key)
}

// AppendPeer appends the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover_Peer struct to the
// list Peer of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover_Peer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover) AppendPeer(v *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover_Peer) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIgnoreMcltOnTakeover retrieves the value of the leaf IgnoreMcltOnTakeover from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreMcltOnTakeover is set, it can
// safely use t.GetIgnoreMcltOnTakeover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreMcltOnTakeover == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover) GetIgnoreMcltOnTakeover() bool {
	if t == nil || t.IgnoreMcltOnTakeover == nil {
		return false
	}
	return *t.IgnoreMcltOnTakeover
}

// GetMaximumClientLeadTime retrieves the value of the leaf MaximumClientLeadTime from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumClientLeadTime is set, it can
// safely use t.GetMaximumClientLeadTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumClientLeadTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover) GetMaximumClientLeadTime() uint32 {
	if t == nil || t.MaximumClientLeadTime == nil {
		return 600
	}
	return *t.MaximumClientLeadTime
}

// GetPartnerDownDelay retrieves the value of the leaf PartnerDownDelay from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PartnerDownDelay is set, it can
// safely use t.GetPartnerDownDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PartnerDownDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover) GetPartnerDownDelay() uint32 {
	if t == nil || t.PartnerDownDelay == nil {
		return 86399
	}
	return *t.PartnerDownDelay
}

// GetStartupWaitTime retrieves the value of the leaf StartupWaitTime from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartupWaitTime is set, it can
// safely use t.GetStartupWaitTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartupWaitTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover) GetStartupWaitTime() uint32 {
	if t == nil || t.StartupWaitTime == nil {
		return 120
	}
	return *t.StartupWaitTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.IgnoreMcltOnTakeover == nil {
		var v bool = false
		t.IgnoreMcltOnTakeover = &v
	}
	if t.MaximumClientLeadTime == nil {
		var v uint32 = 600
		t.MaximumClientLeadTime = &v
	}
	if t.PartnerDownDelay == nil {
		var v uint32 = 86399
		t.PartnerDownDelay = &v
	}
	if t.StartupWaitTime == nil {
		var v uint32 = 120
		t.StartupWaitTime = &v
	}
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover_Peer represents the /nokia-conf/configure/router/dhcp-server/dhcpv6/failover/peer YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover_Peer struct {
	Address            *string  `path:"address" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	SyncTag            *string  `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover_Peer) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover_Peer) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover_Peer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover_Peer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover_Peer) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover_Peer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover_Peer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover_Peer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover_Peer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover_Peer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover_Peer.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Failover_Peer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold represents the /nokia-conf/configure/router/dhcp-server/dhcpv6/lease-hold YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold struct {
	AdditionalScenarios *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios `path:"additional-scenarios" module:"nokia-conf"`
	Time                *uint32                                                                     `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold) IsYANGGoStruct() {}

// GetOrCreateAdditionalScenarios retrieves the value of the AdditionalScenarios field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold) GetOrCreateAdditionalScenarios() *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios {
	if t.AdditionalScenarios != nil {
		return t.AdditionalScenarios
	}
	t.AdditionalScenarios = &NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios{}
	return t.AdditionalScenarios
}

// GetAdditionalScenarios returns the value of the AdditionalScenarios struct pointer
// from NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold. If the receiver or the field AdditionalScenarios is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold) GetAdditionalScenarios() *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios {
	if t != nil && t.AdditionalScenarios != nil {
		return t.AdditionalScenarios
	}
	return nil
}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold) GetTime() uint32 {
	if t == nil || t.Time == nil {
		return 0
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AdditionalScenarios.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios represents the /nokia-conf/configure/router/dhcp-server/dhcpv6/lease-hold/additional-scenarios YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios struct {
	InternalLeaseIpsec *bool `path:"internal-lease-ipsec" module:"nokia-conf"`
	SolicitedRelease   *bool `path:"solicited-release" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios) IsYANGGoStruct() {}

// GetInternalLeaseIpsec retrieves the value of the leaf InternalLeaseIpsec from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InternalLeaseIpsec is set, it can
// safely use t.GetInternalLeaseIpsec() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InternalLeaseIpsec == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios) GetInternalLeaseIpsec() bool {
	if t == nil || t.InternalLeaseIpsec == nil {
		return false
	}
	return *t.InternalLeaseIpsec
}

// GetSolicitedRelease retrieves the value of the leaf SolicitedRelease from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SolicitedRelease is set, it can
// safely use t.GetSolicitedRelease() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SolicitedRelease == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios) GetSolicitedRelease() bool {
	if t == nil || t.SolicitedRelease == nil {
		return false
	}
	return *t.SolicitedRelease
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InternalLeaseIpsec == nil {
		var v bool = false
		t.InternalLeaseIpsec = &v
	}
	if t.SolicitedRelease == nil {
		var v bool = false
		t.SolicitedRelease = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool represents the /nokia-conf/configure/router/dhcp-server/dhcpv6/pool YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool struct {
	ApplyGroups           []string                                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	DelegatedPrefix       *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix                  `path:"delegated-prefix" module:"nokia-conf"`
	Description           *string                                                                             `path:"description" module:"nokia-conf"`
	ExcludePrefix         map[string]*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix         `path:"exclude-prefix" module:"nokia-conf"`
	Failover              *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover                         `path:"failover" module:"nokia-conf"`
	Options               *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options                          `path:"options" module:"nokia-conf"`
	PoolName              *string                                                                             `path:"pool-name" module:"nokia-conf"`
	Prefix                map[string]*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix                `path:"prefix" module:"nokia-conf"`
	PrefixLengthThreshold map[uint32]*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold `path:"prefix-length-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool) IsYANGGoStruct() {}

// NewExcludePrefix creates a new entry in the ExcludePrefix list of the
// NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool) NewExcludePrefix(Ipv6Prefix string) (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExcludePrefix == nil {
		t.ExcludePrefix = make(map[string]*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix)
	}

	key := Ipv6Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ExcludePrefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ExcludePrefix", key)
	}

	t.ExcludePrefix[key] = &NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix{
		Ipv6Prefix: &Ipv6Prefix,
	}

	return t.ExcludePrefix[key], nil
}

// RenameExcludePrefix renames an entry in the list ExcludePrefix within
// the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool) RenameExcludePrefix(oldK, newK string) error {
	if _, ok := t.ExcludePrefix[newK]; ok {
		return fmt.Errorf("key %v already exists in ExcludePrefix", newK)
	}

	e, ok := t.ExcludePrefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ExcludePrefix", oldK)
	}
	e.Ipv6Prefix = &newK

	t.ExcludePrefix[newK] = e
	delete(t.ExcludePrefix, oldK)
	return nil
}

// GetOrCreateExcludePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool) GetOrCreateExcludePrefix(Ipv6Prefix string) *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix {

	key := Ipv6Prefix

	if v, ok := t.ExcludePrefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExcludePrefix(Ipv6Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExcludePrefix got unexpected error: %v", err))
	}
	return v
}

// GetExcludePrefix retrieves the value with the specified key from
// the ExcludePrefix map field of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool) GetExcludePrefix(Ipv6Prefix string) *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix {

	if t == nil {
		return nil
	}

	key := Ipv6Prefix

	if lm, ok := t.ExcludePrefix[key]; ok {
		return lm
	}
	return nil
}

// DeleteExcludePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool) DeleteExcludePrefix(Ipv6Prefix string) {
	key := Ipv6Prefix

	delete(t.ExcludePrefix, key)
}

// AppendExcludePrefix appends the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix struct to the
// list ExcludePrefix of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool) AppendExcludePrefix(v *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix) error {
	if v.Ipv6Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Prefix")
	}

	key := *v.Ipv6Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExcludePrefix == nil {
		t.ExcludePrefix = make(map[string]*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix)
	}

	if _, ok := t.ExcludePrefix[key]; ok {
		return fmt.Errorf("duplicate key for list ExcludePrefix %v", key)
	}

	t.ExcludePrefix[key] = v
	return nil
}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool) NewPrefix(Ipv6Prefix string) (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix)
	}

	key := Ipv6Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix{
		Ipv6Prefix: &Ipv6Prefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.Ipv6Prefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool) GetOrCreatePrefix(Ipv6Prefix string) *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix {

	key := Ipv6Prefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(Ipv6Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool) GetPrefix(Ipv6Prefix string) *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix {

	if t == nil {
		return nil
	}

	key := Ipv6Prefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool) DeletePrefix(Ipv6Prefix string) {
	key := Ipv6Prefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix struct to the
// list Prefix of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool) AppendPrefix(v *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix) error {
	if v.Ipv6Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Prefix")
	}

	key := *v.Ipv6Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// NewPrefixLengthThreshold creates a new entry in the PrefixLengthThreshold list of the
// NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool) NewPrefixLengthThreshold(PrefixLength uint32) (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixLengthThreshold == nil {
		t.PrefixLengthThreshold = make(map[uint32]*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold)
	}

	key := PrefixLength

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrefixLengthThreshold[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrefixLengthThreshold", key)
	}

	t.PrefixLengthThreshold[key] = &NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold{
		PrefixLength: &PrefixLength,
	}

	return t.PrefixLengthThreshold[key], nil
}

// RenamePrefixLengthThreshold renames an entry in the list PrefixLengthThreshold within
// the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool) RenamePrefixLengthThreshold(oldK, newK uint32) error {
	if _, ok := t.PrefixLengthThreshold[newK]; ok {
		return fmt.Errorf("key %v already exists in PrefixLengthThreshold", newK)
	}

	e, ok := t.PrefixLengthThreshold[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrefixLengthThreshold", oldK)
	}
	e.PrefixLength = &newK

	t.PrefixLengthThreshold[newK] = e
	delete(t.PrefixLengthThreshold, oldK)
	return nil
}

// GetOrCreatePrefixLengthThreshold retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool) GetOrCreatePrefixLengthThreshold(PrefixLength uint32) *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold {

	key := PrefixLength

	if v, ok := t.PrefixLengthThreshold[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefixLengthThreshold(PrefixLength)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefixLengthThreshold got unexpected error: %v", err))
	}
	return v
}

// GetPrefixLengthThreshold retrieves the value with the specified key from
// the PrefixLengthThreshold map field of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool) GetPrefixLengthThreshold(PrefixLength uint32) *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold {

	if t == nil {
		return nil
	}

	key := PrefixLength

	if lm, ok := t.PrefixLengthThreshold[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefixLengthThreshold deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool) DeletePrefixLengthThreshold(PrefixLength uint32) {
	key := PrefixLength

	delete(t.PrefixLengthThreshold, key)
}

// AppendPrefixLengthThreshold appends the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold struct to the
// list PrefixLengthThreshold of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool) AppendPrefixLengthThreshold(v *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) error {
	if v.PrefixLength == nil {
		return fmt.Errorf("invalid nil key received for PrefixLength")
	}

	key := *v.PrefixLength

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixLengthThreshold == nil {
		t.PrefixLengthThreshold = make(map[uint32]*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold)
	}

	if _, ok := t.PrefixLengthThreshold[key]; ok {
		return fmt.Errorf("duplicate key for list PrefixLengthThreshold %v", key)
	}

	t.PrefixLengthThreshold[key] = v
	return nil
}

// GetOrCreateDelegatedPrefix retrieves the value of the DelegatedPrefix field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool) GetOrCreateDelegatedPrefix() *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix {
	if t.DelegatedPrefix != nil {
		return t.DelegatedPrefix
	}
	t.DelegatedPrefix = &NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix{}
	return t.DelegatedPrefix
}

// GetOrCreateFailover retrieves the value of the Failover field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool) GetOrCreateFailover() *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover {
	if t.Failover != nil {
		return t.Failover
	}
	t.Failover = &NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover{}
	return t.Failover
}

// GetOrCreateOptions retrieves the value of the Options field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool) GetOrCreateOptions() *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options {
	if t.Options != nil {
		return t.Options
	}
	t.Options = &NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options{}
	return t.Options
}

// GetDelegatedPrefix returns the value of the DelegatedPrefix struct pointer
// from NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool. If the receiver or the field DelegatedPrefix is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool) GetDelegatedPrefix() *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix {
	if t != nil && t.DelegatedPrefix != nil {
		return t.DelegatedPrefix
	}
	return nil
}

// GetFailover returns the value of the Failover struct pointer
// from NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool. If the receiver or the field Failover is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool) GetFailover() *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover {
	if t != nil && t.Failover != nil {
		return t.Failover
	}
	return nil
}

// GetOptions returns the value of the Options struct pointer
// from NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool. If the receiver or the field Options is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool) GetOptions() *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options {
	if t != nil && t.Options != nil {
		return t.Options
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPoolName retrieves the value of the leaf PoolName from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PoolName is set, it can
// safely use t.GetPoolName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PoolName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool) GetPoolName() string {
	if t == nil || t.PoolName == nil {
		return ""
	}
	return *t.PoolName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DelegatedPrefix.PopulateDefaults()
	t.Failover.PopulateDefaults()
	t.Options.PopulateDefaults()
	for _, e := range t.ExcludePrefix {
		e.PopulateDefaults()
	}
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
	for _, e := range t.PrefixLengthThreshold {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PoolName == nil {
		return nil, fmt.Errorf("nil value for key PoolName")
	}

	return map[string]interface{}{
		"pool-name": *t.PoolName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection represents the /nokia-conf/configure/router/dhcp-server/dhcpv6/pool-selection YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection struct {
	UseLinkAddress    *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress    `path:"use-link-address" module:"nokia-conf" yangPresence:"true"`
	UsePoolFromClient *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient `path:"use-pool-from-client" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection) IsYANGGoStruct() {}

// GetOrCreateUseLinkAddress retrieves the value of the UseLinkAddress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection) GetOrCreateUseLinkAddress() *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress {
	if t.UseLinkAddress != nil {
		return t.UseLinkAddress
	}
	t.UseLinkAddress = &NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress{}
	return t.UseLinkAddress
}

// GetOrCreateUsePoolFromClient retrieves the value of the UsePoolFromClient field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection) GetOrCreateUsePoolFromClient() *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient {
	if t.UsePoolFromClient != nil {
		return t.UsePoolFromClient
	}
	t.UsePoolFromClient = &NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient{}
	return t.UsePoolFromClient
}

// GetUseLinkAddress returns the value of the UseLinkAddress struct pointer
// from NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection. If the receiver or the field UseLinkAddress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection) GetUseLinkAddress() *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress {
	if t != nil && t.UseLinkAddress != nil {
		return t.UseLinkAddress
	}
	return nil
}

// GetUsePoolFromClient returns the value of the UsePoolFromClient struct pointer
// from NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection. If the receiver or the field UsePoolFromClient is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection) GetUsePoolFromClient() *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient {
	if t != nil && t.UsePoolFromClient != nil {
		return t.UsePoolFromClient
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.UseLinkAddress.PopulateDefaults()
	t.UsePoolFromClient.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress represents the /nokia-conf/configure/router/dhcp-server/dhcpv6/pool-selection/use-link-address YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress struct {
	Scope E_NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress_Scope `path:"scope" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress) IsYANGGoStruct() {}

// GetScope retrieves the value of the leaf Scope from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scope is set, it can
// safely use t.GetScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scope == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress) GetScope() E_NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress_Scope {
	if t == nil || t.Scope == 0 {
		return NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress_Scope_subnet
	}
	return t.Scope
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Scope == 0 {
		t.Scope = NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress_Scope_subnet
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient represents the /nokia-conf/configure/router/dhcp-server/dhcpv6/pool-selection/use-pool-from-client YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient struct {
	Delimiter *string `path:"delimiter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient) IsYANGGoStruct() {
}

// GetDelimiter retrieves the value of the leaf Delimiter from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Delimiter is set, it can
// safely use t.GetDelimiter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Delimiter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient) GetDelimiter() string {
	if t == nil || t.Delimiter == nil {
		return ""
	}
	return *t.Delimiter
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix represents the /nokia-conf/configure/router/dhcp-server/dhcpv6/pool/delegated-prefix YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix struct {
	Length  *uint32 `path:"length" module:"nokia-conf"`
	Maximum *uint32 `path:"maximum" module:"nokia-conf"`
	Minimum *uint32 `path:"minimum" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix) IsYANGGoStruct() {}

// GetLength retrieves the value of the leaf Length from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Length is set, it can
// safely use t.GetLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Length == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix) GetLength() uint32 {
	if t == nil || t.Length == nil {
		return 64
	}
	return *t.Length
}

// GetMaximum retrieves the value of the leaf Maximum from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Maximum is set, it can
// safely use t.GetMaximum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Maximum == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix) GetMaximum() uint32 {
	if t == nil || t.Maximum == nil {
		return 64
	}
	return *t.Maximum
}

// GetMinimum retrieves the value of the leaf Minimum from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Minimum is set, it can
// safely use t.GetMinimum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Minimum == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix) GetMinimum() uint32 {
	if t == nil || t.Minimum == nil {
		return 48
	}
	return *t.Minimum
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Length == nil {
		var v uint32 = 64
		t.Length = &v
	}
	if t.Maximum == nil {
		var v uint32 = 64
		t.Maximum = &v
	}
	if t.Minimum == nil {
		var v uint32 = 48
		t.Minimum = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix represents the /nokia-conf/configure/router/dhcp-server/dhcpv6/pool/exclude-prefix YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix struct {
	Ipv6Prefix *string `path:"ipv6-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix) IsYANGGoStruct() {}

// GetIpv6Prefix retrieves the value of the leaf Ipv6Prefix from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Prefix is set, it can
// safely use t.GetIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix) GetIpv6Prefix() string {
	if t == nil || t.Ipv6Prefix == nil {
		return ""
	}
	return *t.Ipv6Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Prefix")
	}

	return map[string]interface{}{
		"ipv6-prefix": *t.Ipv6Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover represents the /nokia-conf/configure/router/dhcp-server/dhcpv6/pool/failover YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover struct {
	AdminState            E_NokiaTypesSros_AdminState                                                 `path:"admin-state" module:"nokia-conf"`
	ApplyGroups           []string                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	IgnoreMcltOnTakeover  *bool                                                                       `path:"ignore-mclt-on-takeover" module:"nokia-conf"`
	MaximumClientLeadTime *uint32                                                                     `path:"maximum-client-lead-time" module:"nokia-conf"`
	PartnerDownDelay      *uint32                                                                     `path:"partner-down-delay" module:"nokia-conf"`
	Peer                  map[string]*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer `path:"peer" module:"nokia-conf"`
	StartupWaitTime       *uint32                                                                     `path:"startup-wait-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover) IsYANGGoStruct() {}

// NewPeer creates a new entry in the Peer list of the
// NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover) NewPeer(Address string) (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer{
		Address: &Address,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover) RenamePeer(oldK, newK string) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.Address = &newK

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover) GetOrCreatePeer(Address string) *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer {

	key := Address

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover) GetPeer(Address string) *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover) DeletePeer(Address string) {
	key := Address

	delete(t.Peer, key)
}

// AppendPeer appends the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer struct to the
// list Peer of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover) AppendPeer(v *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIgnoreMcltOnTakeover retrieves the value of the leaf IgnoreMcltOnTakeover from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreMcltOnTakeover is set, it can
// safely use t.GetIgnoreMcltOnTakeover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreMcltOnTakeover == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover) GetIgnoreMcltOnTakeover() bool {
	if t == nil || t.IgnoreMcltOnTakeover == nil {
		return false
	}
	return *t.IgnoreMcltOnTakeover
}

// GetMaximumClientLeadTime retrieves the value of the leaf MaximumClientLeadTime from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumClientLeadTime is set, it can
// safely use t.GetMaximumClientLeadTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumClientLeadTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover) GetMaximumClientLeadTime() uint32 {
	if t == nil || t.MaximumClientLeadTime == nil {
		return 600
	}
	return *t.MaximumClientLeadTime
}

// GetPartnerDownDelay retrieves the value of the leaf PartnerDownDelay from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PartnerDownDelay is set, it can
// safely use t.GetPartnerDownDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PartnerDownDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover) GetPartnerDownDelay() uint32 {
	if t == nil || t.PartnerDownDelay == nil {
		return 86399
	}
	return *t.PartnerDownDelay
}

// GetStartupWaitTime retrieves the value of the leaf StartupWaitTime from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartupWaitTime is set, it can
// safely use t.GetStartupWaitTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartupWaitTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover) GetStartupWaitTime() uint32 {
	if t == nil || t.StartupWaitTime == nil {
		return 120
	}
	return *t.StartupWaitTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.IgnoreMcltOnTakeover == nil {
		var v bool = false
		t.IgnoreMcltOnTakeover = &v
	}
	if t.MaximumClientLeadTime == nil {
		var v uint32 = 600
		t.MaximumClientLeadTime = &v
	}
	if t.PartnerDownDelay == nil {
		var v uint32 = 86399
		t.PartnerDownDelay = &v
	}
	if t.StartupWaitTime == nil {
		var v uint32 = 120
		t.StartupWaitTime = &v
	}
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer represents the /nokia-conf/configure/router/dhcp-server/dhcpv6/pool/failover/peer YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer struct {
	Address            *string  `path:"address" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	SyncTag            *string  `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options represents the /nokia-conf/configure/router/dhcp-server/dhcpv6/pool/options YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options struct {
	Option map[NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union]*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option `path:"option" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options) IsYANGGoStruct() {}

// NewOption creates a new entry in the Option list of the
// NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options) NewOption(Number NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union) (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union]*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option)
	}

	key := Number

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Option[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Option", key)
	}

	t.Option[key] = &NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option{
		Number: Number,
	}

	return t.Option[key], nil
}

// RenameOption renames an entry in the list Option within
// the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options) RenameOption(oldK, newK NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union) error {
	if _, ok := t.Option[newK]; ok {
		return fmt.Errorf("key %v already exists in Option", newK)
	}

	e, ok := t.Option[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Option", oldK)
	}
	e.Number = newK

	t.Option[newK] = e
	delete(t.Option, oldK)
	return nil
}

// GetOrCreateOption retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options) GetOrCreateOption(Number NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union) *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option {

	key := Number

	if v, ok := t.Option[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOption(Number)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOption got unexpected error: %v", err))
	}
	return v
}

// GetOption retrieves the value with the specified key from
// the Option map field of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options) GetOption(Number NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union) *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option {

	if t == nil {
		return nil
	}

	key := Number

	if lm, ok := t.Option[key]; ok {
		return lm
	}
	return nil
}

// DeleteOption deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options) DeleteOption(Number NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union) {
	key := Number

	delete(t.Option, key)
}

// AppendOption appends the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option struct to the
// list Option of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options) AppendOption(v *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option) error {
	key := v.Number

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union]*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option)
	}

	if _, ok := t.Option[key]; ok {
		return fmt.Errorf("duplicate key for list Option %v", key)
	}

	t.Option[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Option {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option represents the /nokia-conf/configure/router/dhcp-server/dhcpv6/pool/options/option YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option struct {
	ApplyGroups        []string                                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	AsciiString        *string                                                                       `path:"ascii-string" module:"nokia-conf"`
	DomainString       *string                                                                       `path:"domain-string" module:"nokia-conf"`
	Duration           *uint32                                                                       `path:"duration" module:"nokia-conf"`
	Empty              YANGEmpty                                                                     `path:"empty" module:"nokia-conf"`
	HexString          *string                                                                       `path:"hex-string" module:"nokia-conf"`
	Ipv6Address        []string                                                                      `path:"ipv6-address" module:"nokia-conf"`
	Number             NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetDomainString retrieves the value of the leaf DomainString from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainString is set, it can
// safely use t.GetDomainString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option) GetDomainString() string {
	if t == nil || t.DomainString == nil {
		return ""
	}
	return *t.DomainString
}

// GetDuration retrieves the value of the leaf Duration from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Duration is set, it can
// safely use t.GetDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Duration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option) GetDuration() uint32 {
	if t == nil || t.Duration == nil {
		return 0
	}
	return *t.Duration
}

// GetEmpty retrieves the value of the leaf Empty from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Empty is set, it can
// safely use t.GetEmpty() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Empty == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option) GetEmpty() YANGEmpty {
	if t == nil || t.Empty == false {
		return false
	}
	return t.Empty
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option) GetIpv6Address() []string {
	if t == nil || t.Ipv6Address == nil {
		return nil
	}
	return t.Ipv6Address
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option) GetNumber() NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union {
	if t == nil || t.Number == nil {
		return nil
	}
	return t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"number": t.Number,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Options_Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix represents the /nokia-conf/configure/router/dhcp-server/dhcpv6/pool/prefix YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix struct {
	ApplyGroups           []string                                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Drain                 *bool                                                                                      `path:"drain" module:"nokia-conf"`
	FailoverControlType   E_NokiaTypesDhcp_FailoverControlType                                                       `path:"failover-control-type" module:"nokia-conf"`
	Ipv6Prefix            *string                                                                                    `path:"ipv6-prefix" module:"nokia-conf"`
	Options               *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options                          `path:"options" module:"nokia-conf"`
	PreferredLifetime     *uint32                                                                                    `path:"preferred-lifetime" module:"nokia-conf"`
	PrefixLengthThreshold map[uint32]*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold `path:"prefix-length-threshold" module:"nokia-conf"`
	PrefixType            *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType                       `path:"prefix-type" module:"nokia-conf"`
	RebindTime            *uint32                                                                                    `path:"rebind-time" module:"nokia-conf"`
	RenewTime             *uint32                                                                                    `path:"renew-time" module:"nokia-conf"`
	ValidLifetime         *uint32                                                                                    `path:"valid-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix) IsYANGGoStruct() {}

// NewPrefixLengthThreshold creates a new entry in the PrefixLengthThreshold list of the
// NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix) NewPrefixLengthThreshold(PrefixLength uint32) (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixLengthThreshold == nil {
		t.PrefixLengthThreshold = make(map[uint32]*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold)
	}

	key := PrefixLength

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrefixLengthThreshold[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrefixLengthThreshold", key)
	}

	t.PrefixLengthThreshold[key] = &NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold{
		PrefixLength: &PrefixLength,
	}

	return t.PrefixLengthThreshold[key], nil
}

// RenamePrefixLengthThreshold renames an entry in the list PrefixLengthThreshold within
// the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix) RenamePrefixLengthThreshold(oldK, newK uint32) error {
	if _, ok := t.PrefixLengthThreshold[newK]; ok {
		return fmt.Errorf("key %v already exists in PrefixLengthThreshold", newK)
	}

	e, ok := t.PrefixLengthThreshold[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrefixLengthThreshold", oldK)
	}
	e.PrefixLength = &newK

	t.PrefixLengthThreshold[newK] = e
	delete(t.PrefixLengthThreshold, oldK)
	return nil
}

// GetOrCreatePrefixLengthThreshold retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix) GetOrCreatePrefixLengthThreshold(PrefixLength uint32) *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold {

	key := PrefixLength

	if v, ok := t.PrefixLengthThreshold[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefixLengthThreshold(PrefixLength)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefixLengthThreshold got unexpected error: %v", err))
	}
	return v
}

// GetPrefixLengthThreshold retrieves the value with the specified key from
// the PrefixLengthThreshold map field of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix) GetPrefixLengthThreshold(PrefixLength uint32) *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold {

	if t == nil {
		return nil
	}

	key := PrefixLength

	if lm, ok := t.PrefixLengthThreshold[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefixLengthThreshold deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix) DeletePrefixLengthThreshold(PrefixLength uint32) {
	key := PrefixLength

	delete(t.PrefixLengthThreshold, key)
}

// AppendPrefixLengthThreshold appends the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold struct to the
// list PrefixLengthThreshold of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix) AppendPrefixLengthThreshold(v *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) error {
	if v.PrefixLength == nil {
		return fmt.Errorf("invalid nil key received for PrefixLength")
	}

	key := *v.PrefixLength

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixLengthThreshold == nil {
		t.PrefixLengthThreshold = make(map[uint32]*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold)
	}

	if _, ok := t.PrefixLengthThreshold[key]; ok {
		return fmt.Errorf("duplicate key for list PrefixLengthThreshold %v", key)
	}

	t.PrefixLengthThreshold[key] = v
	return nil
}

// GetOrCreateOptions retrieves the value of the Options field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix) GetOrCreateOptions() *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options {
	if t.Options != nil {
		return t.Options
	}
	t.Options = &NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options{}
	return t.Options
}

// GetOrCreatePrefixType retrieves the value of the PrefixType field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix) GetOrCreatePrefixType() *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType {
	if t.PrefixType != nil {
		return t.PrefixType
	}
	t.PrefixType = &NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType{}
	return t.PrefixType
}

// GetOptions returns the value of the Options struct pointer
// from NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix. If the receiver or the field Options is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix) GetOptions() *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options {
	if t != nil && t.Options != nil {
		return t.Options
	}
	return nil
}

// GetPrefixType returns the value of the PrefixType struct pointer
// from NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix. If the receiver or the field PrefixType is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix) GetPrefixType() *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType {
	if t != nil && t.PrefixType != nil {
		return t.PrefixType
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDrain retrieves the value of the leaf Drain from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drain is set, it can
// safely use t.GetDrain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix) GetDrain() bool {
	if t == nil || t.Drain == nil {
		return false
	}
	return *t.Drain
}

// GetFailoverControlType retrieves the value of the leaf FailoverControlType from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FailoverControlType is set, it can
// safely use t.GetFailoverControlType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FailoverControlType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix) GetFailoverControlType() E_NokiaTypesDhcp_FailoverControlType {
	if t == nil || t.FailoverControlType == 0 {
		return NokiaTypesDhcp_FailoverControlType_local
	}
	return t.FailoverControlType
}

// GetIpv6Prefix retrieves the value of the leaf Ipv6Prefix from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Prefix is set, it can
// safely use t.GetIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix) GetIpv6Prefix() string {
	if t == nil || t.Ipv6Prefix == nil {
		return ""
	}
	return *t.Ipv6Prefix
}

// GetPreferredLifetime retrieves the value of the leaf PreferredLifetime from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferredLifetime is set, it can
// safely use t.GetPreferredLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferredLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix) GetPreferredLifetime() uint32 {
	if t == nil || t.PreferredLifetime == nil {
		return 3600
	}
	return *t.PreferredLifetime
}

// GetRebindTime retrieves the value of the leaf RebindTime from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RebindTime is set, it can
// safely use t.GetRebindTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RebindTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix) GetRebindTime() uint32 {
	if t == nil || t.RebindTime == nil {
		return 2880
	}
	return *t.RebindTime
}

// GetRenewTime retrieves the value of the leaf RenewTime from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RenewTime is set, it can
// safely use t.GetRenewTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RenewTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix) GetRenewTime() uint32 {
	if t == nil || t.RenewTime == nil {
		return 1800
	}
	return *t.RenewTime
}

// GetValidLifetime retrieves the value of the leaf ValidLifetime from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidLifetime is set, it can
// safely use t.GetValidLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix) GetValidLifetime() uint32 {
	if t == nil || t.ValidLifetime == nil {
		return 86400
	}
	return *t.ValidLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Drain == nil {
		var v bool = false
		t.Drain = &v
	}
	if t.FailoverControlType == 0 {
		t.FailoverControlType = NokiaTypesDhcp_FailoverControlType_local
	}
	if t.PreferredLifetime == nil {
		var v uint32 = 3600
		t.PreferredLifetime = &v
	}
	if t.RebindTime == nil {
		var v uint32 = 2880
		t.RebindTime = &v
	}
	if t.RenewTime == nil {
		var v uint32 = 1800
		t.RenewTime = &v
	}
	if t.ValidLifetime == nil {
		var v uint32 = 86400
		t.ValidLifetime = &v
	}
	t.Options.PopulateDefaults()
	t.PrefixType.PopulateDefaults()
	for _, e := range t.PrefixLengthThreshold {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Prefix")
	}

	return map[string]interface{}{
		"ipv6-prefix": *t.Ipv6Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold represents the /nokia-conf/configure/router/dhcp-server/dhcpv6/pool/prefix-length-threshold YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	EventWhenDepleted  *bool    `path:"event-when-depleted" module:"nokia-conf"`
	MinimumFreePercent *uint32  `path:"minimum-free-percent" module:"nokia-conf"`
	PrefixLength       *uint32  `path:"prefix-length" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEventWhenDepleted retrieves the value of the leaf EventWhenDepleted from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventWhenDepleted is set, it can
// safely use t.GetEventWhenDepleted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventWhenDepleted == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) GetEventWhenDepleted() bool {
	if t == nil || t.EventWhenDepleted == nil {
		return false
	}
	return *t.EventWhenDepleted
}

// GetMinimumFreePercent retrieves the value of the leaf MinimumFreePercent from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinimumFreePercent is set, it can
// safely use t.GetMinimumFreePercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinimumFreePercent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) GetMinimumFreePercent() uint32 {
	if t == nil || t.MinimumFreePercent == nil {
		return 0
	}
	return *t.MinimumFreePercent
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EventWhenDepleted == nil {
		var v bool = false
		t.EventWhenDepleted = &v
	}
	if t.MinimumFreePercent == nil {
		var v uint32 = 0
		t.MinimumFreePercent = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PrefixLength == nil {
		return nil, fmt.Errorf("nil value for key PrefixLength")
	}

	return map[string]interface{}{
		"prefix-length": *t.PrefixLength,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options represents the /nokia-conf/configure/router/dhcp-server/dhcpv6/pool/prefix/options YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options struct {
	Option map[NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union]*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option `path:"option" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options) IsYANGGoStruct() {}

// NewOption creates a new entry in the Option list of the
// NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options) NewOption(Number NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union) (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union]*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option)
	}

	key := Number

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Option[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Option", key)
	}

	t.Option[key] = &NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option{
		Number: Number,
	}

	return t.Option[key], nil
}

// RenameOption renames an entry in the list Option within
// the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options) RenameOption(oldK, newK NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union) error {
	if _, ok := t.Option[newK]; ok {
		return fmt.Errorf("key %v already exists in Option", newK)
	}

	e, ok := t.Option[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Option", oldK)
	}
	e.Number = newK

	t.Option[newK] = e
	delete(t.Option, oldK)
	return nil
}

// GetOrCreateOption retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options) GetOrCreateOption(Number NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union) *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option {

	key := Number

	if v, ok := t.Option[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOption(Number)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOption got unexpected error: %v", err))
	}
	return v
}

// GetOption retrieves the value with the specified key from
// the Option map field of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options) GetOption(Number NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union) *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option {

	if t == nil {
		return nil
	}

	key := Number

	if lm, ok := t.Option[key]; ok {
		return lm
	}
	return nil
}

// DeleteOption deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options) DeleteOption(Number NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union) {
	key := Number

	delete(t.Option, key)
}

// AppendOption appends the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option struct to the
// list Option of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options) AppendOption(v *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) error {
	key := v.Number

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union]*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option)
	}

	if _, ok := t.Option[key]; ok {
		return fmt.Errorf("duplicate key for list Option %v", key)
	}

	t.Option[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Option {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option represents the /nokia-conf/configure/router/dhcp-server/dhcpv6/pool/prefix/options/option YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option struct {
	ApplyGroups        []string                                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	AsciiString        *string                                                                              `path:"ascii-string" module:"nokia-conf"`
	DomainString       *string                                                                              `path:"domain-string" module:"nokia-conf"`
	Duration           *uint32                                                                              `path:"duration" module:"nokia-conf"`
	Empty              YANGEmpty                                                                            `path:"empty" module:"nokia-conf"`
	HexString          *string                                                                              `path:"hex-string" module:"nokia-conf"`
	Ipv6Address        []string                                                                             `path:"ipv6-address" module:"nokia-conf"`
	Number             NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetDomainString retrieves the value of the leaf DomainString from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainString is set, it can
// safely use t.GetDomainString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) GetDomainString() string {
	if t == nil || t.DomainString == nil {
		return ""
	}
	return *t.DomainString
}

// GetDuration retrieves the value of the leaf Duration from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Duration is set, it can
// safely use t.GetDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Duration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) GetDuration() uint32 {
	if t == nil || t.Duration == nil {
		return 0
	}
	return *t.Duration
}

// GetEmpty retrieves the value of the leaf Empty from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Empty is set, it can
// safely use t.GetEmpty() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Empty == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) GetEmpty() YANGEmpty {
	if t == nil || t.Empty == false {
		return false
	}
	return t.Empty
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) GetIpv6Address() []string {
	if t == nil || t.Ipv6Address == nil {
		return nil
	}
	return t.Ipv6Address
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) GetNumber() NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union {
	if t == nil || t.Number == nil {
		return nil
	}
	return t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"number": t.Number,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold represents the /nokia-conf/configure/router/dhcp-server/dhcpv6/pool/prefix/prefix-length-threshold YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold struct {
	Absolute           *uint32  `path:"absolute" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	EventWhenDepleted  *bool    `path:"event-when-depleted" module:"nokia-conf"`
	Percent            *uint32  `path:"percent" module:"nokia-conf"`
	PrefixLength       *uint32  `path:"prefix-length" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) IsYANGGoStruct() {
}

// GetAbsolute retrieves the value of the leaf Absolute from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Absolute is set, it can
// safely use t.GetAbsolute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Absolute == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) GetAbsolute() uint32 {
	if t == nil || t.Absolute == nil {
		return 0
	}
	return *t.Absolute
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEventWhenDepleted retrieves the value of the leaf EventWhenDepleted from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventWhenDepleted is set, it can
// safely use t.GetEventWhenDepleted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventWhenDepleted == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) GetEventWhenDepleted() bool {
	if t == nil || t.EventWhenDepleted == nil {
		return false
	}
	return *t.EventWhenDepleted
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) GetPercent() uint32 {
	if t == nil || t.Percent == nil {
		return 0
	}
	return *t.Percent
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EventWhenDepleted == nil {
		var v bool = false
		t.EventWhenDepleted = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PrefixLength == nil {
		return nil, fmt.Errorf("nil value for key PrefixLength")
	}

	return map[string]interface{}{
		"prefix-length": *t.PrefixLength,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType represents the /nokia-conf/configure/router/dhcp-server/dhcpv6/pool/prefix/prefix-type YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType struct {
	Pd      *bool `path:"pd" module:"nokia-conf"`
	WanHost *bool `path:"wan-host" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType) IsYANGGoStruct() {}

// GetPd retrieves the value of the leaf Pd from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pd is set, it can
// safely use t.GetPd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType) GetPd() bool {
	if t == nil || t.Pd == nil {
		return true
	}
	return *t.Pd
}

// GetWanHost retrieves the value of the leaf WanHost from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WanHost is set, it can
// safely use t.GetWanHost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WanHost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType) GetWanHost() bool {
	if t == nil || t.WanHost == nil {
		return true
	}
	return *t.WanHost
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Pd == nil {
		var v bool = true
		t.Pd = &v
	}
	if t.WanHost == nil {
		var v bool = true
		t.WanHost = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId represents the /nokia-conf/configure/router/dhcp-server/dhcpv6/server-id YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId struct {
	ApplyGroups        []string                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	DuidEnterprise     *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise `path:"duid-enterprise" module:"nokia-conf"`
	DuidLinkLocal      YANGEmpty                                                             `path:"duid-link-local" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId) IsYANGGoStruct() {}

// GetOrCreateDuidEnterprise retrieves the value of the DuidEnterprise field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId) GetOrCreateDuidEnterprise() *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise {
	if t.DuidEnterprise != nil {
		return t.DuidEnterprise
	}
	t.DuidEnterprise = &NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise{}
	return t.DuidEnterprise
}

// GetDuidEnterprise returns the value of the DuidEnterprise struct pointer
// from NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId. If the receiver or the field DuidEnterprise is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId) GetDuidEnterprise() *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise {
	if t != nil && t.DuidEnterprise != nil {
		return t.DuidEnterprise
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDuidLinkLocal retrieves the value of the leaf DuidLinkLocal from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DuidLinkLocal is set, it can
// safely use t.GetDuidLinkLocal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DuidLinkLocal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId) GetDuidLinkLocal() YANGEmpty {
	if t == nil || t.DuidLinkLocal == false {
		return false
	}
	return t.DuidLinkLocal
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DuidEnterprise.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise represents the /nokia-conf/configure/router/dhcp-server/dhcpv6/server-id/duid-enterprise YANG schema element.
type NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise struct {
	AsciiString *string `path:"ascii-string" module:"nokia-conf"`
	HexString   *string `path:"hex-string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise) IsYANGGoStruct() {}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise.
func (*NokiaConf_Configure_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Dns represents the /nokia-conf/configure/router/dns YANG schema element.
type NokiaConf_Configure_Router_Dns struct {
	RedirectVprn *NokiaConf_Configure_Router_Dns_RedirectVprn `path:"redirect-vprn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Dns implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Dns) IsYANGGoStruct() {}

// GetOrCreateRedirectVprn retrieves the value of the RedirectVprn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Dns) GetOrCreateRedirectVprn() *NokiaConf_Configure_Router_Dns_RedirectVprn {
	if t.RedirectVprn != nil {
		return t.RedirectVprn
	}
	t.RedirectVprn = &NokiaConf_Configure_Router_Dns_RedirectVprn{}
	return t.RedirectVprn
}

// GetRedirectVprn returns the value of the RedirectVprn struct pointer
// from NokiaConf_Configure_Router_Dns. If the receiver or the field RedirectVprn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Dns) GetRedirectVprn() *NokiaConf_Configure_Router_Dns_RedirectVprn {
	if t != nil && t.RedirectVprn != nil {
		return t.RedirectVprn
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Dns
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Dns) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RedirectVprn.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Dns) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Dns"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Dns) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Dns) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Dns.
func (*NokiaConf_Configure_Router_Dns) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Dns_RedirectVprn represents the /nokia-conf/configure/router/dns/redirect-vprn YANG schema element.
type NokiaConf_Configure_Router_Dns_RedirectVprn struct {
	Service map[string]*NokiaConf_Configure_Router_Dns_RedirectVprn_Service `path:"service" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Dns_RedirectVprn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Dns_RedirectVprn) IsYANGGoStruct() {}

// NewService creates a new entry in the Service list of the
// NokiaConf_Configure_Router_Dns_RedirectVprn struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Dns_RedirectVprn) NewService(ServiceName string) (*NokiaConf_Configure_Router_Dns_RedirectVprn_Service, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Service == nil {
		t.Service = make(map[string]*NokiaConf_Configure_Router_Dns_RedirectVprn_Service)
	}

	key := ServiceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Service[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Service", key)
	}

	t.Service[key] = &NokiaConf_Configure_Router_Dns_RedirectVprn_Service{
		ServiceName: &ServiceName,
	}

	return t.Service[key], nil
}

// RenameService renames an entry in the list Service within
// the NokiaConf_Configure_Router_Dns_RedirectVprn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Dns_RedirectVprn) RenameService(oldK, newK string) error {
	if _, ok := t.Service[newK]; ok {
		return fmt.Errorf("key %v already exists in Service", newK)
	}

	e, ok := t.Service[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Service", oldK)
	}
	e.ServiceName = &newK

	t.Service[newK] = e
	delete(t.Service, oldK)
	return nil
}

// GetOrCreateService retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Dns_RedirectVprn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Dns_RedirectVprn) GetOrCreateService(ServiceName string) *NokiaConf_Configure_Router_Dns_RedirectVprn_Service {

	key := ServiceName

	if v, ok := t.Service[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewService(ServiceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateService got unexpected error: %v", err))
	}
	return v
}

// GetService retrieves the value with the specified key from
// the Service map field of NokiaConf_Configure_Router_Dns_RedirectVprn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Dns_RedirectVprn) GetService(ServiceName string) *NokiaConf_Configure_Router_Dns_RedirectVprn_Service {

	if t == nil {
		return nil
	}

	key := ServiceName

	if lm, ok := t.Service[key]; ok {
		return lm
	}
	return nil
}

// DeleteService deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Dns_RedirectVprn. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Dns_RedirectVprn) DeleteService(ServiceName string) {
	key := ServiceName

	delete(t.Service, key)
}

// AppendService appends the supplied NokiaConf_Configure_Router_Dns_RedirectVprn_Service struct to the
// list Service of NokiaConf_Configure_Router_Dns_RedirectVprn. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Dns_RedirectVprn_Service already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Dns_RedirectVprn) AppendService(v *NokiaConf_Configure_Router_Dns_RedirectVprn_Service) error {
	if v.ServiceName == nil {
		return fmt.Errorf("invalid nil key received for ServiceName")
	}

	key := *v.ServiceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Service == nil {
		t.Service = make(map[string]*NokiaConf_Configure_Router_Dns_RedirectVprn_Service)
	}

	if _, ok := t.Service[key]; ok {
		return fmt.Errorf("duplicate key for list Service %v", key)
	}

	t.Service[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Dns_RedirectVprn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Dns_RedirectVprn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Service {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Dns_RedirectVprn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Dns_RedirectVprn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Dns_RedirectVprn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Dns_RedirectVprn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Dns_RedirectVprn.
func (*NokiaConf_Configure_Router_Dns_RedirectVprn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Dns_RedirectVprn_Service represents the /nokia-conf/configure/router/dns/redirect-vprn/service YANG schema element.
type NokiaConf_Configure_Router_Dns_RedirectVprn_Service struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Preference         *uint32  `path:"preference" module:"nokia-conf"`
	ServiceName        *string  `path:"service-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Dns_RedirectVprn_Service implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Dns_RedirectVprn_Service) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Dns_RedirectVprn_Service
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Dns_RedirectVprn_Service) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Dns_RedirectVprn_Service
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Dns_RedirectVprn_Service) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Router_Dns_RedirectVprn_Service
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Dns_RedirectVprn_Service) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Router_Dns_RedirectVprn_Service
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Dns_RedirectVprn_Service) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Dns_RedirectVprn_Service
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Dns_RedirectVprn_Service) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Dns_RedirectVprn_Service struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Dns_RedirectVprn_Service) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ServiceName == nil {
		return nil, fmt.Errorf("nil value for key ServiceName")
	}

	return map[string]interface{}{
		"service-name": *t.ServiceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Dns_RedirectVprn_Service) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Dns_RedirectVprn_Service"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Dns_RedirectVprn_Service) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Dns_RedirectVprn_Service) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Dns_RedirectVprn_Service.
func (*NokiaConf_Configure_Router_Dns_RedirectVprn_Service) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Firewall represents the /nokia-conf/configure/router/firewall YANG schema element.
type NokiaConf_Configure_Router_Firewall struct {
	ApplyGroups        []string                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	Domain             map[string]*NokiaConf_Configure_Router_Firewall_Domain `path:"domain" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Firewall implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Firewall) IsYANGGoStruct() {}

// NewDomain creates a new entry in the Domain list of the
// NokiaConf_Configure_Router_Firewall struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Firewall) NewDomain(Name string) (*NokiaConf_Configure_Router_Firewall_Domain, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Domain == nil {
		t.Domain = make(map[string]*NokiaConf_Configure_Router_Firewall_Domain)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Domain[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Domain", key)
	}

	t.Domain[key] = &NokiaConf_Configure_Router_Firewall_Domain{
		Name: &Name,
	}

	return t.Domain[key], nil
}

// RenameDomain renames an entry in the list Domain within
// the NokiaConf_Configure_Router_Firewall struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Firewall) RenameDomain(oldK, newK string) error {
	if _, ok := t.Domain[newK]; ok {
		return fmt.Errorf("key %v already exists in Domain", newK)
	}

	e, ok := t.Domain[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Domain", oldK)
	}
	e.Name = &newK

	t.Domain[newK] = e
	delete(t.Domain, oldK)
	return nil
}

// GetOrCreateDomain retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Firewall. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Firewall) GetOrCreateDomain(Name string) *NokiaConf_Configure_Router_Firewall_Domain {

	key := Name

	if v, ok := t.Domain[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDomain(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDomain got unexpected error: %v", err))
	}
	return v
}

// GetDomain retrieves the value with the specified key from
// the Domain map field of NokiaConf_Configure_Router_Firewall. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Firewall) GetDomain(Name string) *NokiaConf_Configure_Router_Firewall_Domain {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Domain[key]; ok {
		return lm
	}
	return nil
}

// DeleteDomain deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Firewall. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Firewall) DeleteDomain(Name string) {
	key := Name

	delete(t.Domain, key)
}

// AppendDomain appends the supplied NokiaConf_Configure_Router_Firewall_Domain struct to the
// list Domain of NokiaConf_Configure_Router_Firewall. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Firewall_Domain already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Firewall) AppendDomain(v *NokiaConf_Configure_Router_Firewall_Domain) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Domain == nil {
		t.Domain = make(map[string]*NokiaConf_Configure_Router_Firewall_Domain)
	}

	if _, ok := t.Domain[key]; ok {
		return fmt.Errorf("duplicate key for list Domain %v", key)
	}

	t.Domain[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Firewall
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Firewall) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Firewall
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Firewall) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Firewall
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Firewall) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Domain {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Firewall) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Firewall"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Firewall) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Firewall) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Firewall.
func (*NokiaConf_Configure_Router_Firewall) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Firewall_Domain represents the /nokia-conf/configure/router/firewall/domain YANG schema element.
type NokiaConf_Configure_Router_Firewall_Domain struct {
	AdminState         E_NokiaTypesSros_AdminState                                   `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Dhcpv6Server       *NokiaConf_Configure_Router_Firewall_Domain_Dhcpv6Server      `path:"dhcpv6-server" module:"nokia-conf"`
	Name               *string                                                       `path:"name" module:"nokia-conf"`
	NatGroup           *uint32                                                       `path:"nat-group" module:"nokia-conf"`
	Prefix             map[string]*NokiaConf_Configure_Router_Firewall_Domain_Prefix `path:"prefix" module:"nokia-conf"`
	WlanGwGroup        *uint32                                                       `path:"wlan-gw-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Firewall_Domain implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Firewall_Domain) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Router_Firewall_Domain struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Firewall_Domain) NewPrefix(IpPrefix string) (*NokiaConf_Configure_Router_Firewall_Domain_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Router_Firewall_Domain_Prefix)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Router_Firewall_Domain_Prefix{
		IpPrefix: &IpPrefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Router_Firewall_Domain struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Firewall_Domain) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.IpPrefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Firewall_Domain. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Firewall_Domain) GetOrCreatePrefix(IpPrefix string) *NokiaConf_Configure_Router_Firewall_Domain_Prefix {

	key := IpPrefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Router_Firewall_Domain. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Firewall_Domain) GetPrefix(IpPrefix string) *NokiaConf_Configure_Router_Firewall_Domain_Prefix {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Firewall_Domain. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Firewall_Domain) DeletePrefix(IpPrefix string) {
	key := IpPrefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Router_Firewall_Domain_Prefix struct to the
// list Prefix of NokiaConf_Configure_Router_Firewall_Domain. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Firewall_Domain_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Firewall_Domain) AppendPrefix(v *NokiaConf_Configure_Router_Firewall_Domain_Prefix) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Router_Firewall_Domain_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// GetOrCreateDhcpv6Server retrieves the value of the Dhcpv6Server field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Firewall_Domain) GetOrCreateDhcpv6Server() *NokiaConf_Configure_Router_Firewall_Domain_Dhcpv6Server {
	if t.Dhcpv6Server != nil {
		return t.Dhcpv6Server
	}
	t.Dhcpv6Server = &NokiaConf_Configure_Router_Firewall_Domain_Dhcpv6Server{}
	return t.Dhcpv6Server
}

// GetDhcpv6Server returns the value of the Dhcpv6Server struct pointer
// from NokiaConf_Configure_Router_Firewall_Domain. If the receiver or the field Dhcpv6Server is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Firewall_Domain) GetDhcpv6Server() *NokiaConf_Configure_Router_Firewall_Domain_Dhcpv6Server {
	if t != nil && t.Dhcpv6Server != nil {
		return t.Dhcpv6Server
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Firewall_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Firewall_Domain) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Firewall_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Firewall_Domain) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Firewall_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Firewall_Domain) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Router_Firewall_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Firewall_Domain) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetNatGroup retrieves the value of the leaf NatGroup from the NokiaConf_Configure_Router_Firewall_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatGroup is set, it can
// safely use t.GetNatGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Firewall_Domain) GetNatGroup() uint32 {
	if t == nil || t.NatGroup == nil {
		return 0
	}
	return *t.NatGroup
}

// GetWlanGwGroup retrieves the value of the leaf WlanGwGroup from the NokiaConf_Configure_Router_Firewall_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WlanGwGroup is set, it can
// safely use t.GetWlanGwGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WlanGwGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Firewall_Domain) GetWlanGwGroup() uint32 {
	if t == nil || t.WlanGwGroup == nil {
		return 0
	}
	return *t.WlanGwGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Firewall_Domain
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Firewall_Domain) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Dhcpv6Server.PopulateDefaults()
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Firewall_Domain struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Firewall_Domain) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Firewall_Domain) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Firewall_Domain"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Firewall_Domain) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Firewall_Domain) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Firewall_Domain.
func (*NokiaConf_Configure_Router_Firewall_Domain) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Firewall_Domain_Dhcpv6Server represents the /nokia-conf/configure/router/firewall/domain/dhcpv6-server YANG schema element.
type NokiaConf_Configure_Router_Firewall_Domain_Dhcpv6Server struct {
	Name           *string `path:"name" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Firewall_Domain_Dhcpv6Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Firewall_Domain_Dhcpv6Server) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Router_Firewall_Domain_Dhcpv6Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Firewall_Domain_Dhcpv6Server) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Router_Firewall_Domain_Dhcpv6Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Firewall_Domain_Dhcpv6Server) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Firewall_Domain_Dhcpv6Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Firewall_Domain_Dhcpv6Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Firewall_Domain_Dhcpv6Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Firewall_Domain_Dhcpv6Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Firewall_Domain_Dhcpv6Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Firewall_Domain_Dhcpv6Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Firewall_Domain_Dhcpv6Server.
func (*NokiaConf_Configure_Router_Firewall_Domain_Dhcpv6Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Firewall_Domain_Prefix represents the /nokia-conf/configure/router/firewall/domain/prefix YANG schema element.
type NokiaConf_Configure_Router_Firewall_Domain_Prefix struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string  `path:"description" module:"nokia-conf"`
	IpPrefix           *string  `path:"ip-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Firewall_Domain_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Firewall_Domain_Prefix) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Firewall_Domain_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Firewall_Domain_Prefix) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Firewall_Domain_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Firewall_Domain_Prefix) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Router_Firewall_Domain_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Firewall_Domain_Prefix) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Router_Firewall_Domain_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Firewall_Domain_Prefix) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Firewall_Domain_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Firewall_Domain_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Firewall_Domain_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Firewall_Domain_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Firewall_Domain_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Firewall_Domain_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Firewall_Domain_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Firewall_Domain_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Firewall_Domain_Prefix.
func (*NokiaConf_Configure_Router_Firewall_Domain_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Flowspec represents the /nokia-conf/configure/router/flowspec YANG schema element.
type NokiaConf_Configure_Router_Flowspec struct {
	ApplyGroups        []string                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	FilterCamType      E_NokiaConf_Configure_Router_Flowspec_FilterCamType `path:"filter-cam-type" module:"nokia-conf"`
	IpFilterMaxSize    *uint32                                             `path:"ip-filter-max-size" module:"nokia-conf"`
	Ipv6FilterMaxSize  *uint32                                             `path:"ipv6-filter-max-size" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Flowspec implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Flowspec) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Flowspec) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Flowspec) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFilterCamType retrieves the value of the leaf FilterCamType from the NokiaConf_Configure_Router_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilterCamType is set, it can
// safely use t.GetFilterCamType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilterCamType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Flowspec) GetFilterCamType() E_NokiaConf_Configure_Router_Flowspec_FilterCamType {
	if t == nil || t.FilterCamType == 0 {
		return NokiaConf_Configure_Router_Flowspec_FilterCamType_normal
	}
	return t.FilterCamType
}

// GetIpFilterMaxSize retrieves the value of the leaf IpFilterMaxSize from the NokiaConf_Configure_Router_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpFilterMaxSize is set, it can
// safely use t.GetIpFilterMaxSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpFilterMaxSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Flowspec) GetIpFilterMaxSize() uint32 {
	if t == nil || t.IpFilterMaxSize == nil {
		return 512
	}
	return *t.IpFilterMaxSize
}

// GetIpv6FilterMaxSize retrieves the value of the leaf Ipv6FilterMaxSize from the NokiaConf_Configure_Router_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6FilterMaxSize is set, it can
// safely use t.GetIpv6FilterMaxSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6FilterMaxSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Flowspec) GetIpv6FilterMaxSize() uint32 {
	if t == nil || t.Ipv6FilterMaxSize == nil {
		return 512
	}
	return *t.Ipv6FilterMaxSize
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Flowspec
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Flowspec) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FilterCamType == 0 {
		t.FilterCamType = NokiaConf_Configure_Router_Flowspec_FilterCamType_normal
	}
	if t.IpFilterMaxSize == nil {
		var v uint32 = 512
		t.IpFilterMaxSize = &v
	}
	if t.Ipv6FilterMaxSize == nil {
		var v uint32 = 512
		t.Ipv6FilterMaxSize = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Flowspec) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Flowspec"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Flowspec) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Flowspec) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Flowspec.
func (*NokiaConf_Configure_Router_Flowspec) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Gtm represents the /nokia-conf/configure/router/gtm YANG schema element.
type NokiaConf_Configure_Router_Gtm struct {
	ApplyGroups        []string                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Mvpn               *bool                                          `path:"mvpn" module:"nokia-conf"`
	ProviderTunnel     *NokiaConf_Configure_Router_Gtm_ProviderTunnel `path:"provider-tunnel" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Gtm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Gtm) IsYANGGoStruct() {}

// GetOrCreateProviderTunnel retrieves the value of the ProviderTunnel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Gtm) GetOrCreateProviderTunnel() *NokiaConf_Configure_Router_Gtm_ProviderTunnel {
	if t.ProviderTunnel != nil {
		return t.ProviderTunnel
	}
	t.ProviderTunnel = &NokiaConf_Configure_Router_Gtm_ProviderTunnel{}
	return t.ProviderTunnel
}

// GetProviderTunnel returns the value of the ProviderTunnel struct pointer
// from NokiaConf_Configure_Router_Gtm. If the receiver or the field ProviderTunnel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Gtm) GetProviderTunnel() *NokiaConf_Configure_Router_Gtm_ProviderTunnel {
	if t != nil && t.ProviderTunnel != nil {
		return t.ProviderTunnel
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Gtm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Gtm) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Gtm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Gtm) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMvpn retrieves the value of the leaf Mvpn from the NokiaConf_Configure_Router_Gtm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mvpn is set, it can
// safely use t.GetMvpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mvpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Gtm) GetMvpn() bool {
	if t == nil || t.Mvpn == nil {
		return false
	}
	return *t.Mvpn
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Gtm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Gtm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mvpn == nil {
		var v bool = false
		t.Mvpn = &v
	}
	t.ProviderTunnel.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Gtm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Gtm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Gtm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Gtm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Gtm.
func (*NokiaConf_Configure_Router_Gtm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Gtm_ProviderTunnel represents the /nokia-conf/configure/router/gtm/provider-tunnel YANG schema element.
type NokiaConf_Configure_Router_Gtm_ProviderTunnel struct {
	Inclusive *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive `path:"inclusive" module:"nokia-conf"`
	Selective *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective `path:"selective" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Gtm_ProviderTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Gtm_ProviderTunnel) IsYANGGoStruct() {}

// GetOrCreateInclusive retrieves the value of the Inclusive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel) GetOrCreateInclusive() *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive {
	if t.Inclusive != nil {
		return t.Inclusive
	}
	t.Inclusive = &NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive{}
	return t.Inclusive
}

// GetOrCreateSelective retrieves the value of the Selective field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel) GetOrCreateSelective() *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective {
	if t.Selective != nil {
		return t.Selective
	}
	t.Selective = &NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective{}
	return t.Selective
}

// GetInclusive returns the value of the Inclusive struct pointer
// from NokiaConf_Configure_Router_Gtm_ProviderTunnel. If the receiver or the field Inclusive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel) GetInclusive() *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive {
	if t != nil && t.Inclusive != nil {
		return t.Inclusive
	}
	return nil
}

// GetSelective returns the value of the Selective struct pointer
// from NokiaConf_Configure_Router_Gtm_ProviderTunnel. If the receiver or the field Selective is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel) GetSelective() *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective {
	if t != nil && t.Selective != nil {
		return t.Selective
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Gtm_ProviderTunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Inclusive.PopulateDefaults()
	t.Selective.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Gtm_ProviderTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Gtm_ProviderTunnel.
func (*NokiaConf_Configure_Router_Gtm_ProviderTunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive represents the /nokia-conf/configure/router/gtm/provider-tunnel/inclusive YANG schema element.
type NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive struct {
	Rsvp *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive_Rsvp `path:"rsvp" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive) IsYANGGoStruct() {}

// GetOrCreateRsvp retrieves the value of the Rsvp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive) GetOrCreateRsvp() *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive_Rsvp {
	if t.Rsvp != nil {
		return t.Rsvp
	}
	t.Rsvp = &NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive_Rsvp{}
	return t.Rsvp
}

// GetRsvp returns the value of the Rsvp struct pointer
// from NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive. If the receiver or the field Rsvp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive) GetRsvp() *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive_Rsvp {
	if t != nil && t.Rsvp != nil {
		return t.Rsvp
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Rsvp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive.
func (*NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive_Rsvp represents the /nokia-conf/configure/router/gtm/provider-tunnel/inclusive/rsvp YANG schema element.
type NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive_Rsvp struct {
	AdminState  E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	LspTemplate *string                     `path:"lsp-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive_Rsvp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive_Rsvp) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive_Rsvp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetLspTemplate retrieves the value of the leaf LspTemplate from the NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspTemplate is set, it can
// safely use t.GetLspTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive_Rsvp) GetLspTemplate() string {
	if t == nil || t.LspTemplate == nil {
		return ""
	}
	return *t.LspTemplate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive_Rsvp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive_Rsvp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive_Rsvp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive_Rsvp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive_Rsvp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive_Rsvp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive_Rsvp.
func (*NokiaConf_Configure_Router_Gtm_ProviderTunnel_Inclusive_Rsvp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective represents the /nokia-conf/configure/router/gtm/provider-tunnel/selective YANG schema element.
type NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective struct {
	DataDelayInterval *uint32                                                                `path:"data-delay-interval" module:"nokia-conf"`
	DataThreshold     *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold `path:"data-threshold" module:"nokia-conf"`
	MaximumP2MpSpmsi  *uint32                                                                `path:"maximum-p2mp-spmsi" module:"nokia-conf"`
	Rsvp              *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_Rsvp          `path:"rsvp" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective) IsYANGGoStruct() {}

// GetOrCreateDataThreshold retrieves the value of the DataThreshold field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective) GetOrCreateDataThreshold() *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold {
	if t.DataThreshold != nil {
		return t.DataThreshold
	}
	t.DataThreshold = &NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold{}
	return t.DataThreshold
}

// GetOrCreateRsvp retrieves the value of the Rsvp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective) GetOrCreateRsvp() *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_Rsvp {
	if t.Rsvp != nil {
		return t.Rsvp
	}
	t.Rsvp = &NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_Rsvp{}
	return t.Rsvp
}

// GetDataThreshold returns the value of the DataThreshold struct pointer
// from NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective. If the receiver or the field DataThreshold is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective) GetDataThreshold() *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold {
	if t != nil && t.DataThreshold != nil {
		return t.DataThreshold
	}
	return nil
}

// GetRsvp returns the value of the Rsvp struct pointer
// from NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective. If the receiver or the field Rsvp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective) GetRsvp() *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_Rsvp {
	if t != nil && t.Rsvp != nil {
		return t.Rsvp
	}
	return nil
}

// GetDataDelayInterval retrieves the value of the leaf DataDelayInterval from the NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DataDelayInterval is set, it can
// safely use t.GetDataDelayInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DataDelayInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective) GetDataDelayInterval() uint32 {
	if t == nil || t.DataDelayInterval == nil {
		return 3
	}
	return *t.DataDelayInterval
}

// GetMaximumP2MpSpmsi retrieves the value of the leaf MaximumP2MpSpmsi from the NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumP2MpSpmsi is set, it can
// safely use t.GetMaximumP2MpSpmsi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumP2MpSpmsi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective) GetMaximumP2MpSpmsi() uint32 {
	if t == nil || t.MaximumP2MpSpmsi == nil {
		return 10
	}
	return *t.MaximumP2MpSpmsi
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DataDelayInterval == nil {
		var v uint32 = 3
		t.DataDelayInterval = &v
	}
	if t.MaximumP2MpSpmsi == nil {
		var v uint32 = 10
		t.MaximumP2MpSpmsi = &v
	}
	t.DataThreshold.PopulateDefaults()
	t.Rsvp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective.
func (*NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold represents the /nokia-conf/configure/router/gtm/provider-tunnel/selective/data-threshold YANG schema element.
type NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold struct {
	GroupPrefix map[string]*NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix `path:"group-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold) IsYANGGoStruct() {}

// NewGroupPrefix creates a new entry in the GroupPrefix list of the
// NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold) NewGroupPrefix(IpGroupPrefix string) (*NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupPrefix == nil {
		t.GroupPrefix = make(map[string]*NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix)
	}

	key := IpGroupPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupPrefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupPrefix", key)
	}

	t.GroupPrefix[key] = &NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix{
		IpGroupPrefix: &IpGroupPrefix,
	}

	return t.GroupPrefix[key], nil
}

// RenameGroupPrefix renames an entry in the list GroupPrefix within
// the NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold) RenameGroupPrefix(oldK, newK string) error {
	if _, ok := t.GroupPrefix[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupPrefix", newK)
	}

	e, ok := t.GroupPrefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupPrefix", oldK)
	}
	e.IpGroupPrefix = &newK

	t.GroupPrefix[newK] = e
	delete(t.GroupPrefix, oldK)
	return nil
}

// GetOrCreateGroupPrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold) GetOrCreateGroupPrefix(IpGroupPrefix string) *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix {

	key := IpGroupPrefix

	if v, ok := t.GroupPrefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupPrefix(IpGroupPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupPrefix got unexpected error: %v", err))
	}
	return v
}

// GetGroupPrefix retrieves the value with the specified key from
// the GroupPrefix map field of NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold) GetGroupPrefix(IpGroupPrefix string) *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix {

	if t == nil {
		return nil
	}

	key := IpGroupPrefix

	if lm, ok := t.GroupPrefix[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupPrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold) DeleteGroupPrefix(IpGroupPrefix string) {
	key := IpGroupPrefix

	delete(t.GroupPrefix, key)
}

// AppendGroupPrefix appends the supplied NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix struct to the
// list GroupPrefix of NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold) AppendGroupPrefix(v *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix) error {
	if v.IpGroupPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpGroupPrefix")
	}

	key := *v.IpGroupPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupPrefix == nil {
		t.GroupPrefix = make(map[string]*NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix)
	}

	if _, ok := t.GroupPrefix[key]; ok {
		return fmt.Errorf("duplicate key for list GroupPrefix %v", key)
	}

	t.GroupPrefix[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupPrefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold.
func (*NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix represents the /nokia-conf/configure/router/gtm/provider-tunnel/selective/data-threshold/group-prefix YANG schema element.
type NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	IpGroupPrefix      *string  `path:"ip-group-prefix" module:"nokia-conf"`
	PeThresholdAdd     *uint32  `path:"pe-threshold-add" module:"nokia-conf"`
	PeThresholdDelete  *uint32  `path:"pe-threshold-delete" module:"nokia-conf"`
	Threshold          *uint32  `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpGroupPrefix retrieves the value of the leaf IpGroupPrefix from the NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpGroupPrefix is set, it can
// safely use t.GetIpGroupPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpGroupPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix) GetIpGroupPrefix() string {
	if t == nil || t.IpGroupPrefix == nil {
		return ""
	}
	return *t.IpGroupPrefix
}

// GetPeThresholdAdd retrieves the value of the leaf PeThresholdAdd from the NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeThresholdAdd is set, it can
// safely use t.GetPeThresholdAdd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeThresholdAdd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix) GetPeThresholdAdd() uint32 {
	if t == nil || t.PeThresholdAdd == nil {
		return 65535
	}
	return *t.PeThresholdAdd
}

// GetPeThresholdDelete retrieves the value of the leaf PeThresholdDelete from the NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeThresholdDelete is set, it can
// safely use t.GetPeThresholdDelete() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeThresholdDelete == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix) GetPeThresholdDelete() uint32 {
	if t == nil || t.PeThresholdDelete == nil {
		return 65535
	}
	return *t.PeThresholdDelete
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 0
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PeThresholdAdd == nil {
		var v uint32 = 65535
		t.PeThresholdAdd = &v
	}
	if t.PeThresholdDelete == nil {
		var v uint32 = 65535
		t.PeThresholdDelete = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpGroupPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpGroupPrefix")
	}

	return map[string]interface{}{
		"ip-group-prefix": *t.IpGroupPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix.
func (*NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_Rsvp represents the /nokia-conf/configure/router/gtm/provider-tunnel/selective/rsvp YANG schema element.
type NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_Rsvp struct {
	AdminState  E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	LspTemplate *string                     `path:"lsp-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_Rsvp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_Rsvp) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_Rsvp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetLspTemplate retrieves the value of the leaf LspTemplate from the NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspTemplate is set, it can
// safely use t.GetLspTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_Rsvp) GetLspTemplate() string {
	if t == nil || t.LspTemplate == nil {
		return ""
	}
	return *t.LspTemplate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_Rsvp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_Rsvp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_Rsvp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_Rsvp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_Rsvp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_Rsvp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_Rsvp.
func (*NokiaConf_Configure_Router_Gtm_ProviderTunnel_Selective_Rsvp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Gtp represents the /nokia-conf/configure/router/gtp YANG schema element.
type NokiaConf_Configure_Router_Gtp struct {
	S11             *NokiaConf_Configure_Router_Gtp_S11             `path:"s11" module:"nokia-conf"`
	UpfDataEndpoint *NokiaConf_Configure_Router_Gtp_UpfDataEndpoint `path:"upf-data-endpoint" module:"nokia-conf" yangPresence:"true"`
	Uplink          *NokiaConf_Configure_Router_Gtp_Uplink          `path:"uplink" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Gtp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Gtp) IsYANGGoStruct() {}

// GetOrCreateS11 retrieves the value of the S11 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Gtp) GetOrCreateS11() *NokiaConf_Configure_Router_Gtp_S11 {
	if t.S11 != nil {
		return t.S11
	}
	t.S11 = &NokiaConf_Configure_Router_Gtp_S11{}
	return t.S11
}

// GetOrCreateUpfDataEndpoint retrieves the value of the UpfDataEndpoint field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Gtp) GetOrCreateUpfDataEndpoint() *NokiaConf_Configure_Router_Gtp_UpfDataEndpoint {
	if t.UpfDataEndpoint != nil {
		return t.UpfDataEndpoint
	}
	t.UpfDataEndpoint = &NokiaConf_Configure_Router_Gtp_UpfDataEndpoint{}
	return t.UpfDataEndpoint
}

// GetOrCreateUplink retrieves the value of the Uplink field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Gtp) GetOrCreateUplink() *NokiaConf_Configure_Router_Gtp_Uplink {
	if t.Uplink != nil {
		return t.Uplink
	}
	t.Uplink = &NokiaConf_Configure_Router_Gtp_Uplink{}
	return t.Uplink
}

// GetS11 returns the value of the S11 struct pointer
// from NokiaConf_Configure_Router_Gtp. If the receiver or the field S11 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Gtp) GetS11() *NokiaConf_Configure_Router_Gtp_S11 {
	if t != nil && t.S11 != nil {
		return t.S11
	}
	return nil
}

// GetUpfDataEndpoint returns the value of the UpfDataEndpoint struct pointer
// from NokiaConf_Configure_Router_Gtp. If the receiver or the field UpfDataEndpoint is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Gtp) GetUpfDataEndpoint() *NokiaConf_Configure_Router_Gtp_UpfDataEndpoint {
	if t != nil && t.UpfDataEndpoint != nil {
		return t.UpfDataEndpoint
	}
	return nil
}

// GetUplink returns the value of the Uplink struct pointer
// from NokiaConf_Configure_Router_Gtp. If the receiver or the field Uplink is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Gtp) GetUplink() *NokiaConf_Configure_Router_Gtp_Uplink {
	if t != nil && t.Uplink != nil {
		return t.Uplink
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Gtp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Gtp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.S11.PopulateDefaults()
	t.UpfDataEndpoint.PopulateDefaults()
	t.Uplink.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Gtp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Gtp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Gtp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Gtp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Gtp.
func (*NokiaConf_Configure_Router_Gtp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Gtp_S11 represents the /nokia-conf/configure/router/gtp/s11 YANG schema element.
type NokiaConf_Configure_Router_Gtp_S11 struct {
	Interface      map[string]*NokiaConf_Configure_Router_Gtp_S11_Interface `path:"interface" module:"nokia-conf"`
	PeerProfileMap *NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap       `path:"peer-profile-map" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Gtp_S11 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Gtp_S11) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Router_Gtp_S11 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Gtp_S11) NewInterface(InterfaceName string) (*NokiaConf_Configure_Router_Gtp_S11_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Router_Gtp_S11_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Router_Gtp_S11_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Router_Gtp_S11 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Gtp_S11) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Gtp_S11. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Gtp_S11) GetOrCreateInterface(InterfaceName string) *NokiaConf_Configure_Router_Gtp_S11_Interface {

	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Router_Gtp_S11. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Gtp_S11) GetInterface(InterfaceName string) *NokiaConf_Configure_Router_Gtp_S11_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Gtp_S11. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Gtp_S11) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Router_Gtp_S11_Interface struct to the
// list Interface of NokiaConf_Configure_Router_Gtp_S11. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Gtp_S11_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Gtp_S11) AppendInterface(v *NokiaConf_Configure_Router_Gtp_S11_Interface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Router_Gtp_S11_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreatePeerProfileMap retrieves the value of the PeerProfileMap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Gtp_S11) GetOrCreatePeerProfileMap() *NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap {
	if t.PeerProfileMap != nil {
		return t.PeerProfileMap
	}
	t.PeerProfileMap = &NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap{}
	return t.PeerProfileMap
}

// GetPeerProfileMap returns the value of the PeerProfileMap struct pointer
// from NokiaConf_Configure_Router_Gtp_S11. If the receiver or the field PeerProfileMap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Gtp_S11) GetPeerProfileMap() *NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap {
	if t != nil && t.PeerProfileMap != nil {
		return t.PeerProfileMap
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Gtp_S11
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Gtp_S11) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PeerProfileMap.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Gtp_S11) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Gtp_S11"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Gtp_S11) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Gtp_S11) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Gtp_S11.
func (*NokiaConf_Configure_Router_Gtp_S11) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Gtp_S11_Interface represents the /nokia-conf/configure/router/gtp/s11/interface YANG schema element.
type NokiaConf_Configure_Router_Gtp_S11_Interface struct {
	ApnPolicy          *string  `path:"apn-policy" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	InterfaceName      *string  `path:"interface-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Gtp_S11_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Gtp_S11_Interface) IsYANGGoStruct() {}

// GetApnPolicy retrieves the value of the leaf ApnPolicy from the NokiaConf_Configure_Router_Gtp_S11_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApnPolicy is set, it can
// safely use t.GetApnPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApnPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Gtp_S11_Interface) GetApnPolicy() string {
	if t == nil || t.ApnPolicy == nil {
		return ""
	}
	return *t.ApnPolicy
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Gtp_S11_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Gtp_S11_Interface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Gtp_S11_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Gtp_S11_Interface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Router_Gtp_S11_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Gtp_S11_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Gtp_S11_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Gtp_S11_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Gtp_S11_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Gtp_S11_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Gtp_S11_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Gtp_S11_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Gtp_S11_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Gtp_S11_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Gtp_S11_Interface.
func (*NokiaConf_Configure_Router_Gtp_S11_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap represents the /nokia-conf/configure/router/gtp/s11/peer-profile-map YANG schema element.
type NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap struct {
	Prefix map[string]*NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap_Prefix `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap) NewPrefix(PeerPrefix string) (*NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap_Prefix)
	}

	key := PeerPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap_Prefix{
		PeerPrefix: &PeerPrefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.PeerPrefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap) GetOrCreatePrefix(PeerPrefix string) *NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap_Prefix {

	key := PeerPrefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(PeerPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap) GetPrefix(PeerPrefix string) *NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap_Prefix {

	if t == nil {
		return nil
	}

	key := PeerPrefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap) DeletePrefix(PeerPrefix string) {
	key := PeerPrefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap_Prefix struct to the
// list Prefix of NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap) AppendPrefix(v *NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap_Prefix) error {
	if v.PeerPrefix == nil {
		return fmt.Errorf("invalid nil key received for PeerPrefix")
	}

	key := *v.PeerPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap.
func (*NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap_Prefix represents the /nokia-conf/configure/router/gtp/s11/peer-profile-map/prefix YANG schema element.
type NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap_Prefix struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	PeerPrefix         *string  `path:"peer-prefix" module:"nokia-conf"`
	PeerProfile        *string  `path:"peer-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap_Prefix) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap_Prefix) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap_Prefix) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPeerPrefix retrieves the value of the leaf PeerPrefix from the NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerPrefix is set, it can
// safely use t.GetPeerPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap_Prefix) GetPeerPrefix() string {
	if t == nil || t.PeerPrefix == nil {
		return ""
	}
	return *t.PeerPrefix
}

// GetPeerProfile retrieves the value of the leaf PeerProfile from the NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerProfile is set, it can
// safely use t.GetPeerProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap_Prefix) GetPeerProfile() string {
	if t == nil || t.PeerProfile == nil {
		return ""
	}
	return *t.PeerProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PeerPrefix == nil {
		return nil, fmt.Errorf("nil value for key PeerPrefix")
	}

	return map[string]interface{}{
		"peer-prefix": *t.PeerPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap_Prefix.
func (*NokiaConf_Configure_Router_Gtp_S11_PeerProfileMap_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Gtp_UpfDataEndpoint represents the /nokia-conf/configure/router/gtp/upf-data-endpoint YANG schema element.
type NokiaConf_Configure_Router_Gtp_UpfDataEndpoint struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Fpe                *uint32  `path:"fpe" module:"nokia-conf"`
	Interface          *string  `path:"interface" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Gtp_UpfDataEndpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Gtp_UpfDataEndpoint) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Gtp_UpfDataEndpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Gtp_UpfDataEndpoint) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Gtp_UpfDataEndpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Gtp_UpfDataEndpoint) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFpe retrieves the value of the leaf Fpe from the NokiaConf_Configure_Router_Gtp_UpfDataEndpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fpe is set, it can
// safely use t.GetFpe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fpe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Gtp_UpfDataEndpoint) GetFpe() uint32 {
	if t == nil || t.Fpe == nil {
		return 0
	}
	return *t.Fpe
}

// GetInterface retrieves the value of the leaf Interface from the NokiaConf_Configure_Router_Gtp_UpfDataEndpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Gtp_UpfDataEndpoint) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Gtp_UpfDataEndpoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Gtp_UpfDataEndpoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Gtp_UpfDataEndpoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Gtp_UpfDataEndpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Gtp_UpfDataEndpoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Gtp_UpfDataEndpoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Gtp_UpfDataEndpoint.
func (*NokiaConf_Configure_Router_Gtp_UpfDataEndpoint) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Gtp_Uplink represents the /nokia-conf/configure/router/gtp/uplink YANG schema element.
type NokiaConf_Configure_Router_Gtp_Uplink struct {
	Apn                *string                                               `path:"apn" module:"nokia-conf"`
	ApplyGroups        []string                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	PdnType            E_NokiaConf_Configure_Router_Gtp_Uplink_PdnType       `path:"pdn-type" module:"nokia-conf"`
	PeerProfileMap     *NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap `path:"peer-profile-map" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Gtp_Uplink implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Gtp_Uplink) IsYANGGoStruct() {}

// GetOrCreatePeerProfileMap retrieves the value of the PeerProfileMap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Gtp_Uplink) GetOrCreatePeerProfileMap() *NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap {
	if t.PeerProfileMap != nil {
		return t.PeerProfileMap
	}
	t.PeerProfileMap = &NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap{}
	return t.PeerProfileMap
}

// GetPeerProfileMap returns the value of the PeerProfileMap struct pointer
// from NokiaConf_Configure_Router_Gtp_Uplink. If the receiver or the field PeerProfileMap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Gtp_Uplink) GetPeerProfileMap() *NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap {
	if t != nil && t.PeerProfileMap != nil {
		return t.PeerProfileMap
	}
	return nil
}

// GetApn retrieves the value of the leaf Apn from the NokiaConf_Configure_Router_Gtp_Uplink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Apn is set, it can
// safely use t.GetApn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Apn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Gtp_Uplink) GetApn() string {
	if t == nil || t.Apn == nil {
		return ""
	}
	return *t.Apn
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Gtp_Uplink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Gtp_Uplink) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Gtp_Uplink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Gtp_Uplink) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPdnType retrieves the value of the leaf PdnType from the NokiaConf_Configure_Router_Gtp_Uplink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PdnType is set, it can
// safely use t.GetPdnType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PdnType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Gtp_Uplink) GetPdnType() E_NokiaConf_Configure_Router_Gtp_Uplink_PdnType {
	if t == nil || t.PdnType == 0 {
		return NokiaConf_Configure_Router_Gtp_Uplink_PdnType_ipv4
	}
	return t.PdnType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Gtp_Uplink
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Gtp_Uplink) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PdnType == 0 {
		t.PdnType = NokiaConf_Configure_Router_Gtp_Uplink_PdnType_ipv4
	}
	t.PeerProfileMap.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Gtp_Uplink) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Gtp_Uplink"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Gtp_Uplink) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Gtp_Uplink) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Gtp_Uplink.
func (*NokiaConf_Configure_Router_Gtp_Uplink) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap represents the /nokia-conf/configure/router/gtp/uplink/peer-profile-map YANG schema element.
type NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap struct {
	Prefix map[string]*NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap_Prefix `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap) NewPrefix(PeerPrefix string) (*NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap_Prefix)
	}

	key := PeerPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap_Prefix{
		PeerPrefix: &PeerPrefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.PeerPrefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap) GetOrCreatePrefix(PeerPrefix string) *NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap_Prefix {

	key := PeerPrefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(PeerPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap) GetPrefix(PeerPrefix string) *NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap_Prefix {

	if t == nil {
		return nil
	}

	key := PeerPrefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap) DeletePrefix(PeerPrefix string) {
	key := PeerPrefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap_Prefix struct to the
// list Prefix of NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap) AppendPrefix(v *NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap_Prefix) error {
	if v.PeerPrefix == nil {
		return fmt.Errorf("invalid nil key received for PeerPrefix")
	}

	key := *v.PeerPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap.
func (*NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap_Prefix represents the /nokia-conf/configure/router/gtp/uplink/peer-profile-map/prefix YANG schema element.
type NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap_Prefix struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	PeerPrefix         *string  `path:"peer-prefix" module:"nokia-conf"`
	PeerProfile        *string  `path:"peer-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap_Prefix) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap_Prefix) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap_Prefix) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPeerPrefix retrieves the value of the leaf PeerPrefix from the NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerPrefix is set, it can
// safely use t.GetPeerPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap_Prefix) GetPeerPrefix() string {
	if t == nil || t.PeerPrefix == nil {
		return ""
	}
	return *t.PeerPrefix
}

// GetPeerProfile retrieves the value of the leaf PeerProfile from the NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerProfile is set, it can
// safely use t.GetPeerProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap_Prefix) GetPeerProfile() string {
	if t == nil || t.PeerProfile == nil {
		return ""
	}
	return *t.PeerProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PeerPrefix == nil {
		return nil, fmt.Errorf("nil value for key PeerPrefix")
	}

	return map[string]interface{}{
		"peer-prefix": *t.PeerPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap_Prefix.
func (*NokiaConf_Configure_Router_Gtp_Uplink_PeerProfileMap_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Igmp represents the /nokia-conf/configure/router/igmp YANG schema element.
type NokiaConf_Configure_Router_Igmp struct {
	AdminState                E_NokiaTypesSros_AdminState                                                                                                `path:"admin-state" module:"nokia-conf"`
	ApplyGroups               []string                                                                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	ForwardingGroupInterface  map[NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Key]*NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface `path:"forwarding-group-interface" module:"nokia-conf"`
	GroupIfQuerySourceAddress *string                                                                                                                    `path:"group-if-query-source-address" module:"nokia-conf"`
	GroupInterface            map[string]*NokiaConf_Configure_Router_Igmp_GroupInterface                                                                 `path:"group-interface" module:"nokia-conf"`
	Interface                 map[string]*NokiaConf_Configure_Router_Igmp_Interface                                                                      `path:"interface" module:"nokia-conf"`
	QueryInterval             *uint32                                                                                                                    `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval   *uint32                                                                                                                    `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval     *uint32                                                                                                                    `path:"query-response-interval" module:"nokia-conf"`
	RobustCount               *uint32                                                                                                                    `path:"robust-count" module:"nokia-conf"`
	SsmTranslate              *NokiaConf_Configure_Router_Igmp_SsmTranslate                                                                              `path:"ssm-translate" module:"nokia-conf"`
	TunnelInterface           *NokiaConf_Configure_Router_Igmp_TunnelInterface                                                                           `path:"tunnel-interface" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Igmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Igmp) IsYANGGoStruct() {}

// NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Key represents the key for list ForwardingGroupInterface of element /nokia-conf/configure/router/igmp.
type NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Key struct {
	ForwardingService  string `path:"forwarding-service"`
	GroupInterfaceName string `path:"group-interface-name"`
}

// NewForwardingGroupInterface creates a new entry in the ForwardingGroupInterface list of the
// NokiaConf_Configure_Router_Igmp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Igmp) NewForwardingGroupInterface(ForwardingService string, GroupInterfaceName string) (*NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ForwardingGroupInterface == nil {
		t.ForwardingGroupInterface = make(map[NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Key]*NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface)
	}

	key := NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Key{
		ForwardingService:  ForwardingService,
		GroupInterfaceName: GroupInterfaceName,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ForwardingGroupInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ForwardingGroupInterface", key)
	}

	t.ForwardingGroupInterface[key] = &NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface{
		ForwardingService:  &ForwardingService,
		GroupInterfaceName: &GroupInterfaceName,
	}

	return t.ForwardingGroupInterface[key], nil
}

// RenameForwardingGroupInterface renames an entry in the list ForwardingGroupInterface within
// the NokiaConf_Configure_Router_Igmp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Igmp) RenameForwardingGroupInterface(oldK, newK NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Key) error {
	if _, ok := t.ForwardingGroupInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in ForwardingGroupInterface", newK)
	}

	e, ok := t.ForwardingGroupInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ForwardingGroupInterface", oldK)
	}
	e.ForwardingService = &newK.ForwardingService
	e.GroupInterfaceName = &newK.GroupInterfaceName

	t.ForwardingGroupInterface[newK] = e
	delete(t.ForwardingGroupInterface, oldK)
	return nil
}

// GetOrCreateForwardingGroupInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Igmp) GetOrCreateForwardingGroupInterface(ForwardingService string, GroupInterfaceName string) *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface {

	key := NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Key{
		ForwardingService:  ForwardingService,
		GroupInterfaceName: GroupInterfaceName,
	}

	if v, ok := t.ForwardingGroupInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewForwardingGroupInterface(ForwardingService, GroupInterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateForwardingGroupInterface got unexpected error: %v", err))
	}
	return v
}

// GetForwardingGroupInterface retrieves the value with the specified key from
// the ForwardingGroupInterface map field of NokiaConf_Configure_Router_Igmp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Igmp) GetForwardingGroupInterface(ForwardingService string, GroupInterfaceName string) *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Key{
		ForwardingService:  ForwardingService,
		GroupInterfaceName: GroupInterfaceName,
	}

	if lm, ok := t.ForwardingGroupInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteForwardingGroupInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Igmp) DeleteForwardingGroupInterface(ForwardingService string, GroupInterfaceName string) {
	key := NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Key{
		ForwardingService:  ForwardingService,
		GroupInterfaceName: GroupInterfaceName,
	}

	delete(t.ForwardingGroupInterface, key)
}

// AppendForwardingGroupInterface appends the supplied NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface struct to the
// list ForwardingGroupInterface of NokiaConf_Configure_Router_Igmp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Igmp) AppendForwardingGroupInterface(v *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface) error {
	if v.ForwardingService == nil {
		return fmt.Errorf("invalid nil key for ForwardingService")
	}

	if v.GroupInterfaceName == nil {
		return fmt.Errorf("invalid nil key for GroupInterfaceName")
	}

	key := NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Key{
		ForwardingService:  *v.ForwardingService,
		GroupInterfaceName: *v.GroupInterfaceName,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ForwardingGroupInterface == nil {
		t.ForwardingGroupInterface = make(map[NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Key]*NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface)
	}

	if _, ok := t.ForwardingGroupInterface[key]; ok {
		return fmt.Errorf("duplicate key for list ForwardingGroupInterface %v", key)
	}

	t.ForwardingGroupInterface[key] = v
	return nil
}

// NewGroupInterface creates a new entry in the GroupInterface list of the
// NokiaConf_Configure_Router_Igmp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Igmp) NewGroupInterface(GroupInterfaceName string) (*NokiaConf_Configure_Router_Igmp_GroupInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupInterface == nil {
		t.GroupInterface = make(map[string]*NokiaConf_Configure_Router_Igmp_GroupInterface)
	}

	key := GroupInterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupInterface", key)
	}

	t.GroupInterface[key] = &NokiaConf_Configure_Router_Igmp_GroupInterface{
		GroupInterfaceName: &GroupInterfaceName,
	}

	return t.GroupInterface[key], nil
}

// RenameGroupInterface renames an entry in the list GroupInterface within
// the NokiaConf_Configure_Router_Igmp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Igmp) RenameGroupInterface(oldK, newK string) error {
	if _, ok := t.GroupInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupInterface", newK)
	}

	e, ok := t.GroupInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupInterface", oldK)
	}
	e.GroupInterfaceName = &newK

	t.GroupInterface[newK] = e
	delete(t.GroupInterface, oldK)
	return nil
}

// GetOrCreateGroupInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Igmp) GetOrCreateGroupInterface(GroupInterfaceName string) *NokiaConf_Configure_Router_Igmp_GroupInterface {

	key := GroupInterfaceName

	if v, ok := t.GroupInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupInterface(GroupInterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupInterface got unexpected error: %v", err))
	}
	return v
}

// GetGroupInterface retrieves the value with the specified key from
// the GroupInterface map field of NokiaConf_Configure_Router_Igmp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Igmp) GetGroupInterface(GroupInterfaceName string) *NokiaConf_Configure_Router_Igmp_GroupInterface {

	if t == nil {
		return nil
	}

	key := GroupInterfaceName

	if lm, ok := t.GroupInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Igmp) DeleteGroupInterface(GroupInterfaceName string) {
	key := GroupInterfaceName

	delete(t.GroupInterface, key)
}

// AppendGroupInterface appends the supplied NokiaConf_Configure_Router_Igmp_GroupInterface struct to the
// list GroupInterface of NokiaConf_Configure_Router_Igmp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Igmp_GroupInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Igmp) AppendGroupInterface(v *NokiaConf_Configure_Router_Igmp_GroupInterface) error {
	if v.GroupInterfaceName == nil {
		return fmt.Errorf("invalid nil key received for GroupInterfaceName")
	}

	key := *v.GroupInterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupInterface == nil {
		t.GroupInterface = make(map[string]*NokiaConf_Configure_Router_Igmp_GroupInterface)
	}

	if _, ok := t.GroupInterface[key]; ok {
		return fmt.Errorf("duplicate key for list GroupInterface %v", key)
	}

	t.GroupInterface[key] = v
	return nil
}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Router_Igmp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Igmp) NewInterface(IpInterfaceName string) (*NokiaConf_Configure_Router_Igmp_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Router_Igmp_Interface)
	}

	key := IpInterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Router_Igmp_Interface{
		IpInterfaceName: &IpInterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Router_Igmp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Igmp) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.IpInterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Igmp) GetOrCreateInterface(IpInterfaceName string) *NokiaConf_Configure_Router_Igmp_Interface {

	key := IpInterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(IpInterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Router_Igmp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Igmp) GetInterface(IpInterfaceName string) *NokiaConf_Configure_Router_Igmp_Interface {

	if t == nil {
		return nil
	}

	key := IpInterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Igmp) DeleteInterface(IpInterfaceName string) {
	key := IpInterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Router_Igmp_Interface struct to the
// list Interface of NokiaConf_Configure_Router_Igmp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Igmp_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Igmp) AppendInterface(v *NokiaConf_Configure_Router_Igmp_Interface) error {
	if v.IpInterfaceName == nil {
		return fmt.Errorf("invalid nil key received for IpInterfaceName")
	}

	key := *v.IpInterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Router_Igmp_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateSsmTranslate retrieves the value of the SsmTranslate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Igmp) GetOrCreateSsmTranslate() *NokiaConf_Configure_Router_Igmp_SsmTranslate {
	if t.SsmTranslate != nil {
		return t.SsmTranslate
	}
	t.SsmTranslate = &NokiaConf_Configure_Router_Igmp_SsmTranslate{}
	return t.SsmTranslate
}

// GetOrCreateTunnelInterface retrieves the value of the TunnelInterface field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Igmp) GetOrCreateTunnelInterface() *NokiaConf_Configure_Router_Igmp_TunnelInterface {
	if t.TunnelInterface != nil {
		return t.TunnelInterface
	}
	t.TunnelInterface = &NokiaConf_Configure_Router_Igmp_TunnelInterface{}
	return t.TunnelInterface
}

// GetSsmTranslate returns the value of the SsmTranslate struct pointer
// from NokiaConf_Configure_Router_Igmp. If the receiver or the field SsmTranslate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Igmp) GetSsmTranslate() *NokiaConf_Configure_Router_Igmp_SsmTranslate {
	if t != nil && t.SsmTranslate != nil {
		return t.SsmTranslate
	}
	return nil
}

// GetTunnelInterface returns the value of the TunnelInterface struct pointer
// from NokiaConf_Configure_Router_Igmp. If the receiver or the field TunnelInterface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Igmp) GetTunnelInterface() *NokiaConf_Configure_Router_Igmp_TunnelInterface {
	if t != nil && t.TunnelInterface != nil {
		return t.TunnelInterface
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroupIfQuerySourceAddress retrieves the value of the leaf GroupIfQuerySourceAddress from the NokiaConf_Configure_Router_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupIfQuerySourceAddress is set, it can
// safely use t.GetGroupIfQuerySourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupIfQuerySourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp) GetGroupIfQuerySourceAddress() string {
	if t == nil || t.GroupIfQuerySourceAddress == nil {
		return ""
	}
	return *t.GroupIfQuerySourceAddress
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Router_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 125
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Router_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 1
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Router_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 10
	}
	return *t.QueryResponseInterval
}

// GetRobustCount retrieves the value of the leaf RobustCount from the NokiaConf_Configure_Router_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RobustCount is set, it can
// safely use t.GetRobustCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RobustCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp) GetRobustCount() uint32 {
	if t == nil || t.RobustCount == nil {
		return 2
	}
	return *t.RobustCount
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Igmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Igmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.QueryInterval == nil {
		var v uint32 = 125
		t.QueryInterval = &v
	}
	if t.QueryLastMemberInterval == nil {
		var v uint32 = 1
		t.QueryLastMemberInterval = &v
	}
	if t.QueryResponseInterval == nil {
		var v uint32 = 10
		t.QueryResponseInterval = &v
	}
	if t.RobustCount == nil {
		var v uint32 = 2
		t.RobustCount = &v
	}
	t.SsmTranslate.PopulateDefaults()
	t.TunnelInterface.PopulateDefaults()
	for _, e := range t.ForwardingGroupInterface {
		e.PopulateDefaults()
	}
	for _, e := range t.GroupInterface {
		e.PopulateDefaults()
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Igmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Igmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Igmp.
func (*NokiaConf_Configure_Router_Igmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface represents the /nokia-conf/configure/router/igmp/forwarding-group-interface YANG schema element.
type NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface struct {
	AdminState                E_NokiaTypesSros_AdminState                                    `path:"admin-state" module:"nokia-conf"`
	ApplyGroups               []string                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	ForwardingService         *string                                                        `path:"forwarding-service" module:"nokia-conf"`
	GroupInterfaceName        *string                                                        `path:"group-interface-name" module:"nokia-conf"`
	ImportPolicy              *string                                                        `path:"import-policy" module:"nokia-conf"`
	MaximumNumberGroupSources *uint32                                                        `path:"maximum-number-group-sources" module:"nokia-conf"`
	MaximumNumberGroups       *uint32                                                        `path:"maximum-number-groups" module:"nokia-conf"`
	MaximumNumberSources      *uint32                                                        `path:"maximum-number-sources" module:"nokia-conf"`
	Mcac                      *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac `path:"mcac" module:"nokia-conf"`
	QueryInterval             *uint32                                                        `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval   *uint32                                                        `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval     *uint32                                                        `path:"query-response-interval" module:"nokia-conf"`
	QuerySourceAddress        *string                                                        `path:"query-source-address" module:"nokia-conf"`
	RouterAlertCheck          *bool                                                          `path:"router-alert-check" module:"nokia-conf"`
	SubHostsOnly              *bool                                                          `path:"sub-hosts-only" module:"nokia-conf"`
	SubnetCheck               *bool                                                          `path:"subnet-check" module:"nokia-conf"`
	Version                   E_NokiaTypesIgmp_IgmpVersion                                   `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface) IsYANGGoStruct() {}

// GetOrCreateMcac retrieves the value of the Mcac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface) GetOrCreateMcac() *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac {
	if t.Mcac != nil {
		return t.Mcac
	}
	t.Mcac = &NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac{}
	return t.Mcac
}

// GetMcac returns the value of the Mcac struct pointer
// from NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface. If the receiver or the field Mcac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface) GetMcac() *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac {
	if t != nil && t.Mcac != nil {
		return t.Mcac
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetForwardingService retrieves the value of the leaf ForwardingService from the NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingService is set, it can
// safely use t.GetForwardingService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingService == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface) GetForwardingService() string {
	if t == nil || t.ForwardingService == nil {
		return ""
	}
	return *t.ForwardingService
}

// GetGroupInterfaceName retrieves the value of the leaf GroupInterfaceName from the NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupInterfaceName is set, it can
// safely use t.GetGroupInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupInterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface) GetGroupInterfaceName() string {
	if t == nil || t.GroupInterfaceName == nil {
		return ""
	}
	return *t.GroupInterfaceName
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetMaximumNumberGroupSources retrieves the value of the leaf MaximumNumberGroupSources from the NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroupSources is set, it can
// safely use t.GetMaximumNumberGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroupSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface) GetMaximumNumberGroupSources() uint32 {
	if t == nil || t.MaximumNumberGroupSources == nil {
		return 0
	}
	return *t.MaximumNumberGroupSources
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMaximumNumberSources retrieves the value of the leaf MaximumNumberSources from the NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberSources is set, it can
// safely use t.GetMaximumNumberSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface) GetMaximumNumberSources() uint32 {
	if t == nil || t.MaximumNumberSources == nil {
		return 0
	}
	return *t.MaximumNumberSources
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 0
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 0
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 0
	}
	return *t.QueryResponseInterval
}

// GetQuerySourceAddress retrieves the value of the leaf QuerySourceAddress from the NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QuerySourceAddress is set, it can
// safely use t.GetQuerySourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QuerySourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface) GetQuerySourceAddress() string {
	if t == nil || t.QuerySourceAddress == nil {
		return ""
	}
	return *t.QuerySourceAddress
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetSubHostsOnly retrieves the value of the leaf SubHostsOnly from the NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubHostsOnly is set, it can
// safely use t.GetSubHostsOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubHostsOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface) GetSubHostsOnly() bool {
	if t == nil || t.SubHostsOnly == nil {
		return true
	}
	return *t.SubHostsOnly
}

// GetSubnetCheck retrieves the value of the leaf SubnetCheck from the NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubnetCheck is set, it can
// safely use t.GetSubnetCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubnetCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface) GetSubnetCheck() bool {
	if t == nil || t.SubnetCheck == nil {
		return true
	}
	return *t.SubnetCheck
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface) GetVersion() E_NokiaTypesIgmp_IgmpVersion {
	if t == nil || t.Version == 0 {
		return NokiaTypesIgmp_IgmpVersion_3
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.SubHostsOnly == nil {
		var v bool = true
		t.SubHostsOnly = &v
	}
	if t.SubnetCheck == nil {
		var v bool = true
		t.SubnetCheck = &v
	}
	if t.Version == 0 {
		t.Version = NokiaTypesIgmp_IgmpVersion_3
	}
	t.Mcac.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ForwardingService == nil {
		return nil, fmt.Errorf("nil value for key ForwardingService")
	}

	if t.GroupInterfaceName == nil {
		return nil, fmt.Errorf("nil value for key GroupInterfaceName")
	}

	return map[string]interface{}{
		"forwarding-service":   *t.ForwardingService,
		"group-interface-name": *t.GroupInterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface.
func (*NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac represents the /nokia-conf/configure/router/igmp/forwarding-group-interface/mcac YANG schema element.
type NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac struct {
	Bandwidth       *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth `path:"bandwidth" module:"nokia-conf"`
	InterfacePolicy *string                                                                  `path:"interface-policy" module:"nokia-conf"`
	Policy          *string                                                                  `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac) IsYANGGoStruct() {}

// GetOrCreateBandwidth retrieves the value of the Bandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac) GetOrCreateBandwidth() *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth {
	if t.Bandwidth != nil {
		return t.Bandwidth
	}
	t.Bandwidth = &NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth{}
	return t.Bandwidth
}

// GetBandwidth returns the value of the Bandwidth struct pointer
// from NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac. If the receiver or the field Bandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac) GetBandwidth() *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth {
	if t != nil && t.Bandwidth != nil {
		return t.Bandwidth
	}
	return nil
}

// GetInterfacePolicy retrieves the value of the leaf InterfacePolicy from the NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfacePolicy is set, it can
// safely use t.GetInterfacePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfacePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac) GetInterfacePolicy() string {
	if t == nil || t.InterfacePolicy == nil {
		return ""
	}
	return *t.InterfacePolicy
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bandwidth.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac.
func (*NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth represents the /nokia-conf/configure/router/igmp/forwarding-group-interface/mcac/bandwidth YANG schema element.
type NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth struct {
	Mandatory NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth_Mandatory_Union `path:"mandatory" module:"nokia-conf"`
	Total     NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth_Total_Union     `path:"total" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth) IsYANGGoStruct() {}

// GetMandatory retrieves the value of the leaf Mandatory from the NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mandatory is set, it can
// safely use t.GetMandatory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mandatory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth) GetMandatory() NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth_Mandatory_Union {
	if t == nil || t.Mandatory == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Mandatory
}

// GetTotal retrieves the value of the leaf Total from the NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Total is set, it can
// safely use t.GetTotal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Total == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth) GetTotal() NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth_Total_Union {
	if t == nil || t.Total == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Total
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mandatory == nil {
		t.Mandatory = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	if t.Total == nil {
		t.Total = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth.
func (*NokiaConf_Configure_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Igmp_GroupInterface represents the /nokia-conf/configure/router/igmp/group-interface YANG schema element.
type NokiaConf_Configure_Router_Igmp_GroupInterface struct {
	AdminState                E_NokiaTypesSros_AdminState                          `path:"admin-state" module:"nokia-conf"`
	ApplyGroups               []string                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupInterfaceName        *string                                              `path:"group-interface-name" module:"nokia-conf"`
	ImportPolicy              *string                                              `path:"import-policy" module:"nokia-conf"`
	MaximumNumberGroupSources *uint32                                              `path:"maximum-number-group-sources" module:"nokia-conf"`
	MaximumNumberGroups       *uint32                                              `path:"maximum-number-groups" module:"nokia-conf"`
	MaximumNumberSources      *uint32                                              `path:"maximum-number-sources" module:"nokia-conf"`
	Mcac                      *NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac `path:"mcac" module:"nokia-conf"`
	QueryInterval             *uint32                                              `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval   *uint32                                              `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval     *uint32                                              `path:"query-response-interval" module:"nokia-conf"`
	QuerySourceAddress        *string                                              `path:"query-source-address" module:"nokia-conf"`
	RouterAlertCheck          *bool                                                `path:"router-alert-check" module:"nokia-conf"`
	SubHostsOnly              *bool                                                `path:"sub-hosts-only" module:"nokia-conf"`
	SubnetCheck               *bool                                                `path:"subnet-check" module:"nokia-conf"`
	Version                   E_NokiaTypesIgmp_IgmpVersion                         `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Igmp_GroupInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Igmp_GroupInterface) IsYANGGoStruct() {}

// GetOrCreateMcac retrieves the value of the Mcac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Igmp_GroupInterface) GetOrCreateMcac() *NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac {
	if t.Mcac != nil {
		return t.Mcac
	}
	t.Mcac = &NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac{}
	return t.Mcac
}

// GetMcac returns the value of the Mcac struct pointer
// from NokiaConf_Configure_Router_Igmp_GroupInterface. If the receiver or the field Mcac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Igmp_GroupInterface) GetMcac() *NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac {
	if t != nil && t.Mcac != nil {
		return t.Mcac
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_GroupInterface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_GroupInterface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_GroupInterface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroupInterfaceName retrieves the value of the leaf GroupInterfaceName from the NokiaConf_Configure_Router_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupInterfaceName is set, it can
// safely use t.GetGroupInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupInterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_GroupInterface) GetGroupInterfaceName() string {
	if t == nil || t.GroupInterfaceName == nil {
		return ""
	}
	return *t.GroupInterfaceName
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Router_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_GroupInterface) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetMaximumNumberGroupSources retrieves the value of the leaf MaximumNumberGroupSources from the NokiaConf_Configure_Router_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroupSources is set, it can
// safely use t.GetMaximumNumberGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroupSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_GroupInterface) GetMaximumNumberGroupSources() uint32 {
	if t == nil || t.MaximumNumberGroupSources == nil {
		return 0
	}
	return *t.MaximumNumberGroupSources
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Router_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_GroupInterface) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMaximumNumberSources retrieves the value of the leaf MaximumNumberSources from the NokiaConf_Configure_Router_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberSources is set, it can
// safely use t.GetMaximumNumberSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_GroupInterface) GetMaximumNumberSources() uint32 {
	if t == nil || t.MaximumNumberSources == nil {
		return 0
	}
	return *t.MaximumNumberSources
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Router_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_GroupInterface) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 0
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Router_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_GroupInterface) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 0
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Router_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_GroupInterface) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 0
	}
	return *t.QueryResponseInterval
}

// GetQuerySourceAddress retrieves the value of the leaf QuerySourceAddress from the NokiaConf_Configure_Router_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QuerySourceAddress is set, it can
// safely use t.GetQuerySourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QuerySourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_GroupInterface) GetQuerySourceAddress() string {
	if t == nil || t.QuerySourceAddress == nil {
		return ""
	}
	return *t.QuerySourceAddress
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the NokiaConf_Configure_Router_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_GroupInterface) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetSubHostsOnly retrieves the value of the leaf SubHostsOnly from the NokiaConf_Configure_Router_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubHostsOnly is set, it can
// safely use t.GetSubHostsOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubHostsOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_GroupInterface) GetSubHostsOnly() bool {
	if t == nil || t.SubHostsOnly == nil {
		return true
	}
	return *t.SubHostsOnly
}

// GetSubnetCheck retrieves the value of the leaf SubnetCheck from the NokiaConf_Configure_Router_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubnetCheck is set, it can
// safely use t.GetSubnetCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubnetCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_GroupInterface) GetSubnetCheck() bool {
	if t == nil || t.SubnetCheck == nil {
		return true
	}
	return *t.SubnetCheck
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Router_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_GroupInterface) GetVersion() E_NokiaTypesIgmp_IgmpVersion {
	if t == nil || t.Version == 0 {
		return NokiaTypesIgmp_IgmpVersion_3
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Igmp_GroupInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Igmp_GroupInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.SubHostsOnly == nil {
		var v bool = true
		t.SubHostsOnly = &v
	}
	if t.SubnetCheck == nil {
		var v bool = true
		t.SubnetCheck = &v
	}
	if t.Version == 0 {
		t.Version = NokiaTypesIgmp_IgmpVersion_3
	}
	t.Mcac.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Igmp_GroupInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Igmp_GroupInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupInterfaceName == nil {
		return nil, fmt.Errorf("nil value for key GroupInterfaceName")
	}

	return map[string]interface{}{
		"group-interface-name": *t.GroupInterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_GroupInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Igmp_GroupInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_GroupInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Igmp_GroupInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Igmp_GroupInterface.
func (*NokiaConf_Configure_Router_Igmp_GroupInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac represents the /nokia-conf/configure/router/igmp/group-interface/mcac YANG schema element.
type NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac struct {
	Bandwidth       *NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac_Bandwidth `path:"bandwidth" module:"nokia-conf"`
	InterfacePolicy *string                                                        `path:"interface-policy" module:"nokia-conf"`
	Policy          *string                                                        `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac) IsYANGGoStruct() {}

// GetOrCreateBandwidth retrieves the value of the Bandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac) GetOrCreateBandwidth() *NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac_Bandwidth {
	if t.Bandwidth != nil {
		return t.Bandwidth
	}
	t.Bandwidth = &NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac_Bandwidth{}
	return t.Bandwidth
}

// GetBandwidth returns the value of the Bandwidth struct pointer
// from NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac. If the receiver or the field Bandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac) GetBandwidth() *NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac_Bandwidth {
	if t != nil && t.Bandwidth != nil {
		return t.Bandwidth
	}
	return nil
}

// GetInterfacePolicy retrieves the value of the leaf InterfacePolicy from the NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfacePolicy is set, it can
// safely use t.GetInterfacePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfacePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac) GetInterfacePolicy() string {
	if t == nil || t.InterfacePolicy == nil {
		return ""
	}
	return *t.InterfacePolicy
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bandwidth.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac.
func (*NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac_Bandwidth represents the /nokia-conf/configure/router/igmp/group-interface/mcac/bandwidth YANG schema element.
type NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac_Bandwidth struct {
	Mandatory NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac_Bandwidth_Mandatory_Union `path:"mandatory" module:"nokia-conf"`
	Total     NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac_Bandwidth_Total_Union     `path:"total" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac_Bandwidth) IsYANGGoStruct() {}

// GetMandatory retrieves the value of the leaf Mandatory from the NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mandatory is set, it can
// safely use t.GetMandatory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mandatory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac_Bandwidth) GetMandatory() NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac_Bandwidth_Mandatory_Union {
	if t == nil || t.Mandatory == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Mandatory
}

// GetTotal retrieves the value of the leaf Total from the NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Total is set, it can
// safely use t.GetTotal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Total == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac_Bandwidth) GetTotal() NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac_Bandwidth_Total_Union {
	if t == nil || t.Total == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Total
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac_Bandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac_Bandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mandatory == nil {
		t.Mandatory = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	if t.Total == nil {
		t.Total = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac_Bandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac_Bandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac_Bandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac_Bandwidth.
func (*NokiaConf_Configure_Router_Igmp_GroupInterface_Mcac_Bandwidth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Igmp_Interface represents the /nokia-conf/configure/router/igmp/interface YANG schema element.
type NokiaConf_Configure_Router_Igmp_Interface struct {
	AdminState                E_NokiaTypesSros_AdminState                             `path:"admin-state" module:"nokia-conf"`
	ApplyGroups               []string                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	ImportPolicy              *string                                                 `path:"import-policy" module:"nokia-conf"`
	IpInterfaceName           *string                                                 `path:"ip-interface-name" module:"nokia-conf"`
	MaximumNumberGroupSources *uint32                                                 `path:"maximum-number-group-sources" module:"nokia-conf"`
	MaximumNumberGroups       *uint32                                                 `path:"maximum-number-groups" module:"nokia-conf"`
	MaximumNumberSources      *uint32                                                 `path:"maximum-number-sources" module:"nokia-conf"`
	Mcac                      *NokiaConf_Configure_Router_Igmp_Interface_Mcac         `path:"mcac" module:"nokia-conf"`
	QueryInterval             *uint32                                                 `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval   *uint32                                                 `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval     *uint32                                                 `path:"query-response-interval" module:"nokia-conf"`
	RedundantMcast            *bool                                                   `path:"redundant-mcast" module:"nokia-conf"`
	RouterAlertCheck          *bool                                                   `path:"router-alert-check" module:"nokia-conf"`
	SsmTranslate              *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate `path:"ssm-translate" module:"nokia-conf"`
	Static                    *NokiaConf_Configure_Router_Igmp_Interface_Static       `path:"static" module:"nokia-conf"`
	SubnetCheck               *bool                                                   `path:"subnet-check" module:"nokia-conf"`
	Version                   E_NokiaTypesIgmp_IgmpVersion                            `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Igmp_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Igmp_Interface) IsYANGGoStruct() {}

// GetOrCreateMcac retrieves the value of the Mcac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Igmp_Interface) GetOrCreateMcac() *NokiaConf_Configure_Router_Igmp_Interface_Mcac {
	if t.Mcac != nil {
		return t.Mcac
	}
	t.Mcac = &NokiaConf_Configure_Router_Igmp_Interface_Mcac{}
	return t.Mcac
}

// GetOrCreateSsmTranslate retrieves the value of the SsmTranslate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Igmp_Interface) GetOrCreateSsmTranslate() *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate {
	if t.SsmTranslate != nil {
		return t.SsmTranslate
	}
	t.SsmTranslate = &NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate{}
	return t.SsmTranslate
}

// GetOrCreateStatic retrieves the value of the Static field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Igmp_Interface) GetOrCreateStatic() *NokiaConf_Configure_Router_Igmp_Interface_Static {
	if t.Static != nil {
		return t.Static
	}
	t.Static = &NokiaConf_Configure_Router_Igmp_Interface_Static{}
	return t.Static
}

// GetMcac returns the value of the Mcac struct pointer
// from NokiaConf_Configure_Router_Igmp_Interface. If the receiver or the field Mcac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Igmp_Interface) GetMcac() *NokiaConf_Configure_Router_Igmp_Interface_Mcac {
	if t != nil && t.Mcac != nil {
		return t.Mcac
	}
	return nil
}

// GetSsmTranslate returns the value of the SsmTranslate struct pointer
// from NokiaConf_Configure_Router_Igmp_Interface. If the receiver or the field SsmTranslate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Igmp_Interface) GetSsmTranslate() *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate {
	if t != nil && t.SsmTranslate != nil {
		return t.SsmTranslate
	}
	return nil
}

// GetStatic returns the value of the Static struct pointer
// from NokiaConf_Configure_Router_Igmp_Interface. If the receiver or the field Static is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Igmp_Interface) GetStatic() *NokiaConf_Configure_Router_Igmp_Interface_Static {
	if t != nil && t.Static != nil {
		return t.Static
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Router_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetIpInterfaceName retrieves the value of the leaf IpInterfaceName from the NokiaConf_Configure_Router_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpInterfaceName is set, it can
// safely use t.GetIpInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpInterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface) GetIpInterfaceName() string {
	if t == nil || t.IpInterfaceName == nil {
		return ""
	}
	return *t.IpInterfaceName
}

// GetMaximumNumberGroupSources retrieves the value of the leaf MaximumNumberGroupSources from the NokiaConf_Configure_Router_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroupSources is set, it can
// safely use t.GetMaximumNumberGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroupSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface) GetMaximumNumberGroupSources() uint32 {
	if t == nil || t.MaximumNumberGroupSources == nil {
		return 0
	}
	return *t.MaximumNumberGroupSources
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Router_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMaximumNumberSources retrieves the value of the leaf MaximumNumberSources from the NokiaConf_Configure_Router_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberSources is set, it can
// safely use t.GetMaximumNumberSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface) GetMaximumNumberSources() uint32 {
	if t == nil || t.MaximumNumberSources == nil {
		return 0
	}
	return *t.MaximumNumberSources
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Router_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 0
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Router_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 0
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Router_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 0
	}
	return *t.QueryResponseInterval
}

// GetRedundantMcast retrieves the value of the leaf RedundantMcast from the NokiaConf_Configure_Router_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedundantMcast is set, it can
// safely use t.GetRedundantMcast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedundantMcast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface) GetRedundantMcast() bool {
	if t == nil || t.RedundantMcast == nil {
		return false
	}
	return *t.RedundantMcast
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the NokiaConf_Configure_Router_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetSubnetCheck retrieves the value of the leaf SubnetCheck from the NokiaConf_Configure_Router_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubnetCheck is set, it can
// safely use t.GetSubnetCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubnetCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface) GetSubnetCheck() bool {
	if t == nil || t.SubnetCheck == nil {
		return true
	}
	return *t.SubnetCheck
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Router_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface) GetVersion() E_NokiaTypesIgmp_IgmpVersion {
	if t == nil || t.Version == 0 {
		return NokiaTypesIgmp_IgmpVersion_3
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Igmp_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Igmp_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.RedundantMcast == nil {
		var v bool = false
		t.RedundantMcast = &v
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.SubnetCheck == nil {
		var v bool = true
		t.SubnetCheck = &v
	}
	if t.Version == 0 {
		t.Version = NokiaTypesIgmp_IgmpVersion_3
	}
	t.Mcac.PopulateDefaults()
	t.SsmTranslate.PopulateDefaults()
	t.Static.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Igmp_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Igmp_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpInterfaceName == nil {
		return nil, fmt.Errorf("nil value for key IpInterfaceName")
	}

	return map[string]interface{}{
		"ip-interface-name": *t.IpInterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Igmp_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Igmp_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Igmp_Interface.
func (*NokiaConf_Configure_Router_Igmp_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Igmp_Interface_Mcac represents the /nokia-conf/configure/router/igmp/interface/mcac YANG schema element.
type NokiaConf_Configure_Router_Igmp_Interface_Mcac struct {
	Bandwidth       *NokiaConf_Configure_Router_Igmp_Interface_Mcac_Bandwidth     `path:"bandwidth" module:"nokia-conf"`
	InterfacePolicy *string                                                       `path:"interface-policy" module:"nokia-conf"`
	McConstraints   *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints `path:"mc-constraints" module:"nokia-conf"`
	Policy          *string                                                       `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Igmp_Interface_Mcac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Igmp_Interface_Mcac) IsYANGGoStruct() {}

// GetOrCreateBandwidth retrieves the value of the Bandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac) GetOrCreateBandwidth() *NokiaConf_Configure_Router_Igmp_Interface_Mcac_Bandwidth {
	if t.Bandwidth != nil {
		return t.Bandwidth
	}
	t.Bandwidth = &NokiaConf_Configure_Router_Igmp_Interface_Mcac_Bandwidth{}
	return t.Bandwidth
}

// GetOrCreateMcConstraints retrieves the value of the McConstraints field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac) GetOrCreateMcConstraints() *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints {
	if t.McConstraints != nil {
		return t.McConstraints
	}
	t.McConstraints = &NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints{}
	return t.McConstraints
}

// GetBandwidth returns the value of the Bandwidth struct pointer
// from NokiaConf_Configure_Router_Igmp_Interface_Mcac. If the receiver or the field Bandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac) GetBandwidth() *NokiaConf_Configure_Router_Igmp_Interface_Mcac_Bandwidth {
	if t != nil && t.Bandwidth != nil {
		return t.Bandwidth
	}
	return nil
}

// GetMcConstraints returns the value of the McConstraints struct pointer
// from NokiaConf_Configure_Router_Igmp_Interface_Mcac. If the receiver or the field McConstraints is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac) GetMcConstraints() *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints {
	if t != nil && t.McConstraints != nil {
		return t.McConstraints
	}
	return nil
}

// GetInterfacePolicy retrieves the value of the leaf InterfacePolicy from the NokiaConf_Configure_Router_Igmp_Interface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfacePolicy is set, it can
// safely use t.GetInterfacePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfacePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac) GetInterfacePolicy() string {
	if t == nil || t.InterfacePolicy == nil {
		return ""
	}
	return *t.InterfacePolicy
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Router_Igmp_Interface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Igmp_Interface_Mcac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bandwidth.PopulateDefaults()
	t.McConstraints.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Igmp_Interface_Mcac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Igmp_Interface_Mcac.
func (*NokiaConf_Configure_Router_Igmp_Interface_Mcac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Igmp_Interface_Mcac_Bandwidth represents the /nokia-conf/configure/router/igmp/interface/mcac/bandwidth YANG schema element.
type NokiaConf_Configure_Router_Igmp_Interface_Mcac_Bandwidth struct {
	Mandatory NokiaConf_Configure_Router_Igmp_Interface_Mcac_Bandwidth_Mandatory_Union `path:"mandatory" module:"nokia-conf"`
	Total     NokiaConf_Configure_Router_Igmp_Interface_Mcac_Bandwidth_Total_Union     `path:"total" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Igmp_Interface_Mcac_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Igmp_Interface_Mcac_Bandwidth) IsYANGGoStruct() {}

// GetMandatory retrieves the value of the leaf Mandatory from the NokiaConf_Configure_Router_Igmp_Interface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mandatory is set, it can
// safely use t.GetMandatory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mandatory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_Bandwidth) GetMandatory() NokiaConf_Configure_Router_Igmp_Interface_Mcac_Bandwidth_Mandatory_Union {
	if t == nil || t.Mandatory == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Mandatory
}

// GetTotal retrieves the value of the leaf Total from the NokiaConf_Configure_Router_Igmp_Interface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Total is set, it can
// safely use t.GetTotal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Total == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_Bandwidth) GetTotal() NokiaConf_Configure_Router_Igmp_Interface_Mcac_Bandwidth_Total_Union {
	if t == nil || t.Total == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Total
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Igmp_Interface_Mcac_Bandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_Bandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mandatory == nil {
		t.Mandatory = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	if t.Total == nil {
		t.Total = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_Bandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Igmp_Interface_Mcac_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_Bandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_Bandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Igmp_Interface_Mcac_Bandwidth.
func (*NokiaConf_Configure_Router_Igmp_Interface_Mcac_Bandwidth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints represents the /nokia-conf/configure/router/igmp/interface/mcac/mc-constraints YANG schema element.
type NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints struct {
	Level            map[uint32]*NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_Level      `path:"level" module:"nokia-conf"`
	NumberDown       map[uint32]*NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_NumberDown `path:"number-down" module:"nokia-conf"`
	UseLagPortWeight *bool                                                                               `path:"use-lag-port-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints) IsYANGGoStruct() {}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints) NewLevel(LevelId uint32) (*NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[uint32]*NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_Level)
	}

	key := LevelId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_Level{
		LevelId: &LevelId,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints) RenameLevel(oldK, newK uint32) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.LevelId = &newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints) GetOrCreateLevel(LevelId uint32) *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_Level {

	key := LevelId

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(LevelId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints) GetLevel(LevelId uint32) *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_Level {

	if t == nil {
		return nil
	}

	key := LevelId

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints) DeleteLevel(LevelId uint32) {
	key := LevelId

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_Level struct to the
// list Level of NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints) AppendLevel(v *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_Level) error {
	if v.LevelId == nil {
		return fmt.Errorf("invalid nil key received for LevelId")
	}

	key := *v.LevelId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[uint32]*NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// NewNumberDown creates a new entry in the NumberDown list of the
// NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints) NewNumberDown(NumberLagPortDown uint32) (*NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_NumberDown, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NumberDown == nil {
		t.NumberDown = make(map[uint32]*NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_NumberDown)
	}

	key := NumberLagPortDown

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NumberDown[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NumberDown", key)
	}

	t.NumberDown[key] = &NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_NumberDown{
		NumberLagPortDown: &NumberLagPortDown,
	}

	return t.NumberDown[key], nil
}

// RenameNumberDown renames an entry in the list NumberDown within
// the NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints) RenameNumberDown(oldK, newK uint32) error {
	if _, ok := t.NumberDown[newK]; ok {
		return fmt.Errorf("key %v already exists in NumberDown", newK)
	}

	e, ok := t.NumberDown[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NumberDown", oldK)
	}
	e.NumberLagPortDown = &newK

	t.NumberDown[newK] = e
	delete(t.NumberDown, oldK)
	return nil
}

// GetOrCreateNumberDown retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints) GetOrCreateNumberDown(NumberLagPortDown uint32) *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_NumberDown {

	key := NumberLagPortDown

	if v, ok := t.NumberDown[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNumberDown(NumberLagPortDown)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNumberDown got unexpected error: %v", err))
	}
	return v
}

// GetNumberDown retrieves the value with the specified key from
// the NumberDown map field of NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints) GetNumberDown(NumberLagPortDown uint32) *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_NumberDown {

	if t == nil {
		return nil
	}

	key := NumberLagPortDown

	if lm, ok := t.NumberDown[key]; ok {
		return lm
	}
	return nil
}

// DeleteNumberDown deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints) DeleteNumberDown(NumberLagPortDown uint32) {
	key := NumberLagPortDown

	delete(t.NumberDown, key)
}

// AppendNumberDown appends the supplied NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_NumberDown struct to the
// list NumberDown of NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_NumberDown already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints) AppendNumberDown(v *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_NumberDown) error {
	if v.NumberLagPortDown == nil {
		return fmt.Errorf("invalid nil key received for NumberLagPortDown")
	}

	key := *v.NumberLagPortDown

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NumberDown == nil {
		t.NumberDown = make(map[uint32]*NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_NumberDown)
	}

	if _, ok := t.NumberDown[key]; ok {
		return fmt.Errorf("duplicate key for list NumberDown %v", key)
	}

	t.NumberDown[key] = v
	return nil
}

// GetUseLagPortWeight retrieves the value of the leaf UseLagPortWeight from the NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseLagPortWeight is set, it can
// safely use t.GetUseLagPortWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseLagPortWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints) GetUseLagPortWeight() bool {
	if t == nil || t.UseLagPortWeight == nil {
		return false
	}
	return *t.UseLagPortWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UseLagPortWeight == nil {
		var v bool = false
		t.UseLagPortWeight = &v
	}
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
	for _, e := range t.NumberDown {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints.
func (*NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_Level represents the /nokia-conf/configure/router/igmp/interface/mcac/mc-constraints/level YANG schema element.
type NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_Level struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Bandwidth          *uint32  `path:"bandwidth" module:"nokia-conf"`
	LevelId            *uint32  `path:"level-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_Level) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_Level) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_Level) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_Level) GetBandwidth() uint32 {
	if t == nil || t.Bandwidth == nil {
		return 0
	}
	return *t.Bandwidth
}

// GetLevelId retrieves the value of the leaf LevelId from the NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelId is set, it can
// safely use t.GetLevelId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_Level) GetLevelId() uint32 {
	if t == nil || t.LevelId == nil {
		return 0
	}
	return *t.LevelId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_Level) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LevelId == nil {
		return nil, fmt.Errorf("nil value for key LevelId")
	}

	return map[string]interface{}{
		"level-id": *t.LevelId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_Level.
func (*NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_NumberDown represents the /nokia-conf/configure/router/igmp/interface/mcac/mc-constraints/number-down YANG schema element.
type NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_NumberDown struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Level              *uint32  `path:"level" module:"nokia-conf"`
	NumberLagPortDown  *uint32  `path:"number-lag-port-down" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_NumberDown implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_NumberDown) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_NumberDown) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_NumberDown) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_NumberDown) GetLevel() uint32 {
	if t == nil || t.Level == nil {
		return 0
	}
	return *t.Level
}

// GetNumberLagPortDown retrieves the value of the leaf NumberLagPortDown from the NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NumberLagPortDown is set, it can
// safely use t.GetNumberLagPortDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NumberLagPortDown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_NumberDown) GetNumberLagPortDown() uint32 {
	if t == nil || t.NumberLagPortDown == nil {
		return 0
	}
	return *t.NumberLagPortDown
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_NumberDown
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_NumberDown) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_NumberDown struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_NumberDown) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NumberLagPortDown == nil {
		return nil, fmt.Errorf("nil value for key NumberLagPortDown")
	}

	return map[string]interface{}{
		"number-lag-port-down": *t.NumberLagPortDown,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_NumberDown) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_NumberDown"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_NumberDown) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_NumberDown) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_NumberDown.
func (*NokiaConf_Configure_Router_Igmp_Interface_Mcac_McConstraints_NumberDown) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate represents the /nokia-conf/configure/router/igmp/interface/ssm-translate YANG schema element.
type NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate struct {
	GroupRange map[NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange `path:"group-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate) IsYANGGoStruct() {}

// NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange_Key represents the key for list GroupRange of element /nokia-conf/configure/router/igmp/interface/ssm-translate.
type NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// NewGroupRange creates a new entry in the GroupRange list of the
// NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate) NewGroupRange(Start string, End string) (*NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange)
	}

	key := NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange{
		Start: &Start,
		End:   &End,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate) RenameGroupRange(oldK, newK NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange_Key) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate) GetOrCreateGroupRange(Start string, End string) *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange {

	key := NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate) GetGroupRange(Start string, End string) *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate) DeleteGroupRange(Start string, End string) {
	key := NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange struct to the
// list GroupRange of NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate) AppendGroupRange(v *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate.
func (*NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange represents the /nokia-conf/configure/router/igmp/interface/ssm-translate/group-range YANG schema element.
type NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange struct {
	ApplyGroups        []string                                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	End                *string                                                                              `path:"end" module:"nokia-conf"`
	Source             map[string]*NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange_Source `path:"source" module:"nokia-conf"`
	Start              *string                                                                              `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange) IsYANGGoStruct() {}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange) NewSource(SourceAddress string) (*NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange) GetSource(SourceAddress string) *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange_Source struct to the
// list Source of NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange) AppendSource(v *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange.
func (*NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange_Source represents the /nokia-conf/configure/router/igmp/interface/ssm-translate/group-range/source YANG schema element.
type NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange_Source) IsYANGGoStruct() {}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange_Source.
func (*NokiaConf_Configure_Router_Igmp_Interface_SsmTranslate_GroupRange_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Igmp_Interface_Static represents the /nokia-conf/configure/router/igmp/interface/static YANG schema element.
type NokiaConf_Configure_Router_Igmp_Interface_Static struct {
	Group      map[string]*NokiaConf_Configure_Router_Igmp_Interface_Static_Group                                                               `path:"group" module:"nokia-conf"`
	GroupRange map[NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange_Key]*NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange `path:"group-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Igmp_Interface_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Igmp_Interface_Static) IsYANGGoStruct() {}

// NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange_Key represents the key for list GroupRange of element /nokia-conf/configure/router/igmp/interface/static.
type NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
	Step  string `path:"step"`
}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Router_Igmp_Interface_Static struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static) NewGroup(GroupAddress string) (*NokiaConf_Configure_Router_Igmp_Interface_Static_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Router_Igmp_Interface_Static_Group)
	}

	key := GroupAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Router_Igmp_Interface_Static_Group{
		GroupAddress: &GroupAddress,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Router_Igmp_Interface_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupAddress = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp_Interface_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static) GetOrCreateGroup(GroupAddress string) *NokiaConf_Configure_Router_Igmp_Interface_Static_Group {

	key := GroupAddress

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Router_Igmp_Interface_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static) GetGroup(GroupAddress string) *NokiaConf_Configure_Router_Igmp_Interface_Static_Group {

	if t == nil {
		return nil
	}

	key := GroupAddress

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp_Interface_Static. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static) DeleteGroup(GroupAddress string) {
	key := GroupAddress

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Router_Igmp_Interface_Static_Group struct to the
// list Group of NokiaConf_Configure_Router_Igmp_Interface_Static. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Igmp_Interface_Static_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static) AppendGroup(v *NokiaConf_Configure_Router_Igmp_Interface_Static_Group) error {
	if v.GroupAddress == nil {
		return fmt.Errorf("invalid nil key received for GroupAddress")
	}

	key := *v.GroupAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Router_Igmp_Interface_Static_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// NewGroupRange creates a new entry in the GroupRange list of the
// NokiaConf_Configure_Router_Igmp_Interface_Static struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static) NewGroupRange(Start string, End string, Step string) (*NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange_Key]*NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange)
	}

	key := NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange_Key{
		Start: Start,
		End:   End,
		Step:  Step,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange{
		Start: &Start,
		End:   &End,
		Step:  &Step,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the NokiaConf_Configure_Router_Igmp_Interface_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static) RenameGroupRange(oldK, newK NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange_Key) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End
	e.Step = &newK.Step

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp_Interface_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static) GetOrCreateGroupRange(Start string, End string, Step string) *NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange {

	key := NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange_Key{
		Start: Start,
		End:   End,
		Step:  Step,
	}

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Start, End, Step)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of NokiaConf_Configure_Router_Igmp_Interface_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static) GetGroupRange(Start string, End string, Step string) *NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange_Key{
		Start: Start,
		End:   End,
		Step:  Step,
	}

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp_Interface_Static. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static) DeleteGroupRange(Start string, End string, Step string) {
	key := NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange_Key{
		Start: Start,
		End:   End,
		Step:  Step,
	}

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange struct to the
// list GroupRange of NokiaConf_Configure_Router_Igmp_Interface_Static. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static) AppendGroupRange(v *NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	if v.Step == nil {
		return fmt.Errorf("invalid nil key for Step")
	}

	key := NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange_Key{
		Start: *v.Start,
		End:   *v.End,
		Step:  *v.Step,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange_Key]*NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Igmp_Interface_Static
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Igmp_Interface_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Igmp_Interface_Static.
func (*NokiaConf_Configure_Router_Igmp_Interface_Static) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Igmp_Interface_Static_Group represents the /nokia-conf/configure/router/igmp/interface/static/group YANG schema element.
type NokiaConf_Configure_Router_Igmp_Interface_Static_Group struct {
	ApplyGroups        []string                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupAddress       *string                                                                   `path:"group-address" module:"nokia-conf"`
	Source             map[string]*NokiaConf_Configure_Router_Igmp_Interface_Static_Group_Source `path:"source" module:"nokia-conf"`
	Starg              YANGEmpty                                                                 `path:"starg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Igmp_Interface_Static_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Igmp_Interface_Static_Group) IsYANGGoStruct() {}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Router_Igmp_Interface_Static_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_Group) NewSource(SourceAddress string) (*NokiaConf_Configure_Router_Igmp_Interface_Static_Group_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Router_Igmp_Interface_Static_Group_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Router_Igmp_Interface_Static_Group_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Router_Igmp_Interface_Static_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_Group) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp_Interface_Static_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_Group) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Router_Igmp_Interface_Static_Group_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Router_Igmp_Interface_Static_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_Group) GetSource(SourceAddress string) *NokiaConf_Configure_Router_Igmp_Interface_Static_Group_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp_Interface_Static_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_Group) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Router_Igmp_Interface_Static_Group_Source struct to the
// list Source of NokiaConf_Configure_Router_Igmp_Interface_Static_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Igmp_Interface_Static_Group_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_Group) AppendSource(v *NokiaConf_Configure_Router_Igmp_Interface_Static_Group_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Router_Igmp_Interface_Static_Group_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Igmp_Interface_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_Group) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Igmp_Interface_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_Group) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the NokiaConf_Configure_Router_Igmp_Interface_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_Group) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetStarg retrieves the value of the leaf Starg from the NokiaConf_Configure_Router_Igmp_Interface_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_Group) GetStarg() YANGEmpty {
	if t == nil || t.Starg == false {
		return false
	}
	return t.Starg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Igmp_Interface_Static_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Igmp_Interface_Static_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupAddress == nil {
		return nil, fmt.Errorf("nil value for key GroupAddress")
	}

	return map[string]interface{}{
		"group-address": *t.GroupAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Igmp_Interface_Static_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Igmp_Interface_Static_Group.
func (*NokiaConf_Configure_Router_Igmp_Interface_Static_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange represents the /nokia-conf/configure/router/igmp/interface/static/group-range YANG schema element.
type NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange struct {
	ApplyGroups        []string                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	End                *string                                                                        `path:"end" module:"nokia-conf"`
	Source             map[string]*NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange_Source `path:"source" module:"nokia-conf"`
	Starg              YANGEmpty                                                                      `path:"starg" module:"nokia-conf"`
	Start              *string                                                                        `path:"start" module:"nokia-conf"`
	Step               *string                                                                        `path:"step" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange) IsYANGGoStruct() {}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange) NewSource(SourceAddress string) (*NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange) GetSource(SourceAddress string) *NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange_Source struct to the
// list Source of NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange) AppendSource(v *NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStarg retrieves the value of the leaf Starg from the NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange) GetStarg() YANGEmpty {
	if t == nil || t.Starg == false {
		return false
	}
	return t.Starg
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// GetStep retrieves the value of the leaf Step from the NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Step is set, it can
// safely use t.GetStep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Step == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange) GetStep() string {
	if t == nil || t.Step == nil {
		return ""
	}
	return *t.Step
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	if t.Step == nil {
		return nil, fmt.Errorf("nil value for key Step")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
		"step":  *t.Step,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange.
func (*NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange_Source represents the /nokia-conf/configure/router/igmp/interface/static/group-range/source YANG schema element.
type NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange_Source) IsYANGGoStruct() {}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange_Source.
func (*NokiaConf_Configure_Router_Igmp_Interface_Static_GroupRange_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Igmp_Interface_Static_Group_Source represents the /nokia-conf/configure/router/igmp/interface/static/group/source YANG schema element.
type NokiaConf_Configure_Router_Igmp_Interface_Static_Group_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Igmp_Interface_Static_Group_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Igmp_Interface_Static_Group_Source) IsYANGGoStruct() {}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Router_Igmp_Interface_Static_Group_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_Group_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Igmp_Interface_Static_Group_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_Group_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Igmp_Interface_Static_Group_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_Group_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_Group_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Igmp_Interface_Static_Group_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_Group_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Igmp_Interface_Static_Group_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Igmp_Interface_Static_Group_Source.
func (*NokiaConf_Configure_Router_Igmp_Interface_Static_Group_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Igmp_SsmTranslate represents the /nokia-conf/configure/router/igmp/ssm-translate YANG schema element.
type NokiaConf_Configure_Router_Igmp_SsmTranslate struct {
	GroupRange map[NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange `path:"group-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Igmp_SsmTranslate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Igmp_SsmTranslate) IsYANGGoStruct() {}

// NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange_Key represents the key for list GroupRange of element /nokia-conf/configure/router/igmp/ssm-translate.
type NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// NewGroupRange creates a new entry in the GroupRange list of the
// NokiaConf_Configure_Router_Igmp_SsmTranslate struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Igmp_SsmTranslate) NewGroupRange(Start string, End string) (*NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange)
	}

	key := NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange{
		Start: &Start,
		End:   &End,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the NokiaConf_Configure_Router_Igmp_SsmTranslate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Igmp_SsmTranslate) RenameGroupRange(oldK, newK NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange_Key) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp_SsmTranslate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Igmp_SsmTranslate) GetOrCreateGroupRange(Start string, End string) *NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange {

	key := NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of NokiaConf_Configure_Router_Igmp_SsmTranslate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Igmp_SsmTranslate) GetGroupRange(Start string, End string) *NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp_SsmTranslate. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Igmp_SsmTranslate) DeleteGroupRange(Start string, End string) {
	key := NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange struct to the
// list GroupRange of NokiaConf_Configure_Router_Igmp_SsmTranslate. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Igmp_SsmTranslate) AppendGroupRange(v *NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Igmp_SsmTranslate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Igmp_SsmTranslate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_SsmTranslate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Igmp_SsmTranslate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_SsmTranslate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Igmp_SsmTranslate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Igmp_SsmTranslate.
func (*NokiaConf_Configure_Router_Igmp_SsmTranslate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange represents the /nokia-conf/configure/router/igmp/ssm-translate/group-range YANG schema element.
type NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange struct {
	ApplyGroups        []string                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	End                *string                                                                    `path:"end" module:"nokia-conf"`
	Source             map[string]*NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange_Source `path:"source" module:"nokia-conf"`
	Start              *string                                                                    `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange) IsYANGGoStruct() {}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange) NewSource(SourceAddress string) (*NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange) GetSource(SourceAddress string) *NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange_Source struct to the
// list Source of NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange) AppendSource(v *NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange.
func (*NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange_Source represents the /nokia-conf/configure/router/igmp/ssm-translate/group-range/source YANG schema element.
type NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange_Source) IsYANGGoStruct() {}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange_Source.
func (*NokiaConf_Configure_Router_Igmp_SsmTranslate_GroupRange_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Igmp_TunnelInterface represents the /nokia-conf/configure/router/igmp/tunnel-interface YANG schema element.
type NokiaConf_Configure_Router_Igmp_TunnelInterface struct {
	LdpP2MpRoot  map[NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Key]*NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot `path:"ldp-p2mp-root" module:"nokia-conf"`
	RsvpP2MpRoot map[string]*NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot                                                         `path:"rsvp-p2mp-root" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Igmp_TunnelInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Igmp_TunnelInterface) IsYANGGoStruct() {}

// NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Key represents the key for list LdpP2MpRoot of element /nokia-conf/configure/router/igmp/tunnel-interface.
type NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Key struct {
	P2MpId        uint32 `path:"p2mp-id"`
	SenderAddress string `path:"sender-address"`
}

// NewLdpP2MpRoot creates a new entry in the LdpP2MpRoot list of the
// NokiaConf_Configure_Router_Igmp_TunnelInterface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface) NewLdpP2MpRoot(P2MpId uint32, SenderAddress string) (*NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LdpP2MpRoot == nil {
		t.LdpP2MpRoot = make(map[NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Key]*NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot)
	}

	key := NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Key{
		P2MpId:        P2MpId,
		SenderAddress: SenderAddress,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LdpP2MpRoot[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LdpP2MpRoot", key)
	}

	t.LdpP2MpRoot[key] = &NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot{
		P2MpId:        &P2MpId,
		SenderAddress: &SenderAddress,
	}

	return t.LdpP2MpRoot[key], nil
}

// RenameLdpP2MpRoot renames an entry in the list LdpP2MpRoot within
// the NokiaConf_Configure_Router_Igmp_TunnelInterface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface) RenameLdpP2MpRoot(oldK, newK NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Key) error {
	if _, ok := t.LdpP2MpRoot[newK]; ok {
		return fmt.Errorf("key %v already exists in LdpP2MpRoot", newK)
	}

	e, ok := t.LdpP2MpRoot[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LdpP2MpRoot", oldK)
	}
	e.P2MpId = &newK.P2MpId
	e.SenderAddress = &newK.SenderAddress

	t.LdpP2MpRoot[newK] = e
	delete(t.LdpP2MpRoot, oldK)
	return nil
}

// GetOrCreateLdpP2MpRoot retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp_TunnelInterface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface) GetOrCreateLdpP2MpRoot(P2MpId uint32, SenderAddress string) *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot {

	key := NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Key{
		P2MpId:        P2MpId,
		SenderAddress: SenderAddress,
	}

	if v, ok := t.LdpP2MpRoot[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLdpP2MpRoot(P2MpId, SenderAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLdpP2MpRoot got unexpected error: %v", err))
	}
	return v
}

// GetLdpP2MpRoot retrieves the value with the specified key from
// the LdpP2MpRoot map field of NokiaConf_Configure_Router_Igmp_TunnelInterface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface) GetLdpP2MpRoot(P2MpId uint32, SenderAddress string) *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Key{
		P2MpId:        P2MpId,
		SenderAddress: SenderAddress,
	}

	if lm, ok := t.LdpP2MpRoot[key]; ok {
		return lm
	}
	return nil
}

// DeleteLdpP2MpRoot deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp_TunnelInterface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface) DeleteLdpP2MpRoot(P2MpId uint32, SenderAddress string) {
	key := NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Key{
		P2MpId:        P2MpId,
		SenderAddress: SenderAddress,
	}

	delete(t.LdpP2MpRoot, key)
}

// AppendLdpP2MpRoot appends the supplied NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot struct to the
// list LdpP2MpRoot of NokiaConf_Configure_Router_Igmp_TunnelInterface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface) AppendLdpP2MpRoot(v *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot) error {
	if v.P2MpId == nil {
		return fmt.Errorf("invalid nil key for P2MpId")
	}

	if v.SenderAddress == nil {
		return fmt.Errorf("invalid nil key for SenderAddress")
	}

	key := NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Key{
		P2MpId:        *v.P2MpId,
		SenderAddress: *v.SenderAddress,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LdpP2MpRoot == nil {
		t.LdpP2MpRoot = make(map[NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Key]*NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot)
	}

	if _, ok := t.LdpP2MpRoot[key]; ok {
		return fmt.Errorf("duplicate key for list LdpP2MpRoot %v", key)
	}

	t.LdpP2MpRoot[key] = v
	return nil
}

// NewRsvpP2MpRoot creates a new entry in the RsvpP2MpRoot list of the
// NokiaConf_Configure_Router_Igmp_TunnelInterface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface) NewRsvpP2MpRoot(LspName string) (*NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RsvpP2MpRoot == nil {
		t.RsvpP2MpRoot = make(map[string]*NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot)
	}

	key := LspName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RsvpP2MpRoot[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RsvpP2MpRoot", key)
	}

	t.RsvpP2MpRoot[key] = &NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot{
		LspName: &LspName,
	}

	return t.RsvpP2MpRoot[key], nil
}

// RenameRsvpP2MpRoot renames an entry in the list RsvpP2MpRoot within
// the NokiaConf_Configure_Router_Igmp_TunnelInterface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface) RenameRsvpP2MpRoot(oldK, newK string) error {
	if _, ok := t.RsvpP2MpRoot[newK]; ok {
		return fmt.Errorf("key %v already exists in RsvpP2MpRoot", newK)
	}

	e, ok := t.RsvpP2MpRoot[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RsvpP2MpRoot", oldK)
	}
	e.LspName = &newK

	t.RsvpP2MpRoot[newK] = e
	delete(t.RsvpP2MpRoot, oldK)
	return nil
}

// GetOrCreateRsvpP2MpRoot retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp_TunnelInterface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface) GetOrCreateRsvpP2MpRoot(LspName string) *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot {

	key := LspName

	if v, ok := t.RsvpP2MpRoot[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRsvpP2MpRoot(LspName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRsvpP2MpRoot got unexpected error: %v", err))
	}
	return v
}

// GetRsvpP2MpRoot retrieves the value with the specified key from
// the RsvpP2MpRoot map field of NokiaConf_Configure_Router_Igmp_TunnelInterface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface) GetRsvpP2MpRoot(LspName string) *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot {

	if t == nil {
		return nil
	}

	key := LspName

	if lm, ok := t.RsvpP2MpRoot[key]; ok {
		return lm
	}
	return nil
}

// DeleteRsvpP2MpRoot deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp_TunnelInterface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface) DeleteRsvpP2MpRoot(LspName string) {
	key := LspName

	delete(t.RsvpP2MpRoot, key)
}

// AppendRsvpP2MpRoot appends the supplied NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot struct to the
// list RsvpP2MpRoot of NokiaConf_Configure_Router_Igmp_TunnelInterface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface) AppendRsvpP2MpRoot(v *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot) error {
	if v.LspName == nil {
		return fmt.Errorf("invalid nil key received for LspName")
	}

	key := *v.LspName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RsvpP2MpRoot == nil {
		t.RsvpP2MpRoot = make(map[string]*NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot)
	}

	if _, ok := t.RsvpP2MpRoot[key]; ok {
		return fmt.Errorf("duplicate key for list RsvpP2MpRoot %v", key)
	}

	t.RsvpP2MpRoot[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Igmp_TunnelInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.LdpP2MpRoot {
		e.PopulateDefaults()
	}
	for _, e := range t.RsvpP2MpRoot {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Igmp_TunnelInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Igmp_TunnelInterface.
func (*NokiaConf_Configure_Router_Igmp_TunnelInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot represents the /nokia-conf/configure/router/igmp/tunnel-interface/ldp-p2mp-root YANG schema element.
type NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot struct {
	AdminState         E_NokiaTypesSros_AdminState                                         `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	P2MpId             *uint32                                                             `path:"p2mp-id" module:"nokia-conf"`
	SenderAddress      *string                                                             `path:"sender-address" module:"nokia-conf"`
	Static             *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static `path:"static" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot) IsYANGGoStruct() {}

// GetOrCreateStatic retrieves the value of the Static field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot) GetOrCreateStatic() *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static {
	if t.Static != nil {
		return t.Static
	}
	t.Static = &NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static{}
	return t.Static
}

// GetStatic returns the value of the Static struct pointer
// from NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot. If the receiver or the field Static is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot) GetStatic() *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static {
	if t != nil && t.Static != nil {
		return t.Static
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetP2MpId retrieves the value of the leaf P2MpId from the NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if P2MpId is set, it can
// safely use t.GetP2MpId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.P2MpId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot) GetP2MpId() uint32 {
	if t == nil || t.P2MpId == nil {
		return 0
	}
	return *t.P2MpId
}

// GetSenderAddress retrieves the value of the leaf SenderAddress from the NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SenderAddress is set, it can
// safely use t.GetSenderAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SenderAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot) GetSenderAddress() string {
	if t == nil || t.SenderAddress == nil {
		return ""
	}
	return *t.SenderAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	t.Static.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot) ΛListKeyMap() (map[string]interface{}, error) {
	if t.P2MpId == nil {
		return nil, fmt.Errorf("nil value for key P2MpId")
	}

	if t.SenderAddress == nil {
		return nil, fmt.Errorf("nil value for key SenderAddress")
	}

	return map[string]interface{}{
		"p2mp-id":        *t.P2MpId,
		"sender-address": *t.SenderAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot.
func (*NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static represents the /nokia-conf/configure/router/igmp/tunnel-interface/ldp-p2mp-root/static YANG schema element.
type NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static struct {
	Group map[string]*NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group `path:"group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static) NewGroup(GroupAddress string) (*NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group)
	}

	key := GroupAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group{
		GroupAddress: &GroupAddress,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupAddress = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static) GetOrCreateGroup(GroupAddress string) *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group {

	key := GroupAddress

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static) GetGroup(GroupAddress string) *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group {

	if t == nil {
		return nil
	}

	key := GroupAddress

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static) DeleteGroup(GroupAddress string) {
	key := GroupAddress

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group struct to the
// list Group of NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static) AppendGroup(v *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group) error {
	if v.GroupAddress == nil {
		return fmt.Errorf("invalid nil key received for GroupAddress")
	}

	key := *v.GroupAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static.
func (*NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group represents the /nokia-conf/configure/router/igmp/tunnel-interface/ldp-p2mp-root/static/group YANG schema element.
type NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group struct {
	ApplyGroups        []string                                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupAddress       *string                                                                                     `path:"group-address" module:"nokia-conf"`
	Source             map[string]*NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source `path:"source" module:"nokia-conf"`
	Starg              YANGEmpty                                                                                   `path:"starg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group) IsYANGGoStruct() {}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group) NewSource(SourceAddress string) (*NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group) GetSource(SourceAddress string) *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source struct to the
// list Source of NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group) AppendSource(v *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetStarg retrieves the value of the leaf Starg from the NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group) GetStarg() YANGEmpty {
	if t == nil || t.Starg == false {
		return false
	}
	return t.Starg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupAddress == nil {
		return nil, fmt.Errorf("nil value for key GroupAddress")
	}

	return map[string]interface{}{
		"group-address": *t.GroupAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group.
func (*NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source represents the /nokia-conf/configure/router/igmp/tunnel-interface/ldp-p2mp-root/static/group/source YANG schema element.
type NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source) IsYANGGoStruct() {
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source.
func (*NokiaConf_Configure_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot represents the /nokia-conf/configure/router/igmp/tunnel-interface/rsvp-p2mp-root YANG schema element.
type NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot struct {
	AdminState         E_NokiaTypesSros_AdminState                                          `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	LspName            *string                                                              `path:"lsp-name" module:"nokia-conf"`
	Static             *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static `path:"static" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot) IsYANGGoStruct() {}

// GetOrCreateStatic retrieves the value of the Static field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot) GetOrCreateStatic() *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static {
	if t.Static != nil {
		return t.Static
	}
	t.Static = &NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static{}
	return t.Static
}

// GetStatic returns the value of the Static struct pointer
// from NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot. If the receiver or the field Static is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot) GetStatic() *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static {
	if t != nil && t.Static != nil {
		return t.Static
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLspName retrieves the value of the leaf LspName from the NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspName is set, it can
// safely use t.GetLspName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot) GetLspName() string {
	if t == nil || t.LspName == nil {
		return ""
	}
	return *t.LspName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	t.Static.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LspName == nil {
		return nil, fmt.Errorf("nil value for key LspName")
	}

	return map[string]interface{}{
		"lsp-name": *t.LspName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot.
func (*NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static represents the /nokia-conf/configure/router/igmp/tunnel-interface/rsvp-p2mp-root/static YANG schema element.
type NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static struct {
	Group map[string]*NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group `path:"group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static) NewGroup(GroupAddress string) (*NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group)
	}

	key := GroupAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group{
		GroupAddress: &GroupAddress,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupAddress = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static) GetOrCreateGroup(GroupAddress string) *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group {

	key := GroupAddress

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static) GetGroup(GroupAddress string) *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group {

	if t == nil {
		return nil
	}

	key := GroupAddress

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static) DeleteGroup(GroupAddress string) {
	key := GroupAddress

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group struct to the
// list Group of NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static) AppendGroup(v *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group) error {
	if v.GroupAddress == nil {
		return fmt.Errorf("invalid nil key received for GroupAddress")
	}

	key := *v.GroupAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static.
func (*NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group represents the /nokia-conf/configure/router/igmp/tunnel-interface/rsvp-p2mp-root/static/group YANG schema element.
type NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group struct {
	ApplyGroups        []string                                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupAddress       *string                                                                                      `path:"group-address" module:"nokia-conf"`
	Source             map[string]*NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source `path:"source" module:"nokia-conf"`
	Starg              YANGEmpty                                                                                    `path:"starg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group) IsYANGGoStruct() {}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group) NewSource(SourceAddress string) (*NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group) GetSource(SourceAddress string) *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source struct to the
// list Source of NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group) AppendSource(v *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetStarg retrieves the value of the leaf Starg from the NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group) GetStarg() YANGEmpty {
	if t == nil || t.Starg == false {
		return false
	}
	return t.Starg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupAddress == nil {
		return nil, fmt.Errorf("nil value for key GroupAddress")
	}

	return map[string]interface{}{
		"group-address": *t.GroupAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group.
func (*NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source represents the /nokia-conf/configure/router/igmp/tunnel-interface/rsvp-p2mp-root/static/group/source YANG schema element.
type NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source) IsYANGGoStruct() {
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source.
func (*NokiaConf_Configure_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface represents the /nokia-conf/configure/router/interface YANG schema element.
type NokiaConf_Configure_Router_Interface struct {
	AccountingPolicy   *uint32                                                `path:"accounting-policy" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState                            `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	Autoconfigure      *NokiaConf_Configure_Router_Interface_Autoconfigure    `path:"autoconfigure" module:"nokia-conf"`
	CflowdParameters   *NokiaConf_Configure_Router_Interface_CflowdParameters `path:"cflowd-parameters" module:"nokia-conf"`
	CollectStats       *bool                                                  `path:"collect-stats" module:"nokia-conf"`
	CpuProtection      *uint32                                                `path:"cpu-protection" module:"nokia-conf"`
	Description        *string                                                `path:"description" module:"nokia-conf"`
	DistCpuProtection  *string                                                `path:"dist-cpu-protection" module:"nokia-conf"`
	Egress             *NokiaConf_Configure_Router_Interface_Egress           `path:"egress" module:"nokia-conf"`
	EthCfm             *NokiaConf_Configure_Router_Interface_EthCfm           `path:"eth-cfm" module:"nokia-conf"`
	Flavor             E_NokiaConf_Configure_Router_Interface_Flavor          `path:"flavor" module:"nokia-conf"`
	GreTermination     *bool                                                  `path:"gre-termination" module:"nokia-conf"`
	HoldTime           *NokiaConf_Configure_Router_Interface_HoldTime         `path:"hold-time" module:"nokia-conf"`
	IfAttribute        *NokiaConf_Configure_Router_Interface_IfAttribute      `path:"if-attribute" module:"nokia-conf"`
	Ingress            *NokiaConf_Configure_Router_Interface_Ingress          `path:"ingress" module:"nokia-conf"`
	IngressStats       *bool                                                  `path:"ingress-stats" module:"nokia-conf"`
	InterfaceName      *string                                                `path:"interface-name" module:"nokia-conf"`
	IpMtu              *uint32                                                `path:"ip-mtu" module:"nokia-conf"`
	IpTunnel           *NokiaConf_Configure_Router_Interface_IpTunnel         `path:"ip-tunnel" module:"nokia-conf"`
	Ipv4               *NokiaConf_Configure_Router_Interface_Ipv4             `path:"ipv4" module:"nokia-conf"`
	Ipv6               *NokiaConf_Configure_Router_Interface_Ipv6             `path:"ipv6" module:"nokia-conf" yangPresence:"true"`
	Lag                *NokiaConf_Configure_Router_Interface_Lag              `path:"lag" module:"nokia-conf"`
	LdpSyncTimer       *NokiaConf_Configure_Router_Interface_LdpSyncTimer     `path:"ldp-sync-timer" module:"nokia-conf"`
	LoadBalancing      *NokiaConf_Configure_Router_Interface_LoadBalancing    `path:"load-balancing" module:"nokia-conf"`
	Loopback           YANGEmpty                                              `path:"loopback" module:"nokia-conf"`
	Mac                *string                                                `path:"mac" module:"nokia-conf"`
	MacAccounting      *bool                                                  `path:"mac-accounting" module:"nokia-conf"`
	NetworkDomains     *NokiaConf_Configure_Router_Interface_NetworkDomains   `path:"network-domains" module:"nokia-conf"`
	Port               NokiaConf_Configure_Router_Interface_Port_Union        `path:"port" module:"nokia-conf"`
	PtpHwAssist        *NokiaConf_Configure_Router_Interface_PtpHwAssist      `path:"ptp-hw-assist" module:"nokia-conf"`
	Qos                *NokiaConf_Configure_Router_Interface_Qos              `path:"qos" module:"nokia-conf"`
	StripLabel         *bool                                                  `path:"strip-label" module:"nokia-conf"`
	TosMarkingState    E_NokiaTypesRouter_TosMarkingState                     `path:"tos-marking-state" module:"nokia-conf"`
	Untrusted          *NokiaConf_Configure_Router_Interface_Untrusted        `path:"untrusted" module:"nokia-conf" yangPresence:"true"`
	UrpfSelectedVprns  *bool                                                  `path:"urpf-selected-vprns" module:"nokia-conf"`
	VasIfType          E_NokiaTypesRouter_VasIfType                           `path:"vas-if-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface) IsYANGGoStruct() {}

// GetOrCreateAutoconfigure retrieves the value of the Autoconfigure field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface) GetOrCreateAutoconfigure() *NokiaConf_Configure_Router_Interface_Autoconfigure {
	if t.Autoconfigure != nil {
		return t.Autoconfigure
	}
	t.Autoconfigure = &NokiaConf_Configure_Router_Interface_Autoconfigure{}
	return t.Autoconfigure
}

// GetOrCreateCflowdParameters retrieves the value of the CflowdParameters field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface) GetOrCreateCflowdParameters() *NokiaConf_Configure_Router_Interface_CflowdParameters {
	if t.CflowdParameters != nil {
		return t.CflowdParameters
	}
	t.CflowdParameters = &NokiaConf_Configure_Router_Interface_CflowdParameters{}
	return t.CflowdParameters
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface) GetOrCreateEgress() *NokiaConf_Configure_Router_Interface_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Router_Interface_Egress{}
	return t.Egress
}

// GetOrCreateEthCfm retrieves the value of the EthCfm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface) GetOrCreateEthCfm() *NokiaConf_Configure_Router_Interface_EthCfm {
	if t.EthCfm != nil {
		return t.EthCfm
	}
	t.EthCfm = &NokiaConf_Configure_Router_Interface_EthCfm{}
	return t.EthCfm
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface) GetOrCreateHoldTime() *NokiaConf_Configure_Router_Interface_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &NokiaConf_Configure_Router_Interface_HoldTime{}
	return t.HoldTime
}

// GetOrCreateIfAttribute retrieves the value of the IfAttribute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface) GetOrCreateIfAttribute() *NokiaConf_Configure_Router_Interface_IfAttribute {
	if t.IfAttribute != nil {
		return t.IfAttribute
	}
	t.IfAttribute = &NokiaConf_Configure_Router_Interface_IfAttribute{}
	return t.IfAttribute
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface) GetOrCreateIngress() *NokiaConf_Configure_Router_Interface_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Router_Interface_Ingress{}
	return t.Ingress
}

// GetOrCreateIpTunnel retrieves the value of the IpTunnel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface) GetOrCreateIpTunnel() *NokiaConf_Configure_Router_Interface_IpTunnel {
	if t.IpTunnel != nil {
		return t.IpTunnel
	}
	t.IpTunnel = &NokiaConf_Configure_Router_Interface_IpTunnel{}
	return t.IpTunnel
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface) GetOrCreateIpv4() *NokiaConf_Configure_Router_Interface_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Router_Interface_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface) GetOrCreateIpv6() *NokiaConf_Configure_Router_Interface_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Router_Interface_Ipv6{}
	return t.Ipv6
}

// GetOrCreateLag retrieves the value of the Lag field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface) GetOrCreateLag() *NokiaConf_Configure_Router_Interface_Lag {
	if t.Lag != nil {
		return t.Lag
	}
	t.Lag = &NokiaConf_Configure_Router_Interface_Lag{}
	return t.Lag
}

// GetOrCreateLdpSyncTimer retrieves the value of the LdpSyncTimer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface) GetOrCreateLdpSyncTimer() *NokiaConf_Configure_Router_Interface_LdpSyncTimer {
	if t.LdpSyncTimer != nil {
		return t.LdpSyncTimer
	}
	t.LdpSyncTimer = &NokiaConf_Configure_Router_Interface_LdpSyncTimer{}
	return t.LdpSyncTimer
}

// GetOrCreateLoadBalancing retrieves the value of the LoadBalancing field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface) GetOrCreateLoadBalancing() *NokiaConf_Configure_Router_Interface_LoadBalancing {
	if t.LoadBalancing != nil {
		return t.LoadBalancing
	}
	t.LoadBalancing = &NokiaConf_Configure_Router_Interface_LoadBalancing{}
	return t.LoadBalancing
}

// GetOrCreateNetworkDomains retrieves the value of the NetworkDomains field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface) GetOrCreateNetworkDomains() *NokiaConf_Configure_Router_Interface_NetworkDomains {
	if t.NetworkDomains != nil {
		return t.NetworkDomains
	}
	t.NetworkDomains = &NokiaConf_Configure_Router_Interface_NetworkDomains{}
	return t.NetworkDomains
}

// GetOrCreatePtpHwAssist retrieves the value of the PtpHwAssist field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface) GetOrCreatePtpHwAssist() *NokiaConf_Configure_Router_Interface_PtpHwAssist {
	if t.PtpHwAssist != nil {
		return t.PtpHwAssist
	}
	t.PtpHwAssist = &NokiaConf_Configure_Router_Interface_PtpHwAssist{}
	return t.PtpHwAssist
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface) GetOrCreateQos() *NokiaConf_Configure_Router_Interface_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Router_Interface_Qos{}
	return t.Qos
}

// GetOrCreateUntrusted retrieves the value of the Untrusted field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface) GetOrCreateUntrusted() *NokiaConf_Configure_Router_Interface_Untrusted {
	if t.Untrusted != nil {
		return t.Untrusted
	}
	t.Untrusted = &NokiaConf_Configure_Router_Interface_Untrusted{}
	return t.Untrusted
}

// GetAutoconfigure returns the value of the Autoconfigure struct pointer
// from NokiaConf_Configure_Router_Interface. If the receiver or the field Autoconfigure is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface) GetAutoconfigure() *NokiaConf_Configure_Router_Interface_Autoconfigure {
	if t != nil && t.Autoconfigure != nil {
		return t.Autoconfigure
	}
	return nil
}

// GetCflowdParameters returns the value of the CflowdParameters struct pointer
// from NokiaConf_Configure_Router_Interface. If the receiver or the field CflowdParameters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface) GetCflowdParameters() *NokiaConf_Configure_Router_Interface_CflowdParameters {
	if t != nil && t.CflowdParameters != nil {
		return t.CflowdParameters
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Router_Interface. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface) GetEgress() *NokiaConf_Configure_Router_Interface_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetEthCfm returns the value of the EthCfm struct pointer
// from NokiaConf_Configure_Router_Interface. If the receiver or the field EthCfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface) GetEthCfm() *NokiaConf_Configure_Router_Interface_EthCfm {
	if t != nil && t.EthCfm != nil {
		return t.EthCfm
	}
	return nil
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from NokiaConf_Configure_Router_Interface. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface) GetHoldTime() *NokiaConf_Configure_Router_Interface_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetIfAttribute returns the value of the IfAttribute struct pointer
// from NokiaConf_Configure_Router_Interface. If the receiver or the field IfAttribute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface) GetIfAttribute() *NokiaConf_Configure_Router_Interface_IfAttribute {
	if t != nil && t.IfAttribute != nil {
		return t.IfAttribute
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Router_Interface. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface) GetIngress() *NokiaConf_Configure_Router_Interface_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetIpTunnel returns the value of the IpTunnel struct pointer
// from NokiaConf_Configure_Router_Interface. If the receiver or the field IpTunnel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface) GetIpTunnel() *NokiaConf_Configure_Router_Interface_IpTunnel {
	if t != nil && t.IpTunnel != nil {
		return t.IpTunnel
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Router_Interface. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface) GetIpv4() *NokiaConf_Configure_Router_Interface_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Router_Interface. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface) GetIpv6() *NokiaConf_Configure_Router_Interface_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetLag returns the value of the Lag struct pointer
// from NokiaConf_Configure_Router_Interface. If the receiver or the field Lag is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface) GetLag() *NokiaConf_Configure_Router_Interface_Lag {
	if t != nil && t.Lag != nil {
		return t.Lag
	}
	return nil
}

// GetLdpSyncTimer returns the value of the LdpSyncTimer struct pointer
// from NokiaConf_Configure_Router_Interface. If the receiver or the field LdpSyncTimer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface) GetLdpSyncTimer() *NokiaConf_Configure_Router_Interface_LdpSyncTimer {
	if t != nil && t.LdpSyncTimer != nil {
		return t.LdpSyncTimer
	}
	return nil
}

// GetLoadBalancing returns the value of the LoadBalancing struct pointer
// from NokiaConf_Configure_Router_Interface. If the receiver or the field LoadBalancing is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface) GetLoadBalancing() *NokiaConf_Configure_Router_Interface_LoadBalancing {
	if t != nil && t.LoadBalancing != nil {
		return t.LoadBalancing
	}
	return nil
}

// GetNetworkDomains returns the value of the NetworkDomains struct pointer
// from NokiaConf_Configure_Router_Interface. If the receiver or the field NetworkDomains is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface) GetNetworkDomains() *NokiaConf_Configure_Router_Interface_NetworkDomains {
	if t != nil && t.NetworkDomains != nil {
		return t.NetworkDomains
	}
	return nil
}

// GetPtpHwAssist returns the value of the PtpHwAssist struct pointer
// from NokiaConf_Configure_Router_Interface. If the receiver or the field PtpHwAssist is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface) GetPtpHwAssist() *NokiaConf_Configure_Router_Interface_PtpHwAssist {
	if t != nil && t.PtpHwAssist != nil {
		return t.PtpHwAssist
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Router_Interface. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface) GetQos() *NokiaConf_Configure_Router_Interface_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetUntrusted returns the value of the Untrusted struct pointer
// from NokiaConf_Configure_Router_Interface. If the receiver or the field Untrusted is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface) GetUntrusted() *NokiaConf_Configure_Router_Interface_Untrusted {
	if t != nil && t.Untrusted != nil {
		return t.Untrusted
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetCpuProtection retrieves the value of the leaf CpuProtection from the NokiaConf_Configure_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CpuProtection is set, it can
// safely use t.GetCpuProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CpuProtection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface) GetCpuProtection() uint32 {
	if t == nil || t.CpuProtection == nil {
		return 0
	}
	return *t.CpuProtection
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDistCpuProtection retrieves the value of the leaf DistCpuProtection from the NokiaConf_Configure_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DistCpuProtection is set, it can
// safely use t.GetDistCpuProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DistCpuProtection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface) GetDistCpuProtection() string {
	if t == nil || t.DistCpuProtection == nil {
		return ""
	}
	return *t.DistCpuProtection
}

// GetFlavor retrieves the value of the leaf Flavor from the NokiaConf_Configure_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flavor is set, it can
// safely use t.GetFlavor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flavor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface) GetFlavor() E_NokiaConf_Configure_Router_Interface_Flavor {
	if t == nil || t.Flavor == 0 {
		return NokiaConf_Configure_Router_Interface_Flavor_regular
	}
	return t.Flavor
}

// GetGreTermination retrieves the value of the leaf GreTermination from the NokiaConf_Configure_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GreTermination is set, it can
// safely use t.GetGreTermination() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GreTermination == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface) GetGreTermination() bool {
	if t == nil || t.GreTermination == nil {
		return false
	}
	return *t.GreTermination
}

// GetIngressStats retrieves the value of the leaf IngressStats from the NokiaConf_Configure_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressStats is set, it can
// safely use t.GetIngressStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface) GetIngressStats() bool {
	if t == nil || t.IngressStats == nil {
		return false
	}
	return *t.IngressStats
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetIpMtu retrieves the value of the leaf IpMtu from the NokiaConf_Configure_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpMtu is set, it can
// safely use t.GetIpMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface) GetIpMtu() uint32 {
	if t == nil || t.IpMtu == nil {
		return 0
	}
	return *t.IpMtu
}

// GetLoopback retrieves the value of the leaf Loopback from the NokiaConf_Configure_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Loopback is set, it can
// safely use t.GetLoopback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Loopback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface) GetLoopback() YANGEmpty {
	if t == nil || t.Loopback == false {
		return false
	}
	return t.Loopback
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// GetMacAccounting retrieves the value of the leaf MacAccounting from the NokiaConf_Configure_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAccounting is set, it can
// safely use t.GetMacAccounting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAccounting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface) GetMacAccounting() bool {
	if t == nil || t.MacAccounting == nil {
		return false
	}
	return *t.MacAccounting
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface) GetPort() NokiaConf_Configure_Router_Interface_Port_Union {
	if t == nil || t.Port == nil {
		return nil
	}
	return t.Port
}

// GetStripLabel retrieves the value of the leaf StripLabel from the NokiaConf_Configure_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StripLabel is set, it can
// safely use t.GetStripLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StripLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface) GetStripLabel() bool {
	if t == nil || t.StripLabel == nil {
		return false
	}
	return *t.StripLabel
}

// GetTosMarkingState retrieves the value of the leaf TosMarkingState from the NokiaConf_Configure_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TosMarkingState is set, it can
// safely use t.GetTosMarkingState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TosMarkingState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface) GetTosMarkingState() E_NokiaTypesRouter_TosMarkingState {
	if t == nil || t.TosMarkingState == 0 {
		return NokiaTypesRouter_TosMarkingState_trusted
	}
	return t.TosMarkingState
}

// GetUrpfSelectedVprns retrieves the value of the leaf UrpfSelectedVprns from the NokiaConf_Configure_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UrpfSelectedVprns is set, it can
// safely use t.GetUrpfSelectedVprns() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UrpfSelectedVprns == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface) GetUrpfSelectedVprns() bool {
	if t == nil || t.UrpfSelectedVprns == nil {
		return false
	}
	return *t.UrpfSelectedVprns
}

// GetVasIfType retrieves the value of the leaf VasIfType from the NokiaConf_Configure_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VasIfType is set, it can
// safely use t.GetVasIfType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VasIfType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface) GetVasIfType() E_NokiaTypesRouter_VasIfType {
	if t == nil || t.VasIfType == 0 {
		return 0
	}
	return t.VasIfType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.Flavor == 0 {
		t.Flavor = NokiaConf_Configure_Router_Interface_Flavor_regular
	}
	if t.GreTermination == nil {
		var v bool = false
		t.GreTermination = &v
	}
	if t.IngressStats == nil {
		var v bool = false
		t.IngressStats = &v
	}
	if t.MacAccounting == nil {
		var v bool = false
		t.MacAccounting = &v
	}
	if t.StripLabel == nil {
		var v bool = false
		t.StripLabel = &v
	}
	if t.TosMarkingState == 0 {
		t.TosMarkingState = NokiaTypesRouter_TosMarkingState_trusted
	}
	if t.UrpfSelectedVprns == nil {
		var v bool = false
		t.UrpfSelectedVprns = &v
	}
	t.Autoconfigure.PopulateDefaults()
	t.CflowdParameters.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.EthCfm.PopulateDefaults()
	t.HoldTime.PopulateDefaults()
	t.IfAttribute.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.IpTunnel.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	t.Lag.PopulateDefaults()
	t.LdpSyncTimer.PopulateDefaults()
	t.LoadBalancing.PopulateDefaults()
	t.NetworkDomains.PopulateDefaults()
	t.PtpHwAssist.PopulateDefaults()
	t.Qos.PopulateDefaults()
	t.Untrusted.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface.
func (*NokiaConf_Configure_Router_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_Autoconfigure represents the /nokia-conf/configure/router/interface/autoconfigure YANG schema element.
type NokiaConf_Configure_Router_Interface_Autoconfigure struct {
	Ipv4 *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4 `path:"ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_Autoconfigure implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_Autoconfigure) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure) GetOrCreateIpv4() *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4{}
	return t.Ipv4
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Router_Interface_Autoconfigure. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure) GetIpv4() *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_Autoconfigure
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_Autoconfigure"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_Autoconfigure.
func (*NokiaConf_Configure_Router_Interface_Autoconfigure) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4 represents the /nokia-conf/configure/router/interface/autoconfigure/ipv4 YANG schema element.
type NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4 struct {
	DhcpClient *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient `path:"dhcp-client" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4) IsYANGGoStruct() {}

// GetOrCreateDhcpClient retrieves the value of the DhcpClient field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4) GetOrCreateDhcpClient() *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient {
	if t.DhcpClient != nil {
		return t.DhcpClient
	}
	t.DhcpClient = &NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient{}
	return t.DhcpClient
}

// GetDhcpClient returns the value of the DhcpClient struct pointer
// from NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4. If the receiver or the field DhcpClient is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4) GetDhcpClient() *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient {
	if t != nil && t.DhcpClient != nil {
		return t.DhcpClient
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DhcpClient.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4.
func (*NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient represents the /nokia-conf/configure/router/interface/autoconfigure/ipv4/dhcp-client YANG schema element.
type NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient struct {
	AdminState         E_NokiaTypesSros_AdminState                                                        `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	ClassId            *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId        `path:"class-id" module:"nokia-conf"`
	ClientId           *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId       `path:"client-id" module:"nokia-conf"`
	LeaseTime          NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_LeaseTime_Union `path:"lease-time" module:"nokia-conf"`
	RequestOptions     *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions `path:"request-options" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient) IsYANGGoStruct() {}

// GetOrCreateClassId retrieves the value of the ClassId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient) GetOrCreateClassId() *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId {
	if t.ClassId != nil {
		return t.ClassId
	}
	t.ClassId = &NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId{}
	return t.ClassId
}

// GetOrCreateClientId retrieves the value of the ClientId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient) GetOrCreateClientId() *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId {
	if t.ClientId != nil {
		return t.ClientId
	}
	t.ClientId = &NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId{}
	return t.ClientId
}

// GetOrCreateRequestOptions retrieves the value of the RequestOptions field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient) GetOrCreateRequestOptions() *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions {
	if t.RequestOptions != nil {
		return t.RequestOptions
	}
	t.RequestOptions = &NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions{}
	return t.RequestOptions
}

// GetClassId returns the value of the ClassId struct pointer
// from NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient. If the receiver or the field ClassId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient) GetClassId() *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId {
	if t != nil && t.ClassId != nil {
		return t.ClassId
	}
	return nil
}

// GetClientId returns the value of the ClientId struct pointer
// from NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient. If the receiver or the field ClientId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient) GetClientId() *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId {
	if t != nil && t.ClientId != nil {
		return t.ClientId
	}
	return nil
}

// GetRequestOptions returns the value of the RequestOptions struct pointer
// from NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient. If the receiver or the field RequestOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient) GetRequestOptions() *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions {
	if t != nil && t.RequestOptions != nil {
		return t.RequestOptions
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLeaseTime retrieves the value of the leaf LeaseTime from the NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LeaseTime is set, it can
// safely use t.GetLeaseTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LeaseTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient) GetLeaseTime() NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_LeaseTime_Union {
	if t == nil || t.LeaseTime == nil {
		return UnionUint32(86400)
	}
	return t.LeaseTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.LeaseTime == nil {
		t.LeaseTime = UnionUint32(86400)
	}
	t.ClassId.PopulateDefaults()
	t.ClientId.PopulateDefaults()
	t.RequestOptions.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient.
func (*NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId represents the /nokia-conf/configure/router/interface/autoconfigure/ipv4/dhcp-client/class-id YANG schema element.
type NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId struct {
	AsciiString *string `path:"ascii-string" module:"nokia-conf"`
	HexString   *string `path:"hex-string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId) IsYANGGoStruct() {}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId.
func (*NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId represents the /nokia-conf/configure/router/interface/autoconfigure/ipv4/dhcp-client/client-id YANG schema element.
type NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId struct {
	AsciiString *string   `path:"ascii-string" module:"nokia-conf"`
	HexString   *string   `path:"hex-string" module:"nokia-conf"`
	Interface   YANGEmpty `path:"interface" module:"nokia-conf"`
	Mac         YANGEmpty `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId) IsYANGGoStruct() {
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// GetInterface retrieves the value of the leaf Interface from the NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId) GetInterface() YANGEmpty {
	if t == nil || t.Interface == false {
		return false
	}
	return t.Interface
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId) GetMac() YANGEmpty {
	if t == nil || t.Mac == false {
		return false
	}
	return t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId.
func (*NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions represents the /nokia-conf/configure/router/interface/autoconfigure/ipv4/dhcp-client/request-options YANG schema element.
type NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions struct {
	DnsServer   *bool `path:"dns-server" module:"nokia-conf"`
	Router      *bool `path:"router" module:"nokia-conf"`
	StaticRoute *bool `path:"static-route" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions) IsYANGGoStruct() {
}

// GetDnsServer retrieves the value of the leaf DnsServer from the NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DnsServer is set, it can
// safely use t.GetDnsServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DnsServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions) GetDnsServer() bool {
	if t == nil || t.DnsServer == nil {
		return false
	}
	return *t.DnsServer
}

// GetRouter retrieves the value of the leaf Router from the NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Router is set, it can
// safely use t.GetRouter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Router == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions) GetRouter() bool {
	if t == nil || t.Router == nil {
		return false
	}
	return *t.Router
}

// GetStaticRoute retrieves the value of the leaf StaticRoute from the NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticRoute is set, it can
// safely use t.GetStaticRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticRoute == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions) GetStaticRoute() bool {
	if t == nil || t.StaticRoute == nil {
		return false
	}
	return *t.StaticRoute
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DnsServer == nil {
		var v bool = false
		t.DnsServer = &v
	}
	if t.Router == nil {
		var v bool = false
		t.Router = &v
	}
	if t.StaticRoute == nil {
		var v bool = false
		t.StaticRoute = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions.
func (*NokiaConf_Configure_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_CflowdParameters represents the /nokia-conf/configure/router/interface/cflowd-parameters YANG schema element.
type NokiaConf_Configure_Router_Interface_CflowdParameters struct {
	Sampling map[E_NokiaTypesRouter_CflowdSampling]*NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling `path:"sampling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_CflowdParameters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_CflowdParameters) IsYANGGoStruct() {}

// NewSampling creates a new entry in the Sampling list of the
// NokiaConf_Configure_Router_Interface_CflowdParameters struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Interface_CflowdParameters) NewSampling(SamplingType E_NokiaTypesRouter_CflowdSampling) (*NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sampling == nil {
		t.Sampling = make(map[E_NokiaTypesRouter_CflowdSampling]*NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling)
	}

	key := SamplingType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sampling[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sampling", key)
	}

	t.Sampling[key] = &NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling{
		SamplingType: SamplingType,
	}

	return t.Sampling[key], nil
}

// RenameSampling renames an entry in the list Sampling within
// the NokiaConf_Configure_Router_Interface_CflowdParameters struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Interface_CflowdParameters) RenameSampling(oldK, newK E_NokiaTypesRouter_CflowdSampling) error {
	if _, ok := t.Sampling[newK]; ok {
		return fmt.Errorf("key %v already exists in Sampling", newK)
	}

	e, ok := t.Sampling[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sampling", oldK)
	}
	e.SamplingType = newK

	t.Sampling[newK] = e
	delete(t.Sampling, oldK)
	return nil
}

// GetOrCreateSampling retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Interface_CflowdParameters. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Interface_CflowdParameters) GetOrCreateSampling(SamplingType E_NokiaTypesRouter_CflowdSampling) *NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling {

	key := SamplingType

	if v, ok := t.Sampling[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSampling(SamplingType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSampling got unexpected error: %v", err))
	}
	return v
}

// GetSampling retrieves the value with the specified key from
// the Sampling map field of NokiaConf_Configure_Router_Interface_CflowdParameters. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Interface_CflowdParameters) GetSampling(SamplingType E_NokiaTypesRouter_CflowdSampling) *NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling {

	if t == nil {
		return nil
	}

	key := SamplingType

	if lm, ok := t.Sampling[key]; ok {
		return lm
	}
	return nil
}

// DeleteSampling deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Interface_CflowdParameters. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Interface_CflowdParameters) DeleteSampling(SamplingType E_NokiaTypesRouter_CflowdSampling) {
	key := SamplingType

	delete(t.Sampling, key)
}

// AppendSampling appends the supplied NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling struct to the
// list Sampling of NokiaConf_Configure_Router_Interface_CflowdParameters. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Interface_CflowdParameters) AppendSampling(v *NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling) error {
	key := v.SamplingType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sampling == nil {
		t.Sampling = make(map[E_NokiaTypesRouter_CflowdSampling]*NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling)
	}

	if _, ok := t.Sampling[key]; ok {
		return fmt.Errorf("duplicate key for list Sampling %v", key)
	}

	t.Sampling[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_CflowdParameters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_CflowdParameters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Sampling {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_CflowdParameters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_CflowdParameters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_CflowdParameters) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_CflowdParameters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_CflowdParameters.
func (*NokiaConf_Configure_Router_Interface_CflowdParameters) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling represents the /nokia-conf/configure/router/interface/cflowd-parameters/sampling YANG schema element.
type NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling struct {
	ApplyGroups        []string                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Direction          E_NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling_Direction         `path:"direction" module:"nokia-conf"`
	SampleProfile      NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling_SampleProfile_Union `path:"sample-profile" module:"nokia-conf"`
	SamplingType       E_NokiaTypesRouter_CflowdSampling                                                  `path:"sampling-type" module:"nokia-conf"`
	Type               E_NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling_Type              `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling) GetDirection() E_NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling_Direction {
	if t == nil || t.Direction == 0 {
		return NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling_Direction_ingress_only
	}
	return t.Direction
}

// GetSampleProfile retrieves the value of the leaf SampleProfile from the NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SampleProfile is set, it can
// safely use t.GetSampleProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SampleProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling) GetSampleProfile() NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling_SampleProfile_Union {
	if t == nil || t.SampleProfile == nil {
		return nil
	}
	return t.SampleProfile
}

// GetSamplingType retrieves the value of the leaf SamplingType from the NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SamplingType is set, it can
// safely use t.GetSamplingType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SamplingType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling) GetSamplingType() E_NokiaTypesRouter_CflowdSampling {
	if t == nil || t.SamplingType == 0 {
		return 0
	}
	return t.SamplingType
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling) GetType() E_NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Direction == 0 {
		t.Direction = NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling_Direction_ingress_only
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"sampling-type": t.SamplingType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling.
func (*NokiaConf_Configure_Router_Interface_CflowdParameters_Sampling) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_Egress represents the /nokia-conf/configure/router/interface/egress YANG schema element.
type NokiaConf_Configure_Router_Interface_Egress struct {
	Filter *NokiaConf_Configure_Router_Interface_Egress_Filter `path:"filter" module:"nokia-conf"`
	Qos    *NokiaConf_Configure_Router_Interface_Egress_Qos    `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_Egress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_Egress) GetOrCreateFilter() *NokiaConf_Configure_Router_Interface_Egress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Router_Interface_Egress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_Egress) GetOrCreateQos() *NokiaConf_Configure_Router_Interface_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Router_Interface_Egress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Router_Interface_Egress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_Egress) GetFilter() *NokiaConf_Configure_Router_Interface_Egress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Router_Interface_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_Egress) GetQos() *NokiaConf_Configure_Router_Interface_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_Egress.
func (*NokiaConf_Configure_Router_Interface_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_Egress_Filter represents the /nokia-conf/configure/router/interface/egress/filter YANG schema element.
type NokiaConf_Configure_Router_Interface_Egress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_Egress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_Egress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Router_Interface_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Egress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Router_Interface_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Egress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_Egress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_Egress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Egress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_Egress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Egress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_Egress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_Egress_Filter.
func (*NokiaConf_Configure_Router_Interface_Egress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_Egress_Qos represents the /nokia-conf/configure/router/interface/egress/qos YANG schema element.
type NokiaConf_Configure_Router_Interface_Egress_Qos struct {
	AggRate            *NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate            `path:"agg-rate" module:"nokia-conf"`
	ApplyGroups        []string                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	EgressRemarkPolicy *NokiaConf_Configure_Router_Interface_Egress_Qos_EgressRemarkPolicy `path:"egress-remark-policy" module:"nokia-conf"`
	VlanQosPolicy      *NokiaConf_Configure_Router_Interface_Egress_Qos_VlanQosPolicy      `path:"vlan-qos-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_Egress_Qos) IsYANGGoStruct() {}

// GetOrCreateAggRate retrieves the value of the AggRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_Egress_Qos) GetOrCreateAggRate() *NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate {
	if t.AggRate != nil {
		return t.AggRate
	}
	t.AggRate = &NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate{}
	return t.AggRate
}

// GetOrCreateEgressRemarkPolicy retrieves the value of the EgressRemarkPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_Egress_Qos) GetOrCreateEgressRemarkPolicy() *NokiaConf_Configure_Router_Interface_Egress_Qos_EgressRemarkPolicy {
	if t.EgressRemarkPolicy != nil {
		return t.EgressRemarkPolicy
	}
	t.EgressRemarkPolicy = &NokiaConf_Configure_Router_Interface_Egress_Qos_EgressRemarkPolicy{}
	return t.EgressRemarkPolicy
}

// GetOrCreateVlanQosPolicy retrieves the value of the VlanQosPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_Egress_Qos) GetOrCreateVlanQosPolicy() *NokiaConf_Configure_Router_Interface_Egress_Qos_VlanQosPolicy {
	if t.VlanQosPolicy != nil {
		return t.VlanQosPolicy
	}
	t.VlanQosPolicy = &NokiaConf_Configure_Router_Interface_Egress_Qos_VlanQosPolicy{}
	return t.VlanQosPolicy
}

// GetAggRate returns the value of the AggRate struct pointer
// from NokiaConf_Configure_Router_Interface_Egress_Qos. If the receiver or the field AggRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_Egress_Qos) GetAggRate() *NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate {
	if t != nil && t.AggRate != nil {
		return t.AggRate
	}
	return nil
}

// GetEgressRemarkPolicy returns the value of the EgressRemarkPolicy struct pointer
// from NokiaConf_Configure_Router_Interface_Egress_Qos. If the receiver or the field EgressRemarkPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_Egress_Qos) GetEgressRemarkPolicy() *NokiaConf_Configure_Router_Interface_Egress_Qos_EgressRemarkPolicy {
	if t != nil && t.EgressRemarkPolicy != nil {
		return t.EgressRemarkPolicy
	}
	return nil
}

// GetVlanQosPolicy returns the value of the VlanQosPolicy struct pointer
// from NokiaConf_Configure_Router_Interface_Egress_Qos. If the receiver or the field VlanQosPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_Egress_Qos) GetVlanQosPolicy() *NokiaConf_Configure_Router_Interface_Egress_Qos_VlanQosPolicy {
	if t != nil && t.VlanQosPolicy != nil {
		return t.VlanQosPolicy
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Interface_Egress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Egress_Qos) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Interface_Egress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Egress_Qos) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AggRate.PopulateDefaults()
	t.EgressRemarkPolicy.PopulateDefaults()
	t.VlanQosPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_Egress_Qos.
func (*NokiaConf_Configure_Router_Interface_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate represents the /nokia-conf/configure/router/interface/egress/qos/agg-rate YANG schema element.
type NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate struct {
	Rate *NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate_Rate `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate) IsYANGGoStruct() {}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate) GetOrCreateRate() *NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate_Rate{}
	return t.Rate
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate) GetRate() *NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Rate.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate.
func (*NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate_Rate represents the /nokia-conf/configure/router/interface/egress/qos/agg-rate/rate YANG schema element.
type NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate_Rate struct {
	Cir NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate_Rate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate_Rate) GetCir() NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionInt32(0)
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate_Rate) GetPir() NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate_Rate_Pir_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = UnionInt32(0)
	}
	if t.Pir == nil {
		t.Pir = NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate_Rate_Pir_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate_Rate.
func (*NokiaConf_Configure_Router_Interface_Egress_Qos_AggRate_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_Egress_Qos_EgressRemarkPolicy represents the /nokia-conf/configure/router/interface/egress/qos/egress-remark-policy YANG schema element.
type NokiaConf_Configure_Router_Interface_Egress_Qos_EgressRemarkPolicy struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_Egress_Qos_EgressRemarkPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_Egress_Qos_EgressRemarkPolicy) IsYANGGoStruct() {}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Router_Interface_Egress_Qos_EgressRemarkPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Egress_Qos_EgressRemarkPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_Egress_Qos_EgressRemarkPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_Egress_Qos_EgressRemarkPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Egress_Qos_EgressRemarkPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_Egress_Qos_EgressRemarkPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Egress_Qos_EgressRemarkPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_Egress_Qos_EgressRemarkPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_Egress_Qos_EgressRemarkPolicy.
func (*NokiaConf_Configure_Router_Interface_Egress_Qos_EgressRemarkPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_Egress_Qos_VlanQosPolicy represents the /nokia-conf/configure/router/interface/egress/qos/vlan-qos-policy YANG schema element.
type NokiaConf_Configure_Router_Interface_Egress_Qos_VlanQosPolicy struct {
	PolicyName   *string `path:"policy-name" module:"nokia-conf"`
	PortRedirect *bool   `path:"port-redirect" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_Egress_Qos_VlanQosPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_Egress_Qos_VlanQosPolicy) IsYANGGoStruct() {}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Router_Interface_Egress_Qos_VlanQosPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Egress_Qos_VlanQosPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetPortRedirect retrieves the value of the leaf PortRedirect from the NokiaConf_Configure_Router_Interface_Egress_Qos_VlanQosPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortRedirect is set, it can
// safely use t.GetPortRedirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortRedirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Egress_Qos_VlanQosPolicy) GetPortRedirect() bool {
	if t == nil || t.PortRedirect == nil {
		return false
	}
	return *t.PortRedirect
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_Egress_Qos_VlanQosPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_Egress_Qos_VlanQosPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortRedirect == nil {
		var v bool = false
		t.PortRedirect = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Egress_Qos_VlanQosPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_Egress_Qos_VlanQosPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Egress_Qos_VlanQosPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_Egress_Qos_VlanQosPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_Egress_Qos_VlanQosPolicy.
func (*NokiaConf_Configure_Router_Interface_Egress_Qos_VlanQosPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_EthCfm represents the /nokia-conf/configure/router/interface/eth-cfm YANG schema element.
type NokiaConf_Configure_Router_Interface_EthCfm struct {
	Mep map[NokiaConf_Configure_Router_Interface_EthCfm_Mep_Key]*NokiaConf_Configure_Router_Interface_EthCfm_Mep `path:"mep" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_EthCfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_EthCfm) IsYANGGoStruct() {}

// NokiaConf_Configure_Router_Interface_EthCfm_Mep_Key represents the key for list Mep of element /nokia-conf/configure/router/interface/eth-cfm.
type NokiaConf_Configure_Router_Interface_EthCfm_Mep_Key struct {
	MdAdminName string `path:"md-admin-name"`
	MaAdminName string `path:"ma-admin-name"`
	MepId       uint16 `path:"mep-id"`
}

// NewMep creates a new entry in the Mep list of the
// NokiaConf_Configure_Router_Interface_EthCfm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Interface_EthCfm) NewMep(MdAdminName string, MaAdminName string, MepId uint16) (*NokiaConf_Configure_Router_Interface_EthCfm_Mep, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Router_Interface_EthCfm_Mep_Key]*NokiaConf_Configure_Router_Interface_EthCfm_Mep)
	}

	key := NokiaConf_Configure_Router_Interface_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mep[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mep", key)
	}

	t.Mep[key] = &NokiaConf_Configure_Router_Interface_EthCfm_Mep{
		MdAdminName: &MdAdminName,
		MaAdminName: &MaAdminName,
		MepId:       &MepId,
	}

	return t.Mep[key], nil
}

// RenameMep renames an entry in the list Mep within
// the NokiaConf_Configure_Router_Interface_EthCfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Interface_EthCfm) RenameMep(oldK, newK NokiaConf_Configure_Router_Interface_EthCfm_Mep_Key) error {
	if _, ok := t.Mep[newK]; ok {
		return fmt.Errorf("key %v already exists in Mep", newK)
	}

	e, ok := t.Mep[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mep", oldK)
	}
	e.MdAdminName = &newK.MdAdminName
	e.MaAdminName = &newK.MaAdminName
	e.MepId = &newK.MepId

	t.Mep[newK] = e
	delete(t.Mep, oldK)
	return nil
}

// GetOrCreateMep retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Interface_EthCfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Interface_EthCfm) GetOrCreateMep(MdAdminName string, MaAdminName string, MepId uint16) *NokiaConf_Configure_Router_Interface_EthCfm_Mep {

	key := NokiaConf_Configure_Router_Interface_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if v, ok := t.Mep[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMep(MdAdminName, MaAdminName, MepId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMep got unexpected error: %v", err))
	}
	return v
}

// GetMep retrieves the value with the specified key from
// the Mep map field of NokiaConf_Configure_Router_Interface_EthCfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Interface_EthCfm) GetMep(MdAdminName string, MaAdminName string, MepId uint16) *NokiaConf_Configure_Router_Interface_EthCfm_Mep {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Router_Interface_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if lm, ok := t.Mep[key]; ok {
		return lm
	}
	return nil
}

// DeleteMep deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Interface_EthCfm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Interface_EthCfm) DeleteMep(MdAdminName string, MaAdminName string, MepId uint16) {
	key := NokiaConf_Configure_Router_Interface_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	delete(t.Mep, key)
}

// AppendMep appends the supplied NokiaConf_Configure_Router_Interface_EthCfm_Mep struct to the
// list Mep of NokiaConf_Configure_Router_Interface_EthCfm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Interface_EthCfm_Mep already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Interface_EthCfm) AppendMep(v *NokiaConf_Configure_Router_Interface_EthCfm_Mep) error {
	if v.MdAdminName == nil {
		return fmt.Errorf("invalid nil key for MdAdminName")
	}

	if v.MaAdminName == nil {
		return fmt.Errorf("invalid nil key for MaAdminName")
	}

	if v.MepId == nil {
		return fmt.Errorf("invalid nil key for MepId")
	}

	key := NokiaConf_Configure_Router_Interface_EthCfm_Mep_Key{
		MdAdminName: *v.MdAdminName,
		MaAdminName: *v.MaAdminName,
		MepId:       *v.MepId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Router_Interface_EthCfm_Mep_Key]*NokiaConf_Configure_Router_Interface_EthCfm_Mep)
	}

	if _, ok := t.Mep[key]; ok {
		return fmt.Errorf("duplicate key for list Mep %v", key)
	}

	t.Mep[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_EthCfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_EthCfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Mep {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_EthCfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_EthCfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_EthCfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_EthCfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_EthCfm.
func (*NokiaConf_Configure_Router_Interface_EthCfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_EthCfm_Mep represents the /nokia-conf/configure/router/interface/eth-cfm/mep YANG schema element.
type NokiaConf_Configure_Router_Interface_EthCfm_Mep struct {
	AdminState           E_NokiaTypesSros_AdminState                                        `path:"admin-state" module:"nokia-conf"`
	AlarmNotification    *NokiaConf_Configure_Router_Interface_EthCfm_Mep_AlarmNotification `path:"alarm-notification" module:"nokia-conf"`
	ApplyGroups          []string                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Ccm                  *bool                                                              `path:"ccm" module:"nokia-conf"`
	CcmLtmPriority       *uint8                                                             `path:"ccm-ltm-priority" module:"nokia-conf"`
	CcmPaddingSize       *uint32                                                            `path:"ccm-padding-size" module:"nokia-conf"`
	CcmTlvIgnore         []E_NokiaTypesEthCfm_CcmTlvIgnoreType                              `path:"ccm-tlv-ignore" module:"nokia-conf"`
	CollectLmmFcStats    *NokiaConf_Configure_Router_Interface_EthCfm_Mep_CollectLmmFcStats `path:"collect-lmm-fc-stats" module:"nokia-conf"`
	CollectLmmStats      *bool                                                              `path:"collect-lmm-stats" module:"nokia-conf"`
	Description          *string                                                            `path:"description" module:"nokia-conf"`
	EthTest              *NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest           `path:"eth-test" module:"nokia-conf" yangPresence:"true"`
	FacilityFault        *bool                                                              `path:"facility-fault" module:"nokia-conf"`
	Grace                *NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace             `path:"grace" module:"nokia-conf"`
	LbmSvcActResponder   *bool                                                              `path:"lbm-svc-act-responder" module:"nokia-conf"`
	LowPriorityDefect    E_NokiaTypesEthCfm_LowestAlarmPriority                             `path:"low-priority-defect" module:"nokia-conf"`
	MaAdminName          *string                                                            `path:"ma-admin-name" module:"nokia-conf"`
	MacAddress           *string                                                            `path:"mac-address" module:"nokia-conf"`
	MdAdminName          *string                                                            `path:"md-admin-name" module:"nokia-conf"`
	MepId                *uint16                                                            `path:"mep-id" module:"nokia-conf"`
	OneWayDelayThreshold *uint32                                                            `path:"one-way-delay-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_EthCfm_Mep implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_EthCfm_Mep) IsYANGGoStruct() {}

// GetOrCreateAlarmNotification retrieves the value of the AlarmNotification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep) GetOrCreateAlarmNotification() *NokiaConf_Configure_Router_Interface_EthCfm_Mep_AlarmNotification {
	if t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	t.AlarmNotification = &NokiaConf_Configure_Router_Interface_EthCfm_Mep_AlarmNotification{}
	return t.AlarmNotification
}

// GetOrCreateCollectLmmFcStats retrieves the value of the CollectLmmFcStats field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep) GetOrCreateCollectLmmFcStats() *NokiaConf_Configure_Router_Interface_EthCfm_Mep_CollectLmmFcStats {
	if t.CollectLmmFcStats != nil {
		return t.CollectLmmFcStats
	}
	t.CollectLmmFcStats = &NokiaConf_Configure_Router_Interface_EthCfm_Mep_CollectLmmFcStats{}
	return t.CollectLmmFcStats
}

// GetOrCreateEthTest retrieves the value of the EthTest field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep) GetOrCreateEthTest() *NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest {
	if t.EthTest != nil {
		return t.EthTest
	}
	t.EthTest = &NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest{}
	return t.EthTest
}

// GetOrCreateGrace retrieves the value of the Grace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep) GetOrCreateGrace() *NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace {
	if t.Grace != nil {
		return t.Grace
	}
	t.Grace = &NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace{}
	return t.Grace
}

// GetAlarmNotification returns the value of the AlarmNotification struct pointer
// from NokiaConf_Configure_Router_Interface_EthCfm_Mep. If the receiver or the field AlarmNotification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep) GetAlarmNotification() *NokiaConf_Configure_Router_Interface_EthCfm_Mep_AlarmNotification {
	if t != nil && t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	return nil
}

// GetCollectLmmFcStats returns the value of the CollectLmmFcStats struct pointer
// from NokiaConf_Configure_Router_Interface_EthCfm_Mep. If the receiver or the field CollectLmmFcStats is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep) GetCollectLmmFcStats() *NokiaConf_Configure_Router_Interface_EthCfm_Mep_CollectLmmFcStats {
	if t != nil && t.CollectLmmFcStats != nil {
		return t.CollectLmmFcStats
	}
	return nil
}

// GetEthTest returns the value of the EthTest struct pointer
// from NokiaConf_Configure_Router_Interface_EthCfm_Mep. If the receiver or the field EthTest is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep) GetEthTest() *NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest {
	if t != nil && t.EthTest != nil {
		return t.EthTest
	}
	return nil
}

// GetGrace returns the value of the Grace struct pointer
// from NokiaConf_Configure_Router_Interface_EthCfm_Mep. If the receiver or the field Grace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep) GetGrace() *NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace {
	if t != nil && t.Grace != nil {
		return t.Grace
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Interface_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Interface_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Interface_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCcm retrieves the value of the leaf Ccm from the NokiaConf_Configure_Router_Interface_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ccm is set, it can
// safely use t.GetCcm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ccm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep) GetCcm() bool {
	if t == nil || t.Ccm == nil {
		return false
	}
	return *t.Ccm
}

// GetCcmLtmPriority retrieves the value of the leaf CcmLtmPriority from the NokiaConf_Configure_Router_Interface_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmLtmPriority is set, it can
// safely use t.GetCcmLtmPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmLtmPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep) GetCcmLtmPriority() uint8 {
	if t == nil || t.CcmLtmPriority == nil {
		return 7
	}
	return *t.CcmLtmPriority
}

// GetCcmPaddingSize retrieves the value of the leaf CcmPaddingSize from the NokiaConf_Configure_Router_Interface_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmPaddingSize is set, it can
// safely use t.GetCcmPaddingSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmPaddingSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep) GetCcmPaddingSize() uint32 {
	if t == nil || t.CcmPaddingSize == nil {
		return 0
	}
	return *t.CcmPaddingSize
}

// GetCcmTlvIgnore retrieves the value of the leaf CcmTlvIgnore from the NokiaConf_Configure_Router_Interface_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmTlvIgnore is set, it can
// safely use t.GetCcmTlvIgnore() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmTlvIgnore == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep) GetCcmTlvIgnore() []E_NokiaTypesEthCfm_CcmTlvIgnoreType {
	if t == nil || t.CcmTlvIgnore == nil {
		return nil
	}
	return t.CcmTlvIgnore
}

// GetCollectLmmStats retrieves the value of the leaf CollectLmmStats from the NokiaConf_Configure_Router_Interface_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectLmmStats is set, it can
// safely use t.GetCollectLmmStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectLmmStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep) GetCollectLmmStats() bool {
	if t == nil || t.CollectLmmStats == nil {
		return false
	}
	return *t.CollectLmmStats
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Router_Interface_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFacilityFault retrieves the value of the leaf FacilityFault from the NokiaConf_Configure_Router_Interface_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FacilityFault is set, it can
// safely use t.GetFacilityFault() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FacilityFault == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep) GetFacilityFault() bool {
	if t == nil || t.FacilityFault == nil {
		return false
	}
	return *t.FacilityFault
}

// GetLbmSvcActResponder retrieves the value of the leaf LbmSvcActResponder from the NokiaConf_Configure_Router_Interface_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LbmSvcActResponder is set, it can
// safely use t.GetLbmSvcActResponder() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LbmSvcActResponder == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep) GetLbmSvcActResponder() bool {
	if t == nil || t.LbmSvcActResponder == nil {
		return false
	}
	return *t.LbmSvcActResponder
}

// GetLowPriorityDefect retrieves the value of the leaf LowPriorityDefect from the NokiaConf_Configure_Router_Interface_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPriorityDefect is set, it can
// safely use t.GetLowPriorityDefect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPriorityDefect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep) GetLowPriorityDefect() E_NokiaTypesEthCfm_LowestAlarmPriority {
	if t == nil || t.LowPriorityDefect == 0 {
		return NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	return t.LowPriorityDefect
}

// GetMaAdminName retrieves the value of the leaf MaAdminName from the NokiaConf_Configure_Router_Interface_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaAdminName is set, it can
// safely use t.GetMaAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep) GetMaAdminName() string {
	if t == nil || t.MaAdminName == nil {
		return ""
	}
	return *t.MaAdminName
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Router_Interface_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetMdAdminName retrieves the value of the leaf MdAdminName from the NokiaConf_Configure_Router_Interface_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdAdminName is set, it can
// safely use t.GetMdAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep) GetMdAdminName() string {
	if t == nil || t.MdAdminName == nil {
		return ""
	}
	return *t.MdAdminName
}

// GetMepId retrieves the value of the leaf MepId from the NokiaConf_Configure_Router_Interface_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MepId is set, it can
// safely use t.GetMepId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MepId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep) GetMepId() uint16 {
	if t == nil || t.MepId == nil {
		return 0
	}
	return *t.MepId
}

// GetOneWayDelayThreshold retrieves the value of the leaf OneWayDelayThreshold from the NokiaConf_Configure_Router_Interface_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OneWayDelayThreshold is set, it can
// safely use t.GetOneWayDelayThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OneWayDelayThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep) GetOneWayDelayThreshold() uint32 {
	if t == nil || t.OneWayDelayThreshold == nil {
		return 3
	}
	return *t.OneWayDelayThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_EthCfm_Mep
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Ccm == nil {
		var v bool = false
		t.Ccm = &v
	}
	if t.CcmLtmPriority == nil {
		var v uint8 = 7
		t.CcmLtmPriority = &v
	}
	if t.CollectLmmStats == nil {
		var v bool = false
		t.CollectLmmStats = &v
	}
	if t.FacilityFault == nil {
		var v bool = false
		t.FacilityFault = &v
	}
	if t.LowPriorityDefect == 0 {
		t.LowPriorityDefect = NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	if t.OneWayDelayThreshold == nil {
		var v uint32 = 3
		t.OneWayDelayThreshold = &v
	}
	t.AlarmNotification.PopulateDefaults()
	t.CollectLmmFcStats.PopulateDefaults()
	t.EthTest.PopulateDefaults()
	t.Grace.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Interface_EthCfm_Mep struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MaAdminName == nil {
		return nil, fmt.Errorf("nil value for key MaAdminName")
	}

	if t.MdAdminName == nil {
		return nil, fmt.Errorf("nil value for key MdAdminName")
	}

	if t.MepId == nil {
		return nil, fmt.Errorf("nil value for key MepId")
	}

	return map[string]interface{}{
		"ma-admin-name": *t.MaAdminName,
		"md-admin-name": *t.MdAdminName,
		"mep-id":        *t.MepId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_EthCfm_Mep"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_EthCfm_Mep.
func (*NokiaConf_Configure_Router_Interface_EthCfm_Mep) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_EthCfm_Mep_AlarmNotification represents the /nokia-conf/configure/router/interface/eth-cfm/mep/alarm-notification YANG schema element.
type NokiaConf_Configure_Router_Interface_EthCfm_Mep_AlarmNotification struct {
	FngAlarmTime *int32 `path:"fng-alarm-time" module:"nokia-conf"`
	FngResetTime *int32 `path:"fng-reset-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_EthCfm_Mep_AlarmNotification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_EthCfm_Mep_AlarmNotification) IsYANGGoStruct() {}

// GetFngAlarmTime retrieves the value of the leaf FngAlarmTime from the NokiaConf_Configure_Router_Interface_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngAlarmTime is set, it can
// safely use t.GetFngAlarmTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngAlarmTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_AlarmNotification) GetFngAlarmTime() int32 {
	if t == nil || t.FngAlarmTime == nil {
		return 0
	}
	return *t.FngAlarmTime
}

// GetFngResetTime retrieves the value of the leaf FngResetTime from the NokiaConf_Configure_Router_Interface_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngResetTime is set, it can
// safely use t.GetFngResetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngResetTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_AlarmNotification) GetFngResetTime() int32 {
	if t == nil || t.FngResetTime == nil {
		return 0
	}
	return *t.FngResetTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_EthCfm_Mep_AlarmNotification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_AlarmNotification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_AlarmNotification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_EthCfm_Mep_AlarmNotification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_AlarmNotification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_AlarmNotification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_EthCfm_Mep_AlarmNotification.
func (*NokiaConf_Configure_Router_Interface_EthCfm_Mep_AlarmNotification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_EthCfm_Mep_CollectLmmFcStats represents the /nokia-conf/configure/router/interface/eth-cfm/mep/collect-lmm-fc-stats YANG schema element.
type NokiaConf_Configure_Router_Interface_EthCfm_Mep_CollectLmmFcStats struct {
	Fc          []E_NokiaTypesEthCfm_FcType `path:"fc" module:"nokia-conf"`
	FcInProfile []E_NokiaTypesEthCfm_FcType `path:"fc-in-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_EthCfm_Mep_CollectLmmFcStats implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_EthCfm_Mep_CollectLmmFcStats) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Router_Interface_EthCfm_Mep_CollectLmmFcStats
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_CollectLmmFcStats) GetFc() []E_NokiaTypesEthCfm_FcType {
	if t == nil || t.Fc == nil {
		return nil
	}
	return t.Fc
}

// GetFcInProfile retrieves the value of the leaf FcInProfile from the NokiaConf_Configure_Router_Interface_EthCfm_Mep_CollectLmmFcStats
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcInProfile is set, it can
// safely use t.GetFcInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcInProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_CollectLmmFcStats) GetFcInProfile() []E_NokiaTypesEthCfm_FcType {
	if t == nil || t.FcInProfile == nil {
		return nil
	}
	return t.FcInProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_EthCfm_Mep_CollectLmmFcStats
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_CollectLmmFcStats) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_CollectLmmFcStats) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_EthCfm_Mep_CollectLmmFcStats"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_CollectLmmFcStats) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_CollectLmmFcStats) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_EthCfm_Mep_CollectLmmFcStats.
func (*NokiaConf_Configure_Router_Interface_EthCfm_Mep_CollectLmmFcStats) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest represents the /nokia-conf/configure/router/interface/eth-cfm/mep/eth-test YANG schema element.
type NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest struct {
	BitErrorThreshold *uint32                                                              `path:"bit-error-threshold" module:"nokia-conf"`
	TestPattern       *NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest_TestPattern `path:"test-pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest) IsYANGGoStruct() {}

// GetOrCreateTestPattern retrieves the value of the TestPattern field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest) GetOrCreateTestPattern() *NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest_TestPattern {
	if t.TestPattern != nil {
		return t.TestPattern
	}
	t.TestPattern = &NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest_TestPattern{}
	return t.TestPattern
}

// GetTestPattern returns the value of the TestPattern struct pointer
// from NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest. If the receiver or the field TestPattern is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest) GetTestPattern() *NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest_TestPattern {
	if t != nil && t.TestPattern != nil {
		return t.TestPattern
	}
	return nil
}

// GetBitErrorThreshold retrieves the value of the leaf BitErrorThreshold from the NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitErrorThreshold is set, it can
// safely use t.GetBitErrorThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitErrorThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest) GetBitErrorThreshold() uint32 {
	if t == nil || t.BitErrorThreshold == nil {
		return 1
	}
	return *t.BitErrorThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BitErrorThreshold == nil {
		var v uint32 = 1
		t.BitErrorThreshold = &v
	}
	t.TestPattern.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest.
func (*NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest_TestPattern represents the /nokia-conf/configure/router/interface/eth-cfm/mep/eth-test/test-pattern YANG schema element.
type NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest_TestPattern struct {
	CrcTlv  *bool                                                                         `path:"crc-tlv" module:"nokia-conf"`
	Pattern E_NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest_TestPattern_Pattern `path:"pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest_TestPattern implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest_TestPattern) IsYANGGoStruct() {}

// GetCrcTlv retrieves the value of the leaf CrcTlv from the NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CrcTlv is set, it can
// safely use t.GetCrcTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CrcTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest_TestPattern) GetCrcTlv() bool {
	if t == nil || t.CrcTlv == nil {
		return false
	}
	return *t.CrcTlv
}

// GetPattern retrieves the value of the leaf Pattern from the NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pattern is set, it can
// safely use t.GetPattern() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pattern == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest_TestPattern) GetPattern() E_NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest_TestPattern_Pattern {
	if t == nil || t.Pattern == 0 {
		return NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
	return t.Pattern
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest_TestPattern
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest_TestPattern) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CrcTlv == nil {
		var v bool = false
		t.CrcTlv = &v
	}
	if t.Pattern == 0 {
		t.Pattern = NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest_TestPattern) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest_TestPattern"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest_TestPattern) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest_TestPattern) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest_TestPattern.
func (*NokiaConf_Configure_Router_Interface_EthCfm_Mep_EthTest_TestPattern) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace represents the /nokia-conf/configure/router/interface/eth-cfm/mep/grace YANG schema element.
type NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace struct {
	EthEd       *NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthEd       `path:"eth-ed" module:"nokia-conf"`
	EthVsmGrace *NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace `path:"eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace) IsYANGGoStruct() {}

// GetOrCreateEthEd retrieves the value of the EthEd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace) GetOrCreateEthEd() *NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthEd {
	if t.EthEd != nil {
		return t.EthEd
	}
	t.EthEd = &NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthEd{}
	return t.EthEd
}

// GetOrCreateEthVsmGrace retrieves the value of the EthVsmGrace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace) GetOrCreateEthVsmGrace() *NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace {
	if t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	t.EthVsmGrace = &NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace{}
	return t.EthVsmGrace
}

// GetEthEd returns the value of the EthEd struct pointer
// from NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace. If the receiver or the field EthEd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace) GetEthEd() *NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthEd {
	if t != nil && t.EthEd != nil {
		return t.EthEd
	}
	return nil
}

// GetEthVsmGrace returns the value of the EthVsmGrace struct pointer
// from NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace. If the receiver or the field EthVsmGrace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace) GetEthVsmGrace() *NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace {
	if t != nil && t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthEd.PopulateDefaults()
	t.EthVsmGrace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace.
func (*NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthEd represents the /nokia-conf/configure/router/interface/eth-cfm/mep/grace/eth-ed YANG schema element.
type NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthEd struct {
	MaxRxDefectWindow *uint32 `path:"max-rx-defect-window" module:"nokia-conf"`
	Priority          *int32  `path:"priority" module:"nokia-conf"`
	RxEthEd           *bool   `path:"rx-eth-ed" module:"nokia-conf"`
	TxEthEd           *bool   `path:"tx-eth-ed" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthEd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthEd) IsYANGGoStruct() {}

// GetMaxRxDefectWindow retrieves the value of the leaf MaxRxDefectWindow from the NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRxDefectWindow is set, it can
// safely use t.GetMaxRxDefectWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRxDefectWindow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthEd) GetMaxRxDefectWindow() uint32 {
	if t == nil || t.MaxRxDefectWindow == nil {
		return 0
	}
	return *t.MaxRxDefectWindow
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthEd) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetRxEthEd retrieves the value of the leaf RxEthEd from the NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthEd is set, it can
// safely use t.GetRxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthEd) GetRxEthEd() bool {
	if t == nil || t.RxEthEd == nil {
		return true
	}
	return *t.RxEthEd
}

// GetTxEthEd retrieves the value of the leaf TxEthEd from the NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthEd is set, it can
// safely use t.GetTxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthEd) GetTxEthEd() bool {
	if t == nil || t.TxEthEd == nil {
		return false
	}
	return *t.TxEthEd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthEd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthEd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthEd == nil {
		var v bool = true
		t.RxEthEd = &v
	}
	if t.TxEthEd == nil {
		var v bool = false
		t.TxEthEd = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthEd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthEd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthEd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthEd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthEd.
func (*NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthEd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace represents the /nokia-conf/configure/router/interface/eth-cfm/mep/grace/eth-vsm-grace YANG schema element.
type NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace struct {
	RxEthVsmGrace *bool `path:"rx-eth-vsm-grace" module:"nokia-conf"`
	TxEthVsmGrace *bool `path:"tx-eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace) IsYANGGoStruct() {}

// GetRxEthVsmGrace retrieves the value of the leaf RxEthVsmGrace from the NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthVsmGrace is set, it can
// safely use t.GetRxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace) GetRxEthVsmGrace() bool {
	if t == nil || t.RxEthVsmGrace == nil {
		return true
	}
	return *t.RxEthVsmGrace
}

// GetTxEthVsmGrace retrieves the value of the leaf TxEthVsmGrace from the NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthVsmGrace is set, it can
// safely use t.GetTxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace) GetTxEthVsmGrace() bool {
	if t == nil || t.TxEthVsmGrace == nil {
		return true
	}
	return *t.TxEthVsmGrace
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthVsmGrace == nil {
		var v bool = true
		t.RxEthVsmGrace = &v
	}
	if t.TxEthVsmGrace == nil {
		var v bool = true
		t.TxEthVsmGrace = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace.
func (*NokiaConf_Configure_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_HoldTime represents the /nokia-conf/configure/router/interface/hold-time YANG schema element.
type NokiaConf_Configure_Router_Interface_HoldTime struct {
	Ipv4 *NokiaConf_Configure_Router_Interface_HoldTime_Ipv4 `path:"ipv4" module:"nokia-conf"`
	Ipv6 *NokiaConf_Configure_Router_Interface_HoldTime_Ipv6 `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_HoldTime) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_HoldTime) GetOrCreateIpv4() *NokiaConf_Configure_Router_Interface_HoldTime_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Router_Interface_HoldTime_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_HoldTime) GetOrCreateIpv6() *NokiaConf_Configure_Router_Interface_HoldTime_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Router_Interface_HoldTime_Ipv6{}
	return t.Ipv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Router_Interface_HoldTime. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_HoldTime) GetIpv4() *NokiaConf_Configure_Router_Interface_HoldTime_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Router_Interface_HoldTime. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_HoldTime) GetIpv6() *NokiaConf_Configure_Router_Interface_HoldTime_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_HoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_HoldTime.
func (*NokiaConf_Configure_Router_Interface_HoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_HoldTime_Ipv4 represents the /nokia-conf/configure/router/interface/hold-time/ipv4 YANG schema element.
type NokiaConf_Configure_Router_Interface_HoldTime_Ipv4 struct {
	Down *NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Down `path:"down" module:"nokia-conf"`
	Up   *NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Up   `path:"up" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_HoldTime_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_HoldTime_Ipv4) IsYANGGoStruct() {}

// GetOrCreateDown retrieves the value of the Down field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv4) GetOrCreateDown() *NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Down {
	if t.Down != nil {
		return t.Down
	}
	t.Down = &NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Down{}
	return t.Down
}

// GetOrCreateUp retrieves the value of the Up field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv4) GetOrCreateUp() *NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Up {
	if t.Up != nil {
		return t.Up
	}
	t.Up = &NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Up{}
	return t.Up
}

// GetDown returns the value of the Down struct pointer
// from NokiaConf_Configure_Router_Interface_HoldTime_Ipv4. If the receiver or the field Down is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv4) GetDown() *NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Down {
	if t != nil && t.Down != nil {
		return t.Down
	}
	return nil
}

// GetUp returns the value of the Up struct pointer
// from NokiaConf_Configure_Router_Interface_HoldTime_Ipv4. If the receiver or the field Up is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv4) GetUp() *NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Up {
	if t != nil && t.Up != nil {
		return t.Up
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_HoldTime_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Down.PopulateDefaults()
	t.Up.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_HoldTime_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_HoldTime_Ipv4.
func (*NokiaConf_Configure_Router_Interface_HoldTime_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Down represents the /nokia-conf/configure/router/interface/hold-time/ipv4/down YANG schema element.
type NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Down struct {
	InitOnly *bool   `path:"init-only" module:"nokia-conf"`
	Seconds  *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Down implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Down) IsYANGGoStruct() {}

// GetInitOnly retrieves the value of the leaf InitOnly from the NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitOnly is set, it can
// safely use t.GetInitOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Down) GetInitOnly() bool {
	if t == nil || t.InitOnly == nil {
		return false
	}
	return *t.InitOnly
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Down) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Down
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Down) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitOnly == nil {
		var v bool = false
		t.InitOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Down) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Down"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Down) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Down) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Down.
func (*NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Down) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Up represents the /nokia-conf/configure/router/interface/hold-time/ipv4/up YANG schema element.
type NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Up struct {
	Seconds *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Up implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Up) IsYANGGoStruct() {}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Up
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Up) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Up
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Up) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Up) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Up"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Up) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Up) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Up.
func (*NokiaConf_Configure_Router_Interface_HoldTime_Ipv4_Up) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_HoldTime_Ipv6 represents the /nokia-conf/configure/router/interface/hold-time/ipv6 YANG schema element.
type NokiaConf_Configure_Router_Interface_HoldTime_Ipv6 struct {
	Down *NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Down `path:"down" module:"nokia-conf"`
	Up   *NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Up   `path:"up" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_HoldTime_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_HoldTime_Ipv6) IsYANGGoStruct() {}

// GetOrCreateDown retrieves the value of the Down field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv6) GetOrCreateDown() *NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Down {
	if t.Down != nil {
		return t.Down
	}
	t.Down = &NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Down{}
	return t.Down
}

// GetOrCreateUp retrieves the value of the Up field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv6) GetOrCreateUp() *NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Up {
	if t.Up != nil {
		return t.Up
	}
	t.Up = &NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Up{}
	return t.Up
}

// GetDown returns the value of the Down struct pointer
// from NokiaConf_Configure_Router_Interface_HoldTime_Ipv6. If the receiver or the field Down is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv6) GetDown() *NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Down {
	if t != nil && t.Down != nil {
		return t.Down
	}
	return nil
}

// GetUp returns the value of the Up struct pointer
// from NokiaConf_Configure_Router_Interface_HoldTime_Ipv6. If the receiver or the field Up is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv6) GetUp() *NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Up {
	if t != nil && t.Up != nil {
		return t.Up
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_HoldTime_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Down.PopulateDefaults()
	t.Up.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_HoldTime_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_HoldTime_Ipv6.
func (*NokiaConf_Configure_Router_Interface_HoldTime_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Down represents the /nokia-conf/configure/router/interface/hold-time/ipv6/down YANG schema element.
type NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Down struct {
	InitOnly *bool   `path:"init-only" module:"nokia-conf"`
	Seconds  *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Down implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Down) IsYANGGoStruct() {}

// GetInitOnly retrieves the value of the leaf InitOnly from the NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitOnly is set, it can
// safely use t.GetInitOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Down) GetInitOnly() bool {
	if t == nil || t.InitOnly == nil {
		return false
	}
	return *t.InitOnly
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Down) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Down
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Down) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitOnly == nil {
		var v bool = false
		t.InitOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Down) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Down"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Down) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Down) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Down.
func (*NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Down) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Up represents the /nokia-conf/configure/router/interface/hold-time/ipv6/up YANG schema element.
type NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Up struct {
	Seconds *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Up implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Up) IsYANGGoStruct() {}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Up
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Up) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Up
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Up) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Up) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Up"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Up) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Up) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Up.
func (*NokiaConf_Configure_Router_Interface_HoldTime_Ipv6_Up) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_IfAttribute represents the /nokia-conf/configure/router/interface/if-attribute YANG schema element.
type NokiaConf_Configure_Router_Interface_IfAttribute struct {
	AdminGroup []string                                                               `path:"admin-group" module:"nokia-conf"`
	Delay      *NokiaConf_Configure_Router_Interface_IfAttribute_Delay                `path:"delay" module:"nokia-conf"`
	SrlgGroup  map[string]*NokiaConf_Configure_Router_Interface_IfAttribute_SrlgGroup `path:"srlg-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_IfAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_IfAttribute) IsYANGGoStruct() {}

// NewSrlgGroup creates a new entry in the SrlgGroup list of the
// NokiaConf_Configure_Router_Interface_IfAttribute struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute) NewSrlgGroup(Name string) (*NokiaConf_Configure_Router_Interface_IfAttribute_SrlgGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SrlgGroup == nil {
		t.SrlgGroup = make(map[string]*NokiaConf_Configure_Router_Interface_IfAttribute_SrlgGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SrlgGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SrlgGroup", key)
	}

	t.SrlgGroup[key] = &NokiaConf_Configure_Router_Interface_IfAttribute_SrlgGroup{
		Name: &Name,
	}

	return t.SrlgGroup[key], nil
}

// RenameSrlgGroup renames an entry in the list SrlgGroup within
// the NokiaConf_Configure_Router_Interface_IfAttribute struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute) RenameSrlgGroup(oldK, newK string) error {
	if _, ok := t.SrlgGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in SrlgGroup", newK)
	}

	e, ok := t.SrlgGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SrlgGroup", oldK)
	}
	e.Name = &newK

	t.SrlgGroup[newK] = e
	delete(t.SrlgGroup, oldK)
	return nil
}

// GetOrCreateSrlgGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Interface_IfAttribute. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute) GetOrCreateSrlgGroup(Name string) *NokiaConf_Configure_Router_Interface_IfAttribute_SrlgGroup {

	key := Name

	if v, ok := t.SrlgGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSrlgGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSrlgGroup got unexpected error: %v", err))
	}
	return v
}

// GetSrlgGroup retrieves the value with the specified key from
// the SrlgGroup map field of NokiaConf_Configure_Router_Interface_IfAttribute. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute) GetSrlgGroup(Name string) *NokiaConf_Configure_Router_Interface_IfAttribute_SrlgGroup {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.SrlgGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteSrlgGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Interface_IfAttribute. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute) DeleteSrlgGroup(Name string) {
	key := Name

	delete(t.SrlgGroup, key)
}

// AppendSrlgGroup appends the supplied NokiaConf_Configure_Router_Interface_IfAttribute_SrlgGroup struct to the
// list SrlgGroup of NokiaConf_Configure_Router_Interface_IfAttribute. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Interface_IfAttribute_SrlgGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute) AppendSrlgGroup(v *NokiaConf_Configure_Router_Interface_IfAttribute_SrlgGroup) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SrlgGroup == nil {
		t.SrlgGroup = make(map[string]*NokiaConf_Configure_Router_Interface_IfAttribute_SrlgGroup)
	}

	if _, ok := t.SrlgGroup[key]; ok {
		return fmt.Errorf("duplicate key for list SrlgGroup %v", key)
	}

	t.SrlgGroup[key] = v
	return nil
}

// GetOrCreateDelay retrieves the value of the Delay field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute) GetOrCreateDelay() *NokiaConf_Configure_Router_Interface_IfAttribute_Delay {
	if t.Delay != nil {
		return t.Delay
	}
	t.Delay = &NokiaConf_Configure_Router_Interface_IfAttribute_Delay{}
	return t.Delay
}

// GetDelay returns the value of the Delay struct pointer
// from NokiaConf_Configure_Router_Interface_IfAttribute. If the receiver or the field Delay is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute) GetDelay() *NokiaConf_Configure_Router_Interface_IfAttribute_Delay {
	if t != nil && t.Delay != nil {
		return t.Delay
	}
	return nil
}

// GetAdminGroup retrieves the value of the leaf AdminGroup from the NokiaConf_Configure_Router_Interface_IfAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminGroup is set, it can
// safely use t.GetAdminGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute) GetAdminGroup() []string {
	if t == nil || t.AdminGroup == nil {
		return nil
	}
	return t.AdminGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_IfAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Delay.PopulateDefaults()
	for _, e := range t.SrlgGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_IfAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_IfAttribute.
func (*NokiaConf_Configure_Router_Interface_IfAttribute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_IfAttribute_Delay represents the /nokia-conf/configure/router/interface/if-attribute/delay YANG schema element.
type NokiaConf_Configure_Router_Interface_IfAttribute_Delay struct {
	DelaySelection E_NokiaConf_Configure_Router_Interface_IfAttribute_Delay_DelaySelection `path:"delay-selection" module:"nokia-conf"`
	Dynamic        *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic         `path:"dynamic" module:"nokia-conf"`
	Static         *int32                                                                  `path:"static" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_IfAttribute_Delay implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_IfAttribute_Delay) IsYANGGoStruct() {}

// GetOrCreateDynamic retrieves the value of the Dynamic field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_Delay) GetOrCreateDynamic() *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic {
	if t.Dynamic != nil {
		return t.Dynamic
	}
	t.Dynamic = &NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic{}
	return t.Dynamic
}

// GetDynamic returns the value of the Dynamic struct pointer
// from NokiaConf_Configure_Router_Interface_IfAttribute_Delay. If the receiver or the field Dynamic is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_Delay) GetDynamic() *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic {
	if t != nil && t.Dynamic != nil {
		return t.Dynamic
	}
	return nil
}

// GetDelaySelection retrieves the value of the leaf DelaySelection from the NokiaConf_Configure_Router_Interface_IfAttribute_Delay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DelaySelection is set, it can
// safely use t.GetDelaySelection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DelaySelection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_Delay) GetDelaySelection() E_NokiaConf_Configure_Router_Interface_IfAttribute_Delay_DelaySelection {
	if t == nil || t.DelaySelection == 0 {
		return NokiaConf_Configure_Router_Interface_IfAttribute_Delay_DelaySelection_static_preferred
	}
	return t.DelaySelection
}

// GetStatic retrieves the value of the leaf Static from the NokiaConf_Configure_Router_Interface_IfAttribute_Delay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Static is set, it can
// safely use t.GetStatic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Static == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_Delay) GetStatic() int32 {
	if t == nil || t.Static == nil {
		return 0
	}
	return *t.Static
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_IfAttribute_Delay
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_Delay) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DelaySelection == 0 {
		t.DelaySelection = NokiaConf_Configure_Router_Interface_IfAttribute_Delay_DelaySelection_static_preferred
	}
	t.Dynamic.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_Delay) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_IfAttribute_Delay"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_Delay) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_Delay) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_IfAttribute_Delay.
func (*NokiaConf_Configure_Router_Interface_IfAttribute_Delay) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic represents the /nokia-conf/configure/router/interface/if-attribute/delay/dynamic YANG schema element.
type NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic struct {
	MeasurementTemplate *string                                                                    `path:"measurement-template" module:"nokia-conf"`
	TwampLight          *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight `path:"twamp-light" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic) IsYANGGoStruct() {}

// GetOrCreateTwampLight retrieves the value of the TwampLight field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic) GetOrCreateTwampLight() *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight {
	if t.TwampLight != nil {
		return t.TwampLight
	}
	t.TwampLight = &NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight{}
	return t.TwampLight
}

// GetTwampLight returns the value of the TwampLight struct pointer
// from NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic. If the receiver or the field TwampLight is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic) GetTwampLight() *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight {
	if t != nil && t.TwampLight != nil {
		return t.TwampLight
	}
	return nil
}

// GetMeasurementTemplate retrieves the value of the leaf MeasurementTemplate from the NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MeasurementTemplate is set, it can
// safely use t.GetMeasurementTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MeasurementTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic) GetMeasurementTemplate() string {
	if t == nil || t.MeasurementTemplate == nil {
		return ""
	}
	return *t.MeasurementTemplate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.TwampLight.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic.
func (*NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight represents the /nokia-conf/configure/router/interface/if-attribute/delay/dynamic/twamp-light YANG schema element.
type NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight struct {
	Ipv4 *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4 `path:"ipv4" module:"nokia-conf"`
	Ipv6 *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6 `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight) GetOrCreateIpv4() *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight) GetOrCreateIpv6() *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6{}
	return t.Ipv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight) GetIpv4() *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight) GetIpv6() *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight.
func (*NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4 represents the /nokia-conf/configure/router/interface/if-attribute/delay/dynamic/twamp-light/ipv4 YANG schema element.
type NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4 struct {
	AdminState  E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Destination *string                     `path:"destination" module:"nokia-conf"`
	Source      *string                     `path:"source" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDestination retrieves the value of the leaf Destination from the NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Destination is set, it can
// safely use t.GetDestination() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Destination == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4) GetDestination() string {
	if t == nil || t.Destination == nil {
		return ""
	}
	return *t.Destination
}

// GetSource retrieves the value of the leaf Source from the NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source is set, it can
// safely use t.GetSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4) GetSource() string {
	if t == nil || t.Source == nil {
		return ""
	}
	return *t.Source
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4.
func (*NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6 represents the /nokia-conf/configure/router/interface/if-attribute/delay/dynamic/twamp-light/ipv6 YANG schema element.
type NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6 struct {
	AdminState  E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Destination *string                     `path:"destination" module:"nokia-conf"`
	Source      *string                     `path:"source" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDestination retrieves the value of the leaf Destination from the NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Destination is set, it can
// safely use t.GetDestination() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Destination == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6) GetDestination() string {
	if t == nil || t.Destination == nil {
		return ""
	}
	return *t.Destination
}

// GetSource retrieves the value of the leaf Source from the NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source is set, it can
// safely use t.GetSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6) GetSource() string {
	if t == nil || t.Source == nil {
		return ""
	}
	return *t.Source
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6.
func (*NokiaConf_Configure_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_IfAttribute_SrlgGroup represents the /nokia-conf/configure/router/interface/if-attribute/srlg-group YANG schema element.
type NokiaConf_Configure_Router_Interface_IfAttribute_SrlgGroup struct {
	Name *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_IfAttribute_SrlgGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_IfAttribute_SrlgGroup) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Router_Interface_IfAttribute_SrlgGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_SrlgGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_IfAttribute_SrlgGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_SrlgGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Router_Interface_IfAttribute_SrlgGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_SrlgGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_SrlgGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_IfAttribute_SrlgGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_SrlgGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_IfAttribute_SrlgGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_IfAttribute_SrlgGroup.
func (*NokiaConf_Configure_Router_Interface_IfAttribute_SrlgGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_Ingress represents the /nokia-conf/configure/router/interface/ingress YANG schema element.
type NokiaConf_Configure_Router_Interface_Ingress struct {
	DestinationClassLookup *bool                                                `path:"destination-class-lookup" module:"nokia-conf"`
	Filter                 *NokiaConf_Configure_Router_Interface_Ingress_Filter `path:"filter" module:"nokia-conf"`
	IpFilterPair           *bool                                                `path:"ip-filter-pair" module:"nokia-conf"`
	PolicyAccounting       *string                                              `path:"policy-accounting" module:"nokia-conf"`
	Qos                    *NokiaConf_Configure_Router_Interface_Ingress_Qos    `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_Ingress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Router_Interface_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Router_Interface_Ingress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_Ingress) GetOrCreateQos() *NokiaConf_Configure_Router_Interface_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Router_Interface_Ingress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Router_Interface_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_Ingress) GetFilter() *NokiaConf_Configure_Router_Interface_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Router_Interface_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_Ingress) GetQos() *NokiaConf_Configure_Router_Interface_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetDestinationClassLookup retrieves the value of the leaf DestinationClassLookup from the NokiaConf_Configure_Router_Interface_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationClassLookup is set, it can
// safely use t.GetDestinationClassLookup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationClassLookup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ingress) GetDestinationClassLookup() bool {
	if t == nil || t.DestinationClassLookup == nil {
		return false
	}
	return *t.DestinationClassLookup
}

// GetIpFilterPair retrieves the value of the leaf IpFilterPair from the NokiaConf_Configure_Router_Interface_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpFilterPair is set, it can
// safely use t.GetIpFilterPair() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpFilterPair == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ingress) GetIpFilterPair() bool {
	if t == nil || t.IpFilterPair == nil {
		return false
	}
	return *t.IpFilterPair
}

// GetPolicyAccounting retrieves the value of the leaf PolicyAccounting from the NokiaConf_Configure_Router_Interface_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyAccounting is set, it can
// safely use t.GetPolicyAccounting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyAccounting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ingress) GetPolicyAccounting() string {
	if t == nil || t.PolicyAccounting == nil {
		return ""
	}
	return *t.PolicyAccounting
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DestinationClassLookup == nil {
		var v bool = false
		t.DestinationClassLookup = &v
	}
	if t.IpFilterPair == nil {
		var v bool = false
		t.IpFilterPair = &v
	}
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_Ingress.
func (*NokiaConf_Configure_Router_Interface_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_Ingress_Filter represents the /nokia-conf/configure/router/interface/ingress/filter YANG schema element.
type NokiaConf_Configure_Router_Interface_Ingress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_Ingress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Router_Interface_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ingress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Router_Interface_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ingress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_Ingress_Filter.
func (*NokiaConf_Configure_Router_Interface_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_Ingress_Qos represents the /nokia-conf/configure/router/interface/ingress/qos YANG schema element.
type NokiaConf_Configure_Router_Interface_Ingress_Qos struct {
	ApplyGroups        []string                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	NetworkIngress     *NokiaConf_Configure_Router_Interface_Ingress_Qos_NetworkIngress `path:"network-ingress" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_Ingress_Qos) IsYANGGoStruct() {}

// GetOrCreateNetworkIngress retrieves the value of the NetworkIngress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_Ingress_Qos) GetOrCreateNetworkIngress() *NokiaConf_Configure_Router_Interface_Ingress_Qos_NetworkIngress {
	if t.NetworkIngress != nil {
		return t.NetworkIngress
	}
	t.NetworkIngress = &NokiaConf_Configure_Router_Interface_Ingress_Qos_NetworkIngress{}
	return t.NetworkIngress
}

// GetNetworkIngress returns the value of the NetworkIngress struct pointer
// from NokiaConf_Configure_Router_Interface_Ingress_Qos. If the receiver or the field NetworkIngress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_Ingress_Qos) GetNetworkIngress() *NokiaConf_Configure_Router_Interface_Ingress_Qos_NetworkIngress {
	if t != nil && t.NetworkIngress != nil {
		return t.NetworkIngress
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Interface_Ingress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ingress_Qos) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Interface_Ingress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ingress_Qos) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.NetworkIngress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_Ingress_Qos.
func (*NokiaConf_Configure_Router_Interface_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_Ingress_Qos_NetworkIngress represents the /nokia-conf/configure/router/interface/ingress/qos/network-ingress YANG schema element.
type NokiaConf_Configure_Router_Interface_Ingress_Qos_NetworkIngress struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_Ingress_Qos_NetworkIngress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_Ingress_Qos_NetworkIngress) IsYANGGoStruct() {}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Router_Interface_Ingress_Qos_NetworkIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ingress_Qos_NetworkIngress) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_Ingress_Qos_NetworkIngress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_Ingress_Qos_NetworkIngress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Ingress_Qos_NetworkIngress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_Ingress_Qos_NetworkIngress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Ingress_Qos_NetworkIngress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_Ingress_Qos_NetworkIngress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_Ingress_Qos_NetworkIngress.
func (*NokiaConf_Configure_Router_Interface_Ingress_Qos_NetworkIngress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_IpTunnel represents the /nokia-conf/configure/router/interface/ip-tunnel YANG schema element.
type NokiaConf_Configure_Router_Interface_IpTunnel struct {
	RemoteIp *string `path:"remote-ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_IpTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_IpTunnel) IsYANGGoStruct() {}

// GetRemoteIp retrieves the value of the leaf RemoteIp from the NokiaConf_Configure_Router_Interface_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteIp is set, it can
// safely use t.GetRemoteIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_IpTunnel) GetRemoteIp() string {
	if t == nil || t.RemoteIp == nil {
		return ""
	}
	return *t.RemoteIp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_IpTunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_IpTunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_IpTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_IpTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_IpTunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_IpTunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_IpTunnel.
func (*NokiaConf_Configure_Router_Interface_IpTunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_Ipv4 represents the /nokia-conf/configure/router/interface/ipv4 YANG schema element.
type NokiaConf_Configure_Router_Interface_Ipv4 struct {
	AllowDirectedBroadcasts *bool                                                           `path:"allow-directed-broadcasts" module:"nokia-conf"`
	Bfd                     *NokiaConf_Configure_Router_Interface_Ipv4_Bfd                  `path:"bfd" module:"nokia-conf"`
	Dhcp                    *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp                 `path:"dhcp" module:"nokia-conf"`
	Icmp                    *NokiaConf_Configure_Router_Interface_Ipv4_Icmp                 `path:"icmp" module:"nokia-conf"`
	IpHelperAddress         *string                                                         `path:"ip-helper-address" module:"nokia-conf"`
	LocalDhcpServer         *string                                                         `path:"local-dhcp-server" module:"nokia-conf"`
	NeighborDiscovery       *NokiaConf_Configure_Router_Interface_Ipv4_NeighborDiscovery    `path:"neighbor-discovery" module:"nokia-conf"`
	Primary                 *NokiaConf_Configure_Router_Interface_Ipv4_Primary              `path:"primary" module:"nokia-conf" yangPresence:"true"`
	QosRouteLookup          E_NokiaTypesRouter_QosRouteLookup                               `path:"qos-route-lookup" module:"nokia-conf"`
	Secondary               map[string]*NokiaConf_Configure_Router_Interface_Ipv4_Secondary `path:"secondary" module:"nokia-conf"`
	TcpMss                  *uint32                                                         `path:"tcp-mss" module:"nokia-conf"`
	Unnumbered              *NokiaConf_Configure_Router_Interface_Ipv4_Unnumbered           `path:"unnumbered" module:"nokia-conf"`
	UrpfCheck               *NokiaConf_Configure_Router_Interface_Ipv4_UrpfCheck            `path:"urpf-check" module:"nokia-conf" yangPresence:"true"`
	Vrrp                    map[int32]*NokiaConf_Configure_Router_Interface_Ipv4_Vrrp       `path:"vrrp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_Ipv4) IsYANGGoStruct() {}

// NewSecondary creates a new entry in the Secondary list of the
// NokiaConf_Configure_Router_Interface_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Interface_Ipv4) NewSecondary(Address string) (*NokiaConf_Configure_Router_Interface_Ipv4_Secondary, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Secondary == nil {
		t.Secondary = make(map[string]*NokiaConf_Configure_Router_Interface_Ipv4_Secondary)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Secondary[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Secondary", key)
	}

	t.Secondary[key] = &NokiaConf_Configure_Router_Interface_Ipv4_Secondary{
		Address: &Address,
	}

	return t.Secondary[key], nil
}

// RenameSecondary renames an entry in the list Secondary within
// the NokiaConf_Configure_Router_Interface_Ipv4 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Interface_Ipv4) RenameSecondary(oldK, newK string) error {
	if _, ok := t.Secondary[newK]; ok {
		return fmt.Errorf("key %v already exists in Secondary", newK)
	}

	e, ok := t.Secondary[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Secondary", oldK)
	}
	e.Address = &newK

	t.Secondary[newK] = e
	delete(t.Secondary, oldK)
	return nil
}

// GetOrCreateSecondary retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Interface_Ipv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Interface_Ipv4) GetOrCreateSecondary(Address string) *NokiaConf_Configure_Router_Interface_Ipv4_Secondary {

	key := Address

	if v, ok := t.Secondary[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSecondary(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSecondary got unexpected error: %v", err))
	}
	return v
}

// GetSecondary retrieves the value with the specified key from
// the Secondary map field of NokiaConf_Configure_Router_Interface_Ipv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Interface_Ipv4) GetSecondary(Address string) *NokiaConf_Configure_Router_Interface_Ipv4_Secondary {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Secondary[key]; ok {
		return lm
	}
	return nil
}

// DeleteSecondary deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Interface_Ipv4. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Interface_Ipv4) DeleteSecondary(Address string) {
	key := Address

	delete(t.Secondary, key)
}

// AppendSecondary appends the supplied NokiaConf_Configure_Router_Interface_Ipv4_Secondary struct to the
// list Secondary of NokiaConf_Configure_Router_Interface_Ipv4. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Interface_Ipv4_Secondary already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Interface_Ipv4) AppendSecondary(v *NokiaConf_Configure_Router_Interface_Ipv4_Secondary) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Secondary == nil {
		t.Secondary = make(map[string]*NokiaConf_Configure_Router_Interface_Ipv4_Secondary)
	}

	if _, ok := t.Secondary[key]; ok {
		return fmt.Errorf("duplicate key for list Secondary %v", key)
	}

	t.Secondary[key] = v
	return nil
}

// NewVrrp creates a new entry in the Vrrp list of the
// NokiaConf_Configure_Router_Interface_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Router_Interface_Ipv4) NewVrrp(VirtualRouterId int32) (*NokiaConf_Configure_Router_Interface_Ipv4_Vrrp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vrrp == nil {
		t.Vrrp = make(map[int32]*NokiaConf_Configure_Router_Interface_Ipv4_Vrrp)
	}

	key := VirtualRouterId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vrrp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vrrp", key)
	}

	t.Vrrp[key] = &NokiaConf_Configure_Router_Interface_Ipv4_Vrrp{
		VirtualRouterId: &VirtualRouterId,
	}

	return t.Vrrp[key], nil
}

// RenameVrrp renames an entry in the list Vrrp within
// the NokiaConf_Configure_Router_Interface_Ipv4 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Router_Interface_Ipv4) RenameVrrp(oldK, newK int32) error {
	if _, ok := t.Vrrp[newK]; ok {
		return fmt.Errorf("key %v already exists in Vrrp", newK)
	}

	e, ok := t.Vrrp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Vrrp", oldK)
	}
	e.VirtualRouterId = &newK

	t.Vrrp[newK] = e
	delete(t.Vrrp, oldK)
	return nil
}

// GetOrCreateVrrp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Interface_Ipv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Router_Interface_Ipv4) GetOrCreateVrrp(VirtualRouterId int32) *NokiaConf_Configure_Router_Interface_Ipv4_Vrrp {

	key := VirtualRouterId

	if v, ok := t.Vrrp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVrrp(VirtualRouterId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVrrp got unexpected error: %v", err))
	}
	return v
}

// GetVrrp retrieves the value with the specified key from
// the Vrrp map field of NokiaConf_Configure_Router_Interface_Ipv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Router_Interface_Ipv4) GetVrrp(VirtualRouterId int32) *NokiaConf_Configure_Router_Interface_Ipv4_Vrrp {

	if t == nil {
		return nil
	}

	key := VirtualRouterId

	if lm, ok := t.Vrrp[key]; ok {
		return lm
	}
	return nil
}

// DeleteVrrp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Router_Interface_Ipv4. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Router_Interface_Ipv4) DeleteVrrp(VirtualRouterId int32) {
	key := VirtualRouterId

	delete(t.Vrrp, key)
}

// AppendVrrp appends the supplied NokiaConf_Configure_Router_Interface_Ipv4_Vrrp struct to the
// list Vrrp of NokiaConf_Configure_Router_Interface_Ipv4. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router_Interface_Ipv4_Vrrp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Router_Interface_Ipv4) AppendVrrp(v *NokiaConf_Configure_Router_Interface_Ipv4_Vrrp) error {
	if v.VirtualRouterId == nil {
		return fmt.Errorf("invalid nil key received for VirtualRouterId")
	}

	key := *v.VirtualRouterId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vrrp == nil {
		t.Vrrp = make(map[int32]*NokiaConf_Configure_Router_Interface_Ipv4_Vrrp)
	}

	if _, ok := t.Vrrp[key]; ok {
		return fmt.Errorf("duplicate key for list Vrrp %v", key)
	}

	t.Vrrp[key] = v
	return nil
}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_Ipv4) GetOrCreateBfd() *NokiaConf_Configure_Router_Interface_Ipv4_Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &NokiaConf_Configure_Router_Interface_Ipv4_Bfd{}
	return t.Bfd
}

// GetOrCreateDhcp retrieves the value of the Dhcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_Ipv4) GetOrCreateDhcp() *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp {
	if t.Dhcp != nil {
		return t.Dhcp
	}
	t.Dhcp = &NokiaConf_Configure_Router_Interface_Ipv4_Dhcp{}
	return t.Dhcp
}

// GetOrCreateIcmp retrieves the value of the Icmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_Ipv4) GetOrCreateIcmp() *NokiaConf_Configure_Router_Interface_Ipv4_Icmp {
	if t.Icmp != nil {
		return t.Icmp
	}
	t.Icmp = &NokiaConf_Configure_Router_Interface_Ipv4_Icmp{}
	return t.Icmp
}

// GetOrCreateNeighborDiscovery retrieves the value of the NeighborDiscovery field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_Ipv4) GetOrCreateNeighborDiscovery() *NokiaConf_Configure_Router_Interface_Ipv4_NeighborDiscovery {
	if t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	t.NeighborDiscovery = &NokiaConf_Configure_Router_Interface_Ipv4_NeighborDiscovery{}
	return t.NeighborDiscovery
}

// GetOrCreatePrimary retrieves the value of the Primary field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_Ipv4) GetOrCreatePrimary() *NokiaConf_Configure_Router_Interface_Ipv4_Primary {
	if t.Primary != nil {
		return t.Primary
	}
	t.Primary = &NokiaConf_Configure_Router_Interface_Ipv4_Primary{}
	return t.Primary
}

// GetOrCreateUnnumbered retrieves the value of the Unnumbered field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_Ipv4) GetOrCreateUnnumbered() *NokiaConf_Configure_Router_Interface_Ipv4_Unnumbered {
	if t.Unnumbered != nil {
		return t.Unnumbered
	}
	t.Unnumbered = &NokiaConf_Configure_Router_Interface_Ipv4_Unnumbered{}
	return t.Unnumbered
}

// GetOrCreateUrpfCheck retrieves the value of the UrpfCheck field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_Ipv4) GetOrCreateUrpfCheck() *NokiaConf_Configure_Router_Interface_Ipv4_UrpfCheck {
	if t.UrpfCheck != nil {
		return t.UrpfCheck
	}
	t.UrpfCheck = &NokiaConf_Configure_Router_Interface_Ipv4_UrpfCheck{}
	return t.UrpfCheck
}

// GetBfd returns the value of the Bfd struct pointer
// from NokiaConf_Configure_Router_Interface_Ipv4. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_Ipv4) GetBfd() *NokiaConf_Configure_Router_Interface_Ipv4_Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetDhcp returns the value of the Dhcp struct pointer
// from NokiaConf_Configure_Router_Interface_Ipv4. If the receiver or the field Dhcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_Ipv4) GetDhcp() *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp {
	if t != nil && t.Dhcp != nil {
		return t.Dhcp
	}
	return nil
}

// GetIcmp returns the value of the Icmp struct pointer
// from NokiaConf_Configure_Router_Interface_Ipv4. If the receiver or the field Icmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_Ipv4) GetIcmp() *NokiaConf_Configure_Router_Interface_Ipv4_Icmp {
	if t != nil && t.Icmp != nil {
		return t.Icmp
	}
	return nil
}

// GetNeighborDiscovery returns the value of the NeighborDiscovery struct pointer
// from NokiaConf_Configure_Router_Interface_Ipv4. If the receiver or the field NeighborDiscovery is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_Ipv4) GetNeighborDiscovery() *NokiaConf_Configure_Router_Interface_Ipv4_NeighborDiscovery {
	if t != nil && t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	return nil
}

// GetPrimary returns the value of the Primary struct pointer
// from NokiaConf_Configure_Router_Interface_Ipv4. If the receiver or the field Primary is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_Ipv4) GetPrimary() *NokiaConf_Configure_Router_Interface_Ipv4_Primary {
	if t != nil && t.Primary != nil {
		return t.Primary
	}
	return nil
}

// GetUnnumbered returns the value of the Unnumbered struct pointer
// from NokiaConf_Configure_Router_Interface_Ipv4. If the receiver or the field Unnumbered is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_Ipv4) GetUnnumbered() *NokiaConf_Configure_Router_Interface_Ipv4_Unnumbered {
	if t != nil && t.Unnumbered != nil {
		return t.Unnumbered
	}
	return nil
}

// GetUrpfCheck returns the value of the UrpfCheck struct pointer
// from NokiaConf_Configure_Router_Interface_Ipv4. If the receiver or the field UrpfCheck is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_Ipv4) GetUrpfCheck() *NokiaConf_Configure_Router_Interface_Ipv4_UrpfCheck {
	if t != nil && t.UrpfCheck != nil {
		return t.UrpfCheck
	}
	return nil
}

// GetAllowDirectedBroadcasts retrieves the value of the leaf AllowDirectedBroadcasts from the NokiaConf_Configure_Router_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowDirectedBroadcasts is set, it can
// safely use t.GetAllowDirectedBroadcasts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowDirectedBroadcasts == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ipv4) GetAllowDirectedBroadcasts() bool {
	if t == nil || t.AllowDirectedBroadcasts == nil {
		return false
	}
	return *t.AllowDirectedBroadcasts
}

// GetIpHelperAddress retrieves the value of the leaf IpHelperAddress from the NokiaConf_Configure_Router_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpHelperAddress is set, it can
// safely use t.GetIpHelperAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpHelperAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ipv4) GetIpHelperAddress() string {
	if t == nil || t.IpHelperAddress == nil {
		return ""
	}
	return *t.IpHelperAddress
}

// GetLocalDhcpServer retrieves the value of the leaf LocalDhcpServer from the NokiaConf_Configure_Router_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalDhcpServer is set, it can
// safely use t.GetLocalDhcpServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalDhcpServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ipv4) GetLocalDhcpServer() string {
	if t == nil || t.LocalDhcpServer == nil {
		return ""
	}
	return *t.LocalDhcpServer
}

// GetQosRouteLookup retrieves the value of the leaf QosRouteLookup from the NokiaConf_Configure_Router_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QosRouteLookup is set, it can
// safely use t.GetQosRouteLookup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QosRouteLookup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ipv4) GetQosRouteLookup() E_NokiaTypesRouter_QosRouteLookup {
	if t == nil || t.QosRouteLookup == 0 {
		return 0
	}
	return t.QosRouteLookup
}

// GetTcpMss retrieves the value of the leaf TcpMss from the NokiaConf_Configure_Router_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpMss is set, it can
// safely use t.GetTcpMss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpMss == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ipv4) GetTcpMss() uint32 {
	if t == nil || t.TcpMss == nil {
		return 0
	}
	return *t.TcpMss
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowDirectedBroadcasts == nil {
		var v bool = false
		t.AllowDirectedBroadcasts = &v
	}
	t.Bfd.PopulateDefaults()
	t.Dhcp.PopulateDefaults()
	t.Icmp.PopulateDefaults()
	t.NeighborDiscovery.PopulateDefaults()
	t.Primary.PopulateDefaults()
	t.Unnumbered.PopulateDefaults()
	t.UrpfCheck.PopulateDefaults()
	for _, e := range t.Secondary {
		e.PopulateDefaults()
	}
	for _, e := range t.Vrrp {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_Ipv4.
func (*NokiaConf_Configure_Router_Interface_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_Ipv4_Bfd represents the /nokia-conf/configure/router/interface/ipv4/bfd YANG schema element.
type NokiaConf_Configure_Router_Interface_Ipv4_Bfd struct {
	AdminState       E_NokiaTypesSros_AdminState                          `path:"admin-state" module:"nokia-conf"`
	EchoReceive      *uint32                                              `path:"echo-receive" module:"nokia-conf"`
	Multiplier       *uint32                                              `path:"multiplier" module:"nokia-conf"`
	Receive          *uint32                                              `path:"receive" module:"nokia-conf"`
	TransmitInterval *uint32                                              `path:"transmit-interval" module:"nokia-conf"`
	Type             E_NokiaConf_Configure_Router_Interface_Ipv4_Bfd_Type `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_Ipv4_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_Ipv4_Bfd) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Interface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Bfd) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetEchoReceive retrieves the value of the leaf EchoReceive from the NokiaConf_Configure_Router_Interface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EchoReceive is set, it can
// safely use t.GetEchoReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EchoReceive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Bfd) GetEchoReceive() uint32 {
	if t == nil || t.EchoReceive == nil {
		return 0
	}
	return *t.EchoReceive
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Router_Interface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Bfd) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 3
	}
	return *t.Multiplier
}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Router_Interface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Bfd) GetReceive() uint32 {
	if t == nil || t.Receive == nil {
		return 100
	}
	return *t.Receive
}

// GetTransmitInterval retrieves the value of the leaf TransmitInterval from the NokiaConf_Configure_Router_Interface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitInterval is set, it can
// safely use t.GetTransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Bfd) GetTransmitInterval() uint32 {
	if t == nil || t.TransmitInterval == nil {
		return 100
	}
	return *t.TransmitInterval
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Router_Interface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Bfd) GetType() E_NokiaConf_Configure_Router_Interface_Ipv4_Bfd_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_Router_Interface_Ipv4_Bfd_Type_auto
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_Ipv4_Bfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Bfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Multiplier == nil {
		var v uint32 = 3
		t.Multiplier = &v
	}
	if t.Receive == nil {
		var v uint32 = 100
		t.Receive = &v
	}
	if t.TransmitInterval == nil {
		var v uint32 = 100
		t.TransmitInterval = &v
	}
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_Router_Interface_Ipv4_Bfd_Type_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Bfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_Ipv4_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Bfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Bfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_Ipv4_Bfd.
func (*NokiaConf_Configure_Router_Interface_Ipv4_Bfd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_Ipv4_Dhcp represents the /nokia-conf/configure/router/interface/ipv4/dhcp YANG schema element.
type NokiaConf_Configure_Router_Interface_Ipv4_Dhcp struct {
	AdminState              E_NokiaTypesSros_AdminState                                `path:"admin-state" module:"nokia-conf"`
	ApplyGroups             []string                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Description             *string                                                    `path:"description" module:"nokia-conf"`
	GiAddress               *string                                                    `path:"gi-address" module:"nokia-conf"`
	Option_82               *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82  `path:"option-82" module:"nokia-conf"`
	PythonPolicy            *string                                                    `path:"python-policy" module:"nokia-conf"`
	RelayPlainBootp         *bool                                                      `path:"relay-plain-bootp" module:"nokia-conf"`
	ReleaseIncludeGiAddress *bool                                                      `path:"release-include-gi-address" module:"nokia-conf"`
	Server                  []string                                                   `path:"server" module:"nokia-conf"`
	SrcIpAddr               E_NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_SrcIpAddr `path:"src-ip-addr" module:"nokia-conf"`
	Trusted                 *bool                                                      `path:"trusted" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_Ipv4_Dhcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_Ipv4_Dhcp) IsYANGGoStruct() {}

// GetOrCreateOption_82 retrieves the value of the Option_82 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp) GetOrCreateOption_82() *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82 {
	if t.Option_82 != nil {
		return t.Option_82
	}
	t.Option_82 = &NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82{}
	return t.Option_82
}

// GetOption_82 returns the value of the Option_82 struct pointer
// from NokiaConf_Configure_Router_Interface_Ipv4_Dhcp. If the receiver or the field Option_82 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp) GetOption_82() *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82 {
	if t != nil && t.Option_82 != nil {
		return t.Option_82
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Router_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Router_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Router_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Router_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetGiAddress retrieves the value of the leaf GiAddress from the NokiaConf_Configure_Router_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GiAddress is set, it can
// safely use t.GetGiAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GiAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp) GetGiAddress() string {
	if t == nil || t.GiAddress == nil {
		return ""
	}
	return *t.GiAddress
}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Router_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// GetRelayPlainBootp retrieves the value of the leaf RelayPlainBootp from the NokiaConf_Configure_Router_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RelayPlainBootp is set, it can
// safely use t.GetRelayPlainBootp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RelayPlainBootp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp) GetRelayPlainBootp() bool {
	if t == nil || t.RelayPlainBootp == nil {
		return false
	}
	return *t.RelayPlainBootp
}

// GetReleaseIncludeGiAddress retrieves the value of the leaf ReleaseIncludeGiAddress from the NokiaConf_Configure_Router_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReleaseIncludeGiAddress is set, it can
// safely use t.GetReleaseIncludeGiAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReleaseIncludeGiAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp) GetReleaseIncludeGiAddress() bool {
	if t == nil || t.ReleaseIncludeGiAddress == nil {
		return false
	}
	return *t.ReleaseIncludeGiAddress
}

// GetServer retrieves the value of the leaf Server from the NokiaConf_Configure_Router_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Server is set, it can
// safely use t.GetServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Server == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp) GetServer() []string {
	if t == nil || t.Server == nil {
		return nil
	}
	return t.Server
}

// GetSrcIpAddr retrieves the value of the leaf SrcIpAddr from the NokiaConf_Configure_Router_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrcIpAddr is set, it can
// safely use t.GetSrcIpAddr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrcIpAddr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp) GetSrcIpAddr() E_NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_SrcIpAddr {
	if t == nil || t.SrcIpAddr == 0 {
		return NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_SrcIpAddr_auto
	}
	return t.SrcIpAddr
}

// GetTrusted retrieves the value of the leaf Trusted from the NokiaConf_Configure_Router_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Trusted is set, it can
// safely use t.GetTrusted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Trusted == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp) GetTrusted() bool {
	if t == nil || t.Trusted == nil {
		return false
	}
	return *t.Trusted
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_Ipv4_Dhcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RelayPlainBootp == nil {
		var v bool = false
		t.RelayPlainBootp = &v
	}
	if t.ReleaseIncludeGiAddress == nil {
		var v bool = false
		t.ReleaseIncludeGiAddress = &v
	}
	if t.SrcIpAddr == 0 {
		t.SrcIpAddr = NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_SrcIpAddr_auto
	}
	if t.Trusted == nil {
		var v bool = false
		t.Trusted = &v
	}
	t.Option_82.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_Ipv4_Dhcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_Ipv4_Dhcp.
func (*NokiaConf_Configure_Router_Interface_Ipv4_Dhcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82 represents the /nokia-conf/configure/router/interface/ipv4/dhcp/option-82 YANG schema element.
type NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82 struct {
	Action               E_NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_Action              `path:"action" module:"nokia-conf"`
	CircuitId            *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId            `path:"circuit-id" module:"nokia-conf"`
	RemoteId             *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId             `path:"remote-id" module:"nokia-conf"`
	VendorSpecificOption *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption `path:"vendor-specific-option" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82) IsYANGGoStruct() {}

// GetOrCreateCircuitId retrieves the value of the CircuitId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82) GetOrCreateCircuitId() *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId {
	if t.CircuitId != nil {
		return t.CircuitId
	}
	t.CircuitId = &NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId{}
	return t.CircuitId
}

// GetOrCreateRemoteId retrieves the value of the RemoteId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82) GetOrCreateRemoteId() *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId {
	if t.RemoteId != nil {
		return t.RemoteId
	}
	t.RemoteId = &NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId{}
	return t.RemoteId
}

// GetOrCreateVendorSpecificOption retrieves the value of the VendorSpecificOption field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82) GetOrCreateVendorSpecificOption() *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption {
	if t.VendorSpecificOption != nil {
		return t.VendorSpecificOption
	}
	t.VendorSpecificOption = &NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption{}
	return t.VendorSpecificOption
}

// GetCircuitId returns the value of the CircuitId struct pointer
// from NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82. If the receiver or the field CircuitId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82) GetCircuitId() *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId {
	if t != nil && t.CircuitId != nil {
		return t.CircuitId
	}
	return nil
}

// GetRemoteId returns the value of the RemoteId struct pointer
// from NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82. If the receiver or the field RemoteId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82) GetRemoteId() *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId {
	if t != nil && t.RemoteId != nil {
		return t.RemoteId
	}
	return nil
}

// GetVendorSpecificOption returns the value of the VendorSpecificOption struct pointer
// from NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82. If the receiver or the field VendorSpecificOption is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82) GetVendorSpecificOption() *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption {
	if t != nil && t.VendorSpecificOption != nil {
		return t.VendorSpecificOption
	}
	return nil
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82) GetAction() E_NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_Action {
	if t == nil || t.Action == 0 {
		return NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_Action_keep
	}
	return t.Action
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_Action_keep
	}
	t.CircuitId.PopulateDefaults()
	t.RemoteId.PopulateDefaults()
	t.VendorSpecificOption.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82.
func (*NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId represents the /nokia-conf/configure/router/interface/ipv4/dhcp/option-82/circuit-id YANG schema element.
type NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId struct {
	AsciiTuple     YANGEmpty `path:"ascii-tuple" module:"nokia-conf"`
	IfName         YANGEmpty `path:"if-name" module:"nokia-conf"`
	Ifindex        YANGEmpty `path:"ifindex" module:"nokia-conf"`
	None           YANGEmpty `path:"none" module:"nokia-conf"`
	PortId         YANGEmpty `path:"port-id" module:"nokia-conf"`
	VlanAsciiTuple YANGEmpty `path:"vlan-ascii-tuple" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId) IsYANGGoStruct() {}

// GetAsciiTuple retrieves the value of the leaf AsciiTuple from the NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiTuple is set, it can
// safely use t.GetAsciiTuple() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiTuple == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId) GetAsciiTuple() YANGEmpty {
	if t == nil || t.AsciiTuple == false {
		return false
	}
	return t.AsciiTuple
}

// GetIfName retrieves the value of the leaf IfName from the NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IfName is set, it can
// safely use t.GetIfName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IfName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId) GetIfName() YANGEmpty {
	if t == nil || t.IfName == false {
		return false
	}
	return t.IfName
}

// GetIfindex retrieves the value of the leaf Ifindex from the NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ifindex is set, it can
// safely use t.GetIfindex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ifindex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId) GetIfindex() YANGEmpty {
	if t == nil || t.Ifindex == false {
		return false
	}
	return t.Ifindex
}

// GetNone retrieves the value of the leaf None from the NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if None is set, it can
// safely use t.GetNone() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.None == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId) GetNone() YANGEmpty {
	if t == nil || t.None == false {
		return false
	}
	return t.None
}

// GetPortId retrieves the value of the leaf PortId from the NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortId is set, it can
// safely use t.GetPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId) GetPortId() YANGEmpty {
	if t == nil || t.PortId == false {
		return false
	}
	return t.PortId
}

// GetVlanAsciiTuple retrieves the value of the leaf VlanAsciiTuple from the NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanAsciiTuple is set, it can
// safely use t.GetVlanAsciiTuple() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanAsciiTuple == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId) GetVlanAsciiTuple() YANGEmpty {
	if t == nil || t.VlanAsciiTuple == false {
		return false
	}
	return t.VlanAsciiTuple
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId.
func (*NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId represents the /nokia-conf/configure/router/interface/ipv4/dhcp/option-82/remote-id YANG schema element.
type NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId struct {
	AsciiString *string   `path:"ascii-string" module:"nokia-conf"`
	Mac         YANGEmpty `path:"mac" module:"nokia-conf"`
	None        YANGEmpty `path:"none" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId) IsYANGGoStruct() {}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId) GetMac() YANGEmpty {
	if t == nil || t.Mac == false {
		return false
	}
	return t.Mac
}

// GetNone retrieves the value of the leaf None from the NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if None is set, it can
// safely use t.GetNone() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.None == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId) GetNone() YANGEmpty {
	if t == nil || t.None == false {
		return false
	}
	return t.None
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId.
func (*NokiaConf_Configure_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId) ΛBelongingModule() string {
	return "nokia-conf"
}
