/*
Package ygotsros is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.20.0/genutil/names.go
using the following YANG input files:
	- nokia/YANG/nokia-combined/nokia-conf.yang
Imported modules were sourced from:
	- nokia/YANG/...
*/
package ygotsros

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/sap/sub-sla-mgmt/single-sub-parameters/non-sub-traffic YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic struct {
	AppProfile   *string `path:"app-profile" module:"nokia-conf"`
	SlaProfile   *string `path:"sla-profile" module:"nokia-conf"`
	SubProfile   *string `path:"sub-profile" module:"nokia-conf"`
	SubscriberId *string `path:"subscriber-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic) IsYANGGoStruct() {
}

// GetAppProfile retrieves the value of the leaf AppProfile from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfile is set, it can
// safely use t.GetAppProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic) GetAppProfile() string {
	if t == nil || t.AppProfile == nil {
		return ""
	}
	return *t.AppProfile
}

// GetSlaProfile retrieves the value of the leaf SlaProfile from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlaProfile is set, it can
// safely use t.GetSlaProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlaProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic) GetSlaProfile() string {
	if t == nil || t.SlaProfile == nil {
		return ""
	}
	return *t.SlaProfile
}

// GetSubProfile retrieves the value of the leaf SubProfile from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubProfile is set, it can
// safely use t.GetSubProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic) GetSubProfile() string {
	if t == nil || t.SubProfile == nil {
		return ""
	}
	return *t.SubProfile
}

// GetSubscriberId retrieves the value of the leaf SubscriberId from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubscriberId is set, it can
// safely use t.GetSubscriberId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubscriberId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic) GetSubscriberId() string {
	if t == nil || t.SubscriberId == nil {
		return ""
	}
	return *t.SubscriberId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/srrp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp struct {
	AdminState               E_NokiaTypesSros_AdminState                                                                                      `path:"admin-state" module:"nokia-conf"`
	BfdLiveness              *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_BfdLiveness               `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	Description              *string                                                                                                          `path:"description" module:"nokia-conf"`
	GwMac                    *string                                                                                                          `path:"gw-mac" module:"nokia-conf"`
	KeepAliveInterval        *uint32                                                                                                          `path:"keep-alive-interval" module:"nokia-conf"`
	MessagePath              *string                                                                                                          `path:"message-path" module:"nokia-conf"`
	MonitorOperGroup         *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup          `path:"monitor-oper-group" module:"nokia-conf"`
	OneGarpPerSap            *bool                                                                                                            `path:"one-garp-per-sap" module:"nokia-conf"`
	Policy                   []uint32                                                                                                         `path:"policy" module:"nokia-conf"`
	Preempt                  *bool                                                                                                            `path:"preempt" module:"nokia-conf"`
	Priority                 *uint32                                                                                                          `path:"priority" module:"nokia-conf"`
	SendFibPopulationPackets E_NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_SendFibPopulationPackets `path:"send-fib-population-packets" module:"nokia-conf"`
	SrrpId                   NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_SrrpId_Union               `path:"srrp-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp) IsYANGGoStruct() {
}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp) GetOrCreateBfdLiveness() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_BfdLiveness{}
	return t.BfdLiveness
}

// GetOrCreateMonitorOperGroup retrieves the value of the MonitorOperGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp) GetOrCreateMonitorOperGroup() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup {
	if t.MonitorOperGroup != nil {
		return t.MonitorOperGroup
	}
	t.MonitorOperGroup = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup{}
	return t.MonitorOperGroup
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp) GetBfdLiveness() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetMonitorOperGroup returns the value of the MonitorOperGroup struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp. If the receiver or the field MonitorOperGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp) GetMonitorOperGroup() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup {
	if t != nil && t.MonitorOperGroup != nil {
		return t.MonitorOperGroup
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetGwMac retrieves the value of the leaf GwMac from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GwMac is set, it can
// safely use t.GetGwMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GwMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp) GetGwMac() string {
	if t == nil || t.GwMac == nil {
		return ""
	}
	return *t.GwMac
}

// GetKeepAliveInterval retrieves the value of the leaf KeepAliveInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeepAliveInterval is set, it can
// safely use t.GetKeepAliveInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeepAliveInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp) GetKeepAliveInterval() uint32 {
	if t == nil || t.KeepAliveInterval == nil {
		return 10
	}
	return *t.KeepAliveInterval
}

// GetMessagePath retrieves the value of the leaf MessagePath from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessagePath is set, it can
// safely use t.GetMessagePath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessagePath == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp) GetMessagePath() string {
	if t == nil || t.MessagePath == nil {
		return ""
	}
	return *t.MessagePath
}

// GetOneGarpPerSap retrieves the value of the leaf OneGarpPerSap from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OneGarpPerSap is set, it can
// safely use t.GetOneGarpPerSap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OneGarpPerSap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp) GetOneGarpPerSap() bool {
	if t == nil || t.OneGarpPerSap == nil {
		return false
	}
	return *t.OneGarpPerSap
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp) GetPolicy() []uint32 {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// GetPreempt retrieves the value of the leaf Preempt from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preempt is set, it can
// safely use t.GetPreempt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preempt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp) GetPreempt() bool {
	if t == nil || t.Preempt == nil {
		return true
	}
	return *t.Preempt
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp) GetPriority() uint32 {
	if t == nil || t.Priority == nil {
		return 100
	}
	return *t.Priority
}

// GetSendFibPopulationPackets retrieves the value of the leaf SendFibPopulationPackets from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendFibPopulationPackets is set, it can
// safely use t.GetSendFibPopulationPackets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendFibPopulationPackets == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp) GetSendFibPopulationPackets() E_NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_SendFibPopulationPackets {
	if t == nil || t.SendFibPopulationPackets == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_SendFibPopulationPackets_all
	}
	return t.SendFibPopulationPackets
}

// GetSrrpId retrieves the value of the leaf SrrpId from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrrpId is set, it can
// safely use t.GetSrrpId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrrpId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp) GetSrrpId() NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_SrrpId_Union {
	if t == nil || t.SrrpId == nil {
		return nil
	}
	return t.SrrpId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.KeepAliveInterval == nil {
		var v uint32 = 10
		t.KeepAliveInterval = &v
	}
	if t.OneGarpPerSap == nil {
		var v bool = false
		t.OneGarpPerSap = &v
	}
	if t.Preempt == nil {
		var v bool = true
		t.Preempt = &v
	}
	if t.Priority == nil {
		var v uint32 = 100
		t.Priority = &v
	}
	if t.SendFibPopulationPackets == 0 {
		t.SendFibPopulationPackets = NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_SendFibPopulationPackets_all
	}
	t.BfdLiveness.PopulateDefaults()
	t.MonitorOperGroup.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"srrp-id": t.SrrpId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_BfdLiveness represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/srrp/bfd-liveness YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_BfdLiveness struct {
	DestIp        *string `path:"dest-ip" module:"nokia-conf"`
	InterfaceName *string `path:"interface-name" module:"nokia-conf"`
	ServiceName   *string `path:"service-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_BfdLiveness) IsYANGGoStruct() {
}

// GetDestIp retrieves the value of the leaf DestIp from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestIp is set, it can
// safely use t.GetDestIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_BfdLiveness) GetDestIp() string {
	if t == nil || t.DestIp == nil {
		return ""
	}
	return *t.DestIp
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_BfdLiveness) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_BfdLiveness) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_BfdLiveness.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/srrp/monitor-oper-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup struct {
	GroupName    *string `path:"group-name" module:"nokia-conf"`
	PriorityStep *uint8  `path:"priority-step" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetPriorityStep retrieves the value of the leaf PriorityStep from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityStep is set, it can
// safely use t.GetPriorityStep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityStep == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup) GetPriorityStep() uint8 {
	if t == nil || t.PriorityStep == nil {
		return 0
	}
	return *t.PriorityStep
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Srrp_MonitorOperGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw struct {
	AdminState             E_NokiaTypesSros_AdminState                                                                                        `path:"admin-state" module:"nokia-conf"`
	GatewayAddress         map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress `path:"gateway-address" module:"nokia-conf"`
	GatewayRouter          *string                                                                                                            `path:"gateway-router" module:"nokia-conf"`
	GroupEncryption        *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption           `path:"group-encryption" module:"nokia-conf"`
	L2Ap                   *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap                      `path:"l2-ap" module:"nokia-conf"`
	Lanext                 *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Lanext                    `path:"lanext" module:"nokia-conf" yangPresence:"true"`
	LearnApMac             *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_LearnApMac                `path:"learn-ap-mac" module:"nokia-conf" yangPresence:"true"`
	Mobility               *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility                  `path:"mobility" module:"nokia-conf"`
	OperDownOnGroupDegrade *bool                                                                                                              `path:"oper-down-on-group-degrade" module:"nokia-conf"`
	TcpMssAdjust           *uint32                                                                                                            `path:"tcp-mss-adjust" module:"nokia-conf"`
	TunnelEgressQos        *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos           `path:"tunnel-egress-qos" module:"nokia-conf"`
	TunnelEncaps           *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps              `path:"tunnel-encaps" module:"nokia-conf"`
	VlanRange              map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange      `path:"vlan-range" module:"nokia-conf"`
	WlanGwGroup            *uint32                                                                                                            `path:"wlan-gw-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw) IsYANGGoStruct() {
}

// NewGatewayAddress creates a new entry in the GatewayAddress list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw) NewGatewayAddress(Address string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GatewayAddress == nil {
		t.GatewayAddress = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GatewayAddress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GatewayAddress", key)
	}

	t.GatewayAddress[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress{
		Address: &Address,
	}

	return t.GatewayAddress[key], nil
}

// RenameGatewayAddress renames an entry in the list GatewayAddress within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw) RenameGatewayAddress(oldK, newK string) error {
	if _, ok := t.GatewayAddress[newK]; ok {
		return fmt.Errorf("key %v already exists in GatewayAddress", newK)
	}

	e, ok := t.GatewayAddress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GatewayAddress", oldK)
	}
	e.Address = &newK

	t.GatewayAddress[newK] = e
	delete(t.GatewayAddress, oldK)
	return nil
}

// GetOrCreateGatewayAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw) GetOrCreateGatewayAddress(Address string) *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress {

	key := Address

	if v, ok := t.GatewayAddress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGatewayAddress(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGatewayAddress got unexpected error: %v", err))
	}
	return v
}

// GetGatewayAddress retrieves the value with the specified key from
// the GatewayAddress map field of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw) GetGatewayAddress(Address string) *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.GatewayAddress[key]; ok {
		return lm
	}
	return nil
}

// DeleteGatewayAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw) DeleteGatewayAddress(Address string) {
	key := Address

	delete(t.GatewayAddress, key)
}

// AppendGatewayAddress appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress struct to the
// list GatewayAddress of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw) AppendGatewayAddress(v *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GatewayAddress == nil {
		t.GatewayAddress = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress)
	}

	if _, ok := t.GatewayAddress[key]; ok {
		return fmt.Errorf("duplicate key for list GatewayAddress %v", key)
	}

	t.GatewayAddress[key] = v
	return nil
}

// NewVlanRange creates a new entry in the VlanRange list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw) NewVlanRange(Range string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VlanRange == nil {
		t.VlanRange = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange)
	}

	key := Range

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VlanRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VlanRange", key)
	}

	t.VlanRange[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange{
		Range: &Range,
	}

	return t.VlanRange[key], nil
}

// RenameVlanRange renames an entry in the list VlanRange within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw) RenameVlanRange(oldK, newK string) error {
	if _, ok := t.VlanRange[newK]; ok {
		return fmt.Errorf("key %v already exists in VlanRange", newK)
	}

	e, ok := t.VlanRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VlanRange", oldK)
	}
	e.Range = &newK

	t.VlanRange[newK] = e
	delete(t.VlanRange, oldK)
	return nil
}

// GetOrCreateVlanRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw) GetOrCreateVlanRange(Range string) *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange {

	key := Range

	if v, ok := t.VlanRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVlanRange(Range)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVlanRange got unexpected error: %v", err))
	}
	return v
}

// GetVlanRange retrieves the value with the specified key from
// the VlanRange map field of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw) GetVlanRange(Range string) *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange {

	if t == nil {
		return nil
	}

	key := Range

	if lm, ok := t.VlanRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteVlanRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw) DeleteVlanRange(Range string) {
	key := Range

	delete(t.VlanRange, key)
}

// AppendVlanRange appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange struct to the
// list VlanRange of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw) AppendVlanRange(v *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange) error {
	if v.Range == nil {
		return fmt.Errorf("invalid nil key received for Range")
	}

	key := *v.Range

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VlanRange == nil {
		t.VlanRange = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange)
	}

	if _, ok := t.VlanRange[key]; ok {
		return fmt.Errorf("duplicate key for list VlanRange %v", key)
	}

	t.VlanRange[key] = v
	return nil
}

// GetOrCreateGroupEncryption retrieves the value of the GroupEncryption field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw) GetOrCreateGroupEncryption() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption {
	if t.GroupEncryption != nil {
		return t.GroupEncryption
	}
	t.GroupEncryption = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption{}
	return t.GroupEncryption
}

// GetOrCreateL2Ap retrieves the value of the L2Ap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw) GetOrCreateL2Ap() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap {
	if t.L2Ap != nil {
		return t.L2Ap
	}
	t.L2Ap = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap{}
	return t.L2Ap
}

// GetOrCreateLanext retrieves the value of the Lanext field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw) GetOrCreateLanext() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Lanext {
	if t.Lanext != nil {
		return t.Lanext
	}
	t.Lanext = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Lanext{}
	return t.Lanext
}

// GetOrCreateLearnApMac retrieves the value of the LearnApMac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw) GetOrCreateLearnApMac() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_LearnApMac {
	if t.LearnApMac != nil {
		return t.LearnApMac
	}
	t.LearnApMac = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_LearnApMac{}
	return t.LearnApMac
}

// GetOrCreateMobility retrieves the value of the Mobility field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw) GetOrCreateMobility() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility {
	if t.Mobility != nil {
		return t.Mobility
	}
	t.Mobility = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility{}
	return t.Mobility
}

// GetOrCreateTunnelEgressQos retrieves the value of the TunnelEgressQos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw) GetOrCreateTunnelEgressQos() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos {
	if t.TunnelEgressQos != nil {
		return t.TunnelEgressQos
	}
	t.TunnelEgressQos = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos{}
	return t.TunnelEgressQos
}

// GetOrCreateTunnelEncaps retrieves the value of the TunnelEncaps field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw) GetOrCreateTunnelEncaps() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps {
	if t.TunnelEncaps != nil {
		return t.TunnelEncaps
	}
	t.TunnelEncaps = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps{}
	return t.TunnelEncaps
}

// GetGroupEncryption returns the value of the GroupEncryption struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw. If the receiver or the field GroupEncryption is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw) GetGroupEncryption() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption {
	if t != nil && t.GroupEncryption != nil {
		return t.GroupEncryption
	}
	return nil
}

// GetL2Ap returns the value of the L2Ap struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw. If the receiver or the field L2Ap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw) GetL2Ap() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap {
	if t != nil && t.L2Ap != nil {
		return t.L2Ap
	}
	return nil
}

// GetLanext returns the value of the Lanext struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw. If the receiver or the field Lanext is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw) GetLanext() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Lanext {
	if t != nil && t.Lanext != nil {
		return t.Lanext
	}
	return nil
}

// GetLearnApMac returns the value of the LearnApMac struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw. If the receiver or the field LearnApMac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw) GetLearnApMac() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_LearnApMac {
	if t != nil && t.LearnApMac != nil {
		return t.LearnApMac
	}
	return nil
}

// GetMobility returns the value of the Mobility struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw. If the receiver or the field Mobility is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw) GetMobility() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility {
	if t != nil && t.Mobility != nil {
		return t.Mobility
	}
	return nil
}

// GetTunnelEgressQos returns the value of the TunnelEgressQos struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw. If the receiver or the field TunnelEgressQos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw) GetTunnelEgressQos() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos {
	if t != nil && t.TunnelEgressQos != nil {
		return t.TunnelEgressQos
	}
	return nil
}

// GetTunnelEncaps returns the value of the TunnelEncaps struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw. If the receiver or the field TunnelEncaps is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw) GetTunnelEncaps() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps {
	if t != nil && t.TunnelEncaps != nil {
		return t.TunnelEncaps
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetGatewayRouter retrieves the value of the leaf GatewayRouter from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GatewayRouter is set, it can
// safely use t.GetGatewayRouter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GatewayRouter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw) GetGatewayRouter() string {
	if t == nil || t.GatewayRouter == nil {
		return ""
	}
	return *t.GatewayRouter
}

// GetOperDownOnGroupDegrade retrieves the value of the leaf OperDownOnGroupDegrade from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperDownOnGroupDegrade is set, it can
// safely use t.GetOperDownOnGroupDegrade() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperDownOnGroupDegrade == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw) GetOperDownOnGroupDegrade() bool {
	if t == nil || t.OperDownOnGroupDegrade == nil {
		return false
	}
	return *t.OperDownOnGroupDegrade
}

// GetTcpMssAdjust retrieves the value of the leaf TcpMssAdjust from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpMssAdjust is set, it can
// safely use t.GetTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw) GetTcpMssAdjust() uint32 {
	if t == nil || t.TcpMssAdjust == nil {
		return 0
	}
	return *t.TcpMssAdjust
}

// GetWlanGwGroup retrieves the value of the leaf WlanGwGroup from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WlanGwGroup is set, it can
// safely use t.GetWlanGwGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WlanGwGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw) GetWlanGwGroup() uint32 {
	if t == nil || t.WlanGwGroup == nil {
		return 0
	}
	return *t.WlanGwGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.OperDownOnGroupDegrade == nil {
		var v bool = false
		t.OperDownOnGroupDegrade = &v
	}
	t.GroupEncryption.PopulateDefaults()
	t.L2Ap.PopulateDefaults()
	t.Lanext.PopulateDefaults()
	t.LearnApMac.PopulateDefaults()
	t.Mobility.PopulateDefaults()
	t.TunnelEgressQos.PopulateDefaults()
	t.TunnelEncaps.PopulateDefaults()
	for _, e := range t.GatewayAddress {
		e.PopulateDefaults()
	}
	for _, e := range t.VlanRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/gateway-address YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress struct {
	Address *string                                                                                                         `path:"address" module:"nokia-conf"`
	Purpose *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress_Purpose `path:"purpose" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress) IsYANGGoStruct() {
}

// GetOrCreatePurpose retrieves the value of the Purpose field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress) GetOrCreatePurpose() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress_Purpose {
	if t.Purpose != nil {
		return t.Purpose
	}
	t.Purpose = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress_Purpose{}
	return t.Purpose
}

// GetPurpose returns the value of the Purpose struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress. If the receiver or the field Purpose is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress) GetPurpose() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress_Purpose {
	if t != nil && t.Purpose != nil {
		return t.Purpose
	}
	return nil
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Purpose.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress_Purpose represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/gateway-address/purpose YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress_Purpose struct {
	Xconnect *bool `path:"xconnect" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress_Purpose implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress_Purpose) IsYANGGoStruct() {
}

// GetXconnect retrieves the value of the leaf Xconnect from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress_Purpose
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Xconnect is set, it can
// safely use t.GetXconnect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Xconnect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress_Purpose) GetXconnect() bool {
	if t == nil || t.Xconnect == nil {
		return false
	}
	return *t.Xconnect
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress_Purpose
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress_Purpose) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Xconnect == nil {
		var v bool = false
		t.Xconnect = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress_Purpose) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress_Purpose"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress_Purpose) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress_Purpose) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress_Purpose.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GatewayAddress_Purpose) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/group-encryption YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption struct {
	EncryptionKeygroupInbound  *uint32 `path:"encryption-keygroup-inbound" module:"nokia-conf"`
	EncryptionKeygroupOutbound *uint32 `path:"encryption-keygroup-outbound" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption) IsYANGGoStruct() {
}

// GetEncryptionKeygroupInbound retrieves the value of the leaf EncryptionKeygroupInbound from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncryptionKeygroupInbound is set, it can
// safely use t.GetEncryptionKeygroupInbound() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncryptionKeygroupInbound == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption) GetEncryptionKeygroupInbound() uint32 {
	if t == nil || t.EncryptionKeygroupInbound == nil {
		return 0
	}
	return *t.EncryptionKeygroupInbound
}

// GetEncryptionKeygroupOutbound retrieves the value of the leaf EncryptionKeygroupOutbound from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncryptionKeygroupOutbound is set, it can
// safely use t.GetEncryptionKeygroupOutbound() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncryptionKeygroupOutbound == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption) GetEncryptionKeygroupOutbound() uint32 {
	if t == nil || t.EncryptionKeygroupOutbound == nil {
		return 0
	}
	return *t.EncryptionKeygroupOutbound
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_GroupEncryption) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/l2-ap YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap struct {
	AccessPoint      map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint `path:"access-point" module:"nokia-conf"`
	AutoSubIdFmt     E_NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AutoSubIdFmt          `path:"auto-sub-id-fmt" module:"nokia-conf"`
	DefaultEncapType E_NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_DefaultEncapType      `path:"default-encap-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap) IsYANGGoStruct() {
}

// NewAccessPoint creates a new entry in the AccessPoint list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap) NewAccessPoint(SapId string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AccessPoint == nil {
		t.AccessPoint = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint)
	}

	key := SapId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AccessPoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AccessPoint", key)
	}

	t.AccessPoint[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint{
		SapId: &SapId,
	}

	return t.AccessPoint[key], nil
}

// RenameAccessPoint renames an entry in the list AccessPoint within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap) RenameAccessPoint(oldK, newK string) error {
	if _, ok := t.AccessPoint[newK]; ok {
		return fmt.Errorf("key %v already exists in AccessPoint", newK)
	}

	e, ok := t.AccessPoint[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AccessPoint", oldK)
	}
	e.SapId = &newK

	t.AccessPoint[newK] = e
	delete(t.AccessPoint, oldK)
	return nil
}

// GetOrCreateAccessPoint retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap) GetOrCreateAccessPoint(SapId string) *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint {

	key := SapId

	if v, ok := t.AccessPoint[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAccessPoint(SapId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAccessPoint got unexpected error: %v", err))
	}
	return v
}

// GetAccessPoint retrieves the value with the specified key from
// the AccessPoint map field of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap) GetAccessPoint(SapId string) *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint {

	if t == nil {
		return nil
	}

	key := SapId

	if lm, ok := t.AccessPoint[key]; ok {
		return lm
	}
	return nil
}

// DeleteAccessPoint deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap) DeleteAccessPoint(SapId string) {
	key := SapId

	delete(t.AccessPoint, key)
}

// AppendAccessPoint appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint struct to the
// list AccessPoint of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap) AppendAccessPoint(v *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint) error {
	if v.SapId == nil {
		return fmt.Errorf("invalid nil key received for SapId")
	}

	key := *v.SapId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AccessPoint == nil {
		t.AccessPoint = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint)
	}

	if _, ok := t.AccessPoint[key]; ok {
		return fmt.Errorf("duplicate key for list AccessPoint %v", key)
	}

	t.AccessPoint[key] = v
	return nil
}

// GetAutoSubIdFmt retrieves the value of the leaf AutoSubIdFmt from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoSubIdFmt is set, it can
// safely use t.GetAutoSubIdFmt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoSubIdFmt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap) GetAutoSubIdFmt() E_NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AutoSubIdFmt {
	if t == nil || t.AutoSubIdFmt == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AutoSubIdFmt_include_ap_tags
	}
	return t.AutoSubIdFmt
}

// GetDefaultEncapType retrieves the value of the leaf DefaultEncapType from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultEncapType is set, it can
// safely use t.GetDefaultEncapType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultEncapType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap) GetDefaultEncapType() E_NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_DefaultEncapType {
	if t == nil || t.DefaultEncapType == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_DefaultEncapType_null
	}
	return t.DefaultEncapType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AutoSubIdFmt == 0 {
		t.AutoSubIdFmt = NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AutoSubIdFmt_include_ap_tags
	}
	if t.DefaultEncapType == 0 {
		t.DefaultEncapType = NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_DefaultEncapType_null
	}
	for _, e := range t.AccessPoint {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/l2-ap/access-point YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint struct {
	AdminState       E_NokiaTypesSros_AdminState                                                                                          `path:"admin-state" module:"nokia-conf"`
	EncapType        E_NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint_EncapType `path:"encap-type" module:"nokia-conf"`
	EpipeSapTemplate *string                                                                                                              `path:"epipe-sap-template" module:"nokia-conf"`
	SapId            *string                                                                                                              `path:"sap-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetEncapType retrieves the value of the leaf EncapType from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncapType is set, it can
// safely use t.GetEncapType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncapType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint) GetEncapType() E_NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint_EncapType {
	if t == nil || t.EncapType == 0 {
		return 0
	}
	return t.EncapType
}

// GetEpipeSapTemplate retrieves the value of the leaf EpipeSapTemplate from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EpipeSapTemplate is set, it can
// safely use t.GetEpipeSapTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EpipeSapTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint) GetEpipeSapTemplate() string {
	if t == nil || t.EpipeSapTemplate == nil {
		return ""
	}
	return *t.EpipeSapTemplate
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SapId == nil {
		return nil, fmt.Errorf("nil value for key SapId")
	}

	return map[string]interface{}{
		"sap-id": *t.SapId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_L2Ap_AccessPoint) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Lanext represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/lanext YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Lanext struct {
	MaxBd *uint32 `path:"max-bd" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Lanext implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Lanext) IsYANGGoStruct() {
}

// GetMaxBd retrieves the value of the leaf MaxBd from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Lanext
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxBd is set, it can
// safely use t.GetMaxBd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxBd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Lanext) GetMaxBd() uint32 {
	if t == nil || t.MaxBd == nil {
		return 131071
	}
	return *t.MaxBd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Lanext
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Lanext) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxBd == nil {
		var v uint32 = 131071
		t.MaxBd = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Lanext) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Lanext"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Lanext) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Lanext) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Lanext.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Lanext) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_LearnApMac represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/learn-ap-mac YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_LearnApMac struct {
	DelayAuth *bool `path:"delay-auth" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_LearnApMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_LearnApMac) IsYANGGoStruct() {
}

// GetDelayAuth retrieves the value of the leaf DelayAuth from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_LearnApMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DelayAuth is set, it can
// safely use t.GetDelayAuth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DelayAuth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_LearnApMac) GetDelayAuth() bool {
	if t == nil || t.DelayAuth == nil {
		return false
	}
	return *t.DelayAuth
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_LearnApMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_LearnApMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DelayAuth == nil {
		var v bool = false
		t.DelayAuth = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_LearnApMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_LearnApMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_LearnApMac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_LearnApMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_LearnApMac.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_LearnApMac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/mobility YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility struct {
	HoldTime        *uint32                                                                                                   `path:"hold-time" module:"nokia-conf"`
	InterTunnelType *bool                                                                                                     `path:"inter-tunnel-type" module:"nokia-conf"`
	InterVlan       *bool                                                                                                     `path:"inter-vlan" module:"nokia-conf"`
	Trigger         *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger `path:"trigger" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility) IsYANGGoStruct() {
}

// GetOrCreateTrigger retrieves the value of the Trigger field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility) GetOrCreateTrigger() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger {
	if t.Trigger != nil {
		return t.Trigger
	}
	t.Trigger = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger{}
	return t.Trigger
}

// GetTrigger returns the value of the Trigger struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility. If the receiver or the field Trigger is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility) GetTrigger() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger {
	if t != nil && t.Trigger != nil {
		return t.Trigger
	}
	return nil
}

// GetHoldTime retrieves the value of the leaf HoldTime from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTime is set, it can
// safely use t.GetHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility) GetHoldTime() uint32 {
	if t == nil || t.HoldTime == nil {
		return 5
	}
	return *t.HoldTime
}

// GetInterTunnelType retrieves the value of the leaf InterTunnelType from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterTunnelType is set, it can
// safely use t.GetInterTunnelType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterTunnelType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility) GetInterTunnelType() bool {
	if t == nil || t.InterTunnelType == nil {
		return false
	}
	return *t.InterTunnelType
}

// GetInterVlan retrieves the value of the leaf InterVlan from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterVlan is set, it can
// safely use t.GetInterVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterVlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility) GetInterVlan() bool {
	if t == nil || t.InterVlan == nil {
		return false
	}
	return *t.InterVlan
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HoldTime == nil {
		var v uint32 = 5
		t.HoldTime = &v
	}
	if t.InterTunnelType == nil {
		var v bool = false
		t.InterTunnelType = &v
	}
	if t.InterVlan == nil {
		var v bool = false
		t.InterVlan = &v
	}
	t.Trigger.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/mobility/trigger YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger struct {
	Control *bool `path:"control" module:"nokia-conf"`
	Data    *bool `path:"data" module:"nokia-conf"`
	Iapp    *bool `path:"iapp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger) IsYANGGoStruct() {
}

// GetControl retrieves the value of the leaf Control from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Control is set, it can
// safely use t.GetControl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Control == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger) GetControl() bool {
	if t == nil || t.Control == nil {
		return false
	}
	return *t.Control
}

// GetData retrieves the value of the leaf Data from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Data is set, it can
// safely use t.GetData() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Data == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger) GetData() bool {
	if t == nil || t.Data == nil {
		return false
	}
	return *t.Data
}

// GetIapp retrieves the value of the leaf Iapp from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Iapp is set, it can
// safely use t.GetIapp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Iapp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger) GetIapp() bool {
	if t == nil || t.Iapp == nil {
		return false
	}
	return *t.Iapp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Control == nil {
		var v bool = false
		t.Control = &v
	}
	if t.Data == nil {
		var v bool = false
		t.Data = &v
	}
	if t.Iapp == nil {
		var v bool = false
		t.Iapp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_Mobility_Trigger) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/tunnel-egress-qos YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos struct {
	AdminState      E_NokiaTypesSros_AdminState                                                                                                `path:"admin-state" module:"nokia-conf"`
	AggRateLimit    NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos_AggRateLimit_Union `path:"agg-rate-limit" module:"nokia-conf"`
	Granularity     E_NokiaTypesWlangw_ShapingGranularity                                                                                      `path:"granularity" module:"nokia-conf"`
	HoldTime        NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos_HoldTime_Union     `path:"hold-time" module:"nokia-conf"`
	MultiClientOnly *bool                                                                                                                      `path:"multi-client-only" module:"nokia-conf"`
	Qos             *string                                                                                                                    `path:"qos" module:"nokia-conf"`
	SchedulerPolicy *string                                                                                                                    `path:"scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAggRateLimit retrieves the value of the leaf AggRateLimit from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AggRateLimit is set, it can
// safely use t.GetAggRateLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AggRateLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos) GetAggRateLimit() NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos_AggRateLimit_Union {
	if t == nil || t.AggRateLimit == nil {
		return NokiaTypesQos_PirRateOverride_Enum_max
	}
	return t.AggRateLimit
}

// GetGranularity retrieves the value of the leaf Granularity from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Granularity is set, it can
// safely use t.GetGranularity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Granularity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos) GetGranularity() E_NokiaTypesWlangw_ShapingGranularity {
	if t == nil || t.Granularity == 0 {
		return NokiaTypesWlangw_ShapingGranularity_per_tunnel
	}
	return t.Granularity
}

// GetHoldTime retrieves the value of the leaf HoldTime from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTime is set, it can
// safely use t.GetHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos) GetHoldTime() NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos_HoldTime_Union {
	if t == nil || t.HoldTime == nil {
		return nil
	}
	return t.HoldTime
}

// GetMultiClientOnly retrieves the value of the leaf MultiClientOnly from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultiClientOnly is set, it can
// safely use t.GetMultiClientOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultiClientOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos) GetMultiClientOnly() bool {
	if t == nil || t.MultiClientOnly == nil {
		return false
	}
	return *t.MultiClientOnly
}

// GetQos retrieves the value of the leaf Qos from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Qos is set, it can
// safely use t.GetQos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Qos == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos) GetQos() string {
	if t == nil || t.Qos == nil {
		return ""
	}
	return *t.Qos
}

// GetSchedulerPolicy retrieves the value of the leaf SchedulerPolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerPolicy is set, it can
// safely use t.GetSchedulerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos) GetSchedulerPolicy() string {
	if t == nil || t.SchedulerPolicy == nil {
		return ""
	}
	return *t.SchedulerPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AggRateLimit == nil {
		t.AggRateLimit = NokiaTypesQos_PirRateOverride_Enum_max
	}
	if t.Granularity == 0 {
		t.Granularity = NokiaTypesWlangw_ShapingGranularity_per_tunnel
	}
	if t.MultiClientOnly == nil {
		var v bool = false
		t.MultiClientOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEgressQos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/tunnel-encaps YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps struct {
	LearnL2TpCookie NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps_LearnL2TpCookie_Union `path:"learn-l2tp-cookie" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps) IsYANGGoStruct() {
}

// GetLearnL2TpCookie retrieves the value of the leaf LearnL2TpCookie from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LearnL2TpCookie is set, it can
// safely use t.GetLearnL2TpCookie() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LearnL2TpCookie == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps) GetLearnL2TpCookie() NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps_LearnL2TpCookie_Union {
	if t == nil || t.LearnL2TpCookie == nil {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps_LearnL2TpCookie_Enum_never
	}
	return t.LearnL2TpCookie
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LearnL2TpCookie == nil {
		t.LearnL2TpCookie = NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps_LearnL2TpCookie_Enum_never
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_TunnelEncaps) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/vlan-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange struct {
	Authentication          *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication          `path:"authentication" module:"nokia-conf"`
	DataTriggeredUeCreation *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation `path:"data-triggered-ue-creation" module:"nokia-conf"`
	Dhcp4                   *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4                   `path:"dhcp4" module:"nokia-conf"`
	Dhcp6                   *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6                   `path:"dhcp6" module:"nokia-conf" yangPresence:"true"`
	Dsm                     *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm                     `path:"dsm" module:"nokia-conf" yangPresence:"true"`
	Extension               map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension    `path:"extension" module:"nokia-conf"`
	HttpRedirectPolicy      *string                                                                                                                    `path:"http-redirect-policy" module:"nokia-conf"`
	IdleTimeoutAction       E_NokiaTypesWlangw_IdleTimeoutAction                                                                                       `path:"idle-timeout-action" module:"nokia-conf"`
	L2Service               *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service               `path:"l2-service" module:"nokia-conf" yangPresence:"true"`
	NatPolicy               *string                                                                                                                    `path:"nat-policy" module:"nokia-conf"`
	Range                   *string                                                                                                                    `path:"range" module:"nokia-conf"`
	RetailService           *string                                                                                                                    `path:"retail-service" module:"nokia-conf"`
	Slaac                   *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac                   `path:"slaac" module:"nokia-conf" yangPresence:"true"`
	Vrgw                    *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw                    `path:"vrgw" module:"nokia-conf" yangPresence:"true"`
	Xconnect                *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect                `path:"xconnect" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange) IsYANGGoStruct() {
}

// NewExtension creates a new entry in the Extension list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange) NewExtension(ExtensionRange string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Extension == nil {
		t.Extension = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension)
	}

	key := ExtensionRange

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Extension[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Extension", key)
	}

	t.Extension[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension{
		ExtensionRange: &ExtensionRange,
	}

	return t.Extension[key], nil
}

// RenameExtension renames an entry in the list Extension within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange) RenameExtension(oldK, newK string) error {
	if _, ok := t.Extension[newK]; ok {
		return fmt.Errorf("key %v already exists in Extension", newK)
	}

	e, ok := t.Extension[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Extension", oldK)
	}
	e.ExtensionRange = &newK

	t.Extension[newK] = e
	delete(t.Extension, oldK)
	return nil
}

// GetOrCreateExtension retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetOrCreateExtension(ExtensionRange string) *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension {

	key := ExtensionRange

	if v, ok := t.Extension[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExtension(ExtensionRange)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExtension got unexpected error: %v", err))
	}
	return v
}

// GetExtension retrieves the value with the specified key from
// the Extension map field of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetExtension(ExtensionRange string) *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension {

	if t == nil {
		return nil
	}

	key := ExtensionRange

	if lm, ok := t.Extension[key]; ok {
		return lm
	}
	return nil
}

// DeleteExtension deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange) DeleteExtension(ExtensionRange string) {
	key := ExtensionRange

	delete(t.Extension, key)
}

// AppendExtension appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension struct to the
// list Extension of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange) AppendExtension(v *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension) error {
	if v.ExtensionRange == nil {
		return fmt.Errorf("invalid nil key received for ExtensionRange")
	}

	key := *v.ExtensionRange

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Extension == nil {
		t.Extension = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension)
	}

	if _, ok := t.Extension[key]; ok {
		return fmt.Errorf("duplicate key for list Extension %v", key)
	}

	t.Extension[key] = v
	return nil
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetOrCreateAuthentication() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication{}
	return t.Authentication
}

// GetOrCreateDataTriggeredUeCreation retrieves the value of the DataTriggeredUeCreation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetOrCreateDataTriggeredUeCreation() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation {
	if t.DataTriggeredUeCreation != nil {
		return t.DataTriggeredUeCreation
	}
	t.DataTriggeredUeCreation = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation{}
	return t.DataTriggeredUeCreation
}

// GetOrCreateDhcp4 retrieves the value of the Dhcp4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetOrCreateDhcp4() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4 {
	if t.Dhcp4 != nil {
		return t.Dhcp4
	}
	t.Dhcp4 = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4{}
	return t.Dhcp4
}

// GetOrCreateDhcp6 retrieves the value of the Dhcp6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetOrCreateDhcp6() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6 {
	if t.Dhcp6 != nil {
		return t.Dhcp6
	}
	t.Dhcp6 = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6{}
	return t.Dhcp6
}

// GetOrCreateDsm retrieves the value of the Dsm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetOrCreateDsm() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm {
	if t.Dsm != nil {
		return t.Dsm
	}
	t.Dsm = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm{}
	return t.Dsm
}

// GetOrCreateL2Service retrieves the value of the L2Service field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetOrCreateL2Service() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service {
	if t.L2Service != nil {
		return t.L2Service
	}
	t.L2Service = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service{}
	return t.L2Service
}

// GetOrCreateSlaac retrieves the value of the Slaac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetOrCreateSlaac() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac {
	if t.Slaac != nil {
		return t.Slaac
	}
	t.Slaac = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac{}
	return t.Slaac
}

// GetOrCreateVrgw retrieves the value of the Vrgw field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetOrCreateVrgw() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw {
	if t.Vrgw != nil {
		return t.Vrgw
	}
	t.Vrgw = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw{}
	return t.Vrgw
}

// GetOrCreateXconnect retrieves the value of the Xconnect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetOrCreateXconnect() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect {
	if t.Xconnect != nil {
		return t.Xconnect
	}
	t.Xconnect = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect{}
	return t.Xconnect
}

// GetAuthentication returns the value of the Authentication struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetAuthentication() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetDataTriggeredUeCreation returns the value of the DataTriggeredUeCreation struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange. If the receiver or the field DataTriggeredUeCreation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetDataTriggeredUeCreation() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation {
	if t != nil && t.DataTriggeredUeCreation != nil {
		return t.DataTriggeredUeCreation
	}
	return nil
}

// GetDhcp4 returns the value of the Dhcp4 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange. If the receiver or the field Dhcp4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetDhcp4() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4 {
	if t != nil && t.Dhcp4 != nil {
		return t.Dhcp4
	}
	return nil
}

// GetDhcp6 returns the value of the Dhcp6 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange. If the receiver or the field Dhcp6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetDhcp6() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6 {
	if t != nil && t.Dhcp6 != nil {
		return t.Dhcp6
	}
	return nil
}

// GetDsm returns the value of the Dsm struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange. If the receiver or the field Dsm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetDsm() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm {
	if t != nil && t.Dsm != nil {
		return t.Dsm
	}
	return nil
}

// GetL2Service returns the value of the L2Service struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange. If the receiver or the field L2Service is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetL2Service() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service {
	if t != nil && t.L2Service != nil {
		return t.L2Service
	}
	return nil
}

// GetSlaac returns the value of the Slaac struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange. If the receiver or the field Slaac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetSlaac() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac {
	if t != nil && t.Slaac != nil {
		return t.Slaac
	}
	return nil
}

// GetVrgw returns the value of the Vrgw struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange. If the receiver or the field Vrgw is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetVrgw() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw {
	if t != nil && t.Vrgw != nil {
		return t.Vrgw
	}
	return nil
}

// GetXconnect returns the value of the Xconnect struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange. If the receiver or the field Xconnect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetXconnect() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect {
	if t != nil && t.Xconnect != nil {
		return t.Xconnect
	}
	return nil
}

// GetHttpRedirectPolicy retrieves the value of the leaf HttpRedirectPolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HttpRedirectPolicy is set, it can
// safely use t.GetHttpRedirectPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HttpRedirectPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetHttpRedirectPolicy() string {
	if t == nil || t.HttpRedirectPolicy == nil {
		return ""
	}
	return *t.HttpRedirectPolicy
}

// GetIdleTimeoutAction retrieves the value of the leaf IdleTimeoutAction from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleTimeoutAction is set, it can
// safely use t.GetIdleTimeoutAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleTimeoutAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetIdleTimeoutAction() E_NokiaTypesWlangw_IdleTimeoutAction {
	if t == nil || t.IdleTimeoutAction == 0 {
		return NokiaTypesWlangw_IdleTimeoutAction_remove
	}
	return t.IdleTimeoutAction
}

// GetNatPolicy retrieves the value of the leaf NatPolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatPolicy is set, it can
// safely use t.GetNatPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetNatPolicy() string {
	if t == nil || t.NatPolicy == nil {
		return ""
	}
	return *t.NatPolicy
}

// GetRange retrieves the value of the leaf Range from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Range is set, it can
// safely use t.GetRange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Range == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetRange() string {
	if t == nil || t.Range == nil {
		return ""
	}
	return *t.Range
}

// GetRetailService retrieves the value of the leaf RetailService from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetailService is set, it can
// safely use t.GetRetailService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetailService == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange) GetRetailService() string {
	if t == nil || t.RetailService == nil {
		return ""
	}
	return *t.RetailService
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IdleTimeoutAction == 0 {
		t.IdleTimeoutAction = NokiaTypesWlangw_IdleTimeoutAction_remove
	}
	t.Authentication.PopulateDefaults()
	t.DataTriggeredUeCreation.PopulateDefaults()
	t.Dhcp4.PopulateDefaults()
	t.Dhcp6.PopulateDefaults()
	t.Dsm.PopulateDefaults()
	t.L2Service.PopulateDefaults()
	t.Slaac.PopulateDefaults()
	t.Vrgw.PopulateDefaults()
	t.Xconnect.PopulateDefaults()
	for _, e := range t.Extension {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Range == nil {
		return nil, fmt.Errorf("nil value for key Range")
	}

	return map[string]interface{}{
		"range": *t.Range,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/vlan-range/authentication YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication struct {
	HoldTime            *uint32                                                                                                                 `path:"hold-time" module:"nokia-conf"`
	Local               *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local `path:"local" module:"nokia-conf" yangPresence:"true"`
	OnControlPlane      *bool                                                                                                                   `path:"on-control-plane" module:"nokia-conf"`
	Policy              *string                                                                                                                 `path:"policy" module:"nokia-conf"`
	VlanMismatchTimeout *uint32                                                                                                                 `path:"vlan-mismatch-timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication) IsYANGGoStruct() {
}

// GetOrCreateLocal retrieves the value of the Local field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication) GetOrCreateLocal() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local {
	if t.Local != nil {
		return t.Local
	}
	t.Local = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local{}
	return t.Local
}

// GetLocal returns the value of the Local struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication. If the receiver or the field Local is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication) GetLocal() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local {
	if t != nil && t.Local != nil {
		return t.Local
	}
	return nil
}

// GetHoldTime retrieves the value of the leaf HoldTime from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTime is set, it can
// safely use t.GetHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication) GetHoldTime() uint32 {
	if t == nil || t.HoldTime == nil {
		return 5
	}
	return *t.HoldTime
}

// GetOnControlPlane retrieves the value of the leaf OnControlPlane from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OnControlPlane is set, it can
// safely use t.GetOnControlPlane() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OnControlPlane == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication) GetOnControlPlane() bool {
	if t == nil || t.OnControlPlane == nil {
		return false
	}
	return *t.OnControlPlane
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// GetVlanMismatchTimeout retrieves the value of the leaf VlanMismatchTimeout from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanMismatchTimeout is set, it can
// safely use t.GetVlanMismatchTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanMismatchTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication) GetVlanMismatchTimeout() uint32 {
	if t == nil || t.VlanMismatchTimeout == nil {
		return 0
	}
	return *t.VlanMismatchTimeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HoldTime == nil {
		var v uint32 = 5
		t.HoldTime = &v
	}
	if t.OnControlPlane == nil {
		var v bool = false
		t.OnControlPlane = &v
	}
	t.Local.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/vlan-range/authentication/local YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local struct {
	CoaPolicy      *string                                                                                                                                 `path:"coa-policy" module:"nokia-conf"`
	DefaultUeState E_NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local_DefaultUeState `path:"default-ue-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local) IsYANGGoStruct() {
}

// GetCoaPolicy retrieves the value of the leaf CoaPolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CoaPolicy is set, it can
// safely use t.GetCoaPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CoaPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local) GetCoaPolicy() string {
	if t == nil || t.CoaPolicy == nil {
		return ""
	}
	return *t.CoaPolicy
}

// GetDefaultUeState retrieves the value of the leaf DefaultUeState from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultUeState is set, it can
// safely use t.GetDefaultUeState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultUeState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local) GetDefaultUeState() E_NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local_DefaultUeState {
	if t == nil || t.DefaultUeState == 0 {
		return 0
	}
	return t.DefaultUeState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Authentication_Local) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/vlan-range/data-triggered-ue-creation YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation struct {
	AdminState            E_NokiaTypesSros_AdminState                                                                                                                      `path:"admin-state" module:"nokia-conf"`
	CreateProxyCacheEntry *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry `path:"create-proxy-cache-entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation) IsYANGGoStruct() {
}

// GetOrCreateCreateProxyCacheEntry retrieves the value of the CreateProxyCacheEntry field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation) GetOrCreateCreateProxyCacheEntry() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry {
	if t.CreateProxyCacheEntry != nil {
		return t.CreateProxyCacheEntry
	}
	t.CreateProxyCacheEntry = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry{}
	return t.CreateProxyCacheEntry
}

// GetCreateProxyCacheEntry returns the value of the CreateProxyCacheEntry struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation. If the receiver or the field CreateProxyCacheEntry is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation) GetCreateProxyCacheEntry() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry {
	if t != nil && t.CreateProxyCacheEntry != nil {
		return t.CreateProxyCacheEntry
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.CreateProxyCacheEntry.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/vlan-range/data-triggered-ue-creation/create-proxy-cache-entry YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry struct {
	MacFormat   *string                                                                                                                                                      `path:"mac-format" module:"nokia-conf"`
	ProxyServer *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer `path:"proxy-server" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry) IsYANGGoStruct() {
}

// GetOrCreateProxyServer retrieves the value of the ProxyServer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry) GetOrCreateProxyServer() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer {
	if t.ProxyServer != nil {
		return t.ProxyServer
	}
	t.ProxyServer = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer{}
	return t.ProxyServer
}

// GetProxyServer returns the value of the ProxyServer struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry. If the receiver or the field ProxyServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry) GetProxyServer() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer {
	if t != nil && t.ProxyServer != nil {
		return t.ProxyServer
	}
	return nil
}

// GetMacFormat retrieves the value of the leaf MacFormat from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacFormat is set, it can
// safely use t.GetMacFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacFormat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry) GetMacFormat() string {
	if t == nil || t.MacFormat == nil {
		return "aa:"
	}
	return *t.MacFormat
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MacFormat == nil {
		var v string = "aa:"
		t.MacFormat = &v
	}
	t.ProxyServer.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/vlan-range/data-triggered-ue-creation/create-proxy-cache-entry/proxy-server YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer struct {
	Name           *string `path:"name" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer) IsYANGGoStruct() {
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_DataTriggeredUeCreation_CreateProxyCacheEntry_ProxyServer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4 represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/vlan-range/dhcp4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4 struct {
	AdminState       E_NokiaTypesSros_AdminState                                                                                                    `path:"admin-state" module:"nokia-conf"`
	Dns              []string                                                                                                                       `path:"dns" module:"nokia-conf"`
	L2AwareIpAddress NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_L2AwareIpAddress_Union `path:"l2-aware-ip-address" module:"nokia-conf"`
	LeaseTime        *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime             `path:"lease-time" module:"nokia-conf"`
	Nbns             []string                                                                                                                       `path:"nbns" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4) IsYANGGoStruct() {
}

// GetOrCreateLeaseTime retrieves the value of the LeaseTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4) GetOrCreateLeaseTime() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime {
	if t.LeaseTime != nil {
		return t.LeaseTime
	}
	t.LeaseTime = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime{}
	return t.LeaseTime
}

// GetLeaseTime returns the value of the LeaseTime struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4. If the receiver or the field LeaseTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4) GetLeaseTime() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime {
	if t != nil && t.LeaseTime != nil {
		return t.LeaseTime
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDns retrieves the value of the leaf Dns from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dns is set, it can
// safely use t.GetDns() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dns == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4) GetDns() []string {
	if t == nil || t.Dns == nil {
		return nil
	}
	return t.Dns
}

// GetL2AwareIpAddress retrieves the value of the leaf L2AwareIpAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2AwareIpAddress is set, it can
// safely use t.GetL2AwareIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2AwareIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4) GetL2AwareIpAddress() NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_L2AwareIpAddress_Union {
	if t == nil || t.L2AwareIpAddress == nil {
		return nil
	}
	return t.L2AwareIpAddress
}

// GetNbns retrieves the value of the leaf Nbns from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Nbns is set, it can
// safely use t.GetNbns() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Nbns == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4) GetNbns() []string {
	if t == nil || t.Nbns == nil {
		return nil
	}
	return t.Nbns
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.LeaseTime.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/vlan-range/dhcp4/lease-time YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime struct {
	Active  *uint32 `path:"active" module:"nokia-conf"`
	Initial *uint32 `path:"initial" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime) IsYANGGoStruct() {
}

// GetActive retrieves the value of the leaf Active from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Active is set, it can
// safely use t.GetActive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Active == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime) GetActive() uint32 {
	if t == nil || t.Active == nil {
		return 600
	}
	return *t.Active
}

// GetInitial retrieves the value of the leaf Initial from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Initial is set, it can
// safely use t.GetInitial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Initial == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime) GetInitial() uint32 {
	if t == nil || t.Initial == nil {
		return 600
	}
	return *t.Initial
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Active == nil {
		var v uint32 = 600
		t.Active = &v
	}
	if t.Initial == nil {
		var v uint32 = 600
		t.Initial = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp4_LeaseTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6 represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/vlan-range/dhcp6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6 struct {
	AdminState        E_NokiaTypesSros_AdminState                                                                                                `path:"admin-state" module:"nokia-conf"`
	PreferredLifetime *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime `path:"preferred-lifetime" module:"nokia-conf"`
	ValidLifetime     *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime     `path:"valid-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6) IsYANGGoStruct() {
}

// GetOrCreatePreferredLifetime retrieves the value of the PreferredLifetime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6) GetOrCreatePreferredLifetime() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime {
	if t.PreferredLifetime != nil {
		return t.PreferredLifetime
	}
	t.PreferredLifetime = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime{}
	return t.PreferredLifetime
}

// GetOrCreateValidLifetime retrieves the value of the ValidLifetime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6) GetOrCreateValidLifetime() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime {
	if t.ValidLifetime != nil {
		return t.ValidLifetime
	}
	t.ValidLifetime = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime{}
	return t.ValidLifetime
}

// GetPreferredLifetime returns the value of the PreferredLifetime struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6. If the receiver or the field PreferredLifetime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6) GetPreferredLifetime() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime {
	if t != nil && t.PreferredLifetime != nil {
		return t.PreferredLifetime
	}
	return nil
}

// GetValidLifetime returns the value of the ValidLifetime struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6. If the receiver or the field ValidLifetime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6) GetValidLifetime() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime {
	if t != nil && t.ValidLifetime != nil {
		return t.ValidLifetime
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.PreferredLifetime.PopulateDefaults()
	t.ValidLifetime.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/vlan-range/dhcp6/preferred-lifetime YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime struct {
	Active  *uint32 `path:"active" module:"nokia-conf"`
	Initial *uint32 `path:"initial" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime) IsYANGGoStruct() {
}

// GetActive retrieves the value of the leaf Active from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Active is set, it can
// safely use t.GetActive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Active == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime) GetActive() uint32 {
	if t == nil || t.Active == nil {
		return 600
	}
	return *t.Active
}

// GetInitial retrieves the value of the leaf Initial from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Initial is set, it can
// safely use t.GetInitial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Initial == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime) GetInitial() uint32 {
	if t == nil || t.Initial == nil {
		return 300
	}
	return *t.Initial
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Active == nil {
		var v uint32 = 600
		t.Active = &v
	}
	if t.Initial == nil {
		var v uint32 = 300
		t.Initial = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_PreferredLifetime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/vlan-range/dhcp6/valid-lifetime YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime struct {
	Active  *uint32 `path:"active" module:"nokia-conf"`
	Initial *uint32 `path:"initial" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime) IsYANGGoStruct() {
}

// GetActive retrieves the value of the leaf Active from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Active is set, it can
// safely use t.GetActive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Active == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime) GetActive() uint32 {
	if t == nil || t.Active == nil {
		return 600
	}
	return *t.Active
}

// GetInitial retrieves the value of the leaf Initial from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Initial is set, it can
// safely use t.GetInitial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Initial == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime) GetInitial() uint32 {
	if t == nil || t.Initial == nil {
		return 300
	}
	return *t.Initial
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Active == nil {
		var v uint32 = 600
		t.Active = &v
	}
	if t.Initial == nil {
		var v uint32 = 300
		t.Initial = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dhcp6_ValidLifetime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/vlan-range/dsm YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm struct {
	AccountingPolicy     *string                                                                                                                      `path:"accounting-policy" module:"nokia-conf"`
	AccountingUpdate     *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_AccountingUpdate      `path:"accounting-update" module:"nokia-conf" yangPresence:"true"`
	AdminState           E_NokiaTypesSros_AdminState                                                                                                  `path:"admin-state" module:"nokia-conf"`
	ApplicationAssurance *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance  `path:"application-assurance" module:"nokia-conf"`
	Egress               *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Egress                `path:"egress" module:"nokia-conf"`
	Ingress              *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress               `path:"ingress" module:"nokia-conf"`
	OneTimeRedirect      *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect       `path:"one-time-redirect" module:"nokia-conf"`
	VolumeQuotaDirection E_NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_VolumeQuotaDirection `path:"volume-quota-direction" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) IsYANGGoStruct() {
}

// GetOrCreateAccountingUpdate retrieves the value of the AccountingUpdate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) GetOrCreateAccountingUpdate() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_AccountingUpdate {
	if t.AccountingUpdate != nil {
		return t.AccountingUpdate
	}
	t.AccountingUpdate = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_AccountingUpdate{}
	return t.AccountingUpdate
}

// GetOrCreateApplicationAssurance retrieves the value of the ApplicationAssurance field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) GetOrCreateApplicationAssurance() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance {
	if t.ApplicationAssurance != nil {
		return t.ApplicationAssurance
	}
	t.ApplicationAssurance = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance{}
	return t.ApplicationAssurance
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Egress{}
	return t.Egress
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress{}
	return t.Ingress
}

// GetOrCreateOneTimeRedirect retrieves the value of the OneTimeRedirect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) GetOrCreateOneTimeRedirect() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect {
	if t.OneTimeRedirect != nil {
		return t.OneTimeRedirect
	}
	t.OneTimeRedirect = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect{}
	return t.OneTimeRedirect
}

// GetAccountingUpdate returns the value of the AccountingUpdate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm. If the receiver or the field AccountingUpdate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) GetAccountingUpdate() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_AccountingUpdate {
	if t != nil && t.AccountingUpdate != nil {
		return t.AccountingUpdate
	}
	return nil
}

// GetApplicationAssurance returns the value of the ApplicationAssurance struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm. If the receiver or the field ApplicationAssurance is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) GetApplicationAssurance() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance {
	if t != nil && t.ApplicationAssurance != nil {
		return t.ApplicationAssurance
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) GetEgress() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) GetIngress() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetOneTimeRedirect returns the value of the OneTimeRedirect struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm. If the receiver or the field OneTimeRedirect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) GetOneTimeRedirect() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect {
	if t != nil && t.OneTimeRedirect != nil {
		return t.OneTimeRedirect
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) GetAccountingPolicy() string {
	if t == nil || t.AccountingPolicy == nil {
		return ""
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetVolumeQuotaDirection retrieves the value of the leaf VolumeQuotaDirection from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VolumeQuotaDirection is set, it can
// safely use t.GetVolumeQuotaDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VolumeQuotaDirection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) GetVolumeQuotaDirection() E_NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_VolumeQuotaDirection {
	if t == nil || t.VolumeQuotaDirection == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_VolumeQuotaDirection_both
	}
	return t.VolumeQuotaDirection
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.VolumeQuotaDirection == 0 {
		t.VolumeQuotaDirection = NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_VolumeQuotaDirection_both
	}
	t.AccountingUpdate.PopulateDefaults()
	t.ApplicationAssurance.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.OneTimeRedirect.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_AccountingUpdate represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/vlan-range/dsm/accounting-update YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_AccountingUpdate struct {
	Interval *uint32 `path:"interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_AccountingUpdate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_AccountingUpdate) IsYANGGoStruct() {
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_AccountingUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_AccountingUpdate) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_AccountingUpdate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_AccountingUpdate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_AccountingUpdate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_AccountingUpdate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_AccountingUpdate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_AccountingUpdate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_AccountingUpdate.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_AccountingUpdate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/vlan-range/dsm/application-assurance YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance struct {
	AccountingStatistics *bool   `path:"accounting-statistics" module:"nokia-conf"`
	Profile              *string `path:"profile" module:"nokia-conf"`
	UrlParameter         *string `path:"url-parameter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance) IsYANGGoStruct() {
}

// GetAccountingStatistics retrieves the value of the leaf AccountingStatistics from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingStatistics is set, it can
// safely use t.GetAccountingStatistics() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingStatistics == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance) GetAccountingStatistics() bool {
	if t == nil || t.AccountingStatistics == nil {
		return false
	}
	return *t.AccountingStatistics
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance) GetProfile() string {
	if t == nil || t.Profile == nil {
		return ""
	}
	return *t.Profile
}

// GetUrlParameter retrieves the value of the leaf UrlParameter from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UrlParameter is set, it can
// safely use t.GetUrlParameter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UrlParameter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance) GetUrlParameter() string {
	if t == nil || t.UrlParameter == nil {
		return ""
	}
	return *t.UrlParameter
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AccountingStatistics == nil {
		var v bool = false
		t.AccountingStatistics = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_ApplicationAssurance) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Egress represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/vlan-range/dsm/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Egress struct {
	Policer *string `path:"policer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Egress) IsYANGGoStruct() {
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Egress) GetPolicer() string {
	if t == nil || t.Policer == nil {
		return ""
	}
	return *t.Policer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Egress.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/vlan-range/dsm/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress struct {
	IpFilter                 *string `path:"ip-filter" module:"nokia-conf"`
	Policer                  *string `path:"policer" module:"nokia-conf"`
	SoftQuotaExhaustedFilter *string `path:"soft-quota-exhausted-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress) IsYANGGoStruct() {
}

// GetIpFilter retrieves the value of the leaf IpFilter from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpFilter is set, it can
// safely use t.GetIpFilter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpFilter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress) GetIpFilter() string {
	if t == nil || t.IpFilter == nil {
		return ""
	}
	return *t.IpFilter
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress) GetPolicer() string {
	if t == nil || t.Policer == nil {
		return ""
	}
	return *t.Policer
}

// GetSoftQuotaExhaustedFilter retrieves the value of the leaf SoftQuotaExhaustedFilter from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SoftQuotaExhaustedFilter is set, it can
// safely use t.GetSoftQuotaExhaustedFilter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SoftQuotaExhaustedFilter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress) GetSoftQuotaExhaustedFilter() string {
	if t == nil || t.SoftQuotaExhaustedFilter == nil {
		return ""
	}
	return *t.SoftQuotaExhaustedFilter
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/vlan-range/dsm/one-time-redirect YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect struct {
	Port *uint32 `path:"port" module:"nokia-conf"`
	Url  *string `path:"url" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect) IsYANGGoStruct() {
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect) GetPort() uint32 {
	if t == nil || t.Port == nil {
		return 80
	}
	return *t.Port
}

// GetUrl retrieves the value of the leaf Url from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Url is set, it can
// safely use t.GetUrl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Url == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect) GetUrl() string {
	if t == nil || t.Url == nil {
		return ""
	}
	return *t.Url
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Port == nil {
		var v uint32 = 80
		t.Port = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Dsm_OneTimeRedirect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/vlan-range/extension YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension struct {
	ExtensionRange *string `path:"extension-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension) IsYANGGoStruct() {
}

// GetExtensionRange retrieves the value of the leaf ExtensionRange from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtensionRange is set, it can
// safely use t.GetExtensionRange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtensionRange == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension) GetExtensionRange() string {
	if t == nil || t.ExtensionRange == nil {
		return ""
	}
	return *t.ExtensionRange
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ExtensionRange == nil {
		return nil, fmt.Errorf("nil value for key ExtensionRange")
	}

	return map[string]interface{}{
		"extension-range": *t.ExtensionRange,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Extension) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/vlan-range/l2-service YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service struct {
	AdminState  E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Description *string                     `path:"description" module:"nokia-conf"`
	Service     *string                     `path:"service" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetService retrieves the value of the leaf Service from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Service is set, it can
// safely use t.GetService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Service == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service) GetService() string {
	if t == nil || t.Service == nil {
		return ""
	}
	return *t.Service
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_L2Service) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/vlan-range/slaac YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac struct {
	AdminState        E_NokiaTypesSros_AdminState                                                                                                `path:"admin-state" module:"nokia-conf"`
	PreferredLifetime *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime `path:"preferred-lifetime" module:"nokia-conf"`
	ValidLifetime     *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime     `path:"valid-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac) IsYANGGoStruct() {
}

// GetOrCreatePreferredLifetime retrieves the value of the PreferredLifetime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac) GetOrCreatePreferredLifetime() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime {
	if t.PreferredLifetime != nil {
		return t.PreferredLifetime
	}
	t.PreferredLifetime = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime{}
	return t.PreferredLifetime
}

// GetOrCreateValidLifetime retrieves the value of the ValidLifetime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac) GetOrCreateValidLifetime() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime {
	if t.ValidLifetime != nil {
		return t.ValidLifetime
	}
	t.ValidLifetime = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime{}
	return t.ValidLifetime
}

// GetPreferredLifetime returns the value of the PreferredLifetime struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac. If the receiver or the field PreferredLifetime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac) GetPreferredLifetime() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime {
	if t != nil && t.PreferredLifetime != nil {
		return t.PreferredLifetime
	}
	return nil
}

// GetValidLifetime returns the value of the ValidLifetime struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac. If the receiver or the field ValidLifetime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac) GetValidLifetime() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime {
	if t != nil && t.ValidLifetime != nil {
		return t.ValidLifetime
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.PreferredLifetime.PopulateDefaults()
	t.ValidLifetime.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/vlan-range/slaac/preferred-lifetime YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime struct {
	Active  *uint32 `path:"active" module:"nokia-conf"`
	Initial *uint32 `path:"initial" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime) IsYANGGoStruct() {
}

// GetActive retrieves the value of the leaf Active from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Active is set, it can
// safely use t.GetActive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Active == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime) GetActive() uint32 {
	if t == nil || t.Active == nil {
		return 600
	}
	return *t.Active
}

// GetInitial retrieves the value of the leaf Initial from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Initial is set, it can
// safely use t.GetInitial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Initial == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime) GetInitial() uint32 {
	if t == nil || t.Initial == nil {
		return 300
	}
	return *t.Initial
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Active == nil {
		var v uint32 = 600
		t.Active = &v
	}
	if t.Initial == nil {
		var v uint32 = 300
		t.Initial = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_PreferredLifetime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/vlan-range/slaac/valid-lifetime YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime struct {
	Active  *uint32 `path:"active" module:"nokia-conf"`
	Initial *uint32 `path:"initial" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime) IsYANGGoStruct() {
}

// GetActive retrieves the value of the leaf Active from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Active is set, it can
// safely use t.GetActive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Active == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime) GetActive() uint32 {
	if t == nil || t.Active == nil {
		return 600
	}
	return *t.Active
}

// GetInitial retrieves the value of the leaf Initial from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Initial is set, it can
// safely use t.GetInitial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Initial == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime) GetInitial() uint32 {
	if t == nil || t.Initial == nil {
		return 300
	}
	return *t.Initial
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Active == nil {
		var v uint32 = 600
		t.Active = &v
	}
	if t.Initial == nil {
		var v uint32 = 300
		t.Initial = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Slaac_ValidLifetime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/vlan-range/vrgw YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw struct {
	AdminState E_NokiaTypesSros_AdminState                                                                                    `path:"admin-state" module:"nokia-conf"`
	Brg        *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg    `path:"brg" module:"nokia-conf"`
	Lanext     *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext `path:"lanext" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw) IsYANGGoStruct() {
}

// GetOrCreateBrg retrieves the value of the Brg field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw) GetOrCreateBrg() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg {
	if t.Brg != nil {
		return t.Brg
	}
	t.Brg = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg{}
	return t.Brg
}

// GetOrCreateLanext retrieves the value of the Lanext field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw) GetOrCreateLanext() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext {
	if t.Lanext != nil {
		return t.Lanext
	}
	t.Lanext = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext{}
	return t.Lanext
}

// GetBrg returns the value of the Brg struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw. If the receiver or the field Brg is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw) GetBrg() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg {
	if t != nil && t.Brg != nil {
		return t.Brg
	}
	return nil
}

// GetLanext returns the value of the Lanext struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw. If the receiver or the field Lanext is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw) GetLanext() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext {
	if t != nil && t.Lanext != nil {
		return t.Lanext
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Brg.PopulateDefaults()
	t.Lanext.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/vlan-range/vrgw/brg YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg struct {
	AuthenticatedBrgOnly *bool   `path:"authenticated-brg-only" module:"nokia-conf"`
	DefaultBrgProfile    *string `path:"default-brg-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg) IsYANGGoStruct() {
}

// GetAuthenticatedBrgOnly retrieves the value of the leaf AuthenticatedBrgOnly from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticatedBrgOnly is set, it can
// safely use t.GetAuthenticatedBrgOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticatedBrgOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg) GetAuthenticatedBrgOnly() bool {
	if t == nil || t.AuthenticatedBrgOnly == nil {
		return false
	}
	return *t.AuthenticatedBrgOnly
}

// GetDefaultBrgProfile retrieves the value of the leaf DefaultBrgProfile from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultBrgProfile is set, it can
// safely use t.GetDefaultBrgProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultBrgProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg) GetDefaultBrgProfile() string {
	if t == nil || t.DefaultBrgProfile == nil {
		return ""
	}
	return *t.DefaultBrgProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AuthenticatedBrgOnly == nil {
		var v bool = false
		t.AuthenticatedBrgOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Brg) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/vlan-range/vrgw/lanext YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext struct {
	Access                     *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access  `path:"access" module:"nokia-conf"`
	AdminState                 E_NokiaTypesSros_AdminState                                                                                            `path:"admin-state" module:"nokia-conf"`
	AssistiveAddressResolution *bool                                                                                                                  `path:"assistive-address-resolution" module:"nokia-conf"`
	BdMacPrefix                *string                                                                                                                `path:"bd-mac-prefix" module:"nokia-conf"`
	MacTranslation             *bool                                                                                                                  `path:"mac-translation" module:"nokia-conf"`
	Network                    *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network `path:"network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext) IsYANGGoStruct() {
}

// GetOrCreateAccess retrieves the value of the Access field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext) GetOrCreateAccess() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access {
	if t.Access != nil {
		return t.Access
	}
	t.Access = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access{}
	return t.Access
}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext) GetOrCreateNetwork() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network{}
	return t.Network
}

// GetAccess returns the value of the Access struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext. If the receiver or the field Access is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext) GetAccess() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access {
	if t != nil && t.Access != nil {
		return t.Access
	}
	return nil
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext) GetNetwork() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAssistiveAddressResolution retrieves the value of the leaf AssistiveAddressResolution from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AssistiveAddressResolution is set, it can
// safely use t.GetAssistiveAddressResolution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AssistiveAddressResolution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext) GetAssistiveAddressResolution() bool {
	if t == nil || t.AssistiveAddressResolution == nil {
		return false
	}
	return *t.AssistiveAddressResolution
}

// GetBdMacPrefix retrieves the value of the leaf BdMacPrefix from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BdMacPrefix is set, it can
// safely use t.GetBdMacPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BdMacPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext) GetBdMacPrefix() string {
	if t == nil || t.BdMacPrefix == nil {
		return ""
	}
	return *t.BdMacPrefix
}

// GetMacTranslation retrieves the value of the leaf MacTranslation from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacTranslation is set, it can
// safely use t.GetMacTranslation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacTranslation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext) GetMacTranslation() bool {
	if t == nil || t.MacTranslation == nil {
		return false
	}
	return *t.MacTranslation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AssistiveAddressResolution == nil {
		var v bool = false
		t.AssistiveAddressResolution = &v
	}
	if t.MacTranslation == nil {
		var v bool = false
		t.MacTranslation = &v
	}
	t.Access.PopulateDefaults()
	t.Network.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/vlan-range/vrgw/lanext/access YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access struct {
	MaxMac      *uint32 `path:"max-mac" module:"nokia-conf"`
	MultiAccess *bool   `path:"multi-access" module:"nokia-conf"`
	Policer     *string `path:"policer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access) IsYANGGoStruct() {
}

// GetMaxMac retrieves the value of the leaf MaxMac from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxMac is set, it can
// safely use t.GetMaxMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access) GetMaxMac() uint32 {
	if t == nil || t.MaxMac == nil {
		return 20
	}
	return *t.MaxMac
}

// GetMultiAccess retrieves the value of the leaf MultiAccess from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultiAccess is set, it can
// safely use t.GetMultiAccess() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultiAccess == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access) GetMultiAccess() bool {
	if t == nil || t.MultiAccess == nil {
		return false
	}
	return *t.MultiAccess
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access) GetPolicer() string {
	if t == nil || t.Policer == nil {
		return ""
	}
	return *t.Policer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxMac == nil {
		var v uint32 = 20
		t.MaxMac = &v
	}
	if t.MultiAccess == nil {
		var v bool = false
		t.MultiAccess = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Access) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/vlan-range/vrgw/lanext/network YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	MaxMac     *uint32                     `path:"max-mac" module:"nokia-conf"`
	Policer    *string                     `path:"policer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetMaxMac retrieves the value of the leaf MaxMac from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxMac is set, it can
// safely use t.GetMaxMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network) GetMaxMac() uint32 {
	if t == nil || t.MaxMac == nil {
		return 20
	}
	return *t.MaxMac
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network) GetPolicer() string {
	if t == nil || t.Policer == nil {
		return ""
	}
	return *t.Policer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.MaxMac == nil {
		var v uint32 = 20
		t.MaxMac = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Vrgw_Lanext_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/vlan-range/xconnect YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect struct {
	Accounting *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting `path:"accounting" module:"nokia-conf"`
	AdminState E_NokiaTypesSros_AdminState                                                                                            `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect) IsYANGGoStruct() {
}

// GetOrCreateAccounting retrieves the value of the Accounting field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect) GetOrCreateAccounting() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting {
	if t.Accounting != nil {
		return t.Accounting
	}
	t.Accounting = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting{}
	return t.Accounting
}

// GetAccounting returns the value of the Accounting struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect. If the receiver or the field Accounting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect) GetAccounting() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting {
	if t != nil && t.Accounting != nil {
		return t.Accounting
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Accounting.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wlan-gw/vlan-range/xconnect/accounting YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting struct {
	MobilityUpdates *bool   `path:"mobility-updates" module:"nokia-conf"`
	Policy          *string `path:"policy" module:"nokia-conf"`
	UpdateInterval  *uint32 `path:"update-interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting) IsYANGGoStruct() {
}

// GetMobilityUpdates retrieves the value of the leaf MobilityUpdates from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MobilityUpdates is set, it can
// safely use t.GetMobilityUpdates() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MobilityUpdates == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting) GetMobilityUpdates() bool {
	if t == nil || t.MobilityUpdates == nil {
		return false
	}
	return *t.MobilityUpdates
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// GetUpdateInterval retrieves the value of the leaf UpdateInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UpdateInterval is set, it can
// safely use t.GetUpdateInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UpdateInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting) GetUpdateInterval() uint32 {
	if t == nil || t.UpdateInterval == nil {
		return 0
	}
	return *t.UpdateInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MobilityUpdates == nil {
		var v bool = false
		t.MobilityUpdates = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_WlanGw_VlanRange_Xconnect_Accounting) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wpp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp struct {
	AdminState                   E_NokiaTypesSros_AdminState                                                                   `path:"admin-state" module:"nokia-conf"`
	Initial                      *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Initial `path:"initial" module:"nokia-conf"`
	LeaseTime                    *uint32                                                                                       `path:"lease-time" module:"nokia-conf"`
	Portal                       *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Portal  `path:"portal" module:"nokia-conf"`
	RestoreToInitialOnDisconnect *bool                                                                                         `path:"restore-to-initial-on-disconnect" module:"nokia-conf"`
	TriggeredHosts               *bool                                                                                         `path:"triggered-hosts" module:"nokia-conf"`
	UserDb                       *string                                                                                       `path:"user-db" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp) IsYANGGoStruct() {
}

// GetOrCreateInitial retrieves the value of the Initial field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp) GetOrCreateInitial() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Initial {
	if t.Initial != nil {
		return t.Initial
	}
	t.Initial = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Initial{}
	return t.Initial
}

// GetOrCreatePortal retrieves the value of the Portal field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp) GetOrCreatePortal() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Portal {
	if t.Portal != nil {
		return t.Portal
	}
	t.Portal = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Portal{}
	return t.Portal
}

// GetInitial returns the value of the Initial struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp. If the receiver or the field Initial is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp) GetInitial() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Initial {
	if t != nil && t.Initial != nil {
		return t.Initial
	}
	return nil
}

// GetPortal returns the value of the Portal struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp. If the receiver or the field Portal is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp) GetPortal() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Portal {
	if t != nil && t.Portal != nil {
		return t.Portal
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetLeaseTime retrieves the value of the leaf LeaseTime from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LeaseTime is set, it can
// safely use t.GetLeaseTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LeaseTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp) GetLeaseTime() uint32 {
	if t == nil || t.LeaseTime == nil {
		return 600
	}
	return *t.LeaseTime
}

// GetRestoreToInitialOnDisconnect retrieves the value of the leaf RestoreToInitialOnDisconnect from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RestoreToInitialOnDisconnect is set, it can
// safely use t.GetRestoreToInitialOnDisconnect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RestoreToInitialOnDisconnect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp) GetRestoreToInitialOnDisconnect() bool {
	if t == nil || t.RestoreToInitialOnDisconnect == nil {
		return true
	}
	return *t.RestoreToInitialOnDisconnect
}

// GetTriggeredHosts retrieves the value of the leaf TriggeredHosts from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TriggeredHosts is set, it can
// safely use t.GetTriggeredHosts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TriggeredHosts == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp) GetTriggeredHosts() bool {
	if t == nil || t.TriggeredHosts == nil {
		return false
	}
	return *t.TriggeredHosts
}

// GetUserDb retrieves the value of the leaf UserDb from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserDb is set, it can
// safely use t.GetUserDb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserDb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp) GetUserDb() string {
	if t == nil || t.UserDb == nil {
		return ""
	}
	return *t.UserDb
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.LeaseTime == nil {
		var v uint32 = 600
		t.LeaseTime = &v
	}
	if t.RestoreToInitialOnDisconnect == nil {
		var v bool = true
		t.RestoreToInitialOnDisconnect = &v
	}
	if t.TriggeredHosts == nil {
		var v bool = false
		t.TriggeredHosts = &v
	}
	t.Initial.PopulateDefaults()
	t.Portal.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Initial represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wpp/initial YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Initial struct {
	AppProfile *string `path:"app-profile" module:"nokia-conf"`
	SlaProfile *string `path:"sla-profile" module:"nokia-conf"`
	SubProfile *string `path:"sub-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Initial implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Initial) IsYANGGoStruct() {
}

// GetAppProfile retrieves the value of the leaf AppProfile from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Initial
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfile is set, it can
// safely use t.GetAppProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Initial) GetAppProfile() string {
	if t == nil || t.AppProfile == nil {
		return ""
	}
	return *t.AppProfile
}

// GetSlaProfile retrieves the value of the leaf SlaProfile from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Initial
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlaProfile is set, it can
// safely use t.GetSlaProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlaProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Initial) GetSlaProfile() string {
	if t == nil || t.SlaProfile == nil {
		return ""
	}
	return *t.SlaProfile
}

// GetSubProfile retrieves the value of the leaf SubProfile from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Initial
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubProfile is set, it can
// safely use t.GetSubProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Initial) GetSubProfile() string {
	if t == nil || t.SubProfile == nil {
		return ""
	}
	return *t.SubProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Initial
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Initial) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Initial) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Initial"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Initial) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Initial) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Initial.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Initial) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Portal represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/group-interface/wpp/portal YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Portal struct {
	Name           *string `path:"name" module:"nokia-conf"`
	PortalGroup    *string `path:"portal-group" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Portal implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Portal) IsYANGGoStruct() {
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Portal) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPortalGroup retrieves the value of the leaf PortalGroup from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortalGroup is set, it can
// safely use t.GetPortalGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortalGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Portal) GetPortalGroup() string {
	if t == nil || t.PortalGroup == nil {
		return ""
	}
	return *t.PortalGroup
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Portal) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Portal
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Portal) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Portal) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Portal"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Portal) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Portal) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Portal.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_GroupInterface_Wpp_Portal) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/hold-time YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime struct {
	Ipv4 *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4 `path:"ipv4" module:"nokia-conf"`
	Ipv6 *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6 `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime) GetOrCreateIpv6() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6{}
	return t.Ipv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime) GetIpv4() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime) GetIpv6() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4 represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/hold-time/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4 struct {
	Down *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Down `path:"down" module:"nokia-conf"`
	Up   *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Up   `path:"up" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4) IsYANGGoStruct() {
}

// GetOrCreateDown retrieves the value of the Down field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4) GetOrCreateDown() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Down {
	if t.Down != nil {
		return t.Down
	}
	t.Down = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Down{}
	return t.Down
}

// GetOrCreateUp retrieves the value of the Up field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4) GetOrCreateUp() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Up {
	if t.Up != nil {
		return t.Up
	}
	t.Up = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Up{}
	return t.Up
}

// GetDown returns the value of the Down struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4. If the receiver or the field Down is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4) GetDown() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Down {
	if t != nil && t.Down != nil {
		return t.Down
	}
	return nil
}

// GetUp returns the value of the Up struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4. If the receiver or the field Up is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4) GetUp() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Up {
	if t != nil && t.Up != nil {
		return t.Up
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Down.PopulateDefaults()
	t.Up.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Down represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/hold-time/ipv4/down YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Down struct {
	InitOnly *bool   `path:"init-only" module:"nokia-conf"`
	Seconds  *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Down implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Down) IsYANGGoStruct() {
}

// GetInitOnly retrieves the value of the leaf InitOnly from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitOnly is set, it can
// safely use t.GetInitOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Down) GetInitOnly() bool {
	if t == nil || t.InitOnly == nil {
		return false
	}
	return *t.InitOnly
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Down) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Down
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Down) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitOnly == nil {
		var v bool = false
		t.InitOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Down) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Down"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Down) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Down) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Down.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Down) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Up represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/hold-time/ipv4/up YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Up struct {
	Seconds *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Up implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Up) IsYANGGoStruct() {
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Up
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Up) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Up
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Up) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Up) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Up"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Up) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Up) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Up.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv4_Up) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6 represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/hold-time/ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6 struct {
	Down *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Down `path:"down" module:"nokia-conf"`
	Up   *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Up   `path:"up" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6) IsYANGGoStruct() {
}

// GetOrCreateDown retrieves the value of the Down field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6) GetOrCreateDown() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Down {
	if t.Down != nil {
		return t.Down
	}
	t.Down = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Down{}
	return t.Down
}

// GetOrCreateUp retrieves the value of the Up field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6) GetOrCreateUp() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Up {
	if t.Up != nil {
		return t.Up
	}
	t.Up = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Up{}
	return t.Up
}

// GetDown returns the value of the Down struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6. If the receiver or the field Down is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6) GetDown() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Down {
	if t != nil && t.Down != nil {
		return t.Down
	}
	return nil
}

// GetUp returns the value of the Up struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6. If the receiver or the field Up is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6) GetUp() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Up {
	if t != nil && t.Up != nil {
		return t.Up
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Down.PopulateDefaults()
	t.Up.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Down represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/hold-time/ipv6/down YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Down struct {
	InitOnly *bool   `path:"init-only" module:"nokia-conf"`
	Seconds  *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Down implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Down) IsYANGGoStruct() {
}

// GetInitOnly retrieves the value of the leaf InitOnly from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitOnly is set, it can
// safely use t.GetInitOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Down) GetInitOnly() bool {
	if t == nil || t.InitOnly == nil {
		return false
	}
	return *t.InitOnly
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Down) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Down
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Down) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitOnly == nil {
		var v bool = false
		t.InitOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Down) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Down"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Down) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Down) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Down.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Down) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Up represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/hold-time/ipv6/up YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Up struct {
	Seconds *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Up implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Up) IsYANGGoStruct() {
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Up
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Up) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Up
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Up) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Up) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Up"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Up) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Up) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Up.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_HoldTime_Ipv6_Up) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_IpoeLinking represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipoe-linking YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_IpoeLinking struct {
	GratuitousRouterAdvertisement *bool `path:"gratuitous-router-advertisement" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_IpoeLinking implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_IpoeLinking) IsYANGGoStruct() {
}

// GetGratuitousRouterAdvertisement retrieves the value of the leaf GratuitousRouterAdvertisement from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_IpoeLinking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GratuitousRouterAdvertisement is set, it can
// safely use t.GetGratuitousRouterAdvertisement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GratuitousRouterAdvertisement == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_IpoeLinking) GetGratuitousRouterAdvertisement() bool {
	if t == nil || t.GratuitousRouterAdvertisement == nil {
		return false
	}
	return *t.GratuitousRouterAdvertisement
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_IpoeLinking
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_IpoeLinking) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.GratuitousRouterAdvertisement == nil {
		var v bool = false
		t.GratuitousRouterAdvertisement = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_IpoeLinking) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_IpoeLinking"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_IpoeLinking) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_IpoeLinking) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_IpoeLinking.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_IpoeLinking) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_IpoeSession represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipoe-session YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_IpoeSession struct {
	SessionLimit *uint32 `path:"session-limit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_IpoeSession implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_IpoeSession) IsYANGGoStruct() {
}

// GetSessionLimit retrieves the value of the leaf SessionLimit from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_IpoeSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionLimit is set, it can
// safely use t.GetSessionLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_IpoeSession) GetSessionLimit() uint32 {
	if t == nil || t.SessionLimit == nil {
		return 0
	}
	return *t.SessionLimit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_IpoeSession
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_IpoeSession) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_IpoeSession) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_IpoeSession"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_IpoeSession) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_IpoeSession) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_IpoeSession.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_IpoeSession) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4 represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4 struct {
	Address                map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Address `path:"address" module:"nokia-conf"`
	AllowUnmatchingSubnets *bool                                                                                      `path:"allow-unmatching-subnets" module:"nokia-conf"`
	ArpHost                *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_ArpHost            `path:"arp-host" module:"nokia-conf" yangPresence:"true"`
	Bfd                    *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Bfd                `path:"bfd" module:"nokia-conf"`
	DefaultDns             []string                                                                                   `path:"default-dns" module:"nokia-conf"`
	Dhcp                   *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp               `path:"dhcp" module:"nokia-conf" yangPresence:"true"`
	ExportHostRoutes       *bool                                                                                      `path:"export-host-routes" module:"nokia-conf"`
	Unnumbered             *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Unnumbered         `path:"unnumbered" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4) NewAddress(Ipv4Address string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Address, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Address)
	}

	key := Ipv4Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Address{
		Ipv4Address: &Ipv4Address,
	}

	return t.Address[key], nil
}

// RenameAddress renames an entry in the list Address within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4) RenameAddress(oldK, newK string) error {
	if _, ok := t.Address[newK]; ok {
		return fmt.Errorf("key %v already exists in Address", newK)
	}

	e, ok := t.Address[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Address", oldK)
	}
	e.Ipv4Address = &newK

	t.Address[newK] = e
	delete(t.Address, oldK)
	return nil
}

// GetOrCreateAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4) GetOrCreateAddress(Ipv4Address string) *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Address {

	key := Ipv4Address

	if v, ok := t.Address[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddress(Ipv4Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddress got unexpected error: %v", err))
	}
	return v
}

// GetAddress retrieves the value with the specified key from
// the Address map field of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4) GetAddress(Ipv4Address string) *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Address {

	if t == nil {
		return nil
	}

	key := Ipv4Address

	if lm, ok := t.Address[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4) DeleteAddress(Ipv4Address string) {
	key := Ipv4Address

	delete(t.Address, key)
}

// AppendAddress appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Address struct to the
// list Address of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Address already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4) AppendAddress(v *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Address) error {
	if v.Ipv4Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv4Address")
	}

	key := *v.Ipv4Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Address)
	}

	if _, ok := t.Address[key]; ok {
		return fmt.Errorf("duplicate key for list Address %v", key)
	}

	t.Address[key] = v
	return nil
}

// GetOrCreateArpHost retrieves the value of the ArpHost field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4) GetOrCreateArpHost() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_ArpHost {
	if t.ArpHost != nil {
		return t.ArpHost
	}
	t.ArpHost = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_ArpHost{}
	return t.ArpHost
}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4) GetOrCreateBfd() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Bfd{}
	return t.Bfd
}

// GetOrCreateDhcp retrieves the value of the Dhcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4) GetOrCreateDhcp() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp {
	if t.Dhcp != nil {
		return t.Dhcp
	}
	t.Dhcp = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp{}
	return t.Dhcp
}

// GetOrCreateUnnumbered retrieves the value of the Unnumbered field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4) GetOrCreateUnnumbered() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Unnumbered {
	if t.Unnumbered != nil {
		return t.Unnumbered
	}
	t.Unnumbered = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Unnumbered{}
	return t.Unnumbered
}

// GetArpHost returns the value of the ArpHost struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4. If the receiver or the field ArpHost is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4) GetArpHost() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_ArpHost {
	if t != nil && t.ArpHost != nil {
		return t.ArpHost
	}
	return nil
}

// GetBfd returns the value of the Bfd struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4) GetBfd() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetDhcp returns the value of the Dhcp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4. If the receiver or the field Dhcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4) GetDhcp() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp {
	if t != nil && t.Dhcp != nil {
		return t.Dhcp
	}
	return nil
}

// GetUnnumbered returns the value of the Unnumbered struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4. If the receiver or the field Unnumbered is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4) GetUnnumbered() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Unnumbered {
	if t != nil && t.Unnumbered != nil {
		return t.Unnumbered
	}
	return nil
}

// GetAllowUnmatchingSubnets retrieves the value of the leaf AllowUnmatchingSubnets from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowUnmatchingSubnets is set, it can
// safely use t.GetAllowUnmatchingSubnets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowUnmatchingSubnets == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4) GetAllowUnmatchingSubnets() bool {
	if t == nil || t.AllowUnmatchingSubnets == nil {
		return false
	}
	return *t.AllowUnmatchingSubnets
}

// GetDefaultDns retrieves the value of the leaf DefaultDns from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultDns is set, it can
// safely use t.GetDefaultDns() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultDns == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4) GetDefaultDns() []string {
	if t == nil || t.DefaultDns == nil {
		return nil
	}
	return t.DefaultDns
}

// GetExportHostRoutes retrieves the value of the leaf ExportHostRoutes from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportHostRoutes is set, it can
// safely use t.GetExportHostRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportHostRoutes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4) GetExportHostRoutes() bool {
	if t == nil || t.ExportHostRoutes == nil {
		return false
	}
	return *t.ExportHostRoutes
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowUnmatchingSubnets == nil {
		var v bool = false
		t.AllowUnmatchingSubnets = &v
	}
	if t.ExportHostRoutes == nil {
		var v bool = false
		t.ExportHostRoutes = &v
	}
	t.ArpHost.PopulateDefaults()
	t.Bfd.PopulateDefaults()
	t.Dhcp.PopulateDefaults()
	t.Unnumbered.PopulateDefaults()
	for _, e := range t.Address {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Address represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv4/address YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Address struct {
	Gateway            *string `path:"gateway" module:"nokia-conf"`
	HoldupTime         *uint32 `path:"holdup-time" module:"nokia-conf"`
	Ipv4Address        *string `path:"ipv4-address" module:"nokia-conf"`
	PopulateHostRoutes *bool   `path:"populate-host-routes" module:"nokia-conf"`
	PrefixLength       *uint32 `path:"prefix-length" module:"nokia-conf"`
	TrackSrrp          *uint32 `path:"track-srrp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Address) IsYANGGoStruct() {
}

// GetGateway retrieves the value of the leaf Gateway from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gateway is set, it can
// safely use t.GetGateway() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gateway == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Address) GetGateway() string {
	if t == nil || t.Gateway == nil {
		return ""
	}
	return *t.Gateway
}

// GetHoldupTime retrieves the value of the leaf HoldupTime from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldupTime is set, it can
// safely use t.GetHoldupTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldupTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Address) GetHoldupTime() uint32 {
	if t == nil || t.HoldupTime == nil {
		return 0
	}
	return *t.HoldupTime
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Address) GetIpv4Address() string {
	if t == nil || t.Ipv4Address == nil {
		return ""
	}
	return *t.Ipv4Address
}

// GetPopulateHostRoutes retrieves the value of the leaf PopulateHostRoutes from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PopulateHostRoutes is set, it can
// safely use t.GetPopulateHostRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PopulateHostRoutes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Address) GetPopulateHostRoutes() bool {
	if t == nil || t.PopulateHostRoutes == nil {
		return false
	}
	return *t.PopulateHostRoutes
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Address) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// GetTrackSrrp retrieves the value of the leaf TrackSrrp from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrackSrrp is set, it can
// safely use t.GetTrackSrrp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrackSrrp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Address) GetTrackSrrp() uint32 {
	if t == nil || t.TrackSrrp == nil {
		return 0
	}
	return *t.TrackSrrp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Address
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Address) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PopulateHostRoutes == nil {
		var v bool = false
		t.PopulateHostRoutes = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Address struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Address")
	}

	return map[string]interface{}{
		"ipv4-address": *t.Ipv4Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Address) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Address) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Address.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Address) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_ArpHost represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv4/arp-host YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_ArpHost struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	HostLimit  *uint32                     `path:"host-limit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_ArpHost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_ArpHost) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_ArpHost
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_ArpHost) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetHostLimit retrieves the value of the leaf HostLimit from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_ArpHost
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostLimit is set, it can
// safely use t.GetHostLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_ArpHost) GetHostLimit() uint32 {
	if t == nil || t.HostLimit == nil {
		return 0
	}
	return *t.HostLimit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_ArpHost
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_ArpHost) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_ArpHost) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_ArpHost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_ArpHost) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_ArpHost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_ArpHost.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_ArpHost) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Bfd represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv4/bfd YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Bfd struct {
	AdminState       E_NokiaTypesSros_AdminState                                                       `path:"admin-state" module:"nokia-conf"`
	EchoReceive      *uint32                                                                           `path:"echo-receive" module:"nokia-conf"`
	Multiplier       *uint32                                                                           `path:"multiplier" module:"nokia-conf"`
	Receive          *uint32                                                                           `path:"receive" module:"nokia-conf"`
	TransmitInterval *uint32                                                                           `path:"transmit-interval" module:"nokia-conf"`
	Type             E_NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Bfd_Type `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Bfd) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Bfd) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetEchoReceive retrieves the value of the leaf EchoReceive from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EchoReceive is set, it can
// safely use t.GetEchoReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EchoReceive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Bfd) GetEchoReceive() uint32 {
	if t == nil || t.EchoReceive == nil {
		return 0
	}
	return *t.EchoReceive
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Bfd) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 3
	}
	return *t.Multiplier
}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Bfd) GetReceive() uint32 {
	if t == nil || t.Receive == nil {
		return 100
	}
	return *t.Receive
}

// GetTransmitInterval retrieves the value of the leaf TransmitInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitInterval is set, it can
// safely use t.GetTransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Bfd) GetTransmitInterval() uint32 {
	if t == nil || t.TransmitInterval == nil {
		return 100
	}
	return *t.TransmitInterval
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Bfd) GetType() E_NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Bfd_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Bfd_Type_auto
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Bfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Bfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Multiplier == nil {
		var v uint32 = 3
		t.Multiplier = &v
	}
	if t.Receive == nil {
		var v uint32 = 100
		t.Receive = &v
	}
	if t.TransmitInterval == nil {
		var v uint32 = 100
		t.TransmitInterval = &v
	}
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Bfd_Type_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Bfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Bfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Bfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Bfd.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Bfd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv4/dhcp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp struct {
	AdminState              E_NokiaTypesSros_AdminState                                                                     `path:"admin-state" module:"nokia-conf"`
	ClientApplications      *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ClientApplications `path:"client-applications" module:"nokia-conf"`
	Description             *string                                                                                         `path:"description" module:"nokia-conf"`
	GiAddress               *string                                                                                         `path:"gi-address" module:"nokia-conf"`
	LeasePopulate           *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_LeasePopulate      `path:"lease-populate" module:"nokia-conf"`
	OfferSelection          *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection     `path:"offer-selection" module:"nokia-conf"`
	Option_82               *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82          `path:"option-82" module:"nokia-conf"`
	ProxyServer             *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer        `path:"proxy-server" module:"nokia-conf"`
	PythonPolicy            *string                                                                                         `path:"python-policy" module:"nokia-conf"`
	RelayProxy              *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_RelayProxy         `path:"relay-proxy" module:"nokia-conf" yangPresence:"true"`
	ReleaseIncludeGiAddress *bool                                                                                           `path:"release-include-gi-address" module:"nokia-conf"`
	Server                  []string                                                                                        `path:"server" module:"nokia-conf"`
	SrcIpAddr               E_NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_SrcIpAddr         `path:"src-ip-addr" module:"nokia-conf"`
	VirtualSubnet           *bool                                                                                           `path:"virtual-subnet" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp) IsYANGGoStruct() {
}

// GetOrCreateClientApplications retrieves the value of the ClientApplications field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp) GetOrCreateClientApplications() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ClientApplications {
	if t.ClientApplications != nil {
		return t.ClientApplications
	}
	t.ClientApplications = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ClientApplications{}
	return t.ClientApplications
}

// GetOrCreateLeasePopulate retrieves the value of the LeasePopulate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp) GetOrCreateLeasePopulate() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_LeasePopulate {
	if t.LeasePopulate != nil {
		return t.LeasePopulate
	}
	t.LeasePopulate = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_LeasePopulate{}
	return t.LeasePopulate
}

// GetOrCreateOfferSelection retrieves the value of the OfferSelection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp) GetOrCreateOfferSelection() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection {
	if t.OfferSelection != nil {
		return t.OfferSelection
	}
	t.OfferSelection = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection{}
	return t.OfferSelection
}

// GetOrCreateOption_82 retrieves the value of the Option_82 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp) GetOrCreateOption_82() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82 {
	if t.Option_82 != nil {
		return t.Option_82
	}
	t.Option_82 = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82{}
	return t.Option_82
}

// GetOrCreateProxyServer retrieves the value of the ProxyServer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp) GetOrCreateProxyServer() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer {
	if t.ProxyServer != nil {
		return t.ProxyServer
	}
	t.ProxyServer = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer{}
	return t.ProxyServer
}

// GetOrCreateRelayProxy retrieves the value of the RelayProxy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp) GetOrCreateRelayProxy() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_RelayProxy {
	if t.RelayProxy != nil {
		return t.RelayProxy
	}
	t.RelayProxy = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_RelayProxy{}
	return t.RelayProxy
}

// GetClientApplications returns the value of the ClientApplications struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp. If the receiver or the field ClientApplications is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp) GetClientApplications() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ClientApplications {
	if t != nil && t.ClientApplications != nil {
		return t.ClientApplications
	}
	return nil
}

// GetLeasePopulate returns the value of the LeasePopulate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp. If the receiver or the field LeasePopulate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp) GetLeasePopulate() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_LeasePopulate {
	if t != nil && t.LeasePopulate != nil {
		return t.LeasePopulate
	}
	return nil
}

// GetOfferSelection returns the value of the OfferSelection struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp. If the receiver or the field OfferSelection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp) GetOfferSelection() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection {
	if t != nil && t.OfferSelection != nil {
		return t.OfferSelection
	}
	return nil
}

// GetOption_82 returns the value of the Option_82 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp. If the receiver or the field Option_82 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp) GetOption_82() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82 {
	if t != nil && t.Option_82 != nil {
		return t.Option_82
	}
	return nil
}

// GetProxyServer returns the value of the ProxyServer struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp. If the receiver or the field ProxyServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp) GetProxyServer() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer {
	if t != nil && t.ProxyServer != nil {
		return t.ProxyServer
	}
	return nil
}

// GetRelayProxy returns the value of the RelayProxy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp. If the receiver or the field RelayProxy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp) GetRelayProxy() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_RelayProxy {
	if t != nil && t.RelayProxy != nil {
		return t.RelayProxy
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetGiAddress retrieves the value of the leaf GiAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GiAddress is set, it can
// safely use t.GetGiAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GiAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp) GetGiAddress() string {
	if t == nil || t.GiAddress == nil {
		return ""
	}
	return *t.GiAddress
}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// GetReleaseIncludeGiAddress retrieves the value of the leaf ReleaseIncludeGiAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReleaseIncludeGiAddress is set, it can
// safely use t.GetReleaseIncludeGiAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReleaseIncludeGiAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp) GetReleaseIncludeGiAddress() bool {
	if t == nil || t.ReleaseIncludeGiAddress == nil {
		return false
	}
	return *t.ReleaseIncludeGiAddress
}

// GetServer retrieves the value of the leaf Server from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Server is set, it can
// safely use t.GetServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Server == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp) GetServer() []string {
	if t == nil || t.Server == nil {
		return nil
	}
	return t.Server
}

// GetSrcIpAddr retrieves the value of the leaf SrcIpAddr from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrcIpAddr is set, it can
// safely use t.GetSrcIpAddr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrcIpAddr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp) GetSrcIpAddr() E_NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_SrcIpAddr {
	if t == nil || t.SrcIpAddr == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_SrcIpAddr_auto
	}
	return t.SrcIpAddr
}

// GetVirtualSubnet retrieves the value of the leaf VirtualSubnet from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VirtualSubnet is set, it can
// safely use t.GetVirtualSubnet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VirtualSubnet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp) GetVirtualSubnet() bool {
	if t == nil || t.VirtualSubnet == nil {
		return false
	}
	return *t.VirtualSubnet
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ReleaseIncludeGiAddress == nil {
		var v bool = false
		t.ReleaseIncludeGiAddress = &v
	}
	if t.SrcIpAddr == 0 {
		t.SrcIpAddr = NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_SrcIpAddr_auto
	}
	if t.VirtualSubnet == nil {
		var v bool = false
		t.VirtualSubnet = &v
	}
	t.ClientApplications.PopulateDefaults()
	t.LeasePopulate.PopulateDefaults()
	t.OfferSelection.PopulateDefaults()
	t.Option_82.PopulateDefaults()
	t.ProxyServer.PopulateDefaults()
	t.RelayProxy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ClientApplications represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv4/dhcp/client-applications YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ClientApplications struct {
	Dhcp *bool `path:"dhcp" module:"nokia-conf"`
	Ppp  *bool `path:"ppp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ClientApplications implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ClientApplications) IsYANGGoStruct() {
}

// GetDhcp retrieves the value of the leaf Dhcp from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ClientApplications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcp is set, it can
// safely use t.GetDhcp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ClientApplications) GetDhcp() bool {
	if t == nil || t.Dhcp == nil {
		return true
	}
	return *t.Dhcp
}

// GetPpp retrieves the value of the leaf Ppp from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ClientApplications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ppp is set, it can
// safely use t.GetPpp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ppp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ClientApplications) GetPpp() bool {
	if t == nil || t.Ppp == nil {
		return false
	}
	return *t.Ppp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ClientApplications
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ClientApplications) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Dhcp == nil {
		var v bool = true
		t.Dhcp = &v
	}
	if t.Ppp == nil {
		var v bool = false
		t.Ppp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ClientApplications) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ClientApplications"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ClientApplications) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ClientApplications) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ClientApplications.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ClientApplications) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_LeasePopulate represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv4/dhcp/lease-populate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_LeasePopulate struct {
	MaxLeases *uint32 `path:"max-leases" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_LeasePopulate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_LeasePopulate) IsYANGGoStruct() {
}

// GetMaxLeases retrieves the value of the leaf MaxLeases from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_LeasePopulate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLeases is set, it can
// safely use t.GetMaxLeases() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLeases == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_LeasePopulate) GetMaxLeases() uint32 {
	if t == nil || t.MaxLeases == nil {
		return 0
	}
	return *t.MaxLeases
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_LeasePopulate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_LeasePopulate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_LeasePopulate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_LeasePopulate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_LeasePopulate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_LeasePopulate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_LeasePopulate.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_LeasePopulate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv4/dhcp/offer-selection YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection struct {
	ClientMac     *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_ClientMac         `path:"client-mac" module:"nokia-conf"`
	DiscoverDelay *int32                                                                                                        `path:"discover-delay" module:"nokia-conf"`
	Server        map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_Server `path:"server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection) IsYANGGoStruct() {
}

// NewServer creates a new entry in the Server list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection) NewServer(Ipv4Address string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_Server)
	}

	key := Ipv4Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_Server{
		Ipv4Address: &Ipv4Address,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection) RenameServer(oldK, newK string) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Ipv4Address = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection) GetOrCreateServer(Ipv4Address string) *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_Server {

	key := Ipv4Address

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Ipv4Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection) GetServer(Ipv4Address string) *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_Server {

	if t == nil {
		return nil
	}

	key := Ipv4Address

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection) DeleteServer(Ipv4Address string) {
	key := Ipv4Address

	delete(t.Server, key)
}

// AppendServer appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_Server struct to the
// list Server of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_Server already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection) AppendServer(v *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_Server) error {
	if v.Ipv4Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv4Address")
	}

	key := *v.Ipv4Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetOrCreateClientMac retrieves the value of the ClientMac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection) GetOrCreateClientMac() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_ClientMac {
	if t.ClientMac != nil {
		return t.ClientMac
	}
	t.ClientMac = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_ClientMac{}
	return t.ClientMac
}

// GetClientMac returns the value of the ClientMac struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection. If the receiver or the field ClientMac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection) GetClientMac() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_ClientMac {
	if t != nil && t.ClientMac != nil {
		return t.ClientMac
	}
	return nil
}

// GetDiscoverDelay retrieves the value of the leaf DiscoverDelay from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiscoverDelay is set, it can
// safely use t.GetDiscoverDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiscoverDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection) GetDiscoverDelay() int32 {
	if t == nil || t.DiscoverDelay == nil {
		return 0
	}
	return *t.DiscoverDelay
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ClientMac.PopulateDefaults()
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_ClientMac represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv4/dhcp/offer-selection/client-mac YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_ClientMac struct {
	DiscoverDelay *int32                                                                                                            `path:"discover-delay" module:"nokia-conf"`
	MacAddress    E_NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_ClientMac_MacAddress `path:"mac-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_ClientMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_ClientMac) IsYANGGoStruct() {
}

// GetDiscoverDelay retrieves the value of the leaf DiscoverDelay from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_ClientMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiscoverDelay is set, it can
// safely use t.GetDiscoverDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiscoverDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_ClientMac) GetDiscoverDelay() int32 {
	if t == nil || t.DiscoverDelay == nil {
		return 0
	}
	return *t.DiscoverDelay
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_ClientMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_ClientMac) GetMacAddress() E_NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_ClientMac_MacAddress {
	if t == nil || t.MacAddress == 0 {
		return 0
	}
	return t.MacAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_ClientMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_ClientMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_ClientMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_ClientMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_ClientMac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_ClientMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_ClientMac.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_ClientMac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_Server represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv4/dhcp/offer-selection/server YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_Server struct {
	DiscoverDelay *int32  `path:"discover-delay" module:"nokia-conf"`
	Ipv4Address   *string `path:"ipv4-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_Server) IsYANGGoStruct() {
}

// GetDiscoverDelay retrieves the value of the leaf DiscoverDelay from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiscoverDelay is set, it can
// safely use t.GetDiscoverDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiscoverDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_Server) GetDiscoverDelay() int32 {
	if t == nil || t.DiscoverDelay == nil {
		return 0
	}
	return *t.DiscoverDelay
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_Server) GetIpv4Address() string {
	if t == nil || t.Ipv4Address == nil {
		return ""
	}
	return *t.Ipv4Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_Server struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Address")
	}

	return map[string]interface{}{
		"ipv4-address": *t.Ipv4Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_Server.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_OfferSelection_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82 represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv4/dhcp/option-82 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82 struct {
	VendorSpecificOption *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption `path:"vendor-specific-option" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82) IsYANGGoStruct() {
}

// GetOrCreateVendorSpecificOption retrieves the value of the VendorSpecificOption field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82) GetOrCreateVendorSpecificOption() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption {
	if t.VendorSpecificOption != nil {
		return t.VendorSpecificOption
	}
	t.VendorSpecificOption = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption{}
	return t.VendorSpecificOption
}

// GetVendorSpecificOption returns the value of the VendorSpecificOption struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82. If the receiver or the field VendorSpecificOption is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82) GetVendorSpecificOption() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption {
	if t != nil && t.VendorSpecificOption != nil {
		return t.VendorSpecificOption
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.VendorSpecificOption.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv4/dhcp/option-82/vendor-specific-option YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption struct {
	ClientMacAddress *bool   `path:"client-mac-address" module:"nokia-conf"`
	SapId            *bool   `path:"sap-id" module:"nokia-conf"`
	ServiceId        *bool   `path:"service-id" module:"nokia-conf"`
	String           *string `path:"string" module:"nokia-conf"`
	SystemId         *bool   `path:"system-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption) IsYANGGoStruct() {
}

// GetClientMacAddress retrieves the value of the leaf ClientMacAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientMacAddress is set, it can
// safely use t.GetClientMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientMacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetClientMacAddress() bool {
	if t == nil || t.ClientMacAddress == nil {
		return false
	}
	return *t.ClientMacAddress
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetSapId() bool {
	if t == nil || t.SapId == nil {
		return false
	}
	return *t.SapId
}

// GetServiceId retrieves the value of the leaf ServiceId from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceId is set, it can
// safely use t.GetServiceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetServiceId() bool {
	if t == nil || t.ServiceId == nil {
		return false
	}
	return *t.ServiceId
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// GetSystemId retrieves the value of the leaf SystemId from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemId is set, it can
// safely use t.GetSystemId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetSystemId() bool {
	if t == nil || t.SystemId == nil {
		return false
	}
	return *t.SystemId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ClientMacAddress == nil {
		var v bool = false
		t.ClientMacAddress = &v
	}
	if t.SapId == nil {
		var v bool = false
		t.SapId = &v
	}
	if t.ServiceId == nil {
		var v bool = false
		t.ServiceId = &v
	}
	if t.SystemId == nil {
		var v bool = false
		t.SystemId = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv4/dhcp/proxy-server YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer struct {
	AdminState     E_NokiaTypesSros_AdminState                                                                        `path:"admin-state" module:"nokia-conf"`
	EmulatedServer *string                                                                                            `path:"emulated-server" module:"nokia-conf"`
	LeaseTime      *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime `path:"lease-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer) IsYANGGoStruct() {
}

// GetOrCreateLeaseTime retrieves the value of the LeaseTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer) GetOrCreateLeaseTime() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime {
	if t.LeaseTime != nil {
		return t.LeaseTime
	}
	t.LeaseTime = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime{}
	return t.LeaseTime
}

// GetLeaseTime returns the value of the LeaseTime struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer. If the receiver or the field LeaseTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer) GetLeaseTime() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime {
	if t != nil && t.LeaseTime != nil {
		return t.LeaseTime
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetEmulatedServer retrieves the value of the leaf EmulatedServer from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EmulatedServer is set, it can
// safely use t.GetEmulatedServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EmulatedServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer) GetEmulatedServer() string {
	if t == nil || t.EmulatedServer == nil {
		return ""
	}
	return *t.EmulatedServer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.LeaseTime.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv4/dhcp/proxy-server/lease-time YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime struct {
	RadiusOverride *bool   `path:"radius-override" module:"nokia-conf"`
	Value          *uint32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime) IsYANGGoStruct() {
}

// GetRadiusOverride retrieves the value of the leaf RadiusOverride from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusOverride is set, it can
// safely use t.GetRadiusOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime) GetRadiusOverride() bool {
	if t == nil || t.RadiusOverride == nil {
		return false
	}
	return *t.RadiusOverride
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RadiusOverride == nil {
		var v bool = false
		t.RadiusOverride = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_ProxyServer_LeaseTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_RelayProxy represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv4/dhcp/relay-proxy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_RelayProxy struct {
	ReleaseUpdateSrcIp *bool   `path:"release-update-src-ip" module:"nokia-conf"`
	SiaddrOverride     *string `path:"siaddr-override" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_RelayProxy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_RelayProxy) IsYANGGoStruct() {
}

// GetReleaseUpdateSrcIp retrieves the value of the leaf ReleaseUpdateSrcIp from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_RelayProxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReleaseUpdateSrcIp is set, it can
// safely use t.GetReleaseUpdateSrcIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReleaseUpdateSrcIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_RelayProxy) GetReleaseUpdateSrcIp() bool {
	if t == nil || t.ReleaseUpdateSrcIp == nil {
		return false
	}
	return *t.ReleaseUpdateSrcIp
}

// GetSiaddrOverride retrieves the value of the leaf SiaddrOverride from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_RelayProxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SiaddrOverride is set, it can
// safely use t.GetSiaddrOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SiaddrOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_RelayProxy) GetSiaddrOverride() string {
	if t == nil || t.SiaddrOverride == nil {
		return ""
	}
	return *t.SiaddrOverride
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_RelayProxy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_RelayProxy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ReleaseUpdateSrcIp == nil {
		var v bool = false
		t.ReleaseUpdateSrcIp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_RelayProxy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_RelayProxy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_RelayProxy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_RelayProxy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_RelayProxy.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Dhcp_RelayProxy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Unnumbered represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv4/unnumbered YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Unnumbered struct {
	IpAddress *string `path:"ip-address" module:"nokia-conf"`
	IpIntName *string `path:"ip-int-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Unnumbered implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Unnumbered) IsYANGGoStruct() {
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Unnumbered
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Unnumbered) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetIpIntName retrieves the value of the leaf IpIntName from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Unnumbered
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpIntName is set, it can
// safely use t.GetIpIntName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpIntName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Unnumbered) GetIpIntName() string {
	if t == nil || t.IpIntName == nil {
		return ""
	}
	return *t.IpIntName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Unnumbered
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Unnumbered) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Unnumbered) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Unnumbered"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Unnumbered) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Unnumbered) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Unnumbered.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv4_Unnumbered) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6 represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6 struct {
	Address                   map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Address         `path:"address" module:"nokia-conf"`
	AllowMultipleWanAddresses *bool                                                                                              `path:"allow-multiple-wan-addresses" module:"nokia-conf"`
	AllowUnmatchingPrefixes   *bool                                                                                              `path:"allow-unmatching-prefixes" module:"nokia-conf"`
	Bfd                       *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Bfd                        `path:"bfd" module:"nokia-conf"`
	DefaultDns                []string                                                                                           `path:"default-dns" module:"nokia-conf"`
	DelegatedPrefixLength     NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_DelegatedPrefixLength_Union `path:"delegated-prefix-length" module:"nokia-conf"`
	Dhcp6                     *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6                      `path:"dhcp6" module:"nokia-conf" yangPresence:"true"`
	IpoeBridgedMode           *bool                                                                                              `path:"ipoe-bridged-mode" module:"nokia-conf"`
	LinkLocalAddress          *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_LinkLocalAddress           `path:"link-local-address" module:"nokia-conf"`
	Prefix                    map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Prefix          `path:"prefix" module:"nokia-conf"`
	RouterAdvertisements      *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements       `path:"router-advertisements" module:"nokia-conf" yangPresence:"true"`
	RouterSolicit             *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterSolicit              `path:"router-solicit" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6) NewAddress(Ipv6Address string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Address, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Address)
	}

	key := Ipv6Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Address{
		Ipv6Address: &Ipv6Address,
	}

	return t.Address[key], nil
}

// RenameAddress renames an entry in the list Address within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6) RenameAddress(oldK, newK string) error {
	if _, ok := t.Address[newK]; ok {
		return fmt.Errorf("key %v already exists in Address", newK)
	}

	e, ok := t.Address[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Address", oldK)
	}
	e.Ipv6Address = &newK

	t.Address[newK] = e
	delete(t.Address, oldK)
	return nil
}

// GetOrCreateAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6) GetOrCreateAddress(Ipv6Address string) *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Address {

	key := Ipv6Address

	if v, ok := t.Address[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddress(Ipv6Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddress got unexpected error: %v", err))
	}
	return v
}

// GetAddress retrieves the value with the specified key from
// the Address map field of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6) GetAddress(Ipv6Address string) *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Address {

	if t == nil {
		return nil
	}

	key := Ipv6Address

	if lm, ok := t.Address[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6) DeleteAddress(Ipv6Address string) {
	key := Ipv6Address

	delete(t.Address, key)
}

// AppendAddress appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Address struct to the
// list Address of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Address already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6) AppendAddress(v *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Address) error {
	if v.Ipv6Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Address")
	}

	key := *v.Ipv6Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Address)
	}

	if _, ok := t.Address[key]; ok {
		return fmt.Errorf("duplicate key for list Address %v", key)
	}

	t.Address[key] = v
	return nil
}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6) NewPrefix(Ipv6Prefix string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Prefix)
	}

	key := Ipv6Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Prefix{
		Ipv6Prefix: &Ipv6Prefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.Ipv6Prefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6) GetOrCreatePrefix(Ipv6Prefix string) *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Prefix {

	key := Ipv6Prefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(Ipv6Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6) GetPrefix(Ipv6Prefix string) *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Prefix {

	if t == nil {
		return nil
	}

	key := Ipv6Prefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6) DeletePrefix(Ipv6Prefix string) {
	key := Ipv6Prefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Prefix struct to the
// list Prefix of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6) AppendPrefix(v *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Prefix) error {
	if v.Ipv6Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Prefix")
	}

	key := *v.Ipv6Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6) GetOrCreateBfd() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Bfd{}
	return t.Bfd
}

// GetOrCreateDhcp6 retrieves the value of the Dhcp6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6) GetOrCreateDhcp6() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6 {
	if t.Dhcp6 != nil {
		return t.Dhcp6
	}
	t.Dhcp6 = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6{}
	return t.Dhcp6
}

// GetOrCreateLinkLocalAddress retrieves the value of the LinkLocalAddress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6) GetOrCreateLinkLocalAddress() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_LinkLocalAddress {
	if t.LinkLocalAddress != nil {
		return t.LinkLocalAddress
	}
	t.LinkLocalAddress = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_LinkLocalAddress{}
	return t.LinkLocalAddress
}

// GetOrCreateRouterAdvertisements retrieves the value of the RouterAdvertisements field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6) GetOrCreateRouterAdvertisements() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements {
	if t.RouterAdvertisements != nil {
		return t.RouterAdvertisements
	}
	t.RouterAdvertisements = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements{}
	return t.RouterAdvertisements
}

// GetOrCreateRouterSolicit retrieves the value of the RouterSolicit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6) GetOrCreateRouterSolicit() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterSolicit {
	if t.RouterSolicit != nil {
		return t.RouterSolicit
	}
	t.RouterSolicit = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterSolicit{}
	return t.RouterSolicit
}

// GetBfd returns the value of the Bfd struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6) GetBfd() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetDhcp6 returns the value of the Dhcp6 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6. If the receiver or the field Dhcp6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6) GetDhcp6() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6 {
	if t != nil && t.Dhcp6 != nil {
		return t.Dhcp6
	}
	return nil
}

// GetLinkLocalAddress returns the value of the LinkLocalAddress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6. If the receiver or the field LinkLocalAddress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6) GetLinkLocalAddress() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_LinkLocalAddress {
	if t != nil && t.LinkLocalAddress != nil {
		return t.LinkLocalAddress
	}
	return nil
}

// GetRouterAdvertisements returns the value of the RouterAdvertisements struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6. If the receiver or the field RouterAdvertisements is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6) GetRouterAdvertisements() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements {
	if t != nil && t.RouterAdvertisements != nil {
		return t.RouterAdvertisements
	}
	return nil
}

// GetRouterSolicit returns the value of the RouterSolicit struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6. If the receiver or the field RouterSolicit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6) GetRouterSolicit() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterSolicit {
	if t != nil && t.RouterSolicit != nil {
		return t.RouterSolicit
	}
	return nil
}

// GetAllowMultipleWanAddresses retrieves the value of the leaf AllowMultipleWanAddresses from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowMultipleWanAddresses is set, it can
// safely use t.GetAllowMultipleWanAddresses() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowMultipleWanAddresses == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6) GetAllowMultipleWanAddresses() bool {
	if t == nil || t.AllowMultipleWanAddresses == nil {
		return false
	}
	return *t.AllowMultipleWanAddresses
}

// GetAllowUnmatchingPrefixes retrieves the value of the leaf AllowUnmatchingPrefixes from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowUnmatchingPrefixes is set, it can
// safely use t.GetAllowUnmatchingPrefixes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowUnmatchingPrefixes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6) GetAllowUnmatchingPrefixes() bool {
	if t == nil || t.AllowUnmatchingPrefixes == nil {
		return false
	}
	return *t.AllowUnmatchingPrefixes
}

// GetDefaultDns retrieves the value of the leaf DefaultDns from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultDns is set, it can
// safely use t.GetDefaultDns() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultDns == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6) GetDefaultDns() []string {
	if t == nil || t.DefaultDns == nil {
		return nil
	}
	return t.DefaultDns
}

// GetDelegatedPrefixLength retrieves the value of the leaf DelegatedPrefixLength from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DelegatedPrefixLength is set, it can
// safely use t.GetDelegatedPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DelegatedPrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6) GetDelegatedPrefixLength() NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_DelegatedPrefixLength_Union {
	if t == nil || t.DelegatedPrefixLength == nil {
		return UnionUint32(64)
	}
	return t.DelegatedPrefixLength
}

// GetIpoeBridgedMode retrieves the value of the leaf IpoeBridgedMode from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpoeBridgedMode is set, it can
// safely use t.GetIpoeBridgedMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpoeBridgedMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6) GetIpoeBridgedMode() bool {
	if t == nil || t.IpoeBridgedMode == nil {
		return false
	}
	return *t.IpoeBridgedMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowMultipleWanAddresses == nil {
		var v bool = false
		t.AllowMultipleWanAddresses = &v
	}
	if t.AllowUnmatchingPrefixes == nil {
		var v bool = false
		t.AllowUnmatchingPrefixes = &v
	}
	if t.DelegatedPrefixLength == nil {
		t.DelegatedPrefixLength = UnionUint32(64)
	}
	if t.IpoeBridgedMode == nil {
		var v bool = false
		t.IpoeBridgedMode = &v
	}
	t.Bfd.PopulateDefaults()
	t.Dhcp6.PopulateDefaults()
	t.LinkLocalAddress.PopulateDefaults()
	t.RouterAdvertisements.PopulateDefaults()
	t.RouterSolicit.PopulateDefaults()
	for _, e := range t.Address {
		e.PopulateDefaults()
	}
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Address represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv6/address YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Address struct {
	HostType     E_NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Address_HostType `path:"host-type" module:"nokia-conf"`
	Ipv6Address  *string                                                                                   `path:"ipv6-address" module:"nokia-conf"`
	PrefixLength *uint32                                                                                   `path:"prefix-length" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Address) IsYANGGoStruct() {
}

// GetHostType retrieves the value of the leaf HostType from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostType is set, it can
// safely use t.GetHostType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Address) GetHostType() E_NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Address_HostType {
	if t == nil || t.HostType == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Address_HostType_pd
	}
	return t.HostType
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Address) GetIpv6Address() string {
	if t == nil || t.Ipv6Address == nil {
		return ""
	}
	return *t.Ipv6Address
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Address) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Address
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Address) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HostType == 0 {
		t.HostType = NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Address_HostType_pd
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Address struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Address")
	}

	return map[string]interface{}{
		"ipv6-address": *t.Ipv6Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Address) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Address) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Address.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Address) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Bfd represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv6/bfd YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Bfd struct {
	AdminState       E_NokiaTypesSros_AdminState                                                       `path:"admin-state" module:"nokia-conf"`
	EchoReceive      *uint32                                                                           `path:"echo-receive" module:"nokia-conf"`
	Multiplier       *uint32                                                                           `path:"multiplier" module:"nokia-conf"`
	Receive          *uint32                                                                           `path:"receive" module:"nokia-conf"`
	TransmitInterval *uint32                                                                           `path:"transmit-interval" module:"nokia-conf"`
	Type             E_NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Bfd_Type `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Bfd) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Bfd) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetEchoReceive retrieves the value of the leaf EchoReceive from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EchoReceive is set, it can
// safely use t.GetEchoReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EchoReceive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Bfd) GetEchoReceive() uint32 {
	if t == nil || t.EchoReceive == nil {
		return 0
	}
	return *t.EchoReceive
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Bfd) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 3
	}
	return *t.Multiplier
}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Bfd) GetReceive() uint32 {
	if t == nil || t.Receive == nil {
		return 100
	}
	return *t.Receive
}

// GetTransmitInterval retrieves the value of the leaf TransmitInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitInterval is set, it can
// safely use t.GetTransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Bfd) GetTransmitInterval() uint32 {
	if t == nil || t.TransmitInterval == nil {
		return 100
	}
	return *t.TransmitInterval
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Bfd) GetType() E_NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Bfd_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Bfd_Type_auto
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Bfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Bfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Multiplier == nil {
		var v uint32 = 3
		t.Multiplier = &v
	}
	if t.Receive == nil {
		var v uint32 = 100
		t.Receive = &v
	}
	if t.TransmitInterval == nil {
		var v uint32 = 100
		t.TransmitInterval = &v
	}
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Bfd_Type_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Bfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Bfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Bfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Bfd.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Bfd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6 represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv6/dhcp6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6 struct {
	OverrideSlaac  *bool                                                                                        `path:"override-slaac" module:"nokia-conf"`
	PdManagedRoute *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_PdManagedRoute `path:"pd-managed-route" module:"nokia-conf" yangPresence:"true"`
	ProxyServer    *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer    `path:"proxy-server" module:"nokia-conf"`
	PythonPolicy   *string                                                                                      `path:"python-policy" module:"nokia-conf"`
	Relay          *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay          `path:"relay" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6) IsYANGGoStruct() {
}

// GetOrCreatePdManagedRoute retrieves the value of the PdManagedRoute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6) GetOrCreatePdManagedRoute() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_PdManagedRoute {
	if t.PdManagedRoute != nil {
		return t.PdManagedRoute
	}
	t.PdManagedRoute = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_PdManagedRoute{}
	return t.PdManagedRoute
}

// GetOrCreateProxyServer retrieves the value of the ProxyServer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6) GetOrCreateProxyServer() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer {
	if t.ProxyServer != nil {
		return t.ProxyServer
	}
	t.ProxyServer = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer{}
	return t.ProxyServer
}

// GetOrCreateRelay retrieves the value of the Relay field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6) GetOrCreateRelay() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay {
	if t.Relay != nil {
		return t.Relay
	}
	t.Relay = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay{}
	return t.Relay
}

// GetPdManagedRoute returns the value of the PdManagedRoute struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6. If the receiver or the field PdManagedRoute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6) GetPdManagedRoute() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_PdManagedRoute {
	if t != nil && t.PdManagedRoute != nil {
		return t.PdManagedRoute
	}
	return nil
}

// GetProxyServer returns the value of the ProxyServer struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6. If the receiver or the field ProxyServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6) GetProxyServer() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer {
	if t != nil && t.ProxyServer != nil {
		return t.ProxyServer
	}
	return nil
}

// GetRelay returns the value of the Relay struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6. If the receiver or the field Relay is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6) GetRelay() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay {
	if t != nil && t.Relay != nil {
		return t.Relay
	}
	return nil
}

// GetOverrideSlaac retrieves the value of the leaf OverrideSlaac from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverrideSlaac is set, it can
// safely use t.GetOverrideSlaac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverrideSlaac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6) GetOverrideSlaac() bool {
	if t == nil || t.OverrideSlaac == nil {
		return false
	}
	return *t.OverrideSlaac
}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.OverrideSlaac == nil {
		var v bool = false
		t.OverrideSlaac = &v
	}
	t.PdManagedRoute.PopulateDefaults()
	t.ProxyServer.PopulateDefaults()
	t.Relay.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_PdManagedRoute represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv6/dhcp6/pd-managed-route YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_PdManagedRoute struct {
	NextHop E_NokiaTypesServices_Dhcp6PdManagedRouteNh `path:"next-hop" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_PdManagedRoute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_PdManagedRoute) IsYANGGoStruct() {
}

// GetNextHop retrieves the value of the leaf NextHop from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_PdManagedRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHop is set, it can
// safely use t.GetNextHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_PdManagedRoute) GetNextHop() E_NokiaTypesServices_Dhcp6PdManagedRouteNh {
	if t == nil || t.NextHop == 0 {
		return NokiaTypesServices_Dhcp6PdManagedRouteNh_ipv6
	}
	return t.NextHop
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_PdManagedRoute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_PdManagedRoute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.NextHop == 0 {
		t.NextHop = NokiaTypesServices_Dhcp6PdManagedRouteNh_ipv6
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_PdManagedRoute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_PdManagedRoute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_PdManagedRoute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_PdManagedRoute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_PdManagedRoute.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_PdManagedRoute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv6/dhcp6/proxy-server YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                                      `path:"admin-state" module:"nokia-conf"`
	ClientApplications *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications     `path:"client-applications" module:"nokia-conf"`
	PreferredLifetime  NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_PreferredLifetime_Union `path:"preferred-lifetime" module:"nokia-conf"`
	RebindTimer        *uint32                                                                                                          `path:"rebind-timer" module:"nokia-conf"`
	RenewTimer         *uint32                                                                                                          `path:"renew-timer" module:"nokia-conf"`
	ServerId           *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId               `path:"server-id" module:"nokia-conf" yangPresence:"true"`
	ValidLifetime      NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ValidLifetime_Union     `path:"valid-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer) IsYANGGoStruct() {
}

// GetOrCreateClientApplications retrieves the value of the ClientApplications field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer) GetOrCreateClientApplications() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications {
	if t.ClientApplications != nil {
		return t.ClientApplications
	}
	t.ClientApplications = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications{}
	return t.ClientApplications
}

// GetOrCreateServerId retrieves the value of the ServerId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer) GetOrCreateServerId() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId {
	if t.ServerId != nil {
		return t.ServerId
	}
	t.ServerId = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId{}
	return t.ServerId
}

// GetClientApplications returns the value of the ClientApplications struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer. If the receiver or the field ClientApplications is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer) GetClientApplications() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications {
	if t != nil && t.ClientApplications != nil {
		return t.ClientApplications
	}
	return nil
}

// GetServerId returns the value of the ServerId struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer. If the receiver or the field ServerId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer) GetServerId() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId {
	if t != nil && t.ServerId != nil {
		return t.ServerId
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetPreferredLifetime retrieves the value of the leaf PreferredLifetime from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferredLifetime is set, it can
// safely use t.GetPreferredLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferredLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer) GetPreferredLifetime() NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_PreferredLifetime_Union {
	if t == nil || t.PreferredLifetime == nil {
		return UnionUint32(3600)
	}
	return t.PreferredLifetime
}

// GetRebindTimer retrieves the value of the leaf RebindTimer from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RebindTimer is set, it can
// safely use t.GetRebindTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RebindTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer) GetRebindTimer() uint32 {
	if t == nil || t.RebindTimer == nil {
		return 2880
	}
	return *t.RebindTimer
}

// GetRenewTimer retrieves the value of the leaf RenewTimer from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RenewTimer is set, it can
// safely use t.GetRenewTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RenewTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer) GetRenewTimer() uint32 {
	if t == nil || t.RenewTimer == nil {
		return 1800
	}
	return *t.RenewTimer
}

// GetValidLifetime retrieves the value of the leaf ValidLifetime from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidLifetime is set, it can
// safely use t.GetValidLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer) GetValidLifetime() NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ValidLifetime_Union {
	if t == nil || t.ValidLifetime == nil {
		return UnionUint32(86400)
	}
	return t.ValidLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.PreferredLifetime == nil {
		t.PreferredLifetime = UnionUint32(3600)
	}
	if t.RebindTimer == nil {
		var v uint32 = 2880
		t.RebindTimer = &v
	}
	if t.RenewTimer == nil {
		var v uint32 = 1800
		t.RenewTimer = &v
	}
	if t.ValidLifetime == nil {
		t.ValidLifetime = UnionUint32(86400)
	}
	t.ClientApplications.PopulateDefaults()
	t.ServerId.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv6/dhcp6/proxy-server/client-applications YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications struct {
	Dhcp *bool `path:"dhcp" module:"nokia-conf"`
	Ppp  *bool `path:"ppp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications) IsYANGGoStruct() {
}

// GetDhcp retrieves the value of the leaf Dhcp from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcp is set, it can
// safely use t.GetDhcp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications) GetDhcp() bool {
	if t == nil || t.Dhcp == nil {
		return true
	}
	return *t.Dhcp
}

// GetPpp retrieves the value of the leaf Ppp from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ppp is set, it can
// safely use t.GetPpp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ppp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications) GetPpp() bool {
	if t == nil || t.Ppp == nil {
		return false
	}
	return *t.Ppp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Dhcp == nil {
		var v bool = true
		t.Dhcp = &v
	}
	if t.Ppp == nil {
		var v bool = false
		t.Ppp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv6/dhcp6/proxy-server/server-id YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId struct {
	DuidEnAscii *string   `path:"duid-en-ascii" module:"nokia-conf"`
	DuidEnHex   *string   `path:"duid-en-hex" module:"nokia-conf"`
	DuidLl      YANGEmpty `path:"duid-ll" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId) IsYANGGoStruct() {
}

// GetDuidEnAscii retrieves the value of the leaf DuidEnAscii from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DuidEnAscii is set, it can
// safely use t.GetDuidEnAscii() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DuidEnAscii == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId) GetDuidEnAscii() string {
	if t == nil || t.DuidEnAscii == nil {
		return ""
	}
	return *t.DuidEnAscii
}

// GetDuidEnHex retrieves the value of the leaf DuidEnHex from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DuidEnHex is set, it can
// safely use t.GetDuidEnHex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DuidEnHex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId) GetDuidEnHex() string {
	if t == nil || t.DuidEnHex == nil {
		return ""
	}
	return *t.DuidEnHex
}

// GetDuidLl retrieves the value of the leaf DuidLl from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DuidLl is set, it can
// safely use t.GetDuidLl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DuidLl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId) GetDuidLl() YANGEmpty {
	if t == nil || t.DuidLl == false {
		return false
	}
	return t.DuidLl
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_ProxyServer_ServerId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv6/dhcp6/relay YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                            `path:"admin-state" module:"nokia-conf"`
	AdvertiseSelection *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection `path:"advertise-selection" module:"nokia-conf"`
	ClientApplications *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications `path:"client-applications" module:"nokia-conf"`
	Description        *string                                                                                                `path:"description" module:"nokia-conf"`
	LeaseSplit         *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit         `path:"lease-split" module:"nokia-conf"`
	LinkAddress        *string                                                                                                `path:"link-address" module:"nokia-conf"`
	Server             []string                                                                                               `path:"server" module:"nokia-conf"`
	SourceAddress      *string                                                                                                `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay) IsYANGGoStruct() {
}

// GetOrCreateAdvertiseSelection retrieves the value of the AdvertiseSelection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay) GetOrCreateAdvertiseSelection() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection {
	if t.AdvertiseSelection != nil {
		return t.AdvertiseSelection
	}
	t.AdvertiseSelection = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection{}
	return t.AdvertiseSelection
}

// GetOrCreateClientApplications retrieves the value of the ClientApplications field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay) GetOrCreateClientApplications() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications {
	if t.ClientApplications != nil {
		return t.ClientApplications
	}
	t.ClientApplications = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications{}
	return t.ClientApplications
}

// GetOrCreateLeaseSplit retrieves the value of the LeaseSplit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay) GetOrCreateLeaseSplit() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit {
	if t.LeaseSplit != nil {
		return t.LeaseSplit
	}
	t.LeaseSplit = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit{}
	return t.LeaseSplit
}

// GetAdvertiseSelection returns the value of the AdvertiseSelection struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay. If the receiver or the field AdvertiseSelection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay) GetAdvertiseSelection() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection {
	if t != nil && t.AdvertiseSelection != nil {
		return t.AdvertiseSelection
	}
	return nil
}

// GetClientApplications returns the value of the ClientApplications struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay. If the receiver or the field ClientApplications is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay) GetClientApplications() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications {
	if t != nil && t.ClientApplications != nil {
		return t.ClientApplications
	}
	return nil
}

// GetLeaseSplit returns the value of the LeaseSplit struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay. If the receiver or the field LeaseSplit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay) GetLeaseSplit() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit {
	if t != nil && t.LeaseSplit != nil {
		return t.LeaseSplit
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLinkAddress retrieves the value of the leaf LinkAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkAddress is set, it can
// safely use t.GetLinkAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay) GetLinkAddress() string {
	if t == nil || t.LinkAddress == nil {
		return ""
	}
	return *t.LinkAddress
}

// GetServer retrieves the value of the leaf Server from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Server is set, it can
// safely use t.GetServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Server == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay) GetServer() []string {
	if t == nil || t.Server == nil {
		return nil
	}
	return t.Server
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.AdvertiseSelection.PopulateDefaults()
	t.ClientApplications.PopulateDefaults()
	t.LeaseSplit.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv6/dhcp6/relay/advertise-selection YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection struct {
	ClientMac        *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac         `path:"client-mac" module:"nokia-conf"`
	PreferenceOption *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_PreferenceOption  `path:"preference-option" module:"nokia-conf"`
	Server           map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server `path:"server" module:"nokia-conf"`
	SolicitDelay     *int32                                                                                                                   `path:"solicit-delay" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection) IsYANGGoStruct() {
}

// NewServer creates a new entry in the Server list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection) NewServer(Ipv6Address string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server)
	}

	key := Ipv6Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server{
		Ipv6Address: &Ipv6Address,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection) RenameServer(oldK, newK string) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Ipv6Address = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection) GetOrCreateServer(Ipv6Address string) *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server {

	key := Ipv6Address

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Ipv6Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection) GetServer(Ipv6Address string) *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server {

	if t == nil {
		return nil
	}

	key := Ipv6Address

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection) DeleteServer(Ipv6Address string) {
	key := Ipv6Address

	delete(t.Server, key)
}

// AppendServer appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server struct to the
// list Server of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection) AppendServer(v *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server) error {
	if v.Ipv6Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Address")
	}

	key := *v.Ipv6Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetOrCreateClientMac retrieves the value of the ClientMac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection) GetOrCreateClientMac() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac {
	if t.ClientMac != nil {
		return t.ClientMac
	}
	t.ClientMac = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac{}
	return t.ClientMac
}

// GetOrCreatePreferenceOption retrieves the value of the PreferenceOption field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection) GetOrCreatePreferenceOption() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_PreferenceOption {
	if t.PreferenceOption != nil {
		return t.PreferenceOption
	}
	t.PreferenceOption = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_PreferenceOption{}
	return t.PreferenceOption
}

// GetClientMac returns the value of the ClientMac struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection. If the receiver or the field ClientMac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection) GetClientMac() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac {
	if t != nil && t.ClientMac != nil {
		return t.ClientMac
	}
	return nil
}

// GetPreferenceOption returns the value of the PreferenceOption struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection. If the receiver or the field PreferenceOption is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection) GetPreferenceOption() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_PreferenceOption {
	if t != nil && t.PreferenceOption != nil {
		return t.PreferenceOption
	}
	return nil
}

// GetSolicitDelay retrieves the value of the leaf SolicitDelay from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SolicitDelay is set, it can
// safely use t.GetSolicitDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SolicitDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection) GetSolicitDelay() int32 {
	if t == nil || t.SolicitDelay == nil {
		return 0
	}
	return *t.SolicitDelay
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ClientMac.PopulateDefaults()
	t.PreferenceOption.PopulateDefaults()
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv6/dhcp6/relay/advertise-selection/client-mac YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac struct {
	MacAddress       E_NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_MacAddress      `path:"mac-address" module:"nokia-conf"`
	PreferenceOption *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_PreferenceOption `path:"preference-option" module:"nokia-conf"`
	SolicitDelay     *int32                                                                                                                            `path:"solicit-delay" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac) IsYANGGoStruct() {
}

// GetOrCreatePreferenceOption retrieves the value of the PreferenceOption field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac) GetOrCreatePreferenceOption() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_PreferenceOption {
	if t.PreferenceOption != nil {
		return t.PreferenceOption
	}
	t.PreferenceOption = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_PreferenceOption{}
	return t.PreferenceOption
}

// GetPreferenceOption returns the value of the PreferenceOption struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac. If the receiver or the field PreferenceOption is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac) GetPreferenceOption() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_PreferenceOption {
	if t != nil && t.PreferenceOption != nil {
		return t.PreferenceOption
	}
	return nil
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac) GetMacAddress() E_NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_MacAddress {
	if t == nil || t.MacAddress == 0 {
		return 0
	}
	return t.MacAddress
}

// GetSolicitDelay retrieves the value of the leaf SolicitDelay from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SolicitDelay is set, it can
// safely use t.GetSolicitDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SolicitDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac) GetSolicitDelay() int32 {
	if t == nil || t.SolicitDelay == nil {
		return 0
	}
	return *t.SolicitDelay
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PreferenceOption.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_PreferenceOption represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv6/dhcp6/relay/advertise-selection/client-mac/preference-option YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_PreferenceOption struct {
	Value *int32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_PreferenceOption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_PreferenceOption) IsYANGGoStruct() {
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_PreferenceOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_PreferenceOption) GetValue() int32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_PreferenceOption
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_PreferenceOption) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_PreferenceOption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_PreferenceOption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_PreferenceOption) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_PreferenceOption) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_PreferenceOption.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_PreferenceOption) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_PreferenceOption represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv6/dhcp6/relay/advertise-selection/preference-option YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_PreferenceOption struct {
	Value *int32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_PreferenceOption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_PreferenceOption) IsYANGGoStruct() {
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_PreferenceOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_PreferenceOption) GetValue() int32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_PreferenceOption
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_PreferenceOption) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_PreferenceOption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_PreferenceOption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_PreferenceOption) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_PreferenceOption) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_PreferenceOption.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_PreferenceOption) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv6/dhcp6/relay/advertise-selection/server YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server struct {
	Ipv6Address      *string                                                                                                                        `path:"ipv6-address" module:"nokia-conf"`
	PreferenceOption *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server_PreferenceOption `path:"preference-option" module:"nokia-conf"`
	SolicitDelay     *int32                                                                                                                         `path:"solicit-delay" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server) IsYANGGoStruct() {
}

// GetOrCreatePreferenceOption retrieves the value of the PreferenceOption field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server) GetOrCreatePreferenceOption() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server_PreferenceOption {
	if t.PreferenceOption != nil {
		return t.PreferenceOption
	}
	t.PreferenceOption = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server_PreferenceOption{}
	return t.PreferenceOption
}

// GetPreferenceOption returns the value of the PreferenceOption struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server. If the receiver or the field PreferenceOption is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server) GetPreferenceOption() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server_PreferenceOption {
	if t != nil && t.PreferenceOption != nil {
		return t.PreferenceOption
	}
	return nil
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server) GetIpv6Address() string {
	if t == nil || t.Ipv6Address == nil {
		return ""
	}
	return *t.Ipv6Address
}

// GetSolicitDelay retrieves the value of the leaf SolicitDelay from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SolicitDelay is set, it can
// safely use t.GetSolicitDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SolicitDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server) GetSolicitDelay() int32 {
	if t == nil || t.SolicitDelay == nil {
		return 0
	}
	return *t.SolicitDelay
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PreferenceOption.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Address")
	}

	return map[string]interface{}{
		"ipv6-address": *t.Ipv6Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server_PreferenceOption represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv6/dhcp6/relay/advertise-selection/server/preference-option YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server_PreferenceOption struct {
	Value *int32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server_PreferenceOption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server_PreferenceOption) IsYANGGoStruct() {
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server_PreferenceOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server_PreferenceOption) GetValue() int32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server_PreferenceOption
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server_PreferenceOption) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server_PreferenceOption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server_PreferenceOption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server_PreferenceOption) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server_PreferenceOption) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server_PreferenceOption.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server_PreferenceOption) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv6/dhcp6/relay/client-applications YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications struct {
	Dhcp *bool `path:"dhcp" module:"nokia-conf"`
	Ppp  *bool `path:"ppp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications) IsYANGGoStruct() {
}

// GetDhcp retrieves the value of the leaf Dhcp from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcp is set, it can
// safely use t.GetDhcp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications) GetDhcp() bool {
	if t == nil || t.Dhcp == nil {
		return true
	}
	return *t.Dhcp
}

// GetPpp retrieves the value of the leaf Ppp from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ppp is set, it can
// safely use t.GetPpp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ppp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications) GetPpp() bool {
	if t == nil || t.Ppp == nil {
		return false
	}
	return *t.Ppp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Dhcp == nil {
		var v bool = true
		t.Dhcp = &v
	}
	if t.Ppp == nil {
		var v bool = false
		t.Ppp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_ClientApplications) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv6/dhcp6/relay/lease-split YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit struct {
	AdminState    E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ValidLifetime *uint32                     `path:"valid-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetValidLifetime retrieves the value of the leaf ValidLifetime from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidLifetime is set, it can
// safely use t.GetValidLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit) GetValidLifetime() uint32 {
	if t == nil || t.ValidLifetime == nil {
		return 3600
	}
	return *t.ValidLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ValidLifetime == nil {
		var v uint32 = 3600
		t.ValidLifetime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Dhcp6_Relay_LeaseSplit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_LinkLocalAddress represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv6/link-local-address YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_LinkLocalAddress struct {
	Address *string `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_LinkLocalAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_LinkLocalAddress) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_LinkLocalAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_LinkLocalAddress) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_LinkLocalAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_LinkLocalAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_LinkLocalAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_LinkLocalAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_LinkLocalAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_LinkLocalAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_LinkLocalAddress.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_LinkLocalAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Prefix represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv6/prefix YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Prefix struct {
	HoldupTime *uint32                                                                                  `path:"holdup-time" module:"nokia-conf"`
	HostType   E_NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Prefix_HostType `path:"host-type" module:"nokia-conf"`
	Ipv6Prefix *string                                                                                  `path:"ipv6-prefix" module:"nokia-conf"`
	TrackSrrp  *uint32                                                                                  `path:"track-srrp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Prefix) IsYANGGoStruct() {
}

// GetHoldupTime retrieves the value of the leaf HoldupTime from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldupTime is set, it can
// safely use t.GetHoldupTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldupTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Prefix) GetHoldupTime() uint32 {
	if t == nil || t.HoldupTime == nil {
		return 0
	}
	return *t.HoldupTime
}

// GetHostType retrieves the value of the leaf HostType from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostType is set, it can
// safely use t.GetHostType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Prefix) GetHostType() E_NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Prefix_HostType {
	if t == nil || t.HostType == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Prefix_HostType_pd
	}
	return t.HostType
}

// GetIpv6Prefix retrieves the value of the leaf Ipv6Prefix from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Prefix is set, it can
// safely use t.GetIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Prefix) GetIpv6Prefix() string {
	if t == nil || t.Ipv6Prefix == nil {
		return ""
	}
	return *t.Ipv6Prefix
}

// GetTrackSrrp retrieves the value of the leaf TrackSrrp from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrackSrrp is set, it can
// safely use t.GetTrackSrrp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrackSrrp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Prefix) GetTrackSrrp() uint32 {
	if t == nil || t.TrackSrrp == nil {
		return 0
	}
	return *t.TrackSrrp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HostType == 0 {
		t.HostType = NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Prefix_HostType_pd
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Prefix")
	}

	return map[string]interface{}{
		"ipv6-prefix": *t.Ipv6Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Prefix.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv6/router-advertisements YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements struct {
	AdminState               E_NokiaTypesSros_AdminState                                                                                `path:"admin-state" module:"nokia-conf"`
	ForceMcast               E_NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_ForceMcast   `path:"force-mcast" module:"nokia-conf"`
	MaxAdvertisementInterval *uint32                                                                                                    `path:"max-advertisement-interval" module:"nokia-conf"`
	MinAdvertisementInterval *uint32                                                                                                    `path:"min-advertisement-interval" module:"nokia-conf"`
	Options                  *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options       `path:"options" module:"nokia-conf"`
	PrefixOptions            *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions `path:"prefix-options" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements) IsYANGGoStruct() {
}

// GetOrCreateOptions retrieves the value of the Options field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements) GetOrCreateOptions() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options {
	if t.Options != nil {
		return t.Options
	}
	t.Options = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options{}
	return t.Options
}

// GetOrCreatePrefixOptions retrieves the value of the PrefixOptions field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements) GetOrCreatePrefixOptions() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions {
	if t.PrefixOptions != nil {
		return t.PrefixOptions
	}
	t.PrefixOptions = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions{}
	return t.PrefixOptions
}

// GetOptions returns the value of the Options struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements. If the receiver or the field Options is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements) GetOptions() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options {
	if t != nil && t.Options != nil {
		return t.Options
	}
	return nil
}

// GetPrefixOptions returns the value of the PrefixOptions struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements. If the receiver or the field PrefixOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements) GetPrefixOptions() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions {
	if t != nil && t.PrefixOptions != nil {
		return t.PrefixOptions
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetForceMcast retrieves the value of the leaf ForceMcast from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForceMcast is set, it can
// safely use t.GetForceMcast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForceMcast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements) GetForceMcast() E_NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_ForceMcast {
	if t == nil || t.ForceMcast == 0 {
		return 0
	}
	return t.ForceMcast
}

// GetMaxAdvertisementInterval retrieves the value of the leaf MaxAdvertisementInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxAdvertisementInterval is set, it can
// safely use t.GetMaxAdvertisementInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxAdvertisementInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements) GetMaxAdvertisementInterval() uint32 {
	if t == nil || t.MaxAdvertisementInterval == nil {
		return 1800
	}
	return *t.MaxAdvertisementInterval
}

// GetMinAdvertisementInterval retrieves the value of the leaf MinAdvertisementInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinAdvertisementInterval is set, it can
// safely use t.GetMinAdvertisementInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinAdvertisementInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements) GetMinAdvertisementInterval() uint32 {
	if t == nil || t.MinAdvertisementInterval == nil {
		return 900
	}
	return *t.MinAdvertisementInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.MaxAdvertisementInterval == nil {
		var v uint32 = 1800
		t.MaxAdvertisementInterval = &v
	}
	if t.MinAdvertisementInterval == nil {
		var v uint32 = 900
		t.MinAdvertisementInterval = &v
	}
	t.Options.PopulateDefaults()
	t.PrefixOptions.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv6/router-advertisements/options YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options struct {
	CurrentHopLimit            *uint32                                                                                                                  `path:"current-hop-limit" module:"nokia-conf"`
	Dns                        *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns                 `path:"dns" module:"nokia-conf"`
	ManagedConfiguration       *bool                                                                                                                    `path:"managed-configuration" module:"nokia-conf"`
	Mtu                        NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Mtu_Union            `path:"mtu" module:"nokia-conf"`
	OtherStatefulConfiguration *bool                                                                                                                    `path:"other-stateful-configuration" module:"nokia-conf"`
	ReachableTime              *uint32                                                                                                                  `path:"reachable-time" module:"nokia-conf"`
	RetransmitTimer            *uint32                                                                                                                  `path:"retransmit-timer" module:"nokia-conf"`
	RouterLifetime             NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options_RouterLifetime_Union `path:"router-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options) IsYANGGoStruct() {
}

// GetOrCreateDns retrieves the value of the Dns field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options) GetOrCreateDns() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns {
	if t.Dns != nil {
		return t.Dns
	}
	t.Dns = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns{}
	return t.Dns
}

// GetDns returns the value of the Dns struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options. If the receiver or the field Dns is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options) GetDns() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns {
	if t != nil && t.Dns != nil {
		return t.Dns
	}
	return nil
}

// GetCurrentHopLimit retrieves the value of the leaf CurrentHopLimit from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CurrentHopLimit is set, it can
// safely use t.GetCurrentHopLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CurrentHopLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options) GetCurrentHopLimit() uint32 {
	if t == nil || t.CurrentHopLimit == nil {
		return 64
	}
	return *t.CurrentHopLimit
}

// GetManagedConfiguration retrieves the value of the leaf ManagedConfiguration from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ManagedConfiguration is set, it can
// safely use t.GetManagedConfiguration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ManagedConfiguration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options) GetManagedConfiguration() bool {
	if t == nil || t.ManagedConfiguration == nil {
		return false
	}
	return *t.ManagedConfiguration
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options) GetMtu() NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Mtu_Union {
	if t == nil || t.Mtu == nil {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Mtu_Enum_not_included
	}
	return t.Mtu
}

// GetOtherStatefulConfiguration retrieves the value of the leaf OtherStatefulConfiguration from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OtherStatefulConfiguration is set, it can
// safely use t.GetOtherStatefulConfiguration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OtherStatefulConfiguration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options) GetOtherStatefulConfiguration() bool {
	if t == nil || t.OtherStatefulConfiguration == nil {
		return false
	}
	return *t.OtherStatefulConfiguration
}

// GetReachableTime retrieves the value of the leaf ReachableTime from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReachableTime is set, it can
// safely use t.GetReachableTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReachableTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options) GetReachableTime() uint32 {
	if t == nil || t.ReachableTime == nil {
		return 0
	}
	return *t.ReachableTime
}

// GetRetransmitTimer retrieves the value of the leaf RetransmitTimer from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetransmitTimer is set, it can
// safely use t.GetRetransmitTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetransmitTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options) GetRetransmitTimer() uint32 {
	if t == nil || t.RetransmitTimer == nil {
		return 0
	}
	return *t.RetransmitTimer
}

// GetRouterLifetime retrieves the value of the leaf RouterLifetime from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterLifetime is set, it can
// safely use t.GetRouterLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options) GetRouterLifetime() NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options_RouterLifetime_Union {
	if t == nil || t.RouterLifetime == nil {
		return UnionUint32(4500)
	}
	return t.RouterLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CurrentHopLimit == nil {
		var v uint32 = 64
		t.CurrentHopLimit = &v
	}
	if t.ManagedConfiguration == nil {
		var v bool = false
		t.ManagedConfiguration = &v
	}
	if t.Mtu == nil {
		t.Mtu = NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Mtu_Enum_not_included
	}
	if t.OtherStatefulConfiguration == nil {
		var v bool = false
		t.OtherStatefulConfiguration = &v
	}
	if t.ReachableTime == nil {
		var v uint32 = 0
		t.ReachableTime = &v
	}
	if t.RetransmitTimer == nil {
		var v uint32 = 0
		t.RetransmitTimer = &v
	}
	if t.RouterLifetime == nil {
		t.RouterLifetime = UnionUint32(4500)
	}
	t.Dns.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv6/router-advertisements/options/dns YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns struct {
	IncludeRdnss  *bool                                                                                                                       `path:"include-rdnss" module:"nokia-conf"`
	RdnssLifetime NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns_RdnssLifetime_Union `path:"rdnss-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns) IsYANGGoStruct() {
}

// GetIncludeRdnss retrieves the value of the leaf IncludeRdnss from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncludeRdnss is set, it can
// safely use t.GetIncludeRdnss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncludeRdnss == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns) GetIncludeRdnss() bool {
	if t == nil || t.IncludeRdnss == nil {
		return false
	}
	return *t.IncludeRdnss
}

// GetRdnssLifetime retrieves the value of the leaf RdnssLifetime from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RdnssLifetime is set, it can
// safely use t.GetRdnssLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RdnssLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns) GetRdnssLifetime() NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns_RdnssLifetime_Union {
	if t == nil || t.RdnssLifetime == nil {
		return UnionUint32(3600)
	}
	return t.RdnssLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IncludeRdnss == nil {
		var v bool = false
		t.IncludeRdnss = &v
	}
	if t.RdnssLifetime == nil {
		t.RdnssLifetime = UnionUint32(3600)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_Options_Dns) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv6/router-advertisements/prefix-options YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions struct {
	Autonomous        *bool                                                                                                                             `path:"autonomous" module:"nokia-conf"`
	OnLink            *bool                                                                                                                             `path:"on-link" module:"nokia-conf"`
	PreferredLifetime NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions_PreferredLifetime_Union `path:"preferred-lifetime" module:"nokia-conf"`
	ValidLifetime     NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions_ValidLifetime_Union     `path:"valid-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions) IsYANGGoStruct() {
}

// GetAutonomous retrieves the value of the leaf Autonomous from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Autonomous is set, it can
// safely use t.GetAutonomous() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Autonomous == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions) GetAutonomous() bool {
	if t == nil || t.Autonomous == nil {
		return false
	}
	return *t.Autonomous
}

// GetOnLink retrieves the value of the leaf OnLink from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OnLink is set, it can
// safely use t.GetOnLink() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OnLink == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions) GetOnLink() bool {
	if t == nil || t.OnLink == nil {
		return true
	}
	return *t.OnLink
}

// GetPreferredLifetime retrieves the value of the leaf PreferredLifetime from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferredLifetime is set, it can
// safely use t.GetPreferredLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferredLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions) GetPreferredLifetime() NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions_PreferredLifetime_Union {
	if t == nil || t.PreferredLifetime == nil {
		return UnionUint32(3600)
	}
	return t.PreferredLifetime
}

// GetValidLifetime retrieves the value of the leaf ValidLifetime from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidLifetime is set, it can
// safely use t.GetValidLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions) GetValidLifetime() NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions_ValidLifetime_Union {
	if t == nil || t.ValidLifetime == nil {
		return UnionUint32(86400)
	}
	return t.ValidLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Autonomous == nil {
		var v bool = false
		t.Autonomous = &v
	}
	if t.OnLink == nil {
		var v bool = true
		t.OnLink = &v
	}
	if t.PreferredLifetime == nil {
		t.PreferredLifetime = UnionUint32(3600)
	}
	if t.ValidLifetime == nil {
		t.ValidLifetime = UnionUint32(86400)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterAdvertisements_PrefixOptions) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterSolicit represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/ipv6/router-solicit YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterSolicit struct {
	InactivityTimer NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterSolicit_InactivityTimer_Union `path:"inactivity-timer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterSolicit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterSolicit) IsYANGGoStruct() {
}

// GetInactivityTimer retrieves the value of the leaf InactivityTimer from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterSolicit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InactivityTimer is set, it can
// safely use t.GetInactivityTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InactivityTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterSolicit) GetInactivityTimer() NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterSolicit_InactivityTimer_Union {
	if t == nil || t.InactivityTimer == nil {
		return UnionUint32(300)
	}
	return t.InactivityTimer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterSolicit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterSolicit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InactivityTimer == nil {
		t.InactivityTimer = UnionUint32(300)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterSolicit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterSolicit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterSolicit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterSolicit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterSolicit.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Ipv6_RouterSolicit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/local-address-assignment YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment struct {
	AdminState E_NokiaTypesSros_AdminState                                                                    `path:"admin-state" module:"nokia-conf"`
	Ipv4       *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4 `path:"ipv4" module:"nokia-conf"`
	Ipv6       *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6 `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment) IsYANGGoStruct() {
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment) GetOrCreateIpv6() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6{}
	return t.Ipv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment) GetIpv4() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment) GetIpv6() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4 represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/local-address-assignment/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4 struct {
	ClientApplications *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4_ClientApplications `path:"client-applications" module:"nokia-conf"`
	DefaultPool        []string                                                                                                          `path:"default-pool" module:"nokia-conf"`
	Server             *string                                                                                                           `path:"server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4) IsYANGGoStruct() {
}

// GetOrCreateClientApplications retrieves the value of the ClientApplications field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4) GetOrCreateClientApplications() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4_ClientApplications {
	if t.ClientApplications != nil {
		return t.ClientApplications
	}
	t.ClientApplications = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4_ClientApplications{}
	return t.ClientApplications
}

// GetClientApplications returns the value of the ClientApplications struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4. If the receiver or the field ClientApplications is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4) GetClientApplications() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4_ClientApplications {
	if t != nil && t.ClientApplications != nil {
		return t.ClientApplications
	}
	return nil
}

// GetDefaultPool retrieves the value of the leaf DefaultPool from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultPool is set, it can
// safely use t.GetDefaultPool() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultPool == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4) GetDefaultPool() []string {
	if t == nil || t.DefaultPool == nil {
		return nil
	}
	return t.DefaultPool
}

// GetServer retrieves the value of the leaf Server from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Server is set, it can
// safely use t.GetServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Server == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4) GetServer() string {
	if t == nil || t.Server == nil {
		return ""
	}
	return *t.Server
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ClientApplications.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4_ClientApplications represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/local-address-assignment/ipv4/client-applications YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4_ClientApplications struct {
	Ppp *bool `path:"ppp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4_ClientApplications implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4_ClientApplications) IsYANGGoStruct() {
}

// GetPpp retrieves the value of the leaf Ppp from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4_ClientApplications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ppp is set, it can
// safely use t.GetPpp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ppp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4_ClientApplications) GetPpp() bool {
	if t == nil || t.Ppp == nil {
		return false
	}
	return *t.Ppp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4_ClientApplications
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4_ClientApplications) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ppp == nil {
		var v bool = false
		t.Ppp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4_ClientApplications) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4_ClientApplications"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4_ClientApplications) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4_ClientApplications) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4_ClientApplications.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv4_ClientApplications) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6 represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/local-address-assignment/ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6 struct {
	ClientApplications *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications `path:"client-applications" module:"nokia-conf"`
	Server             *string                                                                                                           `path:"server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6) IsYANGGoStruct() {
}

// GetOrCreateClientApplications retrieves the value of the ClientApplications field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6) GetOrCreateClientApplications() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications {
	if t.ClientApplications != nil {
		return t.ClientApplications
	}
	t.ClientApplications = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications{}
	return t.ClientApplications
}

// GetClientApplications returns the value of the ClientApplications struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6. If the receiver or the field ClientApplications is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6) GetClientApplications() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications {
	if t != nil && t.ClientApplications != nil {
		return t.ClientApplications
	}
	return nil
}

// GetServer retrieves the value of the leaf Server from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Server is set, it can
// safely use t.GetServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Server == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6) GetServer() string {
	if t == nil || t.Server == nil {
		return ""
	}
	return *t.Server
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ClientApplications.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/local-address-assignment/ipv6/client-applications YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications struct {
	IpoeSlaac *bool `path:"ipoe-slaac" module:"nokia-conf"`
	IpoeWan   *bool `path:"ipoe-wan" module:"nokia-conf"`
	PppSlaac  *bool `path:"ppp-slaac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications) IsYANGGoStruct() {
}

// GetIpoeSlaac retrieves the value of the leaf IpoeSlaac from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpoeSlaac is set, it can
// safely use t.GetIpoeSlaac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpoeSlaac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications) GetIpoeSlaac() bool {
	if t == nil || t.IpoeSlaac == nil {
		return false
	}
	return *t.IpoeSlaac
}

// GetIpoeWan retrieves the value of the leaf IpoeWan from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpoeWan is set, it can
// safely use t.GetIpoeWan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpoeWan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications) GetIpoeWan() bool {
	if t == nil || t.IpoeWan == nil {
		return false
	}
	return *t.IpoeWan
}

// GetPppSlaac retrieves the value of the leaf PppSlaac from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PppSlaac is set, it can
// safely use t.GetPppSlaac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PppSlaac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications) GetPppSlaac() bool {
	if t == nil || t.PppSlaac == nil {
		return false
	}
	return *t.PppSlaac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IpoeSlaac == nil {
		var v bool = false
		t.IpoeSlaac = &v
	}
	if t.IpoeWan == nil {
		var v bool = false
		t.IpoeWan = &v
	}
	if t.PppSlaac == nil {
		var v bool = false
		t.PppSlaac = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_LocalAddressAssignment_Ipv6_ClientApplications) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Pppoe represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/pppoe YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Pppoe struct {
	Description  *string `path:"description" module:"nokia-conf"`
	SessionLimit *uint32 `path:"session-limit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Pppoe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Pppoe) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Pppoe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Pppoe) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSessionLimit retrieves the value of the leaf SessionLimit from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Pppoe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionLimit is set, it can
// safely use t.GetSessionLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Pppoe) GetSessionLimit() uint32 {
	if t == nil || t.SessionLimit == nil {
		return 1
	}
	return *t.SessionLimit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Pppoe
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Pppoe) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SessionLimit == nil {
		var v uint32 = 1
		t.SessionLimit = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Pppoe) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Pppoe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Pppoe) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Pppoe) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Pppoe.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_Pppoe) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/wlan-gw YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw struct {
	PoolManager *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager `path:"pool-manager" module:"nokia-conf" yangPresence:"true"`
	Redundancy  *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_Redundancy  `path:"redundancy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw) IsYANGGoStruct() {}

// GetOrCreatePoolManager retrieves the value of the PoolManager field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw) GetOrCreatePoolManager() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager {
	if t.PoolManager != nil {
		return t.PoolManager
	}
	t.PoolManager = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager{}
	return t.PoolManager
}

// GetOrCreateRedundancy retrieves the value of the Redundancy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw) GetOrCreateRedundancy() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_Redundancy {
	if t.Redundancy != nil {
		return t.Redundancy
	}
	t.Redundancy = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_Redundancy{}
	return t.Redundancy
}

// GetPoolManager returns the value of the PoolManager struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw. If the receiver or the field PoolManager is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw) GetPoolManager() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager {
	if t != nil && t.PoolManager != nil {
		return t.PoolManager
	}
	return nil
}

// GetRedundancy returns the value of the Redundancy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw. If the receiver or the field Redundancy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw) GetRedundancy() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_Redundancy {
	if t != nil && t.Redundancy != nil {
		return t.Redundancy
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PoolManager.PopulateDefaults()
	t.Redundancy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/wlan-gw/pool-manager YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager struct {
	Dhcp6Client *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client `path:"dhcp6-client" module:"nokia-conf"`
	Watermarks  *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Watermarks  `path:"watermarks" module:"nokia-conf"`
	WlanGwGroup *uint32                                                                                           `path:"wlan-gw-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager) IsYANGGoStruct() {
}

// GetOrCreateDhcp6Client retrieves the value of the Dhcp6Client field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager) GetOrCreateDhcp6Client() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client {
	if t.Dhcp6Client != nil {
		return t.Dhcp6Client
	}
	t.Dhcp6Client = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client{}
	return t.Dhcp6Client
}

// GetOrCreateWatermarks retrieves the value of the Watermarks field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager) GetOrCreateWatermarks() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Watermarks {
	if t.Watermarks != nil {
		return t.Watermarks
	}
	t.Watermarks = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Watermarks{}
	return t.Watermarks
}

// GetDhcp6Client returns the value of the Dhcp6Client struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager. If the receiver or the field Dhcp6Client is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager) GetDhcp6Client() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client {
	if t != nil && t.Dhcp6Client != nil {
		return t.Dhcp6Client
	}
	return nil
}

// GetWatermarks returns the value of the Watermarks struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager. If the receiver or the field Watermarks is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager) GetWatermarks() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Watermarks {
	if t != nil && t.Watermarks != nil {
		return t.Watermarks
	}
	return nil
}

// GetWlanGwGroup retrieves the value of the leaf WlanGwGroup from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WlanGwGroup is set, it can
// safely use t.GetWlanGwGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WlanGwGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager) GetWlanGwGroup() uint32 {
	if t == nil || t.WlanGwGroup == nil {
		return 0
	}
	return *t.WlanGwGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Dhcp6Client.PopulateDefaults()
	t.Watermarks.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/wlan-gw/pool-manager/dhcp6-client YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client struct {
	Dhcpv4Nat  *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat     `path:"dhcpv4-nat" module:"nokia-conf"`
	IaNa       *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa          `path:"ia-na" module:"nokia-conf"`
	LeaseQuery *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_LeaseQuery    `path:"lease-query" module:"nokia-conf" yangPresence:"true"`
	Servers    []string                                                                                                        `path:"servers" module:"nokia-conf"`
	Slaac      *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac         `path:"slaac" module:"nokia-conf"`
	SourceIp   NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_SourceIp_Union `path:"source-ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client) IsYANGGoStruct() {
}

// GetOrCreateDhcpv4Nat retrieves the value of the Dhcpv4Nat field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client) GetOrCreateDhcpv4Nat() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat {
	if t.Dhcpv4Nat != nil {
		return t.Dhcpv4Nat
	}
	t.Dhcpv4Nat = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat{}
	return t.Dhcpv4Nat
}

// GetOrCreateIaNa retrieves the value of the IaNa field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client) GetOrCreateIaNa() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa {
	if t.IaNa != nil {
		return t.IaNa
	}
	t.IaNa = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa{}
	return t.IaNa
}

// GetOrCreateLeaseQuery retrieves the value of the LeaseQuery field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client) GetOrCreateLeaseQuery() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_LeaseQuery {
	if t.LeaseQuery != nil {
		return t.LeaseQuery
	}
	t.LeaseQuery = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_LeaseQuery{}
	return t.LeaseQuery
}

// GetOrCreateSlaac retrieves the value of the Slaac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client) GetOrCreateSlaac() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac {
	if t.Slaac != nil {
		return t.Slaac
	}
	t.Slaac = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac{}
	return t.Slaac
}

// GetDhcpv4Nat returns the value of the Dhcpv4Nat struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client. If the receiver or the field Dhcpv4Nat is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client) GetDhcpv4Nat() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat {
	if t != nil && t.Dhcpv4Nat != nil {
		return t.Dhcpv4Nat
	}
	return nil
}

// GetIaNa returns the value of the IaNa struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client. If the receiver or the field IaNa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client) GetIaNa() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa {
	if t != nil && t.IaNa != nil {
		return t.IaNa
	}
	return nil
}

// GetLeaseQuery returns the value of the LeaseQuery struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client. If the receiver or the field LeaseQuery is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client) GetLeaseQuery() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_LeaseQuery {
	if t != nil && t.LeaseQuery != nil {
		return t.LeaseQuery
	}
	return nil
}

// GetSlaac returns the value of the Slaac struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client. If the receiver or the field Slaac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client) GetSlaac() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac {
	if t != nil && t.Slaac != nil {
		return t.Slaac
	}
	return nil
}

// GetServers retrieves the value of the leaf Servers from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Servers is set, it can
// safely use t.GetServers() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Servers == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client) GetServers() []string {
	if t == nil || t.Servers == nil {
		return nil
	}
	return t.Servers
}

// GetSourceIp retrieves the value of the leaf SourceIp from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceIp is set, it can
// safely use t.GetSourceIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client) GetSourceIp() NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_SourceIp_Union {
	if t == nil || t.SourceIp == nil {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_SourceIp_Enum_use_interface_ip
	}
	return t.SourceIp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SourceIp == nil {
		t.SourceIp = NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_SourceIp_Enum_use_interface_ip
	}
	t.Dhcpv4Nat.PopulateDefaults()
	t.IaNa.PopulateDefaults()
	t.LeaseQuery.PopulateDefaults()
	t.Slaac.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/wlan-gw/pool-manager/dhcp6-client/dhcpv4-nat YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat struct {
	AdminState  E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	LinkAddress *string                     `path:"link-address" module:"nokia-conf"`
	PoolName    *string                     `path:"pool-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetLinkAddress retrieves the value of the leaf LinkAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkAddress is set, it can
// safely use t.GetLinkAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat) GetLinkAddress() string {
	if t == nil || t.LinkAddress == nil {
		return "::"
	}
	return *t.LinkAddress
}

// GetPoolName retrieves the value of the leaf PoolName from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PoolName is set, it can
// safely use t.GetPoolName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PoolName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat) GetPoolName() string {
	if t == nil || t.PoolName == nil {
		return ""
	}
	return *t.PoolName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.LinkAddress == nil {
		var v string = "::"
		t.LinkAddress = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Dhcpv4Nat) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/wlan-gw/pool-manager/dhcp6-client/ia-na YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa struct {
	AdminState  E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	LinkAddress *string                     `path:"link-address" module:"nokia-conf"`
	PoolName    *string                     `path:"pool-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetLinkAddress retrieves the value of the leaf LinkAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkAddress is set, it can
// safely use t.GetLinkAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa) GetLinkAddress() string {
	if t == nil || t.LinkAddress == nil {
		return "::"
	}
	return *t.LinkAddress
}

// GetPoolName retrieves the value of the leaf PoolName from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PoolName is set, it can
// safely use t.GetPoolName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PoolName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa) GetPoolName() string {
	if t == nil || t.PoolName == nil {
		return ""
	}
	return *t.PoolName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.LinkAddress == nil {
		var v string = "::"
		t.LinkAddress = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_IaNa) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_LeaseQuery represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/wlan-gw/pool-manager/dhcp6-client/lease-query YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_LeaseQuery struct {
	MaxRetries *uint32 `path:"max-retries" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_LeaseQuery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_LeaseQuery) IsYANGGoStruct() {
}

// GetMaxRetries retrieves the value of the leaf MaxRetries from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_LeaseQuery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRetries is set, it can
// safely use t.GetMaxRetries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRetries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_LeaseQuery) GetMaxRetries() uint32 {
	if t == nil || t.MaxRetries == nil {
		return 2
	}
	return *t.MaxRetries
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_LeaseQuery
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_LeaseQuery) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxRetries == nil {
		var v uint32 = 2
		t.MaxRetries = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_LeaseQuery) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_LeaseQuery"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_LeaseQuery) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_LeaseQuery) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_LeaseQuery.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_LeaseQuery) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/wlan-gw/pool-manager/dhcp6-client/slaac YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac struct {
	AdminState  E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	LinkAddress *string                     `path:"link-address" module:"nokia-conf"`
	PoolName    *string                     `path:"pool-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetLinkAddress retrieves the value of the leaf LinkAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkAddress is set, it can
// safely use t.GetLinkAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac) GetLinkAddress() string {
	if t == nil || t.LinkAddress == nil {
		return "::"
	}
	return *t.LinkAddress
}

// GetPoolName retrieves the value of the leaf PoolName from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PoolName is set, it can
// safely use t.GetPoolName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PoolName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac) GetPoolName() string {
	if t == nil || t.PoolName == nil {
		return ""
	}
	return *t.PoolName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.LinkAddress == nil {
		var v string = "::"
		t.LinkAddress = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Dhcp6Client_Slaac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Watermarks represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/wlan-gw/pool-manager/watermarks YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Watermarks struct {
	High *uint32 `path:"high" module:"nokia-conf"`
	Low  *uint32 `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Watermarks implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Watermarks) IsYANGGoStruct() {
}

// GetHigh retrieves the value of the leaf High from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if High is set, it can
// safely use t.GetHigh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.High == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Watermarks) GetHigh() uint32 {
	if t == nil || t.High == nil {
		return 95
	}
	return *t.High
}

// GetLow retrieves the value of the leaf Low from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Low is set, it can
// safely use t.GetLow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Low == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Watermarks) GetLow() uint32 {
	if t == nil || t.Low == nil {
		return 90
	}
	return *t.Low
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Watermarks
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Watermarks) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.High == nil {
		var v uint32 = 95
		t.High = &v
	}
	if t.Low == nil {
		var v uint32 = 90
		t.Low = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Watermarks) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Watermarks"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Watermarks) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Watermarks) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Watermarks.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_PoolManager_Watermarks) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_Redundancy represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-interface/wlan-gw/redundancy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_Redundancy struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Export     *string                     `path:"export" module:"nokia-conf"`
	Monitor    *string                     `path:"monitor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_Redundancy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_Redundancy) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_Redundancy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_Redundancy) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetExport retrieves the value of the leaf Export from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_Redundancy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Export is set, it can
// safely use t.GetExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Export == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_Redundancy) GetExport() string {
	if t == nil || t.Export == nil {
		return ""
	}
	return *t.Export
}

// GetMonitor retrieves the value of the leaf Monitor from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_Redundancy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Monitor is set, it can
// safely use t.GetMonitor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Monitor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_Redundancy) GetMonitor() string {
	if t == nil || t.Monitor == nil {
		return ""
	}
	return *t.Monitor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_Redundancy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_Redundancy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_Redundancy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_Redundancy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_Redundancy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_Redundancy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_Redundancy.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberInterface_WlanGw_Redundancy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-mgmt YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt struct {
	MultiChassisShuntId *uint32                                                                    `path:"multi-chassis-shunt-id" module:"nokia-conf"`
	UpResiliency        *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency `path:"up-resiliency" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt) IsYANGGoStruct() {}

// GetOrCreateUpResiliency retrieves the value of the UpResiliency field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt) GetOrCreateUpResiliency() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency {
	if t.UpResiliency != nil {
		return t.UpResiliency
	}
	t.UpResiliency = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency{}
	return t.UpResiliency
}

// GetUpResiliency returns the value of the UpResiliency struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt. If the receiver or the field UpResiliency is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt) GetUpResiliency() *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency {
	if t != nil && t.UpResiliency != nil {
		return t.UpResiliency
	}
	return nil
}

// GetMultiChassisShuntId retrieves the value of the leaf MultiChassisShuntId from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultiChassisShuntId is set, it can
// safely use t.GetMultiChassisShuntId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultiChassisShuntId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt) GetMultiChassisShuntId() uint32 {
	if t == nil || t.MultiChassisShuntId == nil {
		return 0
	}
	return *t.MultiChassisShuntId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.UpResiliency.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-mgmt/up-resiliency YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency struct {
	MonitorOperGroup map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency_MonitorOperGroup `path:"monitor-oper-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency) IsYANGGoStruct() {}

// NewMonitorOperGroup creates a new entry in the MonitorOperGroup list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency) NewMonitorOperGroup(OperGroup string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency_MonitorOperGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MonitorOperGroup == nil {
		t.MonitorOperGroup = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency_MonitorOperGroup)
	}

	key := OperGroup

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MonitorOperGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MonitorOperGroup", key)
	}

	t.MonitorOperGroup[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency_MonitorOperGroup{
		OperGroup: &OperGroup,
	}

	return t.MonitorOperGroup[key], nil
}

// RenameMonitorOperGroup renames an entry in the list MonitorOperGroup within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency) RenameMonitorOperGroup(oldK, newK string) error {
	if _, ok := t.MonitorOperGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in MonitorOperGroup", newK)
	}

	e, ok := t.MonitorOperGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MonitorOperGroup", oldK)
	}
	e.OperGroup = &newK

	t.MonitorOperGroup[newK] = e
	delete(t.MonitorOperGroup, oldK)
	return nil
}

// GetOrCreateMonitorOperGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency) GetOrCreateMonitorOperGroup(OperGroup string) *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency_MonitorOperGroup {

	key := OperGroup

	if v, ok := t.MonitorOperGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMonitorOperGroup(OperGroup)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMonitorOperGroup got unexpected error: %v", err))
	}
	return v
}

// GetMonitorOperGroup retrieves the value with the specified key from
// the MonitorOperGroup map field of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency) GetMonitorOperGroup(OperGroup string) *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency_MonitorOperGroup {

	if t == nil {
		return nil
	}

	key := OperGroup

	if lm, ok := t.MonitorOperGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteMonitorOperGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency) DeleteMonitorOperGroup(OperGroup string) {
	key := OperGroup

	delete(t.MonitorOperGroup, key)
}

// AppendMonitorOperGroup appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency_MonitorOperGroup struct to the
// list MonitorOperGroup of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency_MonitorOperGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency) AppendMonitorOperGroup(v *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency_MonitorOperGroup) error {
	if v.OperGroup == nil {
		return fmt.Errorf("invalid nil key received for OperGroup")
	}

	key := *v.OperGroup

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MonitorOperGroup == nil {
		t.MonitorOperGroup = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency_MonitorOperGroup)
	}

	if _, ok := t.MonitorOperGroup[key]; ok {
		return fmt.Errorf("duplicate key for list MonitorOperGroup %v", key)
	}

	t.MonitorOperGroup[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.MonitorOperGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency_MonitorOperGroup represents the /nokia-conf/configure/groups/group/service/vprn/subscriber-mgmt/up-resiliency/monitor-oper-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency_MonitorOperGroup struct {
	HealthDrop *uint32 `path:"health-drop" module:"nokia-conf"`
	OperGroup  *string `path:"oper-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency_MonitorOperGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency_MonitorOperGroup) IsYANGGoStruct() {
}

// GetHealthDrop retrieves the value of the leaf HealthDrop from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HealthDrop is set, it can
// safely use t.GetHealthDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HealthDrop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency_MonitorOperGroup) GetHealthDrop() uint32 {
	if t == nil || t.HealthDrop == nil {
		return 1
	}
	return *t.HealthDrop
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency_MonitorOperGroup) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency_MonitorOperGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency_MonitorOperGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HealthDrop == nil {
		var v uint32 = 1
		t.HealthDrop = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency_MonitorOperGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency_MonitorOperGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.OperGroup == nil {
		return nil, fmt.Errorf("nil value for key OperGroup")
	}

	return map[string]interface{}{
		"oper-group": *t.OperGroup,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency_MonitorOperGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency_MonitorOperGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency_MonitorOperGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency_MonitorOperGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency_MonitorOperGroup.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_SubscriberMgmt_UpResiliency_MonitorOperGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_TtlPropagate represents the /nokia-conf/configure/groups/group/service/vprn/ttl-propagate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_TtlPropagate struct {
	Local   E_NokiaTypesRouter_VprnTtlPropagate `path:"local" module:"nokia-conf"`
	Transit E_NokiaTypesRouter_VprnTtlPropagate `path:"transit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_TtlPropagate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_TtlPropagate) IsYANGGoStruct() {}

// GetLocal retrieves the value of the leaf Local from the NokiaConf_Configure_Groups_Group_Service_Vprn_TtlPropagate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Local is set, it can
// safely use t.GetLocal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Local == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_TtlPropagate) GetLocal() E_NokiaTypesRouter_VprnTtlPropagate {
	if t == nil || t.Local == 0 {
		return NokiaTypesRouter_VprnTtlPropagate_use_base
	}
	return t.Local
}

// GetTransit retrieves the value of the leaf Transit from the NokiaConf_Configure_Groups_Group_Service_Vprn_TtlPropagate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transit is set, it can
// safely use t.GetTransit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_TtlPropagate) GetTransit() E_NokiaTypesRouter_VprnTtlPropagate {
	if t == nil || t.Transit == 0 {
		return NokiaTypesRouter_VprnTtlPropagate_use_base
	}
	return t.Transit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_TtlPropagate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_TtlPropagate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Local == 0 {
		t.Local = NokiaTypesRouter_VprnTtlPropagate_use_base
	}
	if t.Transit == 0 {
		t.Transit = NokiaTypesRouter_VprnTtlPropagate_use_base
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_TtlPropagate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_TtlPropagate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_TtlPropagate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_TtlPropagate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_TtlPropagate.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_TtlPropagate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight represents the /nokia-conf/configure/groups/group/service/vprn/twamp-light YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight struct {
	Reflector *NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector `path:"reflector" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight) IsYANGGoStruct() {}

// GetOrCreateReflector retrieves the value of the Reflector field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight) GetOrCreateReflector() *NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector {
	if t.Reflector != nil {
		return t.Reflector
	}
	t.Reflector = &NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector{}
	return t.Reflector
}

// GetReflector returns the value of the Reflector struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight. If the receiver or the field Reflector is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight) GetReflector() *NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector {
	if t != nil && t.Reflector != nil {
		return t.Reflector
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Reflector.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector represents the /nokia-conf/configure/groups/group/service/vprn/twamp-light/reflector YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector struct {
	AdminState               E_NokiaTypesSros_AdminState                                                           `path:"admin-state" module:"nokia-conf"`
	AllowIpv6UdpChecksumZero *bool                                                                                 `path:"allow-ipv6-udp-checksum-zero" module:"nokia-conf"`
	Description              *string                                                                               `path:"description" module:"nokia-conf"`
	Prefix                   map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector_Prefix `path:"prefix" module:"nokia-conf"`
	UdpPort                  *int32                                                                                `path:"udp-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector) NewPrefix(IpPrefix string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector_Prefix)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector_Prefix{
		IpPrefix: &IpPrefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.IpPrefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector) GetOrCreatePrefix(IpPrefix string) *NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector_Prefix {

	key := IpPrefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector) GetPrefix(IpPrefix string) *NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector_Prefix {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector) DeletePrefix(IpPrefix string) {
	key := IpPrefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector_Prefix struct to the
// list Prefix of NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector) AppendPrefix(v *NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector_Prefix) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAllowIpv6UdpChecksumZero retrieves the value of the leaf AllowIpv6UdpChecksumZero from the NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowIpv6UdpChecksumZero is set, it can
// safely use t.GetAllowIpv6UdpChecksumZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowIpv6UdpChecksumZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector) GetAllowIpv6UdpChecksumZero() bool {
	if t == nil || t.AllowIpv6UdpChecksumZero == nil {
		return false
	}
	return *t.AllowIpv6UdpChecksumZero
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetUdpPort retrieves the value of the leaf UdpPort from the NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UdpPort is set, it can
// safely use t.GetUdpPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UdpPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector) GetUdpPort() int32 {
	if t == nil || t.UdpPort == nil {
		return 0
	}
	return *t.UdpPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AllowIpv6UdpChecksumZero == nil {
		var v bool = false
		t.AllowIpv6UdpChecksumZero = &v
	}
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector_Prefix represents the /nokia-conf/configure/groups/group/service/vprn/twamp-light/reflector/prefix YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector_Prefix struct {
	Description *string `path:"description" module:"nokia-conf"`
	IpPrefix    *string `path:"ip-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector_Prefix) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector_Prefix) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector_Prefix) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector_Prefix.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_TwampLight_Reflector_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface represents the /nokia-conf/configure/groups/group/service/vprn/video-interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface struct {
	AccountingPolicy *uint32                                                                                                                                            `path:"accounting-policy" module:"nokia-conf"`
	Address          map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Address                                                                   `path:"address" module:"nokia-conf"`
	Adi              *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi                                                                                  `path:"adi" module:"nokia-conf"`
	AdminState       E_NokiaTypesSros_AdminState                                                                                                                        `path:"admin-state" module:"nokia-conf"`
	Channel          map[NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel `path:"channel" module:"nokia-conf"`
	CpuProtection    *uint32                                                                                                                                            `path:"cpu-protection" module:"nokia-conf"`
	Description      *string                                                                                                                                            `path:"description" module:"nokia-conf"`
	InterfaceName    *string                                                                                                                                            `path:"interface-name" module:"nokia-conf"`
	MulticastService *uint32                                                                                                                                            `path:"multicast-service" module:"nokia-conf"`
	OutputFormat     E_NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_OutputFormat                                                                        `path:"output-format" module:"nokia-conf"`
	RtClient         *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_RtClient                                                                             `path:"rt-client" module:"nokia-conf" yangPresence:"true"`
	VideoSap         *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap                                                                             `path:"video-sap" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_Key represents the key for list Channel of element /nokia-conf/configure/groups/group/service/vprn/video-interface.
type NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_Key struct {
	McastAddress string `path:"mcast-address"`
	Source       string `path:"source"`
}

// NewAddress creates a new entry in the Address list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface) NewAddress(IpAddress string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Address, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Address)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Address{
		IpAddress: &IpAddress,
	}

	return t.Address[key], nil
}

// RenameAddress renames an entry in the list Address within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface) RenameAddress(oldK, newK string) error {
	if _, ok := t.Address[newK]; ok {
		return fmt.Errorf("key %v already exists in Address", newK)
	}

	e, ok := t.Address[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Address", oldK)
	}
	e.IpAddress = &newK

	t.Address[newK] = e
	delete(t.Address, oldK)
	return nil
}

// GetOrCreateAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface) GetOrCreateAddress(IpAddress string) *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Address {

	key := IpAddress

	if v, ok := t.Address[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddress(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddress got unexpected error: %v", err))
	}
	return v
}

// GetAddress retrieves the value with the specified key from
// the Address map field of NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface) GetAddress(IpAddress string) *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Address {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.Address[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface) DeleteAddress(IpAddress string) {
	key := IpAddress

	delete(t.Address, key)
}

// AppendAddress appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Address struct to the
// list Address of NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Address already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface) AppendAddress(v *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Address) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Address)
	}

	if _, ok := t.Address[key]; ok {
		return fmt.Errorf("duplicate key for list Address %v", key)
	}

	t.Address[key] = v
	return nil
}

// NewChannel creates a new entry in the Channel list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface) NewChannel(McastAddress string, Source string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Channel == nil {
		t.Channel = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel)
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_Key{
		McastAddress: McastAddress,
		Source:       Source,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Channel[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Channel", key)
	}

	t.Channel[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel{
		McastAddress: &McastAddress,
		Source:       &Source,
	}

	return t.Channel[key], nil
}

// RenameChannel renames an entry in the list Channel within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface) RenameChannel(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_Key) error {
	if _, ok := t.Channel[newK]; ok {
		return fmt.Errorf("key %v already exists in Channel", newK)
	}

	e, ok := t.Channel[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Channel", oldK)
	}
	e.McastAddress = &newK.McastAddress
	e.Source = &newK.Source

	t.Channel[newK] = e
	delete(t.Channel, oldK)
	return nil
}

// GetOrCreateChannel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface) GetOrCreateChannel(McastAddress string, Source string) *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel {

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_Key{
		McastAddress: McastAddress,
		Source:       Source,
	}

	if v, ok := t.Channel[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewChannel(McastAddress, Source)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateChannel got unexpected error: %v", err))
	}
	return v
}

// GetChannel retrieves the value with the specified key from
// the Channel map field of NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface) GetChannel(McastAddress string, Source string) *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_Key{
		McastAddress: McastAddress,
		Source:       Source,
	}

	if lm, ok := t.Channel[key]; ok {
		return lm
	}
	return nil
}

// DeleteChannel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface) DeleteChannel(McastAddress string, Source string) {
	key := NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_Key{
		McastAddress: McastAddress,
		Source:       Source,
	}

	delete(t.Channel, key)
}

// AppendChannel appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel struct to the
// list Channel of NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface) AppendChannel(v *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel) error {
	if v.McastAddress == nil {
		return fmt.Errorf("invalid nil key for McastAddress")
	}

	if v.Source == nil {
		return fmt.Errorf("invalid nil key for Source")
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_Key{
		McastAddress: *v.McastAddress,
		Source:       *v.Source,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Channel == nil {
		t.Channel = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel)
	}

	if _, ok := t.Channel[key]; ok {
		return fmt.Errorf("duplicate key for list Channel %v", key)
	}

	t.Channel[key] = v
	return nil
}

// GetOrCreateAdi retrieves the value of the Adi field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface) GetOrCreateAdi() *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi {
	if t.Adi != nil {
		return t.Adi
	}
	t.Adi = &NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi{}
	return t.Adi
}

// GetOrCreateRtClient retrieves the value of the RtClient field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface) GetOrCreateRtClient() *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_RtClient {
	if t.RtClient != nil {
		return t.RtClient
	}
	t.RtClient = &NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_RtClient{}
	return t.RtClient
}

// GetOrCreateVideoSap retrieves the value of the VideoSap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface) GetOrCreateVideoSap() *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap {
	if t.VideoSap != nil {
		return t.VideoSap
	}
	t.VideoSap = &NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap{}
	return t.VideoSap
}

// GetAdi returns the value of the Adi struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface. If the receiver or the field Adi is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface) GetAdi() *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi {
	if t != nil && t.Adi != nil {
		return t.Adi
	}
	return nil
}

// GetRtClient returns the value of the RtClient struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface. If the receiver or the field RtClient is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface) GetRtClient() *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_RtClient {
	if t != nil && t.RtClient != nil {
		return t.RtClient
	}
	return nil
}

// GetVideoSap returns the value of the VideoSap struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface. If the receiver or the field VideoSap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface) GetVideoSap() *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap {
	if t != nil && t.VideoSap != nil {
		return t.VideoSap
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCpuProtection retrieves the value of the leaf CpuProtection from the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CpuProtection is set, it can
// safely use t.GetCpuProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CpuProtection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface) GetCpuProtection() uint32 {
	if t == nil || t.CpuProtection == nil {
		return 0
	}
	return *t.CpuProtection
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetMulticastService retrieves the value of the leaf MulticastService from the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastService is set, it can
// safely use t.GetMulticastService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastService == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface) GetMulticastService() uint32 {
	if t == nil || t.MulticastService == nil {
		return 0
	}
	return *t.MulticastService
}

// GetOutputFormat retrieves the value of the leaf OutputFormat from the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutputFormat is set, it can
// safely use t.GetOutputFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutputFormat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface) GetOutputFormat() E_NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_OutputFormat {
	if t == nil || t.OutputFormat == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_OutputFormat_rtp_udp
	}
	return t.OutputFormat
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.OutputFormat == 0 {
		t.OutputFormat = NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_OutputFormat_rtp_udp
	}
	t.Adi.PopulateDefaults()
	t.RtClient.PopulateDefaults()
	t.VideoSap.PopulateDefaults()
	for _, e := range t.Address {
		e.PopulateDefaults()
	}
	for _, e := range t.Channel {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Address represents the /nokia-conf/configure/groups/group/service/vprn/video-interface/address YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Address struct {
	IpAddress *string `path:"ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Address) IsYANGGoStruct() {}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Address) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Address
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Address) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Address struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Address) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Address) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Address.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Address) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi represents the /nokia-conf/configure/groups/group/service/vprn/video-interface/adi YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi struct {
	Scte30 *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30 `path:"scte30" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi) IsYANGGoStruct() {}

// GetOrCreateScte30 retrieves the value of the Scte30 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi) GetOrCreateScte30() *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30 {
	if t.Scte30 != nil {
		return t.Scte30
	}
	t.Scte30 = &NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30{}
	return t.Scte30
}

// GetScte30 returns the value of the Scte30 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi. If the receiver or the field Scte30 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi) GetScte30() *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30 {
	if t != nil && t.Scte30 != nil {
		return t.Scte30
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Scte30.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30 represents the /nokia-conf/configure/groups/group/service/vprn/video-interface/adi/scte30 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30 struct {
	AdServer     map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_AdServer `path:"ad-server" module:"nokia-conf"`
	LocalAddress *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_LocalAddress        `path:"local-address" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30) IsYANGGoStruct() {}

// NewAdServer creates a new entry in the AdServer list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30) NewAdServer(Address string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_AdServer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdServer == nil {
		t.AdServer = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_AdServer)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AdServer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AdServer", key)
	}

	t.AdServer[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_AdServer{
		Address: &Address,
	}

	return t.AdServer[key], nil
}

// RenameAdServer renames an entry in the list AdServer within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30) RenameAdServer(oldK, newK string) error {
	if _, ok := t.AdServer[newK]; ok {
		return fmt.Errorf("key %v already exists in AdServer", newK)
	}

	e, ok := t.AdServer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AdServer", oldK)
	}
	e.Address = &newK

	t.AdServer[newK] = e
	delete(t.AdServer, oldK)
	return nil
}

// GetOrCreateAdServer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30) GetOrCreateAdServer(Address string) *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_AdServer {

	key := Address

	if v, ok := t.AdServer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAdServer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAdServer got unexpected error: %v", err))
	}
	return v
}

// GetAdServer retrieves the value with the specified key from
// the AdServer map field of NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30) GetAdServer(Address string) *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_AdServer {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.AdServer[key]; ok {
		return lm
	}
	return nil
}

// DeleteAdServer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30) DeleteAdServer(Address string) {
	key := Address

	delete(t.AdServer, key)
}

// AppendAdServer appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_AdServer struct to the
// list AdServer of NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_AdServer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30) AppendAdServer(v *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_AdServer) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdServer == nil {
		t.AdServer = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_AdServer)
	}

	if _, ok := t.AdServer[key]; ok {
		return fmt.Errorf("duplicate key for list AdServer %v", key)
	}

	t.AdServer[key] = v
	return nil
}

// GetOrCreateLocalAddress retrieves the value of the LocalAddress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30) GetOrCreateLocalAddress() *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_LocalAddress {
	if t.LocalAddress != nil {
		return t.LocalAddress
	}
	t.LocalAddress = &NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_LocalAddress{}
	return t.LocalAddress
}

// GetLocalAddress returns the value of the LocalAddress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30. If the receiver or the field LocalAddress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30) GetLocalAddress() *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_LocalAddress {
	if t != nil && t.LocalAddress != nil {
		return t.LocalAddress
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LocalAddress.PopulateDefaults()
	for _, e := range t.AdServer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_AdServer represents the /nokia-conf/configure/groups/group/service/vprn/video-interface/adi/scte30/ad-server YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_AdServer struct {
	Address *string `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_AdServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_AdServer) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_AdServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_AdServer) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_AdServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_AdServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_AdServer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_AdServer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_AdServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_AdServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_AdServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_AdServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_AdServer.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_AdServer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_LocalAddress represents the /nokia-conf/configure/groups/group/service/vprn/video-interface/adi/scte30/local-address YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_LocalAddress struct {
	Control *string `path:"control" module:"nokia-conf"`
	Data    *string `path:"data" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_LocalAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_LocalAddress) IsYANGGoStruct() {
}

// GetControl retrieves the value of the leaf Control from the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_LocalAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Control is set, it can
// safely use t.GetControl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Control == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_LocalAddress) GetControl() string {
	if t == nil || t.Control == nil {
		return ""
	}
	return *t.Control
}

// GetData retrieves the value of the leaf Data from the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_LocalAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Data is set, it can
// safely use t.GetData() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Data == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_LocalAddress) GetData() string {
	if t == nil || t.Data == nil {
		return ""
	}
	return *t.Data
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_LocalAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_LocalAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_LocalAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_LocalAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_LocalAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_LocalAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_LocalAddress.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Adi_Scte30_LocalAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel represents the /nokia-conf/configure/groups/group/service/vprn/video-interface/channel YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel struct {
	ChannelName  *string                                                                                                                                                                    `path:"channel-name" module:"nokia-conf"`
	Description  *string                                                                                                                                                                    `path:"description" module:"nokia-conf"`
	McastAddress *string                                                                                                                                                                    `path:"mcast-address" module:"nokia-conf"`
	Scte35Action E_NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_Scte35Action                                                                                        `path:"scte35-action" module:"nokia-conf"`
	Source       *string                                                                                                                                                                    `path:"source" module:"nokia-conf"`
	ZoneChannel  map[NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel `path:"zone-channel" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel_Key represents the key for list ZoneChannel of element /nokia-conf/configure/groups/group/service/vprn/video-interface/channel.
type NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel_Key struct {
	ZoneMcastAddress string `path:"zone-mcast-address"`
	ZoneSource       string `path:"zone-source"`
}

// NewZoneChannel creates a new entry in the ZoneChannel list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel) NewZoneChannel(ZoneMcastAddress string, ZoneSource string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ZoneChannel == nil {
		t.ZoneChannel = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel)
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel_Key{
		ZoneMcastAddress: ZoneMcastAddress,
		ZoneSource:       ZoneSource,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ZoneChannel[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ZoneChannel", key)
	}

	t.ZoneChannel[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel{
		ZoneMcastAddress: &ZoneMcastAddress,
		ZoneSource:       &ZoneSource,
	}

	return t.ZoneChannel[key], nil
}

// RenameZoneChannel renames an entry in the list ZoneChannel within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel) RenameZoneChannel(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel_Key) error {
	if _, ok := t.ZoneChannel[newK]; ok {
		return fmt.Errorf("key %v already exists in ZoneChannel", newK)
	}

	e, ok := t.ZoneChannel[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ZoneChannel", oldK)
	}
	e.ZoneMcastAddress = &newK.ZoneMcastAddress
	e.ZoneSource = &newK.ZoneSource

	t.ZoneChannel[newK] = e
	delete(t.ZoneChannel, oldK)
	return nil
}

// GetOrCreateZoneChannel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel) GetOrCreateZoneChannel(ZoneMcastAddress string, ZoneSource string) *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel {

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel_Key{
		ZoneMcastAddress: ZoneMcastAddress,
		ZoneSource:       ZoneSource,
	}

	if v, ok := t.ZoneChannel[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewZoneChannel(ZoneMcastAddress, ZoneSource)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateZoneChannel got unexpected error: %v", err))
	}
	return v
}

// GetZoneChannel retrieves the value with the specified key from
// the ZoneChannel map field of NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel) GetZoneChannel(ZoneMcastAddress string, ZoneSource string) *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel_Key{
		ZoneMcastAddress: ZoneMcastAddress,
		ZoneSource:       ZoneSource,
	}

	if lm, ok := t.ZoneChannel[key]; ok {
		return lm
	}
	return nil
}

// DeleteZoneChannel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel) DeleteZoneChannel(ZoneMcastAddress string, ZoneSource string) {
	key := NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel_Key{
		ZoneMcastAddress: ZoneMcastAddress,
		ZoneSource:       ZoneSource,
	}

	delete(t.ZoneChannel, key)
}

// AppendZoneChannel appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel struct to the
// list ZoneChannel of NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel) AppendZoneChannel(v *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel) error {
	if v.ZoneMcastAddress == nil {
		return fmt.Errorf("invalid nil key for ZoneMcastAddress")
	}

	if v.ZoneSource == nil {
		return fmt.Errorf("invalid nil key for ZoneSource")
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel_Key{
		ZoneMcastAddress: *v.ZoneMcastAddress,
		ZoneSource:       *v.ZoneSource,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ZoneChannel == nil {
		t.ZoneChannel = make(map[NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel_Key]*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel)
	}

	if _, ok := t.ZoneChannel[key]; ok {
		return fmt.Errorf("duplicate key for list ZoneChannel %v", key)
	}

	t.ZoneChannel[key] = v
	return nil
}

// GetChannelName retrieves the value of the leaf ChannelName from the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ChannelName is set, it can
// safely use t.GetChannelName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ChannelName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel) GetChannelName() string {
	if t == nil || t.ChannelName == nil {
		return ""
	}
	return *t.ChannelName
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMcastAddress retrieves the value of the leaf McastAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastAddress is set, it can
// safely use t.GetMcastAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel) GetMcastAddress() string {
	if t == nil || t.McastAddress == nil {
		return ""
	}
	return *t.McastAddress
}

// GetScte35Action retrieves the value of the leaf Scte35Action from the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scte35Action is set, it can
// safely use t.GetScte35Action() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scte35Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel) GetScte35Action() E_NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_Scte35Action {
	if t == nil || t.Scte35Action == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_Scte35Action_forward
	}
	return t.Scte35Action
}

// GetSource retrieves the value of the leaf Source from the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source is set, it can
// safely use t.GetSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel) GetSource() string {
	if t == nil || t.Source == nil {
		return ""
	}
	return *t.Source
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Scte35Action == 0 {
		t.Scte35Action = NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_Scte35Action_forward
	}
	for _, e := range t.ZoneChannel {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel) ΛListKeyMap() (map[string]interface{}, error) {
	if t.McastAddress == nil {
		return nil, fmt.Errorf("nil value for key McastAddress")
	}

	if t.Source == nil {
		return nil, fmt.Errorf("nil value for key Source")
	}

	return map[string]interface{}{
		"mcast-address": *t.McastAddress,
		"source":        *t.Source,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel represents the /nokia-conf/configure/groups/group/service/vprn/video-interface/channel/zone-channel YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel struct {
	AdiChannelName   *string `path:"adi-channel-name" module:"nokia-conf"`
	ZoneMcastAddress *string `path:"zone-mcast-address" module:"nokia-conf"`
	ZoneSource       *string `path:"zone-source" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel) IsYANGGoStruct() {
}

// GetAdiChannelName retrieves the value of the leaf AdiChannelName from the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdiChannelName is set, it can
// safely use t.GetAdiChannelName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdiChannelName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel) GetAdiChannelName() string {
	if t == nil || t.AdiChannelName == nil {
		return ""
	}
	return *t.AdiChannelName
}

// GetZoneMcastAddress retrieves the value of the leaf ZoneMcastAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ZoneMcastAddress is set, it can
// safely use t.GetZoneMcastAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ZoneMcastAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel) GetZoneMcastAddress() string {
	if t == nil || t.ZoneMcastAddress == nil {
		return ""
	}
	return *t.ZoneMcastAddress
}

// GetZoneSource retrieves the value of the leaf ZoneSource from the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ZoneSource is set, it can
// safely use t.GetZoneSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ZoneSource == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel) GetZoneSource() string {
	if t == nil || t.ZoneSource == nil {
		return ""
	}
	return *t.ZoneSource
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ZoneMcastAddress == nil {
		return nil, fmt.Errorf("nil value for key ZoneMcastAddress")
	}

	if t.ZoneSource == nil {
		return nil, fmt.Errorf("nil value for key ZoneSource")
	}

	return map[string]interface{}{
		"zone-mcast-address": *t.ZoneMcastAddress,
		"zone-source":        *t.ZoneSource,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_Channel_ZoneChannel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_RtClient represents the /nokia-conf/configure/groups/group/service/vprn/video-interface/rt-client YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_RtClient struct {
	SrcAddress *string `path:"src-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_RtClient implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_RtClient) IsYANGGoStruct() {}

// GetSrcAddress retrieves the value of the leaf SrcAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_RtClient
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrcAddress is set, it can
// safely use t.GetSrcAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrcAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_RtClient) GetSrcAddress() string {
	if t == nil || t.SrcAddress == nil {
		return ""
	}
	return *t.SrcAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_RtClient
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_RtClient) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_RtClient) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_RtClient"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_RtClient) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_RtClient) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_RtClient.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_RtClient) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap represents the /nokia-conf/configure/groups/group/service/vprn/video-interface/video-sap YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap struct {
	Egress       *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress  `path:"egress" module:"nokia-conf" yangPresence:"true"`
	Ingress      *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress `path:"ingress" module:"nokia-conf" yangPresence:"true"`
	VideoGroupId *uint32                                                                        `path:"video-group-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress{}
	return t.Egress
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress{}
	return t.Ingress
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap) GetEgress() *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap) GetIngress() *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetVideoGroupId retrieves the value of the leaf VideoGroupId from the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VideoGroupId is set, it can
// safely use t.GetVideoGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VideoGroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap) GetVideoGroupId() uint32 {
	if t == nil || t.VideoGroupId == nil {
		return 0
	}
	return *t.VideoGroupId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Egress.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress represents the /nokia-conf/configure/groups/group/service/vprn/video-interface/video-sap/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress struct {
	Filter *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress_Filter `path:"filter" module:"nokia-conf"`
	Qos    *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress_Qos    `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress) IsYANGGoStruct() {
}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress) GetOrCreateFilter() *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress) GetFilter() *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress) GetQos() *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress_Filter represents the /nokia-conf/configure/groups/group/service/vprn/video-interface/video-sap/egress/filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress_Filter struct {
	Ip *string `path:"ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress_Filter) IsYANGGoStruct() {
}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress_Filter.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress_Qos represents the /nokia-conf/configure/groups/group/service/vprn/video-interface/video-sap/egress/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress_Qos struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress_Qos) IsYANGGoStruct() {
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress_Qos) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress_Qos.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress represents the /nokia-conf/configure/groups/group/service/vprn/video-interface/video-sap/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress struct {
	Filter *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress_Filter `path:"filter" module:"nokia-conf"`
	Qos    *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress_Qos    `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress) IsYANGGoStruct() {
}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress) GetFilter() *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress) GetQos() *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress_Filter represents the /nokia-conf/configure/groups/group/service/vprn/video-interface/video-sap/ingress/filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress_Filter struct {
	Ip *string `path:"ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress_Filter) IsYANGGoStruct() {
}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress_Filter.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress_Qos represents the /nokia-conf/configure/groups/group/service/vprn/video-interface/video-sap/ingress/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress_Qos struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress_Qos) IsYANGGoStruct() {
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress_Qos) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress_Qos.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VideoInterface_VideoSap_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_VrfExport represents the /nokia-conf/configure/groups/group/service/vprn/vrf-export YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_VrfExport struct {
	Policy []string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_VrfExport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VrfExport) IsYANGGoStruct() {}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Service_Vprn_VrfExport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VrfExport) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_VrfExport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VrfExport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VrfExport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_VrfExport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VrfExport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VrfExport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_VrfExport.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VrfExport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_VrfImport represents the /nokia-conf/configure/groups/group/service/vprn/vrf-import YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_VrfImport struct {
	Policy []string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_VrfImport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VrfImport) IsYANGGoStruct() {}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Service_Vprn_VrfImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VrfImport) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_VrfImport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VrfImport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VrfImport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_VrfImport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VrfImport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VrfImport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_VrfImport.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VrfImport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_VrfTarget represents the /nokia-conf/configure/groups/group/service/vprn/vrf-target YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_VrfTarget struct {
	Community       *string `path:"community" module:"nokia-conf"`
	ExportCommunity *string `path:"export-community" module:"nokia-conf"`
	ImportCommunity *string `path:"import-community" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_VrfTarget implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VrfTarget) IsYANGGoStruct() {}

// GetCommunity retrieves the value of the leaf Community from the NokiaConf_Configure_Groups_Group_Service_Vprn_VrfTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Community is set, it can
// safely use t.GetCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Community == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VrfTarget) GetCommunity() string {
	if t == nil || t.Community == nil {
		return ""
	}
	return *t.Community
}

// GetExportCommunity retrieves the value of the leaf ExportCommunity from the NokiaConf_Configure_Groups_Group_Service_Vprn_VrfTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportCommunity is set, it can
// safely use t.GetExportCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportCommunity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VrfTarget) GetExportCommunity() string {
	if t == nil || t.ExportCommunity == nil {
		return ""
	}
	return *t.ExportCommunity
}

// GetImportCommunity retrieves the value of the leaf ImportCommunity from the NokiaConf_Configure_Groups_Group_Service_Vprn_VrfTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportCommunity is set, it can
// safely use t.GetImportCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportCommunity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VrfTarget) GetImportCommunity() string {
	if t == nil || t.ImportCommunity == nil {
		return ""
	}
	return *t.ImportCommunity
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_VrfTarget
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VrfTarget) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VrfTarget) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_VrfTarget"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VrfTarget) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_VrfTarget) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_VrfTarget.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_VrfTarget) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan represents the /nokia-conf/configure/groups/group/service/vprn/vxlan YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan struct {
	TunnelTermination map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan_TunnelTermination `path:"tunnel-termination" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan) IsYANGGoStruct() {}

// NewTunnelTermination creates a new entry in the TunnelTermination list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan) NewTunnelTermination(IpAddress string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan_TunnelTermination, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TunnelTermination == nil {
		t.TunnelTermination = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan_TunnelTermination)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TunnelTermination[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TunnelTermination", key)
	}

	t.TunnelTermination[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan_TunnelTermination{
		IpAddress: &IpAddress,
	}

	return t.TunnelTermination[key], nil
}

// RenameTunnelTermination renames an entry in the list TunnelTermination within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan) RenameTunnelTermination(oldK, newK string) error {
	if _, ok := t.TunnelTermination[newK]; ok {
		return fmt.Errorf("key %v already exists in TunnelTermination", newK)
	}

	e, ok := t.TunnelTermination[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TunnelTermination", oldK)
	}
	e.IpAddress = &newK

	t.TunnelTermination[newK] = e
	delete(t.TunnelTermination, oldK)
	return nil
}

// GetOrCreateTunnelTermination retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan) GetOrCreateTunnelTermination(IpAddress string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan_TunnelTermination {

	key := IpAddress

	if v, ok := t.TunnelTermination[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTunnelTermination(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTunnelTermination got unexpected error: %v", err))
	}
	return v
}

// GetTunnelTermination retrieves the value with the specified key from
// the TunnelTermination map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan) GetTunnelTermination(IpAddress string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan_TunnelTermination {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.TunnelTermination[key]; ok {
		return lm
	}
	return nil
}

// DeleteTunnelTermination deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan) DeleteTunnelTermination(IpAddress string) {
	key := IpAddress

	delete(t.TunnelTermination, key)
}

// AppendTunnelTermination appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan_TunnelTermination struct to the
// list TunnelTermination of NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan_TunnelTermination already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan) AppendTunnelTermination(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan_TunnelTermination) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TunnelTermination == nil {
		t.TunnelTermination = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan_TunnelTermination)
	}

	if _, ok := t.TunnelTermination[key]; ok {
		return fmt.Errorf("duplicate key for list TunnelTermination %v", key)
	}

	t.TunnelTermination[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.TunnelTermination {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan_TunnelTermination represents the /nokia-conf/configure/groups/group/service/vprn/vxlan/tunnel-termination YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan_TunnelTermination struct {
	FpeId     *uint32 `path:"fpe-id" module:"nokia-conf"`
	IpAddress *string `path:"ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan_TunnelTermination implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan_TunnelTermination) IsYANGGoStruct() {}

// GetFpeId retrieves the value of the leaf FpeId from the NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan_TunnelTermination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FpeId is set, it can
// safely use t.GetFpeId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FpeId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan_TunnelTermination) GetFpeId() uint32 {
	if t == nil || t.FpeId == nil {
		return 0
	}
	return *t.FpeId
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan_TunnelTermination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan_TunnelTermination) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan_TunnelTermination
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan_TunnelTermination) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan_TunnelTermination struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan_TunnelTermination) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan_TunnelTermination) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan_TunnelTermination"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan_TunnelTermination) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan_TunnelTermination) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan_TunnelTermination.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Vxlan_TunnelTermination) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw represents the /nokia-conf/configure/groups/group/service/vprn/wlan-gw YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw struct {
	DistributedSubscriberMgmt   *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_DistributedSubscriberMgmt   `path:"distributed-subscriber-mgmt" module:"nokia-conf" yangPresence:"true"`
	MobilityTriggeredAccounting *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_MobilityTriggeredAccounting `path:"mobility-triggered-accounting" module:"nokia-conf"`
	Xconnect                    *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_Xconnect                    `path:"xconnect" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw) IsYANGGoStruct() {}

// GetOrCreateDistributedSubscriberMgmt retrieves the value of the DistributedSubscriberMgmt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw) GetOrCreateDistributedSubscriberMgmt() *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_DistributedSubscriberMgmt {
	if t.DistributedSubscriberMgmt != nil {
		return t.DistributedSubscriberMgmt
	}
	t.DistributedSubscriberMgmt = &NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_DistributedSubscriberMgmt{}
	return t.DistributedSubscriberMgmt
}

// GetOrCreateMobilityTriggeredAccounting retrieves the value of the MobilityTriggeredAccounting field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw) GetOrCreateMobilityTriggeredAccounting() *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_MobilityTriggeredAccounting {
	if t.MobilityTriggeredAccounting != nil {
		return t.MobilityTriggeredAccounting
	}
	t.MobilityTriggeredAccounting = &NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_MobilityTriggeredAccounting{}
	return t.MobilityTriggeredAccounting
}

// GetOrCreateXconnect retrieves the value of the Xconnect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw) GetOrCreateXconnect() *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_Xconnect {
	if t.Xconnect != nil {
		return t.Xconnect
	}
	t.Xconnect = &NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_Xconnect{}
	return t.Xconnect
}

// GetDistributedSubscriberMgmt returns the value of the DistributedSubscriberMgmt struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw. If the receiver or the field DistributedSubscriberMgmt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw) GetDistributedSubscriberMgmt() *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_DistributedSubscriberMgmt {
	if t != nil && t.DistributedSubscriberMgmt != nil {
		return t.DistributedSubscriberMgmt
	}
	return nil
}

// GetMobilityTriggeredAccounting returns the value of the MobilityTriggeredAccounting struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw. If the receiver or the field MobilityTriggeredAccounting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw) GetMobilityTriggeredAccounting() *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_MobilityTriggeredAccounting {
	if t != nil && t.MobilityTriggeredAccounting != nil {
		return t.MobilityTriggeredAccounting
	}
	return nil
}

// GetXconnect returns the value of the Xconnect struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw. If the receiver or the field Xconnect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw) GetXconnect() *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_Xconnect {
	if t != nil && t.Xconnect != nil {
		return t.Xconnect
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DistributedSubscriberMgmt.PopulateDefaults()
	t.MobilityTriggeredAccounting.PopulateDefaults()
	t.Xconnect.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_DistributedSubscriberMgmt represents the /nokia-conf/configure/groups/group/service/vprn/wlan-gw/distributed-subscriber-mgmt YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_DistributedSubscriberMgmt struct {
	Ipv6TcpMssAdjust *uint32 `path:"ipv6-tcp-mss-adjust" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_DistributedSubscriberMgmt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_DistributedSubscriberMgmt) IsYANGGoStruct() {
}

// GetIpv6TcpMssAdjust retrieves the value of the leaf Ipv6TcpMssAdjust from the NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_DistributedSubscriberMgmt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6TcpMssAdjust is set, it can
// safely use t.GetIpv6TcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6TcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_DistributedSubscriberMgmt) GetIpv6TcpMssAdjust() uint32 {
	if t == nil || t.Ipv6TcpMssAdjust == nil {
		return 0
	}
	return *t.Ipv6TcpMssAdjust
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_DistributedSubscriberMgmt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_DistributedSubscriberMgmt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_DistributedSubscriberMgmt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_DistributedSubscriberMgmt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_DistributedSubscriberMgmt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_DistributedSubscriberMgmt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_DistributedSubscriberMgmt.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_DistributedSubscriberMgmt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_MobilityTriggeredAccounting represents the /nokia-conf/configure/groups/group/service/vprn/wlan-gw/mobility-triggered-accounting YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_MobilityTriggeredAccounting struct {
	AdminState      E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	HoldDown        *uint32                     `path:"hold-down" module:"nokia-conf"`
	IncludeCounters *bool                       `path:"include-counters" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_MobilityTriggeredAccounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_MobilityTriggeredAccounting) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_MobilityTriggeredAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_MobilityTriggeredAccounting) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetHoldDown retrieves the value of the leaf HoldDown from the NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_MobilityTriggeredAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldDown is set, it can
// safely use t.GetHoldDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldDown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_MobilityTriggeredAccounting) GetHoldDown() uint32 {
	if t == nil || t.HoldDown == nil {
		return 0
	}
	return *t.HoldDown
}

// GetIncludeCounters retrieves the value of the leaf IncludeCounters from the NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_MobilityTriggeredAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncludeCounters is set, it can
// safely use t.GetIncludeCounters() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncludeCounters == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_MobilityTriggeredAccounting) GetIncludeCounters() bool {
	if t == nil || t.IncludeCounters == nil {
		return false
	}
	return *t.IncludeCounters
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_MobilityTriggeredAccounting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_MobilityTriggeredAccounting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.IncludeCounters == nil {
		var v bool = false
		t.IncludeCounters = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_MobilityTriggeredAccounting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_MobilityTriggeredAccounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_MobilityTriggeredAccounting) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_MobilityTriggeredAccounting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_MobilityTriggeredAccounting.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_MobilityTriggeredAccounting) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_Xconnect represents the /nokia-conf/configure/groups/group/service/vprn/wlan-gw/xconnect YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_Xconnect struct {
	AdminState     E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	TunnelSourceIp *string                     `path:"tunnel-source-ip" module:"nokia-conf"`
	WlanGwGroup    *uint32                     `path:"wlan-gw-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_Xconnect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_Xconnect) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_Xconnect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_Xconnect) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetTunnelSourceIp retrieves the value of the leaf TunnelSourceIp from the NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_Xconnect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelSourceIp is set, it can
// safely use t.GetTunnelSourceIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelSourceIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_Xconnect) GetTunnelSourceIp() string {
	if t == nil || t.TunnelSourceIp == nil {
		return ""
	}
	return *t.TunnelSourceIp
}

// GetWlanGwGroup retrieves the value of the leaf WlanGwGroup from the NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_Xconnect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WlanGwGroup is set, it can
// safely use t.GetWlanGwGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WlanGwGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_Xconnect) GetWlanGwGroup() uint32 {
	if t == nil || t.WlanGwGroup == nil {
		return 0
	}
	return *t.WlanGwGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_Xconnect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_Xconnect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_Xconnect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_Xconnect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_Xconnect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_Xconnect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_Xconnect.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_WlanGw_Xconnect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp represents the /nokia-conf/configure/groups/group/service/vprn/wpp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp struct {
	AdminState E_NokiaTypesSros_AdminState                                          `path:"admin-state" module:"nokia-conf"`
	Portal     map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal `path:"portal" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp) IsYANGGoStruct() {}

// NewPortal creates a new entry in the Portal list of the
// NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp) NewPortal(Name string) (*NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Portal == nil {
		t.Portal = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Portal[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Portal", key)
	}

	t.Portal[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal{
		Name: &Name,
	}

	return t.Portal[key], nil
}

// RenamePortal renames an entry in the list Portal within
// the NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp) RenamePortal(oldK, newK string) error {
	if _, ok := t.Portal[newK]; ok {
		return fmt.Errorf("key %v already exists in Portal", newK)
	}

	e, ok := t.Portal[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Portal", oldK)
	}
	e.Name = &newK

	t.Portal[newK] = e
	delete(t.Portal, oldK)
	return nil
}

// GetOrCreatePortal retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp) GetOrCreatePortal(Name string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal {

	key := Name

	if v, ok := t.Portal[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPortal(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePortal got unexpected error: %v", err))
	}
	return v
}

// GetPortal retrieves the value with the specified key from
// the Portal map field of NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp) GetPortal(Name string) *NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Portal[key]; ok {
		return lm
	}
	return nil
}

// DeletePortal deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp) DeletePortal(Name string) {
	key := Name

	delete(t.Portal, key)
}

// AppendPortal appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal struct to the
// list Portal of NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp) AppendPortal(v *NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Portal == nil {
		t.Portal = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal)
	}

	if _, ok := t.Portal[key]; ok {
		return fmt.Errorf("duplicate key for list Portal %v", key)
	}

	t.Portal[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Portal {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal represents the /nokia-conf/configure/groups/group/service/vprn/wpp/portal YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal struct {
	AckAuthRetryCount   *uint32                                                               `path:"ack-auth-retry-count" module:"nokia-conf"`
	Address             *string                                                               `path:"address" module:"nokia-conf"`
	AdminState          E_NokiaTypesSros_AdminState                                           `path:"admin-state" module:"nokia-conf"`
	Name                *string                                                               `path:"name" module:"nokia-conf"`
	NtfLogoutRetryCount *uint32                                                               `path:"ntf-logout-retry-count" module:"nokia-conf"`
	PortFormat          E_NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal_PortFormat `path:"port-format" module:"nokia-conf"`
	RetryInterval       *uint32                                                               `path:"retry-interval" module:"nokia-conf"`
	Secret              *string                                                               `path:"secret" module:"nokia-conf"`
	Version             *uint32                                                               `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal) IsYANGGoStruct() {}

// GetAckAuthRetryCount retrieves the value of the leaf AckAuthRetryCount from the NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AckAuthRetryCount is set, it can
// safely use t.GetAckAuthRetryCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AckAuthRetryCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal) GetAckAuthRetryCount() uint32 {
	if t == nil || t.AckAuthRetryCount == nil {
		return 5
	}
	return *t.AckAuthRetryCount
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetNtfLogoutRetryCount retrieves the value of the leaf NtfLogoutRetryCount from the NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NtfLogoutRetryCount is set, it can
// safely use t.GetNtfLogoutRetryCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NtfLogoutRetryCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal) GetNtfLogoutRetryCount() uint32 {
	if t == nil || t.NtfLogoutRetryCount == nil {
		return 5
	}
	return *t.NtfLogoutRetryCount
}

// GetPortFormat retrieves the value of the leaf PortFormat from the NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortFormat is set, it can
// safely use t.GetPortFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortFormat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal) GetPortFormat() E_NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal_PortFormat {
	if t == nil || t.PortFormat == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal_PortFormat_standard
	}
	return t.PortFormat
}

// GetRetryInterval retrieves the value of the leaf RetryInterval from the NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetryInterval is set, it can
// safely use t.GetRetryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal) GetRetryInterval() uint32 {
	if t == nil || t.RetryInterval == nil {
		return 2000
	}
	return *t.RetryInterval
}

// GetSecret retrieves the value of the leaf Secret from the NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Secret is set, it can
// safely use t.GetSecret() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Secret == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal) GetSecret() string {
	if t == nil || t.Secret == nil {
		return ""
	}
	return *t.Secret
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal) GetVersion() uint32 {
	if t == nil || t.Version == nil {
		return 1
	}
	return *t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AckAuthRetryCount == nil {
		var v uint32 = 5
		t.AckAuthRetryCount = &v
	}
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.NtfLogoutRetryCount == nil {
		var v uint32 = 5
		t.NtfLogoutRetryCount = &v
	}
	if t.PortFormat == 0 {
		t.PortFormat = NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal_PortFormat_standard
	}
	if t.RetryInterval == nil {
		var v uint32 = 2000
		t.RetryInterval = &v
	}
	if t.Version == nil {
		var v uint32 = 1
		t.Version = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal.
func (*NokiaConf_Configure_Groups_Group_Service_Vprn_Wpp_Portal) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Sfm represents the /nokia-conf/configure/groups/group/sfm YANG schema element.
type NokiaConf_Configure_Groups_Group_Sfm struct {
	AdminState E_NokiaTypesSros_AdminState                        `path:"admin-state" module:"nokia-conf"`
	SfmSlot    NokiaConf_Configure_Groups_Group_Sfm_SfmSlot_Union `path:"sfm-slot" module:"nokia-conf"`
	SfmType    E_NokiaTypesSfm_SrosSfmType                        `path:"sfm-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Sfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Sfm) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Sfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Sfm) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetSfmSlot retrieves the value of the leaf SfmSlot from the NokiaConf_Configure_Groups_Group_Sfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SfmSlot is set, it can
// safely use t.GetSfmSlot() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SfmSlot == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Sfm) GetSfmSlot() NokiaConf_Configure_Groups_Group_Sfm_SfmSlot_Union {
	if t == nil || t.SfmSlot == nil {
		return nil
	}
	return t.SfmSlot
}

// GetSfmType retrieves the value of the leaf SfmType from the NokiaConf_Configure_Groups_Group_Sfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SfmType is set, it can
// safely use t.GetSfmType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SfmType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Sfm) GetSfmType() E_NokiaTypesSfm_SrosSfmType {
	if t == nil || t.SfmType == 0 {
		return 0
	}
	return t.SfmType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Sfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Sfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Sfm struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Sfm) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"sfm-slot": t.SfmSlot,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Sfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Sfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Sfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Sfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Sfm.
func (*NokiaConf_Configure_Groups_Group_Sfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt represents the /nokia-conf/configure/groups/group/subscriber-mgmt YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt struct {
	AccuStatsPolicy               map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy            `path:"accu-stats-policy" module:"nokia-conf"`
	Ancp                          *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp                                  `path:"ancp" module:"nokia-conf" yangPresence:"true"`
	AuthenticationOrigin          *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin                  `path:"authentication-origin" module:"nokia-conf"`
	AutoSubId                     *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AutoSubId                             `path:"auto-sub-id" module:"nokia-conf" yangPresence:"true"`
	BgpPeeringPolicy              map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy           `path:"bgp-peering-policy" module:"nokia-conf"`
	CategoryMap                   map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap                `path:"category-map" module:"nokia-conf"`
	CreditControlPolicy           map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy        `path:"credit-control-policy" module:"nokia-conf"`
	DiameterGxPolicy              map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy           `path:"diameter-gx-policy" module:"nokia-conf"`
	DiameterGyPolicy              map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy           `path:"diameter-gy-policy" module:"nokia-conf"`
	DiameterNasreqPolicy          map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy       `path:"diameter-nasreq-policy" module:"nokia-conf"`
	ExplicitSubscriberMap         *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap                 `path:"explicit-subscriber-map" module:"nokia-conf"`
	GroupInterfaceStatistics      *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceStatistics              `path:"group-interface-statistics" module:"nokia-conf" yangPresence:"true"`
	GroupInterfaceTemplate        map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate     `path:"group-interface-template" module:"nokia-conf"`
	Gtp                           *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp                                   `path:"gtp" module:"nokia-conf" yangPresence:"true"`
	HostLockoutPolicy             map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy          `path:"host-lockout-policy" module:"nokia-conf"`
	HostTrackingPolicy            map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy         `path:"host-tracking-policy" module:"nokia-conf"`
	HttpRedirectPolicy            map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy         `path:"http-redirect-policy" module:"nokia-conf"`
	IgmpPolicy                    map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy                 `path:"igmp-policy" module:"nokia-conf"`
	IpoeSessionPolicy             map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy          `path:"ipoe-session-policy" module:"nokia-conf"`
	IsaFilter                     map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter                  `path:"isa-filter" module:"nokia-conf"`
	IsaPolicer                    map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer                 `path:"isa-policer" module:"nokia-conf"`
	IsaServiceChaining            *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining                    `path:"isa-service-chaining" module:"nokia-conf" yangPresence:"true"`
	LocalUserDb                   map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb                `path:"local-user-db" module:"nokia-conf"`
	MldPolicy                     map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy                  `path:"mld-policy" module:"nokia-conf"`
	MsapPolicy                    map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy                 `path:"msap-policy" module:"nokia-conf"`
	Pfcp                          *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp                                  `path:"pfcp" module:"nokia-conf"`
	PimPolicy                     map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PimPolicy                  `path:"pim-policy" module:"nokia-conf"`
	PppPolicy                     map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy                  `path:"ppp-policy" module:"nokia-conf"`
	PppoeClientPolicy             map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy          `path:"pppoe-client-policy" module:"nokia-conf"`
	RadiusAccountingPolicy        map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy     `path:"radius-accounting-policy" module:"nokia-conf"`
	RadiusAuthenticationPolicy    map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy `path:"radius-authentication-policy" module:"nokia-conf"`
	RipPolicy                     map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RipPolicy                  `path:"rip-policy" module:"nokia-conf"`
	RouterAdvertisementPolicy     map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy  `path:"router-advertisement-policy" module:"nokia-conf"`
	SapTemplate                   map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate                `path:"sap-template" module:"nokia-conf"`
	ShcvPolicy                    map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy                 `path:"shcv-policy" module:"nokia-conf"`
	SlaProfile                    map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile                 `path:"sla-profile" module:"nokia-conf"`
	SteeringProfile               map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile            `path:"steering-profile" module:"nokia-conf"`
	SubIdentPolicy                map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy             `path:"sub-ident-policy" module:"nokia-conf"`
	SubMcacPolicy                 map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy              `path:"sub-mcac-policy" module:"nokia-conf"`
	SubProfile                    map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile                 `path:"sub-profile" module:"nokia-conf"`
	SubscriberInterfaceStatistics *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubscriberInterfaceStatistics         `path:"subscriber-interface-statistics" module:"nokia-conf" yangPresence:"true"`
	SvlanStatistics               *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SvlanStatistics                       `path:"svlan-statistics" module:"nokia-conf" yangPresence:"true"`
	SystemBehavior                *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SystemBehavior                        `path:"system-behavior" module:"nokia-conf" yangPresence:"true"`
	UpResiliency                  *NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency                          `path:"up-resiliency" module:"nokia-conf" yangPresence:"true"`
	Vrgw                          *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw                                  `path:"vrgw" module:"nokia-conf" yangPresence:"true"`
	WlanGw                        *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw                                `path:"wlan-gw" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt) IsYANGGoStruct() {}

// NewAccuStatsPolicy creates a new entry in the AccuStatsPolicy list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) NewAccuStatsPolicy(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AccuStatsPolicy == nil {
		t.AccuStatsPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AccuStatsPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AccuStatsPolicy", key)
	}

	t.AccuStatsPolicy[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy{
		Name: &Name,
	}

	return t.AccuStatsPolicy[key], nil
}

// RenameAccuStatsPolicy renames an entry in the list AccuStatsPolicy within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) RenameAccuStatsPolicy(oldK, newK string) error {
	if _, ok := t.AccuStatsPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in AccuStatsPolicy", newK)
	}

	e, ok := t.AccuStatsPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AccuStatsPolicy", oldK)
	}
	e.Name = &newK

	t.AccuStatsPolicy[newK] = e
	delete(t.AccuStatsPolicy, oldK)
	return nil
}

// GetOrCreateAccuStatsPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateAccuStatsPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy {

	key := Name

	if v, ok := t.AccuStatsPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAccuStatsPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAccuStatsPolicy got unexpected error: %v", err))
	}
	return v
}

// GetAccuStatsPolicy retrieves the value with the specified key from
// the AccuStatsPolicy map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetAccuStatsPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.AccuStatsPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteAccuStatsPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) DeleteAccuStatsPolicy(Name string) {
	key := Name

	delete(t.AccuStatsPolicy, key)
}

// AppendAccuStatsPolicy appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy struct to the
// list AccuStatsPolicy of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) AppendAccuStatsPolicy(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AccuStatsPolicy == nil {
		t.AccuStatsPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy)
	}

	if _, ok := t.AccuStatsPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list AccuStatsPolicy %v", key)
	}

	t.AccuStatsPolicy[key] = v
	return nil
}

// NewBgpPeeringPolicy creates a new entry in the BgpPeeringPolicy list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) NewBgpPeeringPolicy(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpPeeringPolicy == nil {
		t.BgpPeeringPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BgpPeeringPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BgpPeeringPolicy", key)
	}

	t.BgpPeeringPolicy[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy{
		Name: &Name,
	}

	return t.BgpPeeringPolicy[key], nil
}

// RenameBgpPeeringPolicy renames an entry in the list BgpPeeringPolicy within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) RenameBgpPeeringPolicy(oldK, newK string) error {
	if _, ok := t.BgpPeeringPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in BgpPeeringPolicy", newK)
	}

	e, ok := t.BgpPeeringPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BgpPeeringPolicy", oldK)
	}
	e.Name = &newK

	t.BgpPeeringPolicy[newK] = e
	delete(t.BgpPeeringPolicy, oldK)
	return nil
}

// GetOrCreateBgpPeeringPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateBgpPeeringPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy {

	key := Name

	if v, ok := t.BgpPeeringPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBgpPeeringPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBgpPeeringPolicy got unexpected error: %v", err))
	}
	return v
}

// GetBgpPeeringPolicy retrieves the value with the specified key from
// the BgpPeeringPolicy map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetBgpPeeringPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.BgpPeeringPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteBgpPeeringPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) DeleteBgpPeeringPolicy(Name string) {
	key := Name

	delete(t.BgpPeeringPolicy, key)
}

// AppendBgpPeeringPolicy appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy struct to the
// list BgpPeeringPolicy of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) AppendBgpPeeringPolicy(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpPeeringPolicy == nil {
		t.BgpPeeringPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy)
	}

	if _, ok := t.BgpPeeringPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list BgpPeeringPolicy %v", key)
	}

	t.BgpPeeringPolicy[key] = v
	return nil
}

// NewCategoryMap creates a new entry in the CategoryMap list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) NewCategoryMap(CategoryMapName string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CategoryMap == nil {
		t.CategoryMap = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap)
	}

	key := CategoryMapName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CategoryMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CategoryMap", key)
	}

	t.CategoryMap[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap{
		CategoryMapName: &CategoryMapName,
	}

	return t.CategoryMap[key], nil
}

// RenameCategoryMap renames an entry in the list CategoryMap within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) RenameCategoryMap(oldK, newK string) error {
	if _, ok := t.CategoryMap[newK]; ok {
		return fmt.Errorf("key %v already exists in CategoryMap", newK)
	}

	e, ok := t.CategoryMap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CategoryMap", oldK)
	}
	e.CategoryMapName = &newK

	t.CategoryMap[newK] = e
	delete(t.CategoryMap, oldK)
	return nil
}

// GetOrCreateCategoryMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateCategoryMap(CategoryMapName string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap {

	key := CategoryMapName

	if v, ok := t.CategoryMap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCategoryMap(CategoryMapName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCategoryMap got unexpected error: %v", err))
	}
	return v
}

// GetCategoryMap retrieves the value with the specified key from
// the CategoryMap map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetCategoryMap(CategoryMapName string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap {

	if t == nil {
		return nil
	}

	key := CategoryMapName

	if lm, ok := t.CategoryMap[key]; ok {
		return lm
	}
	return nil
}

// DeleteCategoryMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) DeleteCategoryMap(CategoryMapName string) {
	key := CategoryMapName

	delete(t.CategoryMap, key)
}

// AppendCategoryMap appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap struct to the
// list CategoryMap of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) AppendCategoryMap(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap) error {
	if v.CategoryMapName == nil {
		return fmt.Errorf("invalid nil key received for CategoryMapName")
	}

	key := *v.CategoryMapName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CategoryMap == nil {
		t.CategoryMap = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap)
	}

	if _, ok := t.CategoryMap[key]; ok {
		return fmt.Errorf("duplicate key for list CategoryMap %v", key)
	}

	t.CategoryMap[key] = v
	return nil
}

// NewCreditControlPolicy creates a new entry in the CreditControlPolicy list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) NewCreditControlPolicy(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CreditControlPolicy == nil {
		t.CreditControlPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CreditControlPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CreditControlPolicy", key)
	}

	t.CreditControlPolicy[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy{
		Name: &Name,
	}

	return t.CreditControlPolicy[key], nil
}

// RenameCreditControlPolicy renames an entry in the list CreditControlPolicy within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) RenameCreditControlPolicy(oldK, newK string) error {
	if _, ok := t.CreditControlPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in CreditControlPolicy", newK)
	}

	e, ok := t.CreditControlPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CreditControlPolicy", oldK)
	}
	e.Name = &newK

	t.CreditControlPolicy[newK] = e
	delete(t.CreditControlPolicy, oldK)
	return nil
}

// GetOrCreateCreditControlPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateCreditControlPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy {

	key := Name

	if v, ok := t.CreditControlPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCreditControlPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCreditControlPolicy got unexpected error: %v", err))
	}
	return v
}

// GetCreditControlPolicy retrieves the value with the specified key from
// the CreditControlPolicy map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetCreditControlPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.CreditControlPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteCreditControlPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) DeleteCreditControlPolicy(Name string) {
	key := Name

	delete(t.CreditControlPolicy, key)
}

// AppendCreditControlPolicy appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy struct to the
// list CreditControlPolicy of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) AppendCreditControlPolicy(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CreditControlPolicy == nil {
		t.CreditControlPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy)
	}

	if _, ok := t.CreditControlPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list CreditControlPolicy %v", key)
	}

	t.CreditControlPolicy[key] = v
	return nil
}

// NewDiameterGxPolicy creates a new entry in the DiameterGxPolicy list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) NewDiameterGxPolicy(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DiameterGxPolicy == nil {
		t.DiameterGxPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DiameterGxPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DiameterGxPolicy", key)
	}

	t.DiameterGxPolicy[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy{
		Name: &Name,
	}

	return t.DiameterGxPolicy[key], nil
}

// RenameDiameterGxPolicy renames an entry in the list DiameterGxPolicy within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) RenameDiameterGxPolicy(oldK, newK string) error {
	if _, ok := t.DiameterGxPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in DiameterGxPolicy", newK)
	}

	e, ok := t.DiameterGxPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DiameterGxPolicy", oldK)
	}
	e.Name = &newK

	t.DiameterGxPolicy[newK] = e
	delete(t.DiameterGxPolicy, oldK)
	return nil
}

// GetOrCreateDiameterGxPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateDiameterGxPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy {

	key := Name

	if v, ok := t.DiameterGxPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDiameterGxPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDiameterGxPolicy got unexpected error: %v", err))
	}
	return v
}

// GetDiameterGxPolicy retrieves the value with the specified key from
// the DiameterGxPolicy map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetDiameterGxPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.DiameterGxPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteDiameterGxPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) DeleteDiameterGxPolicy(Name string) {
	key := Name

	delete(t.DiameterGxPolicy, key)
}

// AppendDiameterGxPolicy appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy struct to the
// list DiameterGxPolicy of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) AppendDiameterGxPolicy(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DiameterGxPolicy == nil {
		t.DiameterGxPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy)
	}

	if _, ok := t.DiameterGxPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list DiameterGxPolicy %v", key)
	}

	t.DiameterGxPolicy[key] = v
	return nil
}

// NewDiameterGyPolicy creates a new entry in the DiameterGyPolicy list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) NewDiameterGyPolicy(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DiameterGyPolicy == nil {
		t.DiameterGyPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DiameterGyPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DiameterGyPolicy", key)
	}

	t.DiameterGyPolicy[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy{
		Name: &Name,
	}

	return t.DiameterGyPolicy[key], nil
}

// RenameDiameterGyPolicy renames an entry in the list DiameterGyPolicy within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) RenameDiameterGyPolicy(oldK, newK string) error {
	if _, ok := t.DiameterGyPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in DiameterGyPolicy", newK)
	}

	e, ok := t.DiameterGyPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DiameterGyPolicy", oldK)
	}
	e.Name = &newK

	t.DiameterGyPolicy[newK] = e
	delete(t.DiameterGyPolicy, oldK)
	return nil
}

// GetOrCreateDiameterGyPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateDiameterGyPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy {

	key := Name

	if v, ok := t.DiameterGyPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDiameterGyPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDiameterGyPolicy got unexpected error: %v", err))
	}
	return v
}

// GetDiameterGyPolicy retrieves the value with the specified key from
// the DiameterGyPolicy map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetDiameterGyPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.DiameterGyPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteDiameterGyPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) DeleteDiameterGyPolicy(Name string) {
	key := Name

	delete(t.DiameterGyPolicy, key)
}

// AppendDiameterGyPolicy appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy struct to the
// list DiameterGyPolicy of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) AppendDiameterGyPolicy(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DiameterGyPolicy == nil {
		t.DiameterGyPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy)
	}

	if _, ok := t.DiameterGyPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list DiameterGyPolicy %v", key)
	}

	t.DiameterGyPolicy[key] = v
	return nil
}

// NewDiameterNasreqPolicy creates a new entry in the DiameterNasreqPolicy list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) NewDiameterNasreqPolicy(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DiameterNasreqPolicy == nil {
		t.DiameterNasreqPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DiameterNasreqPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DiameterNasreqPolicy", key)
	}

	t.DiameterNasreqPolicy[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy{
		Name: &Name,
	}

	return t.DiameterNasreqPolicy[key], nil
}

// RenameDiameterNasreqPolicy renames an entry in the list DiameterNasreqPolicy within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) RenameDiameterNasreqPolicy(oldK, newK string) error {
	if _, ok := t.DiameterNasreqPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in DiameterNasreqPolicy", newK)
	}

	e, ok := t.DiameterNasreqPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DiameterNasreqPolicy", oldK)
	}
	e.Name = &newK

	t.DiameterNasreqPolicy[newK] = e
	delete(t.DiameterNasreqPolicy, oldK)
	return nil
}

// GetOrCreateDiameterNasreqPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateDiameterNasreqPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy {

	key := Name

	if v, ok := t.DiameterNasreqPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDiameterNasreqPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDiameterNasreqPolicy got unexpected error: %v", err))
	}
	return v
}

// GetDiameterNasreqPolicy retrieves the value with the specified key from
// the DiameterNasreqPolicy map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetDiameterNasreqPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.DiameterNasreqPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteDiameterNasreqPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) DeleteDiameterNasreqPolicy(Name string) {
	key := Name

	delete(t.DiameterNasreqPolicy, key)
}

// AppendDiameterNasreqPolicy appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy struct to the
// list DiameterNasreqPolicy of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) AppendDiameterNasreqPolicy(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DiameterNasreqPolicy == nil {
		t.DiameterNasreqPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy)
	}

	if _, ok := t.DiameterNasreqPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list DiameterNasreqPolicy %v", key)
	}

	t.DiameterNasreqPolicy[key] = v
	return nil
}

// NewGroupInterfaceTemplate creates a new entry in the GroupInterfaceTemplate list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) NewGroupInterfaceTemplate(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupInterfaceTemplate == nil {
		t.GroupInterfaceTemplate = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupInterfaceTemplate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupInterfaceTemplate", key)
	}

	t.GroupInterfaceTemplate[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate{
		Name: &Name,
	}

	return t.GroupInterfaceTemplate[key], nil
}

// RenameGroupInterfaceTemplate renames an entry in the list GroupInterfaceTemplate within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) RenameGroupInterfaceTemplate(oldK, newK string) error {
	if _, ok := t.GroupInterfaceTemplate[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupInterfaceTemplate", newK)
	}

	e, ok := t.GroupInterfaceTemplate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupInterfaceTemplate", oldK)
	}
	e.Name = &newK

	t.GroupInterfaceTemplate[newK] = e
	delete(t.GroupInterfaceTemplate, oldK)
	return nil
}

// GetOrCreateGroupInterfaceTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateGroupInterfaceTemplate(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate {

	key := Name

	if v, ok := t.GroupInterfaceTemplate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupInterfaceTemplate(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupInterfaceTemplate got unexpected error: %v", err))
	}
	return v
}

// GetGroupInterfaceTemplate retrieves the value with the specified key from
// the GroupInterfaceTemplate map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetGroupInterfaceTemplate(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.GroupInterfaceTemplate[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupInterfaceTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) DeleteGroupInterfaceTemplate(Name string) {
	key := Name

	delete(t.GroupInterfaceTemplate, key)
}

// AppendGroupInterfaceTemplate appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate struct to the
// list GroupInterfaceTemplate of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) AppendGroupInterfaceTemplate(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupInterfaceTemplate == nil {
		t.GroupInterfaceTemplate = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate)
	}

	if _, ok := t.GroupInterfaceTemplate[key]; ok {
		return fmt.Errorf("duplicate key for list GroupInterfaceTemplate %v", key)
	}

	t.GroupInterfaceTemplate[key] = v
	return nil
}

// NewHostLockoutPolicy creates a new entry in the HostLockoutPolicy list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) NewHostLockoutPolicy(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HostLockoutPolicy == nil {
		t.HostLockoutPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HostLockoutPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HostLockoutPolicy", key)
	}

	t.HostLockoutPolicy[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy{
		Name: &Name,
	}

	return t.HostLockoutPolicy[key], nil
}

// RenameHostLockoutPolicy renames an entry in the list HostLockoutPolicy within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) RenameHostLockoutPolicy(oldK, newK string) error {
	if _, ok := t.HostLockoutPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in HostLockoutPolicy", newK)
	}

	e, ok := t.HostLockoutPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HostLockoutPolicy", oldK)
	}
	e.Name = &newK

	t.HostLockoutPolicy[newK] = e
	delete(t.HostLockoutPolicy, oldK)
	return nil
}

// GetOrCreateHostLockoutPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateHostLockoutPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy {

	key := Name

	if v, ok := t.HostLockoutPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHostLockoutPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHostLockoutPolicy got unexpected error: %v", err))
	}
	return v
}

// GetHostLockoutPolicy retrieves the value with the specified key from
// the HostLockoutPolicy map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetHostLockoutPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.HostLockoutPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteHostLockoutPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) DeleteHostLockoutPolicy(Name string) {
	key := Name

	delete(t.HostLockoutPolicy, key)
}

// AppendHostLockoutPolicy appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy struct to the
// list HostLockoutPolicy of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) AppendHostLockoutPolicy(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HostLockoutPolicy == nil {
		t.HostLockoutPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy)
	}

	if _, ok := t.HostLockoutPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list HostLockoutPolicy %v", key)
	}

	t.HostLockoutPolicy[key] = v
	return nil
}

// NewHostTrackingPolicy creates a new entry in the HostTrackingPolicy list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) NewHostTrackingPolicy(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HostTrackingPolicy == nil {
		t.HostTrackingPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HostTrackingPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HostTrackingPolicy", key)
	}

	t.HostTrackingPolicy[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy{
		Name: &Name,
	}

	return t.HostTrackingPolicy[key], nil
}

// RenameHostTrackingPolicy renames an entry in the list HostTrackingPolicy within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) RenameHostTrackingPolicy(oldK, newK string) error {
	if _, ok := t.HostTrackingPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in HostTrackingPolicy", newK)
	}

	e, ok := t.HostTrackingPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HostTrackingPolicy", oldK)
	}
	e.Name = &newK

	t.HostTrackingPolicy[newK] = e
	delete(t.HostTrackingPolicy, oldK)
	return nil
}

// GetOrCreateHostTrackingPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateHostTrackingPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy {

	key := Name

	if v, ok := t.HostTrackingPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHostTrackingPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHostTrackingPolicy got unexpected error: %v", err))
	}
	return v
}

// GetHostTrackingPolicy retrieves the value with the specified key from
// the HostTrackingPolicy map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetHostTrackingPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.HostTrackingPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteHostTrackingPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) DeleteHostTrackingPolicy(Name string) {
	key := Name

	delete(t.HostTrackingPolicy, key)
}

// AppendHostTrackingPolicy appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy struct to the
// list HostTrackingPolicy of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) AppendHostTrackingPolicy(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HostTrackingPolicy == nil {
		t.HostTrackingPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy)
	}

	if _, ok := t.HostTrackingPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list HostTrackingPolicy %v", key)
	}

	t.HostTrackingPolicy[key] = v
	return nil
}

// NewHttpRedirectPolicy creates a new entry in the HttpRedirectPolicy list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) NewHttpRedirectPolicy(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HttpRedirectPolicy == nil {
		t.HttpRedirectPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HttpRedirectPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HttpRedirectPolicy", key)
	}

	t.HttpRedirectPolicy[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy{
		Name: &Name,
	}

	return t.HttpRedirectPolicy[key], nil
}

// RenameHttpRedirectPolicy renames an entry in the list HttpRedirectPolicy within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) RenameHttpRedirectPolicy(oldK, newK string) error {
	if _, ok := t.HttpRedirectPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in HttpRedirectPolicy", newK)
	}

	e, ok := t.HttpRedirectPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HttpRedirectPolicy", oldK)
	}
	e.Name = &newK

	t.HttpRedirectPolicy[newK] = e
	delete(t.HttpRedirectPolicy, oldK)
	return nil
}

// GetOrCreateHttpRedirectPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateHttpRedirectPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy {

	key := Name

	if v, ok := t.HttpRedirectPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHttpRedirectPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHttpRedirectPolicy got unexpected error: %v", err))
	}
	return v
}

// GetHttpRedirectPolicy retrieves the value with the specified key from
// the HttpRedirectPolicy map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetHttpRedirectPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.HttpRedirectPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteHttpRedirectPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) DeleteHttpRedirectPolicy(Name string) {
	key := Name

	delete(t.HttpRedirectPolicy, key)
}

// AppendHttpRedirectPolicy appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy struct to the
// list HttpRedirectPolicy of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) AppendHttpRedirectPolicy(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HttpRedirectPolicy == nil {
		t.HttpRedirectPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy)
	}

	if _, ok := t.HttpRedirectPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list HttpRedirectPolicy %v", key)
	}

	t.HttpRedirectPolicy[key] = v
	return nil
}

// NewIgmpPolicy creates a new entry in the IgmpPolicy list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) NewIgmpPolicy(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IgmpPolicy == nil {
		t.IgmpPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IgmpPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IgmpPolicy", key)
	}

	t.IgmpPolicy[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy{
		Name: &Name,
	}

	return t.IgmpPolicy[key], nil
}

// RenameIgmpPolicy renames an entry in the list IgmpPolicy within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) RenameIgmpPolicy(oldK, newK string) error {
	if _, ok := t.IgmpPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in IgmpPolicy", newK)
	}

	e, ok := t.IgmpPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IgmpPolicy", oldK)
	}
	e.Name = &newK

	t.IgmpPolicy[newK] = e
	delete(t.IgmpPolicy, oldK)
	return nil
}

// GetOrCreateIgmpPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateIgmpPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy {

	key := Name

	if v, ok := t.IgmpPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIgmpPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIgmpPolicy got unexpected error: %v", err))
	}
	return v
}

// GetIgmpPolicy retrieves the value with the specified key from
// the IgmpPolicy map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetIgmpPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.IgmpPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteIgmpPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) DeleteIgmpPolicy(Name string) {
	key := Name

	delete(t.IgmpPolicy, key)
}

// AppendIgmpPolicy appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy struct to the
// list IgmpPolicy of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) AppendIgmpPolicy(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IgmpPolicy == nil {
		t.IgmpPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy)
	}

	if _, ok := t.IgmpPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list IgmpPolicy %v", key)
	}

	t.IgmpPolicy[key] = v
	return nil
}

// NewIpoeSessionPolicy creates a new entry in the IpoeSessionPolicy list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) NewIpoeSessionPolicy(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpoeSessionPolicy == nil {
		t.IpoeSessionPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IpoeSessionPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IpoeSessionPolicy", key)
	}

	t.IpoeSessionPolicy[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy{
		Name: &Name,
	}

	return t.IpoeSessionPolicy[key], nil
}

// RenameIpoeSessionPolicy renames an entry in the list IpoeSessionPolicy within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) RenameIpoeSessionPolicy(oldK, newK string) error {
	if _, ok := t.IpoeSessionPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in IpoeSessionPolicy", newK)
	}

	e, ok := t.IpoeSessionPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IpoeSessionPolicy", oldK)
	}
	e.Name = &newK

	t.IpoeSessionPolicy[newK] = e
	delete(t.IpoeSessionPolicy, oldK)
	return nil
}

// GetOrCreateIpoeSessionPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateIpoeSessionPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy {

	key := Name

	if v, ok := t.IpoeSessionPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpoeSessionPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpoeSessionPolicy got unexpected error: %v", err))
	}
	return v
}

// GetIpoeSessionPolicy retrieves the value with the specified key from
// the IpoeSessionPolicy map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetIpoeSessionPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.IpoeSessionPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpoeSessionPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) DeleteIpoeSessionPolicy(Name string) {
	key := Name

	delete(t.IpoeSessionPolicy, key)
}

// AppendIpoeSessionPolicy appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy struct to the
// list IpoeSessionPolicy of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) AppendIpoeSessionPolicy(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpoeSessionPolicy == nil {
		t.IpoeSessionPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy)
	}

	if _, ok := t.IpoeSessionPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list IpoeSessionPolicy %v", key)
	}

	t.IpoeSessionPolicy[key] = v
	return nil
}

// NewIsaFilter creates a new entry in the IsaFilter list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) NewIsaFilter(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IsaFilter == nil {
		t.IsaFilter = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IsaFilter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IsaFilter", key)
	}

	t.IsaFilter[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter{
		Name: &Name,
	}

	return t.IsaFilter[key], nil
}

// RenameIsaFilter renames an entry in the list IsaFilter within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) RenameIsaFilter(oldK, newK string) error {
	if _, ok := t.IsaFilter[newK]; ok {
		return fmt.Errorf("key %v already exists in IsaFilter", newK)
	}

	e, ok := t.IsaFilter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IsaFilter", oldK)
	}
	e.Name = &newK

	t.IsaFilter[newK] = e
	delete(t.IsaFilter, oldK)
	return nil
}

// GetOrCreateIsaFilter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateIsaFilter(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter {

	key := Name

	if v, ok := t.IsaFilter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIsaFilter(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIsaFilter got unexpected error: %v", err))
	}
	return v
}

// GetIsaFilter retrieves the value with the specified key from
// the IsaFilter map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetIsaFilter(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.IsaFilter[key]; ok {
		return lm
	}
	return nil
}

// DeleteIsaFilter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) DeleteIsaFilter(Name string) {
	key := Name

	delete(t.IsaFilter, key)
}

// AppendIsaFilter appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter struct to the
// list IsaFilter of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) AppendIsaFilter(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IsaFilter == nil {
		t.IsaFilter = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter)
	}

	if _, ok := t.IsaFilter[key]; ok {
		return fmt.Errorf("duplicate key for list IsaFilter %v", key)
	}

	t.IsaFilter[key] = v
	return nil
}

// NewIsaPolicer creates a new entry in the IsaPolicer list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) NewIsaPolicer(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IsaPolicer == nil {
		t.IsaPolicer = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IsaPolicer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IsaPolicer", key)
	}

	t.IsaPolicer[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer{
		Name: &Name,
	}

	return t.IsaPolicer[key], nil
}

// RenameIsaPolicer renames an entry in the list IsaPolicer within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) RenameIsaPolicer(oldK, newK string) error {
	if _, ok := t.IsaPolicer[newK]; ok {
		return fmt.Errorf("key %v already exists in IsaPolicer", newK)
	}

	e, ok := t.IsaPolicer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IsaPolicer", oldK)
	}
	e.Name = &newK

	t.IsaPolicer[newK] = e
	delete(t.IsaPolicer, oldK)
	return nil
}

// GetOrCreateIsaPolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateIsaPolicer(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer {

	key := Name

	if v, ok := t.IsaPolicer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIsaPolicer(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIsaPolicer got unexpected error: %v", err))
	}
	return v
}

// GetIsaPolicer retrieves the value with the specified key from
// the IsaPolicer map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetIsaPolicer(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.IsaPolicer[key]; ok {
		return lm
	}
	return nil
}

// DeleteIsaPolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) DeleteIsaPolicer(Name string) {
	key := Name

	delete(t.IsaPolicer, key)
}

// AppendIsaPolicer appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer struct to the
// list IsaPolicer of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) AppendIsaPolicer(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IsaPolicer == nil {
		t.IsaPolicer = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer)
	}

	if _, ok := t.IsaPolicer[key]; ok {
		return fmt.Errorf("duplicate key for list IsaPolicer %v", key)
	}

	t.IsaPolicer[key] = v
	return nil
}

// NewLocalUserDb creates a new entry in the LocalUserDb list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) NewLocalUserDb(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LocalUserDb == nil {
		t.LocalUserDb = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LocalUserDb[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LocalUserDb", key)
	}

	t.LocalUserDb[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb{
		Name: &Name,
	}

	return t.LocalUserDb[key], nil
}

// RenameLocalUserDb renames an entry in the list LocalUserDb within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) RenameLocalUserDb(oldK, newK string) error {
	if _, ok := t.LocalUserDb[newK]; ok {
		return fmt.Errorf("key %v already exists in LocalUserDb", newK)
	}

	e, ok := t.LocalUserDb[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LocalUserDb", oldK)
	}
	e.Name = &newK

	t.LocalUserDb[newK] = e
	delete(t.LocalUserDb, oldK)
	return nil
}

// GetOrCreateLocalUserDb retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateLocalUserDb(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb {

	key := Name

	if v, ok := t.LocalUserDb[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLocalUserDb(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLocalUserDb got unexpected error: %v", err))
	}
	return v
}

// GetLocalUserDb retrieves the value with the specified key from
// the LocalUserDb map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetLocalUserDb(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.LocalUserDb[key]; ok {
		return lm
	}
	return nil
}

// DeleteLocalUserDb deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) DeleteLocalUserDb(Name string) {
	key := Name

	delete(t.LocalUserDb, key)
}

// AppendLocalUserDb appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb struct to the
// list LocalUserDb of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) AppendLocalUserDb(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LocalUserDb == nil {
		t.LocalUserDb = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb)
	}

	if _, ok := t.LocalUserDb[key]; ok {
		return fmt.Errorf("duplicate key for list LocalUserDb %v", key)
	}

	t.LocalUserDb[key] = v
	return nil
}

// NewMldPolicy creates a new entry in the MldPolicy list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) NewMldPolicy(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MldPolicy == nil {
		t.MldPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MldPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MldPolicy", key)
	}

	t.MldPolicy[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy{
		Name: &Name,
	}

	return t.MldPolicy[key], nil
}

// RenameMldPolicy renames an entry in the list MldPolicy within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) RenameMldPolicy(oldK, newK string) error {
	if _, ok := t.MldPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in MldPolicy", newK)
	}

	e, ok := t.MldPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MldPolicy", oldK)
	}
	e.Name = &newK

	t.MldPolicy[newK] = e
	delete(t.MldPolicy, oldK)
	return nil
}

// GetOrCreateMldPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateMldPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy {

	key := Name

	if v, ok := t.MldPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMldPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMldPolicy got unexpected error: %v", err))
	}
	return v
}

// GetMldPolicy retrieves the value with the specified key from
// the MldPolicy map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetMldPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.MldPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteMldPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) DeleteMldPolicy(Name string) {
	key := Name

	delete(t.MldPolicy, key)
}

// AppendMldPolicy appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy struct to the
// list MldPolicy of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) AppendMldPolicy(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MldPolicy == nil {
		t.MldPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy)
	}

	if _, ok := t.MldPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list MldPolicy %v", key)
	}

	t.MldPolicy[key] = v
	return nil
}

// NewMsapPolicy creates a new entry in the MsapPolicy list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) NewMsapPolicy(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MsapPolicy == nil {
		t.MsapPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MsapPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MsapPolicy", key)
	}

	t.MsapPolicy[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy{
		Name: &Name,
	}

	return t.MsapPolicy[key], nil
}

// RenameMsapPolicy renames an entry in the list MsapPolicy within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) RenameMsapPolicy(oldK, newK string) error {
	if _, ok := t.MsapPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in MsapPolicy", newK)
	}

	e, ok := t.MsapPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MsapPolicy", oldK)
	}
	e.Name = &newK

	t.MsapPolicy[newK] = e
	delete(t.MsapPolicy, oldK)
	return nil
}

// GetOrCreateMsapPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateMsapPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy {

	key := Name

	if v, ok := t.MsapPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMsapPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMsapPolicy got unexpected error: %v", err))
	}
	return v
}

// GetMsapPolicy retrieves the value with the specified key from
// the MsapPolicy map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetMsapPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.MsapPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteMsapPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) DeleteMsapPolicy(Name string) {
	key := Name

	delete(t.MsapPolicy, key)
}

// AppendMsapPolicy appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy struct to the
// list MsapPolicy of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) AppendMsapPolicy(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MsapPolicy == nil {
		t.MsapPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy)
	}

	if _, ok := t.MsapPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list MsapPolicy %v", key)
	}

	t.MsapPolicy[key] = v
	return nil
}

// NewPimPolicy creates a new entry in the PimPolicy list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) NewPimPolicy(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PimPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PimPolicy == nil {
		t.PimPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PimPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PimPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PimPolicy", key)
	}

	t.PimPolicy[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_PimPolicy{
		Name: &Name,
	}

	return t.PimPolicy[key], nil
}

// RenamePimPolicy renames an entry in the list PimPolicy within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) RenamePimPolicy(oldK, newK string) error {
	if _, ok := t.PimPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in PimPolicy", newK)
	}

	e, ok := t.PimPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PimPolicy", oldK)
	}
	e.Name = &newK

	t.PimPolicy[newK] = e
	delete(t.PimPolicy, oldK)
	return nil
}

// GetOrCreatePimPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreatePimPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PimPolicy {

	key := Name

	if v, ok := t.PimPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPimPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePimPolicy got unexpected error: %v", err))
	}
	return v
}

// GetPimPolicy retrieves the value with the specified key from
// the PimPolicy map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetPimPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PimPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PimPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeletePimPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) DeletePimPolicy(Name string) {
	key := Name

	delete(t.PimPolicy, key)
}

// AppendPimPolicy appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_PimPolicy struct to the
// list PimPolicy of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_PimPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) AppendPimPolicy(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PimPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PimPolicy == nil {
		t.PimPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PimPolicy)
	}

	if _, ok := t.PimPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list PimPolicy %v", key)
	}

	t.PimPolicy[key] = v
	return nil
}

// NewPppPolicy creates a new entry in the PppPolicy list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) NewPppPolicy(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PppPolicy == nil {
		t.PppPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PppPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PppPolicy", key)
	}

	t.PppPolicy[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy{
		Name: &Name,
	}

	return t.PppPolicy[key], nil
}

// RenamePppPolicy renames an entry in the list PppPolicy within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) RenamePppPolicy(oldK, newK string) error {
	if _, ok := t.PppPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in PppPolicy", newK)
	}

	e, ok := t.PppPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PppPolicy", oldK)
	}
	e.Name = &newK

	t.PppPolicy[newK] = e
	delete(t.PppPolicy, oldK)
	return nil
}

// GetOrCreatePppPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreatePppPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy {

	key := Name

	if v, ok := t.PppPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPppPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePppPolicy got unexpected error: %v", err))
	}
	return v
}

// GetPppPolicy retrieves the value with the specified key from
// the PppPolicy map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetPppPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PppPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeletePppPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) DeletePppPolicy(Name string) {
	key := Name

	delete(t.PppPolicy, key)
}

// AppendPppPolicy appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy struct to the
// list PppPolicy of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) AppendPppPolicy(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PppPolicy == nil {
		t.PppPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy)
	}

	if _, ok := t.PppPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list PppPolicy %v", key)
	}

	t.PppPolicy[key] = v
	return nil
}

// NewPppoeClientPolicy creates a new entry in the PppoeClientPolicy list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) NewPppoeClientPolicy(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PppoeClientPolicy == nil {
		t.PppoeClientPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PppoeClientPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PppoeClientPolicy", key)
	}

	t.PppoeClientPolicy[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy{
		Name: &Name,
	}

	return t.PppoeClientPolicy[key], nil
}

// RenamePppoeClientPolicy renames an entry in the list PppoeClientPolicy within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) RenamePppoeClientPolicy(oldK, newK string) error {
	if _, ok := t.PppoeClientPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in PppoeClientPolicy", newK)
	}

	e, ok := t.PppoeClientPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PppoeClientPolicy", oldK)
	}
	e.Name = &newK

	t.PppoeClientPolicy[newK] = e
	delete(t.PppoeClientPolicy, oldK)
	return nil
}

// GetOrCreatePppoeClientPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreatePppoeClientPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy {

	key := Name

	if v, ok := t.PppoeClientPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPppoeClientPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePppoeClientPolicy got unexpected error: %v", err))
	}
	return v
}

// GetPppoeClientPolicy retrieves the value with the specified key from
// the PppoeClientPolicy map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetPppoeClientPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PppoeClientPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeletePppoeClientPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) DeletePppoeClientPolicy(Name string) {
	key := Name

	delete(t.PppoeClientPolicy, key)
}

// AppendPppoeClientPolicy appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy struct to the
// list PppoeClientPolicy of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) AppendPppoeClientPolicy(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PppoeClientPolicy == nil {
		t.PppoeClientPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy)
	}

	if _, ok := t.PppoeClientPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list PppoeClientPolicy %v", key)
	}

	t.PppoeClientPolicy[key] = v
	return nil
}

// NewRadiusAccountingPolicy creates a new entry in the RadiusAccountingPolicy list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) NewRadiusAccountingPolicy(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RadiusAccountingPolicy == nil {
		t.RadiusAccountingPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RadiusAccountingPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RadiusAccountingPolicy", key)
	}

	t.RadiusAccountingPolicy[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy{
		Name: &Name,
	}

	return t.RadiusAccountingPolicy[key], nil
}

// RenameRadiusAccountingPolicy renames an entry in the list RadiusAccountingPolicy within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) RenameRadiusAccountingPolicy(oldK, newK string) error {
	if _, ok := t.RadiusAccountingPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in RadiusAccountingPolicy", newK)
	}

	e, ok := t.RadiusAccountingPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RadiusAccountingPolicy", oldK)
	}
	e.Name = &newK

	t.RadiusAccountingPolicy[newK] = e
	delete(t.RadiusAccountingPolicy, oldK)
	return nil
}

// GetOrCreateRadiusAccountingPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateRadiusAccountingPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy {

	key := Name

	if v, ok := t.RadiusAccountingPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRadiusAccountingPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRadiusAccountingPolicy got unexpected error: %v", err))
	}
	return v
}

// GetRadiusAccountingPolicy retrieves the value with the specified key from
// the RadiusAccountingPolicy map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetRadiusAccountingPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.RadiusAccountingPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteRadiusAccountingPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) DeleteRadiusAccountingPolicy(Name string) {
	key := Name

	delete(t.RadiusAccountingPolicy, key)
}

// AppendRadiusAccountingPolicy appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy struct to the
// list RadiusAccountingPolicy of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) AppendRadiusAccountingPolicy(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RadiusAccountingPolicy == nil {
		t.RadiusAccountingPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy)
	}

	if _, ok := t.RadiusAccountingPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list RadiusAccountingPolicy %v", key)
	}

	t.RadiusAccountingPolicy[key] = v
	return nil
}

// NewRadiusAuthenticationPolicy creates a new entry in the RadiusAuthenticationPolicy list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) NewRadiusAuthenticationPolicy(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RadiusAuthenticationPolicy == nil {
		t.RadiusAuthenticationPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RadiusAuthenticationPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RadiusAuthenticationPolicy", key)
	}

	t.RadiusAuthenticationPolicy[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy{
		Name: &Name,
	}

	return t.RadiusAuthenticationPolicy[key], nil
}

// RenameRadiusAuthenticationPolicy renames an entry in the list RadiusAuthenticationPolicy within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) RenameRadiusAuthenticationPolicy(oldK, newK string) error {
	if _, ok := t.RadiusAuthenticationPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in RadiusAuthenticationPolicy", newK)
	}

	e, ok := t.RadiusAuthenticationPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RadiusAuthenticationPolicy", oldK)
	}
	e.Name = &newK

	t.RadiusAuthenticationPolicy[newK] = e
	delete(t.RadiusAuthenticationPolicy, oldK)
	return nil
}

// GetOrCreateRadiusAuthenticationPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateRadiusAuthenticationPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy {

	key := Name

	if v, ok := t.RadiusAuthenticationPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRadiusAuthenticationPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRadiusAuthenticationPolicy got unexpected error: %v", err))
	}
	return v
}

// GetRadiusAuthenticationPolicy retrieves the value with the specified key from
// the RadiusAuthenticationPolicy map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetRadiusAuthenticationPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.RadiusAuthenticationPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteRadiusAuthenticationPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) DeleteRadiusAuthenticationPolicy(Name string) {
	key := Name

	delete(t.RadiusAuthenticationPolicy, key)
}

// AppendRadiusAuthenticationPolicy appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy struct to the
// list RadiusAuthenticationPolicy of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) AppendRadiusAuthenticationPolicy(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RadiusAuthenticationPolicy == nil {
		t.RadiusAuthenticationPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy)
	}

	if _, ok := t.RadiusAuthenticationPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list RadiusAuthenticationPolicy %v", key)
	}

	t.RadiusAuthenticationPolicy[key] = v
	return nil
}

// NewRipPolicy creates a new entry in the RipPolicy list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) NewRipPolicy(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RipPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RipPolicy == nil {
		t.RipPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RipPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RipPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RipPolicy", key)
	}

	t.RipPolicy[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RipPolicy{
		Name: &Name,
	}

	return t.RipPolicy[key], nil
}

// RenameRipPolicy renames an entry in the list RipPolicy within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) RenameRipPolicy(oldK, newK string) error {
	if _, ok := t.RipPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in RipPolicy", newK)
	}

	e, ok := t.RipPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RipPolicy", oldK)
	}
	e.Name = &newK

	t.RipPolicy[newK] = e
	delete(t.RipPolicy, oldK)
	return nil
}

// GetOrCreateRipPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateRipPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RipPolicy {

	key := Name

	if v, ok := t.RipPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRipPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRipPolicy got unexpected error: %v", err))
	}
	return v
}

// GetRipPolicy retrieves the value with the specified key from
// the RipPolicy map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetRipPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RipPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.RipPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteRipPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) DeleteRipPolicy(Name string) {
	key := Name

	delete(t.RipPolicy, key)
}

// AppendRipPolicy appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_RipPolicy struct to the
// list RipPolicy of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_RipPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) AppendRipPolicy(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RipPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RipPolicy == nil {
		t.RipPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RipPolicy)
	}

	if _, ok := t.RipPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list RipPolicy %v", key)
	}

	t.RipPolicy[key] = v
	return nil
}

// NewRouterAdvertisementPolicy creates a new entry in the RouterAdvertisementPolicy list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) NewRouterAdvertisementPolicy(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouterAdvertisementPolicy == nil {
		t.RouterAdvertisementPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RouterAdvertisementPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RouterAdvertisementPolicy", key)
	}

	t.RouterAdvertisementPolicy[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy{
		Name: &Name,
	}

	return t.RouterAdvertisementPolicy[key], nil
}

// RenameRouterAdvertisementPolicy renames an entry in the list RouterAdvertisementPolicy within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) RenameRouterAdvertisementPolicy(oldK, newK string) error {
	if _, ok := t.RouterAdvertisementPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in RouterAdvertisementPolicy", newK)
	}

	e, ok := t.RouterAdvertisementPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RouterAdvertisementPolicy", oldK)
	}
	e.Name = &newK

	t.RouterAdvertisementPolicy[newK] = e
	delete(t.RouterAdvertisementPolicy, oldK)
	return nil
}

// GetOrCreateRouterAdvertisementPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateRouterAdvertisementPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy {

	key := Name

	if v, ok := t.RouterAdvertisementPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRouterAdvertisementPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRouterAdvertisementPolicy got unexpected error: %v", err))
	}
	return v
}

// GetRouterAdvertisementPolicy retrieves the value with the specified key from
// the RouterAdvertisementPolicy map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetRouterAdvertisementPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.RouterAdvertisementPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteRouterAdvertisementPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) DeleteRouterAdvertisementPolicy(Name string) {
	key := Name

	delete(t.RouterAdvertisementPolicy, key)
}

// AppendRouterAdvertisementPolicy appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy struct to the
// list RouterAdvertisementPolicy of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) AppendRouterAdvertisementPolicy(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouterAdvertisementPolicy == nil {
		t.RouterAdvertisementPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy)
	}

	if _, ok := t.RouterAdvertisementPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list RouterAdvertisementPolicy %v", key)
	}

	t.RouterAdvertisementPolicy[key] = v
	return nil
}

// NewSapTemplate creates a new entry in the SapTemplate list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) NewSapTemplate(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SapTemplate == nil {
		t.SapTemplate = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SapTemplate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SapTemplate", key)
	}

	t.SapTemplate[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate{
		Name: &Name,
	}

	return t.SapTemplate[key], nil
}

// RenameSapTemplate renames an entry in the list SapTemplate within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) RenameSapTemplate(oldK, newK string) error {
	if _, ok := t.SapTemplate[newK]; ok {
		return fmt.Errorf("key %v already exists in SapTemplate", newK)
	}

	e, ok := t.SapTemplate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SapTemplate", oldK)
	}
	e.Name = &newK

	t.SapTemplate[newK] = e
	delete(t.SapTemplate, oldK)
	return nil
}

// GetOrCreateSapTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateSapTemplate(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate {

	key := Name

	if v, ok := t.SapTemplate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSapTemplate(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSapTemplate got unexpected error: %v", err))
	}
	return v
}

// GetSapTemplate retrieves the value with the specified key from
// the SapTemplate map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetSapTemplate(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.SapTemplate[key]; ok {
		return lm
	}
	return nil
}

// DeleteSapTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) DeleteSapTemplate(Name string) {
	key := Name

	delete(t.SapTemplate, key)
}

// AppendSapTemplate appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate struct to the
// list SapTemplate of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) AppendSapTemplate(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SapTemplate == nil {
		t.SapTemplate = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate)
	}

	if _, ok := t.SapTemplate[key]; ok {
		return fmt.Errorf("duplicate key for list SapTemplate %v", key)
	}

	t.SapTemplate[key] = v
	return nil
}

// NewShcvPolicy creates a new entry in the ShcvPolicy list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) NewShcvPolicy(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ShcvPolicy == nil {
		t.ShcvPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ShcvPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ShcvPolicy", key)
	}

	t.ShcvPolicy[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy{
		Name: &Name,
	}

	return t.ShcvPolicy[key], nil
}

// RenameShcvPolicy renames an entry in the list ShcvPolicy within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) RenameShcvPolicy(oldK, newK string) error {
	if _, ok := t.ShcvPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in ShcvPolicy", newK)
	}

	e, ok := t.ShcvPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ShcvPolicy", oldK)
	}
	e.Name = &newK

	t.ShcvPolicy[newK] = e
	delete(t.ShcvPolicy, oldK)
	return nil
}

// GetOrCreateShcvPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateShcvPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy {

	key := Name

	if v, ok := t.ShcvPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewShcvPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateShcvPolicy got unexpected error: %v", err))
	}
	return v
}

// GetShcvPolicy retrieves the value with the specified key from
// the ShcvPolicy map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetShcvPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.ShcvPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteShcvPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) DeleteShcvPolicy(Name string) {
	key := Name

	delete(t.ShcvPolicy, key)
}

// AppendShcvPolicy appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy struct to the
// list ShcvPolicy of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) AppendShcvPolicy(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ShcvPolicy == nil {
		t.ShcvPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy)
	}

	if _, ok := t.ShcvPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list ShcvPolicy %v", key)
	}

	t.ShcvPolicy[key] = v
	return nil
}

// NewSlaProfile creates a new entry in the SlaProfile list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) NewSlaProfile(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SlaProfile == nil {
		t.SlaProfile = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SlaProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SlaProfile", key)
	}

	t.SlaProfile[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile{
		Name: &Name,
	}

	return t.SlaProfile[key], nil
}

// RenameSlaProfile renames an entry in the list SlaProfile within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) RenameSlaProfile(oldK, newK string) error {
	if _, ok := t.SlaProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in SlaProfile", newK)
	}

	e, ok := t.SlaProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SlaProfile", oldK)
	}
	e.Name = &newK

	t.SlaProfile[newK] = e
	delete(t.SlaProfile, oldK)
	return nil
}

// GetOrCreateSlaProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateSlaProfile(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile {

	key := Name

	if v, ok := t.SlaProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSlaProfile(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSlaProfile got unexpected error: %v", err))
	}
	return v
}

// GetSlaProfile retrieves the value with the specified key from
// the SlaProfile map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetSlaProfile(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.SlaProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteSlaProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) DeleteSlaProfile(Name string) {
	key := Name

	delete(t.SlaProfile, key)
}

// AppendSlaProfile appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile struct to the
// list SlaProfile of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) AppendSlaProfile(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SlaProfile == nil {
		t.SlaProfile = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile)
	}

	if _, ok := t.SlaProfile[key]; ok {
		return fmt.Errorf("duplicate key for list SlaProfile %v", key)
	}

	t.SlaProfile[key] = v
	return nil
}

// NewSteeringProfile creates a new entry in the SteeringProfile list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) NewSteeringProfile(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SteeringProfile == nil {
		t.SteeringProfile = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SteeringProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SteeringProfile", key)
	}

	t.SteeringProfile[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile{
		Name: &Name,
	}

	return t.SteeringProfile[key], nil
}

// RenameSteeringProfile renames an entry in the list SteeringProfile within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) RenameSteeringProfile(oldK, newK string) error {
	if _, ok := t.SteeringProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in SteeringProfile", newK)
	}

	e, ok := t.SteeringProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SteeringProfile", oldK)
	}
	e.Name = &newK

	t.SteeringProfile[newK] = e
	delete(t.SteeringProfile, oldK)
	return nil
}

// GetOrCreateSteeringProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateSteeringProfile(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile {

	key := Name

	if v, ok := t.SteeringProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSteeringProfile(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSteeringProfile got unexpected error: %v", err))
	}
	return v
}

// GetSteeringProfile retrieves the value with the specified key from
// the SteeringProfile map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetSteeringProfile(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.SteeringProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteSteeringProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) DeleteSteeringProfile(Name string) {
	key := Name

	delete(t.SteeringProfile, key)
}

// AppendSteeringProfile appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile struct to the
// list SteeringProfile of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) AppendSteeringProfile(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SteeringProfile == nil {
		t.SteeringProfile = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile)
	}

	if _, ok := t.SteeringProfile[key]; ok {
		return fmt.Errorf("duplicate key for list SteeringProfile %v", key)
	}

	t.SteeringProfile[key] = v
	return nil
}

// NewSubIdentPolicy creates a new entry in the SubIdentPolicy list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) NewSubIdentPolicy(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SubIdentPolicy == nil {
		t.SubIdentPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SubIdentPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SubIdentPolicy", key)
	}

	t.SubIdentPolicy[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy{
		Name: &Name,
	}

	return t.SubIdentPolicy[key], nil
}

// RenameSubIdentPolicy renames an entry in the list SubIdentPolicy within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) RenameSubIdentPolicy(oldK, newK string) error {
	if _, ok := t.SubIdentPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in SubIdentPolicy", newK)
	}

	e, ok := t.SubIdentPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SubIdentPolicy", oldK)
	}
	e.Name = &newK

	t.SubIdentPolicy[newK] = e
	delete(t.SubIdentPolicy, oldK)
	return nil
}

// GetOrCreateSubIdentPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateSubIdentPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy {

	key := Name

	if v, ok := t.SubIdentPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubIdentPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubIdentPolicy got unexpected error: %v", err))
	}
	return v
}

// GetSubIdentPolicy retrieves the value with the specified key from
// the SubIdentPolicy map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetSubIdentPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.SubIdentPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteSubIdentPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) DeleteSubIdentPolicy(Name string) {
	key := Name

	delete(t.SubIdentPolicy, key)
}

// AppendSubIdentPolicy appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy struct to the
// list SubIdentPolicy of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) AppendSubIdentPolicy(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SubIdentPolicy == nil {
		t.SubIdentPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy)
	}

	if _, ok := t.SubIdentPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list SubIdentPolicy %v", key)
	}

	t.SubIdentPolicy[key] = v
	return nil
}

// NewSubMcacPolicy creates a new entry in the SubMcacPolicy list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) NewSubMcacPolicy(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SubMcacPolicy == nil {
		t.SubMcacPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SubMcacPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SubMcacPolicy", key)
	}

	t.SubMcacPolicy[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy{
		Name: &Name,
	}

	return t.SubMcacPolicy[key], nil
}

// RenameSubMcacPolicy renames an entry in the list SubMcacPolicy within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) RenameSubMcacPolicy(oldK, newK string) error {
	if _, ok := t.SubMcacPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in SubMcacPolicy", newK)
	}

	e, ok := t.SubMcacPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SubMcacPolicy", oldK)
	}
	e.Name = &newK

	t.SubMcacPolicy[newK] = e
	delete(t.SubMcacPolicy, oldK)
	return nil
}

// GetOrCreateSubMcacPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateSubMcacPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy {

	key := Name

	if v, ok := t.SubMcacPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubMcacPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubMcacPolicy got unexpected error: %v", err))
	}
	return v
}

// GetSubMcacPolicy retrieves the value with the specified key from
// the SubMcacPolicy map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetSubMcacPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.SubMcacPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteSubMcacPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) DeleteSubMcacPolicy(Name string) {
	key := Name

	delete(t.SubMcacPolicy, key)
}

// AppendSubMcacPolicy appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy struct to the
// list SubMcacPolicy of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) AppendSubMcacPolicy(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SubMcacPolicy == nil {
		t.SubMcacPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy)
	}

	if _, ok := t.SubMcacPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list SubMcacPolicy %v", key)
	}

	t.SubMcacPolicy[key] = v
	return nil
}

// NewSubProfile creates a new entry in the SubProfile list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) NewSubProfile(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SubProfile == nil {
		t.SubProfile = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SubProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SubProfile", key)
	}

	t.SubProfile[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile{
		Name: &Name,
	}

	return t.SubProfile[key], nil
}

// RenameSubProfile renames an entry in the list SubProfile within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) RenameSubProfile(oldK, newK string) error {
	if _, ok := t.SubProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in SubProfile", newK)
	}

	e, ok := t.SubProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SubProfile", oldK)
	}
	e.Name = &newK

	t.SubProfile[newK] = e
	delete(t.SubProfile, oldK)
	return nil
}

// GetOrCreateSubProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateSubProfile(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile {

	key := Name

	if v, ok := t.SubProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubProfile(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubProfile got unexpected error: %v", err))
	}
	return v
}

// GetSubProfile retrieves the value with the specified key from
// the SubProfile map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetSubProfile(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.SubProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteSubProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) DeleteSubProfile(Name string) {
	key := Name

	delete(t.SubProfile, key)
}

// AppendSubProfile appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile struct to the
// list SubProfile of NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) AppendSubProfile(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SubProfile == nil {
		t.SubProfile = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile)
	}

	if _, ok := t.SubProfile[key]; ok {
		return fmt.Errorf("duplicate key for list SubProfile %v", key)
	}

	t.SubProfile[key] = v
	return nil
}

// GetOrCreateAncp retrieves the value of the Ancp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateAncp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp {
	if t.Ancp != nil {
		return t.Ancp
	}
	t.Ancp = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp{}
	return t.Ancp
}

// GetOrCreateAuthenticationOrigin retrieves the value of the AuthenticationOrigin field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateAuthenticationOrigin() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin {
	if t.AuthenticationOrigin != nil {
		return t.AuthenticationOrigin
	}
	t.AuthenticationOrigin = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin{}
	return t.AuthenticationOrigin
}

// GetOrCreateAutoSubId retrieves the value of the AutoSubId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateAutoSubId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AutoSubId {
	if t.AutoSubId != nil {
		return t.AutoSubId
	}
	t.AutoSubId = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_AutoSubId{}
	return t.AutoSubId
}

// GetOrCreateExplicitSubscriberMap retrieves the value of the ExplicitSubscriberMap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateExplicitSubscriberMap() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap {
	if t.ExplicitSubscriberMap != nil {
		return t.ExplicitSubscriberMap
	}
	t.ExplicitSubscriberMap = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap{}
	return t.ExplicitSubscriberMap
}

// GetOrCreateGroupInterfaceStatistics retrieves the value of the GroupInterfaceStatistics field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateGroupInterfaceStatistics() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceStatistics {
	if t.GroupInterfaceStatistics != nil {
		return t.GroupInterfaceStatistics
	}
	t.GroupInterfaceStatistics = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceStatistics{}
	return t.GroupInterfaceStatistics
}

// GetOrCreateGtp retrieves the value of the Gtp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateGtp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp {
	if t.Gtp != nil {
		return t.Gtp
	}
	t.Gtp = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp{}
	return t.Gtp
}

// GetOrCreateIsaServiceChaining retrieves the value of the IsaServiceChaining field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateIsaServiceChaining() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining {
	if t.IsaServiceChaining != nil {
		return t.IsaServiceChaining
	}
	t.IsaServiceChaining = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining{}
	return t.IsaServiceChaining
}

// GetOrCreatePfcp retrieves the value of the Pfcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreatePfcp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp {
	if t.Pfcp != nil {
		return t.Pfcp
	}
	t.Pfcp = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp{}
	return t.Pfcp
}

// GetOrCreateSubscriberInterfaceStatistics retrieves the value of the SubscriberInterfaceStatistics field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateSubscriberInterfaceStatistics() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubscriberInterfaceStatistics {
	if t.SubscriberInterfaceStatistics != nil {
		return t.SubscriberInterfaceStatistics
	}
	t.SubscriberInterfaceStatistics = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubscriberInterfaceStatistics{}
	return t.SubscriberInterfaceStatistics
}

// GetOrCreateSvlanStatistics retrieves the value of the SvlanStatistics field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateSvlanStatistics() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SvlanStatistics {
	if t.SvlanStatistics != nil {
		return t.SvlanStatistics
	}
	t.SvlanStatistics = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SvlanStatistics{}
	return t.SvlanStatistics
}

// GetOrCreateSystemBehavior retrieves the value of the SystemBehavior field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateSystemBehavior() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SystemBehavior {
	if t.SystemBehavior != nil {
		return t.SystemBehavior
	}
	t.SystemBehavior = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SystemBehavior{}
	return t.SystemBehavior
}

// GetOrCreateUpResiliency retrieves the value of the UpResiliency field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateUpResiliency() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency {
	if t.UpResiliency != nil {
		return t.UpResiliency
	}
	t.UpResiliency = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency{}
	return t.UpResiliency
}

// GetOrCreateVrgw retrieves the value of the Vrgw field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateVrgw() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw {
	if t.Vrgw != nil {
		return t.Vrgw
	}
	t.Vrgw = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw{}
	return t.Vrgw
}

// GetOrCreateWlanGw retrieves the value of the WlanGw field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetOrCreateWlanGw() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw {
	if t.WlanGw != nil {
		return t.WlanGw
	}
	t.WlanGw = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw{}
	return t.WlanGw
}

// GetAncp returns the value of the Ancp struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver or the field Ancp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetAncp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp {
	if t != nil && t.Ancp != nil {
		return t.Ancp
	}
	return nil
}

// GetAuthenticationOrigin returns the value of the AuthenticationOrigin struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver or the field AuthenticationOrigin is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetAuthenticationOrigin() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin {
	if t != nil && t.AuthenticationOrigin != nil {
		return t.AuthenticationOrigin
	}
	return nil
}

// GetAutoSubId returns the value of the AutoSubId struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver or the field AutoSubId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetAutoSubId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AutoSubId {
	if t != nil && t.AutoSubId != nil {
		return t.AutoSubId
	}
	return nil
}

// GetExplicitSubscriberMap returns the value of the ExplicitSubscriberMap struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver or the field ExplicitSubscriberMap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetExplicitSubscriberMap() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap {
	if t != nil && t.ExplicitSubscriberMap != nil {
		return t.ExplicitSubscriberMap
	}
	return nil
}

// GetGroupInterfaceStatistics returns the value of the GroupInterfaceStatistics struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver or the field GroupInterfaceStatistics is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetGroupInterfaceStatistics() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceStatistics {
	if t != nil && t.GroupInterfaceStatistics != nil {
		return t.GroupInterfaceStatistics
	}
	return nil
}

// GetGtp returns the value of the Gtp struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver or the field Gtp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetGtp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp {
	if t != nil && t.Gtp != nil {
		return t.Gtp
	}
	return nil
}

// GetIsaServiceChaining returns the value of the IsaServiceChaining struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver or the field IsaServiceChaining is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetIsaServiceChaining() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining {
	if t != nil && t.IsaServiceChaining != nil {
		return t.IsaServiceChaining
	}
	return nil
}

// GetPfcp returns the value of the Pfcp struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver or the field Pfcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetPfcp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp {
	if t != nil && t.Pfcp != nil {
		return t.Pfcp
	}
	return nil
}

// GetSubscriberInterfaceStatistics returns the value of the SubscriberInterfaceStatistics struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver or the field SubscriberInterfaceStatistics is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetSubscriberInterfaceStatistics() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubscriberInterfaceStatistics {
	if t != nil && t.SubscriberInterfaceStatistics != nil {
		return t.SubscriberInterfaceStatistics
	}
	return nil
}

// GetSvlanStatistics returns the value of the SvlanStatistics struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver or the field SvlanStatistics is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetSvlanStatistics() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SvlanStatistics {
	if t != nil && t.SvlanStatistics != nil {
		return t.SvlanStatistics
	}
	return nil
}

// GetSystemBehavior returns the value of the SystemBehavior struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver or the field SystemBehavior is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetSystemBehavior() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SystemBehavior {
	if t != nil && t.SystemBehavior != nil {
		return t.SystemBehavior
	}
	return nil
}

// GetUpResiliency returns the value of the UpResiliency struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver or the field UpResiliency is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetUpResiliency() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency {
	if t != nil && t.UpResiliency != nil {
		return t.UpResiliency
	}
	return nil
}

// GetVrgw returns the value of the Vrgw struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver or the field Vrgw is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetVrgw() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw {
	if t != nil && t.Vrgw != nil {
		return t.Vrgw
	}
	return nil
}

// GetWlanGw returns the value of the WlanGw struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt. If the receiver or the field WlanGw is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) GetWlanGw() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw {
	if t != nil && t.WlanGw != nil {
		return t.WlanGw
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ancp.PopulateDefaults()
	t.AuthenticationOrigin.PopulateDefaults()
	t.AutoSubId.PopulateDefaults()
	t.ExplicitSubscriberMap.PopulateDefaults()
	t.GroupInterfaceStatistics.PopulateDefaults()
	t.Gtp.PopulateDefaults()
	t.IsaServiceChaining.PopulateDefaults()
	t.Pfcp.PopulateDefaults()
	t.SubscriberInterfaceStatistics.PopulateDefaults()
	t.SvlanStatistics.PopulateDefaults()
	t.SystemBehavior.PopulateDefaults()
	t.UpResiliency.PopulateDefaults()
	t.Vrgw.PopulateDefaults()
	t.WlanGw.PopulateDefaults()
	for _, e := range t.AccuStatsPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.BgpPeeringPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.CategoryMap {
		e.PopulateDefaults()
	}
	for _, e := range t.CreditControlPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.DiameterGxPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.DiameterGyPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.DiameterNasreqPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.GroupInterfaceTemplate {
		e.PopulateDefaults()
	}
	for _, e := range t.HostLockoutPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.HostTrackingPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.HttpRedirectPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.IgmpPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.IpoeSessionPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.IsaFilter {
		e.PopulateDefaults()
	}
	for _, e := range t.IsaPolicer {
		e.PopulateDefaults()
	}
	for _, e := range t.LocalUserDb {
		e.PopulateDefaults()
	}
	for _, e := range t.MldPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.MsapPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.PimPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.PppPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.PppoeClientPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.RadiusAccountingPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.RadiusAuthenticationPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.RipPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.RouterAdvertisementPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.SapTemplate {
		e.PopulateDefaults()
	}
	for _, e := range t.ShcvPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.SlaProfile {
		e.PopulateDefaults()
	}
	for _, e := range t.SteeringProfile {
		e.PopulateDefaults()
	}
	for _, e := range t.SubIdentPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.SubMcacPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.SubProfile {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy represents the /nokia-conf/configure/groups/group/subscriber-mgmt/accu-stats-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy struct {
	Description *string                                                                                                                                                  `path:"description" module:"nokia-conf"`
	Egress      map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress_Key]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress   `path:"egress" module:"nokia-conf"`
	Ingress     map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress_Key]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress `path:"ingress" module:"nokia-conf"`
	Name        *string                                                                                                                                                  `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress_Key represents the key for list Egress of element /nokia-conf/configure/groups/group/subscriber-mgmt/accu-stats-policy.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress_Key struct {
	Type NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress_Type_Union `path:"type"`
	Id   NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress_Id_Union   `path:"id"`
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress_Key represents the key for list Ingress of element /nokia-conf/configure/groups/group/subscriber-mgmt/accu-stats-policy.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress_Key struct {
	Type NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress_Type_Union `path:"type"`
	Id   NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress_Id_Union   `path:"id"`
}

// NewEgress creates a new entry in the Egress list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy) NewEgress(Type NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress_Type_Union, Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress_Id_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Egress == nil {
		t.Egress = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress_Key]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress)
	}

	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress_Key{
		Type: Type,
		Id:   Id,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Egress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Egress", key)
	}

	t.Egress[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress{
		Type: Type,
		Id:   Id,
	}

	return t.Egress[key], nil
}

// RenameEgress renames an entry in the list Egress within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy) RenameEgress(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress_Key) error {
	if _, ok := t.Egress[newK]; ok {
		return fmt.Errorf("key %v already exists in Egress", newK)
	}

	e, ok := t.Egress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Egress", oldK)
	}
	e.Type = newK.Type
	e.Id = newK.Id

	t.Egress[newK] = e
	delete(t.Egress, oldK)
	return nil
}

// GetOrCreateEgress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy) GetOrCreateEgress(Type NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress_Type_Union, Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress {

	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress_Key{
		Type: Type,
		Id:   Id,
	}

	if v, ok := t.Egress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEgress(Type, Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEgress got unexpected error: %v", err))
	}
	return v
}

// GetEgress retrieves the value with the specified key from
// the Egress map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy) GetEgress(Type NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress_Type_Union, Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress_Key{
		Type: Type,
		Id:   Id,
	}

	if lm, ok := t.Egress[key]; ok {
		return lm
	}
	return nil
}

// DeleteEgress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy) DeleteEgress(Type NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress_Type_Union, Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress_Id_Union) {
	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress_Key{
		Type: Type,
		Id:   Id,
	}

	delete(t.Egress, key)
}

// AppendEgress appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress struct to the
// list Egress of NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy) AppendEgress(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress) error {
	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress_Key{
		Type: v.Type,
		Id:   v.Id,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Egress == nil {
		t.Egress = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress_Key]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress)
	}

	if _, ok := t.Egress[key]; ok {
		return fmt.Errorf("duplicate key for list Egress %v", key)
	}

	t.Egress[key] = v
	return nil
}

// NewIngress creates a new entry in the Ingress list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy) NewIngress(Type NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress_Type_Union, Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress_Id_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ingress == nil {
		t.Ingress = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress_Key]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress)
	}

	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress_Key{
		Type: Type,
		Id:   Id,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ingress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ingress", key)
	}

	t.Ingress[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress{
		Type: Type,
		Id:   Id,
	}

	return t.Ingress[key], nil
}

// RenameIngress renames an entry in the list Ingress within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy) RenameIngress(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress_Key) error {
	if _, ok := t.Ingress[newK]; ok {
		return fmt.Errorf("key %v already exists in Ingress", newK)
	}

	e, ok := t.Ingress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ingress", oldK)
	}
	e.Type = newK.Type
	e.Id = newK.Id

	t.Ingress[newK] = e
	delete(t.Ingress, oldK)
	return nil
}

// GetOrCreateIngress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy) GetOrCreateIngress(Type NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress_Type_Union, Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress {

	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress_Key{
		Type: Type,
		Id:   Id,
	}

	if v, ok := t.Ingress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIngress(Type, Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIngress got unexpected error: %v", err))
	}
	return v
}

// GetIngress retrieves the value with the specified key from
// the Ingress map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy) GetIngress(Type NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress_Type_Union, Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress_Key{
		Type: Type,
		Id:   Id,
	}

	if lm, ok := t.Ingress[key]; ok {
		return lm
	}
	return nil
}

// DeleteIngress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy) DeleteIngress(Type NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress_Type_Union, Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress_Id_Union) {
	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress_Key{
		Type: Type,
		Id:   Id,
	}

	delete(t.Ingress, key)
}

// AppendIngress appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress struct to the
// list Ingress of NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy) AppendIngress(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress) error {
	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress_Key{
		Type: v.Type,
		Id:   v.Id,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ingress == nil {
		t.Ingress = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress_Key]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress)
	}

	if _, ok := t.Ingress[key]; ok {
		return fmt.Errorf("duplicate key for list Ingress %v", key)
	}

	t.Ingress[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Egress {
		e.PopulateDefaults()
	}
	for _, e := range t.Ingress {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress represents the /nokia-conf/configure/groups/group/subscriber-mgmt/accu-stats-policy/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress struct {
	Id   NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress_Id_Union   `path:"id" module:"nokia-conf"`
	Type NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress_Type_Union `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress) GetId() NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress_Id_Union {
	if t == nil || t.Id == nil {
		return nil
	}
	return t.Id
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress) GetType() NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress_Type_Union {
	if t == nil || t.Type == nil {
		return nil
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"id":   t.Id,
		"type": t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress represents the /nokia-conf/configure/groups/group/subscriber-mgmt/accu-stats-policy/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress struct {
	Id   NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress_Id_Union   `path:"id" module:"nokia-conf"`
	Type NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress_Type_Union `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress) GetId() NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress_Id_Union {
	if t == nil || t.Id == nil {
		return nil
	}
	return t.Id
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress) GetType() NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress_Type_Union {
	if t == nil || t.Type == nil {
		return nil
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"id":   t.Id,
		"type": t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_AccuStatsPolicy_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp represents the /nokia-conf/configure/groups/group/subscriber-mgmt/ancp YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp struct {
	AncpPolicy    map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy `path:"ancp-policy" module:"nokia-conf"`
	AncpStaticMap *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap         `path:"ancp-static-map" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp) IsYANGGoStruct() {}

// NewAncpPolicy creates a new entry in the AncpPolicy list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp) NewAncpPolicy(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AncpPolicy == nil {
		t.AncpPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AncpPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AncpPolicy", key)
	}

	t.AncpPolicy[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy{
		Name: &Name,
	}

	return t.AncpPolicy[key], nil
}

// RenameAncpPolicy renames an entry in the list AncpPolicy within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp) RenameAncpPolicy(oldK, newK string) error {
	if _, ok := t.AncpPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in AncpPolicy", newK)
	}

	e, ok := t.AncpPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AncpPolicy", oldK)
	}
	e.Name = &newK

	t.AncpPolicy[newK] = e
	delete(t.AncpPolicy, oldK)
	return nil
}

// GetOrCreateAncpPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp) GetOrCreateAncpPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy {

	key := Name

	if v, ok := t.AncpPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAncpPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAncpPolicy got unexpected error: %v", err))
	}
	return v
}

// GetAncpPolicy retrieves the value with the specified key from
// the AncpPolicy map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp) GetAncpPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.AncpPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteAncpPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp) DeleteAncpPolicy(Name string) {
	key := Name

	delete(t.AncpPolicy, key)
}

// AppendAncpPolicy appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy struct to the
// list AncpPolicy of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp) AppendAncpPolicy(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AncpPolicy == nil {
		t.AncpPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy)
	}

	if _, ok := t.AncpPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list AncpPolicy %v", key)
	}

	t.AncpPolicy[key] = v
	return nil
}

// GetOrCreateAncpStaticMap retrieves the value of the AncpStaticMap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp) GetOrCreateAncpStaticMap() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap {
	if t.AncpStaticMap != nil {
		return t.AncpStaticMap
	}
	t.AncpStaticMap = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap{}
	return t.AncpStaticMap
}

// GetAncpStaticMap returns the value of the AncpStaticMap struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp. If the receiver or the field AncpStaticMap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp) GetAncpStaticMap() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap {
	if t != nil && t.AncpStaticMap != nil {
		return t.AncpStaticMap
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AncpStaticMap.PopulateDefaults()
	for _, e := range t.AncpPolicy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy represents the /nokia-conf/configure/groups/group/subscriber-mgmt/ancp/ancp-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy struct {
	Egress   *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress   `path:"egress" module:"nokia-conf"`
	Ingress  *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress  `path:"ingress" module:"nokia-conf"`
	Name     *string                                                                   `path:"name" module:"nokia-conf"`
	PortDown *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown `path:"port-down" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress{}
	return t.Egress
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress{}
	return t.Ingress
}

// GetOrCreatePortDown retrieves the value of the PortDown field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy) GetOrCreatePortDown() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown {
	if t.PortDown != nil {
		return t.PortDown
	}
	t.PortDown = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown{}
	return t.PortDown
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy) GetEgress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy) GetIngress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetPortDown returns the value of the PortDown struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy. If the receiver or the field PortDown is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy) GetPortDown() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown {
	if t != nil && t.PortDown != nil {
		return t.PortDown
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Egress.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.PortDown.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress represents the /nokia-conf/configure/groups/group/subscriber-mgmt/ancp/ancp-policy/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress struct {
	RateAdjustment *uint32                                                                             `path:"rate-adjustment" module:"nokia-conf"`
	RateModify     *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateModify  `path:"rate-modify" module:"nokia-conf"`
	RateMonitor    *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateMonitor `path:"rate-monitor" module:"nokia-conf"`
	RateReduction  *uint32                                                                             `path:"rate-reduction" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress) IsYANGGoStruct() {}

// GetOrCreateRateModify retrieves the value of the RateModify field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress) GetOrCreateRateModify() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateModify {
	if t.RateModify != nil {
		return t.RateModify
	}
	t.RateModify = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateModify{}
	return t.RateModify
}

// GetOrCreateRateMonitor retrieves the value of the RateMonitor field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress) GetOrCreateRateMonitor() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateMonitor {
	if t.RateMonitor != nil {
		return t.RateMonitor
	}
	t.RateMonitor = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateMonitor{}
	return t.RateMonitor
}

// GetRateModify returns the value of the RateModify struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress. If the receiver or the field RateModify is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress) GetRateModify() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateModify {
	if t != nil && t.RateModify != nil {
		return t.RateModify
	}
	return nil
}

// GetRateMonitor returns the value of the RateMonitor struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress. If the receiver or the field RateMonitor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress) GetRateMonitor() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateMonitor {
	if t != nil && t.RateMonitor != nil {
		return t.RateMonitor
	}
	return nil
}

// GetRateAdjustment retrieves the value of the leaf RateAdjustment from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RateAdjustment is set, it can
// safely use t.GetRateAdjustment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RateAdjustment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress) GetRateAdjustment() uint32 {
	if t == nil || t.RateAdjustment == nil {
		return 100
	}
	return *t.RateAdjustment
}

// GetRateReduction retrieves the value of the leaf RateReduction from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RateReduction is set, it can
// safely use t.GetRateReduction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RateReduction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress) GetRateReduction() uint32 {
	if t == nil || t.RateReduction == nil {
		return 0
	}
	return *t.RateReduction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RateAdjustment == nil {
		var v uint32 = 100
		t.RateAdjustment = &v
	}
	t.RateModify.PopulateDefaults()
	t.RateMonitor.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateModify represents the /nokia-conf/configure/groups/group/subscriber-mgmt/ancp/ancp-policy/egress/rate-modify YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateModify struct {
	AggRate   YANGEmpty `path:"agg-rate" module:"nokia-conf"`
	Scheduler *string   `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateModify implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateModify) IsYANGGoStruct() {
}

// GetAggRate retrieves the value of the leaf AggRate from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateModify
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AggRate is set, it can
// safely use t.GetAggRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AggRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateModify) GetAggRate() YANGEmpty {
	if t == nil || t.AggRate == false {
		return false
	}
	return t.AggRate
}

// GetScheduler retrieves the value of the leaf Scheduler from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateModify
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scheduler is set, it can
// safely use t.GetScheduler() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scheduler == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateModify) GetScheduler() string {
	if t == nil || t.Scheduler == nil {
		return ""
	}
	return *t.Scheduler
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateModify
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateModify) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateModify) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateModify"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateModify) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateModify) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateModify.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateModify) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateMonitor represents the /nokia-conf/configure/groups/group/subscriber-mgmt/ancp/ancp-policy/egress/rate-monitor YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateMonitor struct {
	Alarm *bool   `path:"alarm" module:"nokia-conf"`
	Rate  *uint32 `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateMonitor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateMonitor) IsYANGGoStruct() {
}

// GetAlarm retrieves the value of the leaf Alarm from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateMonitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Alarm is set, it can
// safely use t.GetAlarm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Alarm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateMonitor) GetAlarm() bool {
	if t == nil || t.Alarm == nil {
		return false
	}
	return *t.Alarm
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateMonitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateMonitor) GetRate() uint32 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateMonitor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateMonitor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Alarm == nil {
		var v bool = false
		t.Alarm = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateMonitor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateMonitor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateMonitor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateMonitor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateMonitor.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Egress_RateMonitor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress represents the /nokia-conf/configure/groups/group/subscriber-mgmt/ancp/ancp-policy/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress struct {
	RateAdjustment *uint32                                                                              `path:"rate-adjustment" module:"nokia-conf"`
	RateModify     *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateModify  `path:"rate-modify" module:"nokia-conf"`
	RateMonitor    *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateMonitor `path:"rate-monitor" module:"nokia-conf"`
	RateReduction  *uint32                                                                              `path:"rate-reduction" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress) IsYANGGoStruct() {}

// GetOrCreateRateModify retrieves the value of the RateModify field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress) GetOrCreateRateModify() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateModify {
	if t.RateModify != nil {
		return t.RateModify
	}
	t.RateModify = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateModify{}
	return t.RateModify
}

// GetOrCreateRateMonitor retrieves the value of the RateMonitor field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress) GetOrCreateRateMonitor() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateMonitor {
	if t.RateMonitor != nil {
		return t.RateMonitor
	}
	t.RateMonitor = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateMonitor{}
	return t.RateMonitor
}

// GetRateModify returns the value of the RateModify struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress. If the receiver or the field RateModify is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress) GetRateModify() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateModify {
	if t != nil && t.RateModify != nil {
		return t.RateModify
	}
	return nil
}

// GetRateMonitor returns the value of the RateMonitor struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress. If the receiver or the field RateMonitor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress) GetRateMonitor() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateMonitor {
	if t != nil && t.RateMonitor != nil {
		return t.RateMonitor
	}
	return nil
}

// GetRateAdjustment retrieves the value of the leaf RateAdjustment from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RateAdjustment is set, it can
// safely use t.GetRateAdjustment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RateAdjustment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress) GetRateAdjustment() uint32 {
	if t == nil || t.RateAdjustment == nil {
		return 100
	}
	return *t.RateAdjustment
}

// GetRateReduction retrieves the value of the leaf RateReduction from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RateReduction is set, it can
// safely use t.GetRateReduction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RateReduction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress) GetRateReduction() uint32 {
	if t == nil || t.RateReduction == nil {
		return 0
	}
	return *t.RateReduction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RateAdjustment == nil {
		var v uint32 = 100
		t.RateAdjustment = &v
	}
	t.RateModify.PopulateDefaults()
	t.RateMonitor.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateModify represents the /nokia-conf/configure/groups/group/subscriber-mgmt/ancp/ancp-policy/ingress/rate-modify YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateModify struct {
	Scheduler *string `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateModify implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateModify) IsYANGGoStruct() {
}

// GetScheduler retrieves the value of the leaf Scheduler from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateModify
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scheduler is set, it can
// safely use t.GetScheduler() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scheduler == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateModify) GetScheduler() string {
	if t == nil || t.Scheduler == nil {
		return ""
	}
	return *t.Scheduler
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateModify
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateModify) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateModify) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateModify"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateModify) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateModify) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateModify.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateModify) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateMonitor represents the /nokia-conf/configure/groups/group/subscriber-mgmt/ancp/ancp-policy/ingress/rate-monitor YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateMonitor struct {
	Alarm *bool   `path:"alarm" module:"nokia-conf"`
	Rate  *uint32 `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateMonitor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateMonitor) IsYANGGoStruct() {
}

// GetAlarm retrieves the value of the leaf Alarm from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateMonitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Alarm is set, it can
// safely use t.GetAlarm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Alarm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateMonitor) GetAlarm() bool {
	if t == nil || t.Alarm == nil {
		return false
	}
	return *t.Alarm
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateMonitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateMonitor) GetRate() uint32 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateMonitor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateMonitor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Alarm == nil {
		var v bool = false
		t.Alarm = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateMonitor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateMonitor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateMonitor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateMonitor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateMonitor.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_Ingress_RateMonitor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown represents the /nokia-conf/configure/groups/group/subscriber-mgmt/ancp/ancp-policy/port-down YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown struct {
	SuspendShcv *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown_SuspendShcv `path:"suspend-shcv" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown) IsYANGGoStruct() {}

// GetOrCreateSuspendShcv retrieves the value of the SuspendShcv field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown) GetOrCreateSuspendShcv() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown_SuspendShcv {
	if t.SuspendShcv != nil {
		return t.SuspendShcv
	}
	t.SuspendShcv = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown_SuspendShcv{}
	return t.SuspendShcv
}

// GetSuspendShcv returns the value of the SuspendShcv struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown. If the receiver or the field SuspendShcv is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown) GetSuspendShcv() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown_SuspendShcv {
	if t != nil && t.SuspendShcv != nil {
		return t.SuspendShcv
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SuspendShcv.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown_SuspendShcv represents the /nokia-conf/configure/groups/group/subscriber-mgmt/ancp/ancp-policy/port-down/suspend-shcv YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown_SuspendShcv struct {
	Alarm    *bool   `path:"alarm" module:"nokia-conf"`
	HoldTime *uint32 `path:"hold-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown_SuspendShcv implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown_SuspendShcv) IsYANGGoStruct() {
}

// GetAlarm retrieves the value of the leaf Alarm from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown_SuspendShcv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Alarm is set, it can
// safely use t.GetAlarm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Alarm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown_SuspendShcv) GetAlarm() bool {
	if t == nil || t.Alarm == nil {
		return false
	}
	return *t.Alarm
}

// GetHoldTime retrieves the value of the leaf HoldTime from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown_SuspendShcv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTime is set, it can
// safely use t.GetHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown_SuspendShcv) GetHoldTime() uint32 {
	if t == nil || t.HoldTime == nil {
		return 0
	}
	return *t.HoldTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown_SuspendShcv
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown_SuspendShcv) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Alarm == nil {
		var v bool = false
		t.Alarm = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown_SuspendShcv) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown_SuspendShcv"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown_SuspendShcv) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown_SuspendShcv) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown_SuspendShcv.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpPolicy_PortDown_SuspendShcv) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap represents the /nokia-conf/configure/groups/group/subscriber-mgmt/ancp/ancp-static-map YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap struct {
	MultiServiceSiteEntry map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry_Key]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry `path:"multi-service-site-entry" module:"nokia-conf"`
	SapEntry              map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry_Key]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry                           `path:"sap-entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry_Key represents the key for list MultiServiceSiteEntry of element /nokia-conf/configure/groups/group/subscriber-mgmt/ancp/ancp-static-map.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry_Key struct {
	AncpString       string `path:"ancp-string"`
	CustomerName     string `path:"customer-name"`
	CustomerSiteName string `path:"customer-site-name"`
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry_Key represents the key for list SapEntry of element /nokia-conf/configure/groups/group/subscriber-mgmt/ancp/ancp-static-map.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry_Key struct {
	AncpString string `path:"ancp-string"`
	SapId      string `path:"sap-id"`
}

// NewMultiServiceSiteEntry creates a new entry in the MultiServiceSiteEntry list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap) NewMultiServiceSiteEntry(AncpString string, CustomerName string, CustomerSiteName string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MultiServiceSiteEntry == nil {
		t.MultiServiceSiteEntry = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry_Key]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry)
	}

	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry_Key{
		AncpString:       AncpString,
		CustomerName:     CustomerName,
		CustomerSiteName: CustomerSiteName,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MultiServiceSiteEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MultiServiceSiteEntry", key)
	}

	t.MultiServiceSiteEntry[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry{
		AncpString:       &AncpString,
		CustomerName:     &CustomerName,
		CustomerSiteName: &CustomerSiteName,
	}

	return t.MultiServiceSiteEntry[key], nil
}

// RenameMultiServiceSiteEntry renames an entry in the list MultiServiceSiteEntry within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap) RenameMultiServiceSiteEntry(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry_Key) error {
	if _, ok := t.MultiServiceSiteEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in MultiServiceSiteEntry", newK)
	}

	e, ok := t.MultiServiceSiteEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MultiServiceSiteEntry", oldK)
	}
	e.AncpString = &newK.AncpString
	e.CustomerName = &newK.CustomerName
	e.CustomerSiteName = &newK.CustomerSiteName

	t.MultiServiceSiteEntry[newK] = e
	delete(t.MultiServiceSiteEntry, oldK)
	return nil
}

// GetOrCreateMultiServiceSiteEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap) GetOrCreateMultiServiceSiteEntry(AncpString string, CustomerName string, CustomerSiteName string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry {

	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry_Key{
		AncpString:       AncpString,
		CustomerName:     CustomerName,
		CustomerSiteName: CustomerSiteName,
	}

	if v, ok := t.MultiServiceSiteEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMultiServiceSiteEntry(AncpString, CustomerName, CustomerSiteName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMultiServiceSiteEntry got unexpected error: %v", err))
	}
	return v
}

// GetMultiServiceSiteEntry retrieves the value with the specified key from
// the MultiServiceSiteEntry map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap) GetMultiServiceSiteEntry(AncpString string, CustomerName string, CustomerSiteName string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry_Key{
		AncpString:       AncpString,
		CustomerName:     CustomerName,
		CustomerSiteName: CustomerSiteName,
	}

	if lm, ok := t.MultiServiceSiteEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteMultiServiceSiteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap) DeleteMultiServiceSiteEntry(AncpString string, CustomerName string, CustomerSiteName string) {
	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry_Key{
		AncpString:       AncpString,
		CustomerName:     CustomerName,
		CustomerSiteName: CustomerSiteName,
	}

	delete(t.MultiServiceSiteEntry, key)
}

// AppendMultiServiceSiteEntry appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry struct to the
// list MultiServiceSiteEntry of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap) AppendMultiServiceSiteEntry(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry) error {
	if v.AncpString == nil {
		return fmt.Errorf("invalid nil key for AncpString")
	}

	if v.CustomerName == nil {
		return fmt.Errorf("invalid nil key for CustomerName")
	}

	if v.CustomerSiteName == nil {
		return fmt.Errorf("invalid nil key for CustomerSiteName")
	}

	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry_Key{
		AncpString:       *v.AncpString,
		CustomerName:     *v.CustomerName,
		CustomerSiteName: *v.CustomerSiteName,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MultiServiceSiteEntry == nil {
		t.MultiServiceSiteEntry = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry_Key]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry)
	}

	if _, ok := t.MultiServiceSiteEntry[key]; ok {
		return fmt.Errorf("duplicate key for list MultiServiceSiteEntry %v", key)
	}

	t.MultiServiceSiteEntry[key] = v
	return nil
}

// NewSapEntry creates a new entry in the SapEntry list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap) NewSapEntry(AncpString string, SapId string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SapEntry == nil {
		t.SapEntry = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry_Key]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry)
	}

	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry_Key{
		AncpString: AncpString,
		SapId:      SapId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SapEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SapEntry", key)
	}

	t.SapEntry[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry{
		AncpString: &AncpString,
		SapId:      &SapId,
	}

	return t.SapEntry[key], nil
}

// RenameSapEntry renames an entry in the list SapEntry within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap) RenameSapEntry(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry_Key) error {
	if _, ok := t.SapEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in SapEntry", newK)
	}

	e, ok := t.SapEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SapEntry", oldK)
	}
	e.AncpString = &newK.AncpString
	e.SapId = &newK.SapId

	t.SapEntry[newK] = e
	delete(t.SapEntry, oldK)
	return nil
}

// GetOrCreateSapEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap) GetOrCreateSapEntry(AncpString string, SapId string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry {

	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry_Key{
		AncpString: AncpString,
		SapId:      SapId,
	}

	if v, ok := t.SapEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSapEntry(AncpString, SapId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSapEntry got unexpected error: %v", err))
	}
	return v
}

// GetSapEntry retrieves the value with the specified key from
// the SapEntry map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap) GetSapEntry(AncpString string, SapId string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry_Key{
		AncpString: AncpString,
		SapId:      SapId,
	}

	if lm, ok := t.SapEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteSapEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap) DeleteSapEntry(AncpString string, SapId string) {
	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry_Key{
		AncpString: AncpString,
		SapId:      SapId,
	}

	delete(t.SapEntry, key)
}

// AppendSapEntry appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry struct to the
// list SapEntry of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap) AppendSapEntry(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry) error {
	if v.AncpString == nil {
		return fmt.Errorf("invalid nil key for AncpString")
	}

	if v.SapId == nil {
		return fmt.Errorf("invalid nil key for SapId")
	}

	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry_Key{
		AncpString: *v.AncpString,
		SapId:      *v.SapId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SapEntry == nil {
		t.SapEntry = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry_Key]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry)
	}

	if _, ok := t.SapEntry[key]; ok {
		return fmt.Errorf("duplicate key for list SapEntry %v", key)
	}

	t.SapEntry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.MultiServiceSiteEntry {
		e.PopulateDefaults()
	}
	for _, e := range t.SapEntry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry represents the /nokia-conf/configure/groups/group/subscriber-mgmt/ancp/ancp-static-map/multi-service-site-entry YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry struct {
	AncpPolicy       *string `path:"ancp-policy" module:"nokia-conf"`
	AncpString       *string `path:"ancp-string" module:"nokia-conf"`
	CustomerName     *string `path:"customer-name" module:"nokia-conf"`
	CustomerSiteName *string `path:"customer-site-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry) IsYANGGoStruct() {
}

// GetAncpPolicy retrieves the value of the leaf AncpPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AncpPolicy is set, it can
// safely use t.GetAncpPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AncpPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry) GetAncpPolicy() string {
	if t == nil || t.AncpPolicy == nil {
		return ""
	}
	return *t.AncpPolicy
}

// GetAncpString retrieves the value of the leaf AncpString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AncpString is set, it can
// safely use t.GetAncpString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AncpString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry) GetAncpString() string {
	if t == nil || t.AncpString == nil {
		return ""
	}
	return *t.AncpString
}

// GetCustomerName retrieves the value of the leaf CustomerName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CustomerName is set, it can
// safely use t.GetCustomerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CustomerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry) GetCustomerName() string {
	if t == nil || t.CustomerName == nil {
		return ""
	}
	return *t.CustomerName
}

// GetCustomerSiteName retrieves the value of the leaf CustomerSiteName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CustomerSiteName is set, it can
// safely use t.GetCustomerSiteName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CustomerSiteName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry) GetCustomerSiteName() string {
	if t == nil || t.CustomerSiteName == nil {
		return ""
	}
	return *t.CustomerSiteName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AncpString == nil {
		return nil, fmt.Errorf("nil value for key AncpString")
	}

	if t.CustomerName == nil {
		return nil, fmt.Errorf("nil value for key CustomerName")
	}

	if t.CustomerSiteName == nil {
		return nil, fmt.Errorf("nil value for key CustomerSiteName")
	}

	return map[string]interface{}{
		"ancp-string":        *t.AncpString,
		"customer-name":      *t.CustomerName,
		"customer-site-name": *t.CustomerSiteName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_MultiServiceSiteEntry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry represents the /nokia-conf/configure/groups/group/subscriber-mgmt/ancp/ancp-static-map/sap-entry YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry struct {
	AncpPolicy *string `path:"ancp-policy" module:"nokia-conf"`
	AncpString *string `path:"ancp-string" module:"nokia-conf"`
	SapId      *string `path:"sap-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry) IsYANGGoStruct() {
}

// GetAncpPolicy retrieves the value of the leaf AncpPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AncpPolicy is set, it can
// safely use t.GetAncpPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AncpPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry) GetAncpPolicy() string {
	if t == nil || t.AncpPolicy == nil {
		return ""
	}
	return *t.AncpPolicy
}

// GetAncpString retrieves the value of the leaf AncpString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AncpString is set, it can
// safely use t.GetAncpString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AncpString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry) GetAncpString() string {
	if t == nil || t.AncpString == nil {
		return ""
	}
	return *t.AncpString
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AncpString == nil {
		return nil, fmt.Errorf("nil value for key AncpString")
	}

	if t.SapId == nil {
		return nil, fmt.Errorf("nil value for key SapId")
	}

	return map[string]interface{}{
		"ancp-string": *t.AncpString,
		"sap-id":      *t.SapId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Ancp_AncpStaticMap_SapEntry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin represents the /nokia-conf/configure/groups/group/subscriber-mgmt/authentication-origin YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin struct {
	Overrides *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides `path:"overrides" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin) GetOverrides() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides represents the /nokia-conf/configure/groups/group/subscriber-mgmt/authentication-origin/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides struct {
	Priority map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides) IsYANGGoStruct() {
}

// NewPriority creates a new entry in the Priority list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides) NewPriority(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority_Id_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Priority[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Priority", key)
	}

	t.Priority[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority{
		Id: Id,
	}

	return t.Priority[key], nil
}

// RenamePriority renames an entry in the list Priority within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides) RenamePriority(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority_Id_Union) error {
	if _, ok := t.Priority[newK]; ok {
		return fmt.Errorf("key %v already exists in Priority", newK)
	}

	e, ok := t.Priority[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Priority", oldK)
	}
	e.Id = newK

	t.Priority[newK] = e
	delete(t.Priority, oldK)
	return nil
}

// GetOrCreatePriority retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides) GetOrCreatePriority(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority {

	key := Id

	if v, ok := t.Priority[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPriority(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePriority got unexpected error: %v", err))
	}
	return v
}

// GetPriority retrieves the value with the specified key from
// the Priority map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides) GetPriority(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Priority[key]; ok {
		return lm
	}
	return nil
}

// DeletePriority deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides) DeletePriority(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority_Id_Union) {
	key := Id

	delete(t.Priority, key)
}

// AppendPriority appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority struct to the
// list Priority of NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides) AppendPriority(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority) error {
	key := v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority)
	}

	if _, ok := t.Priority[key]; ok {
		return fmt.Errorf("duplicate key for list Priority %v", key)
	}

	t.Priority[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Priority {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority represents the /nokia-conf/configure/groups/group/subscriber-mgmt/authentication-origin/overrides/priority YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority struct {
	Id     NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority_Id_Union `path:"id" module:"nokia-conf"`
	Source E_NokiaTypesSubscriberMgmt_AuthenticationOrigin                                                  `path:"source" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority) IsYANGGoStruct() {
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority) GetId() NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority_Id_Union {
	if t == nil || t.Id == nil {
		return nil
	}
	return t.Id
}

// GetSource retrieves the value of the leaf Source from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source is set, it can
// safely use t.GetSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority) GetSource() E_NokiaTypesSubscriberMgmt_AuthenticationOrigin {
	if t == nil || t.Source == 0 {
		return 0
	}
	return t.Source
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"id": t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_AuthenticationOrigin_Overrides_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_AutoSubId represents the /nokia-conf/configure/groups/group/subscriber-mgmt/auto-sub-id YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_AutoSubId struct {
	ImplicitGeneration *bool                                     `path:"implicit-generation" module:"nokia-conf"`
	IpoeKey            []E_NokiaTypesSubscriberMgmt_SubIdKeyIpoe `path:"ipoe-key" module:"nokia-conf"`
	PppKey             []E_NokiaTypesSubscriberMgmt_SubIdKeyPpp  `path:"ppp-key" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_AutoSubId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_AutoSubId) IsYANGGoStruct() {}

// GetImplicitGeneration retrieves the value of the leaf ImplicitGeneration from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_AutoSubId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImplicitGeneration is set, it can
// safely use t.GetImplicitGeneration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImplicitGeneration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AutoSubId) GetImplicitGeneration() bool {
	if t == nil || t.ImplicitGeneration == nil {
		return true
	}
	return *t.ImplicitGeneration
}

// GetIpoeKey retrieves the value of the leaf IpoeKey from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_AutoSubId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpoeKey is set, it can
// safely use t.GetIpoeKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpoeKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AutoSubId) GetIpoeKey() []E_NokiaTypesSubscriberMgmt_SubIdKeyIpoe {
	if t == nil || t.IpoeKey == nil {
		return nil
	}
	return t.IpoeKey
}

// GetPppKey retrieves the value of the leaf PppKey from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_AutoSubId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PppKey is set, it can
// safely use t.GetPppKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PppKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AutoSubId) GetPppKey() []E_NokiaTypesSubscriberMgmt_SubIdKeyPpp {
	if t == nil || t.PppKey == nil {
		return nil
	}
	return t.PppKey
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_AutoSubId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AutoSubId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ImplicitGeneration == nil {
		var v bool = true
		t.ImplicitGeneration = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AutoSubId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_AutoSubId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AutoSubId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_AutoSubId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_AutoSubId.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_AutoSubId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy represents the /nokia-conf/configure/groups/group/subscriber-mgmt/bgp-peering-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy struct {
	AdvertiseInactive      *bool                                                                             `path:"advertise-inactive" module:"nokia-conf"`
	AggregatorIdZero       *bool                                                                             `path:"aggregator-id-zero" module:"nokia-conf"`
	AsOverride             *bool                                                                             `path:"as-override" module:"nokia-conf"`
	Asn_4Byte              *bool                                                                             `path:"asn-4-byte" module:"nokia-conf"`
	AuthenticationKey      *string                                                                           `path:"authentication-key" module:"nokia-conf"`
	AuthenticationKeychain *string                                                                           `path:"authentication-keychain" module:"nokia-conf"`
	BfdLiveness            *bool                                                                             `path:"bfd-liveness" module:"nokia-conf"`
	ClientReflect          *bool                                                                             `path:"client-reflect" module:"nokia-conf"`
	Cluster                *string                                                                           `path:"cluster" module:"nokia-conf"`
	ConnectRetry           *int32                                                                            `path:"connect-retry" module:"nokia-conf"`
	Damping                *bool                                                                             `path:"damping" module:"nokia-conf"`
	Description            *string                                                                           `path:"description" module:"nokia-conf"`
	Export                 []string                                                                          `path:"export" module:"nokia-conf"`
	FastExternalFailover   *bool                                                                             `path:"fast-external-failover" module:"nokia-conf"`
	HoldTime               *int32                                                                            `path:"hold-time" module:"nokia-conf"`
	Import                 []string                                                                          `path:"import" module:"nokia-conf"`
	Keepalive              *int32                                                                            `path:"keepalive" module:"nokia-conf"`
	LocalAddress           *string                                                                           `path:"local-address" module:"nokia-conf"`
	LocalAs                *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_LocalAs         `path:"local-as" module:"nokia-conf"`
	LocalPreference        *int64                                                                            `path:"local-preference" module:"nokia-conf"`
	LoopDetect             E_NokiaTypesBgp_LoopDetect                                                        `path:"loop-detect" module:"nokia-conf"`
	MedOut                 NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_MedOut_Union     `path:"med-out" module:"nokia-conf"`
	MinRouteAdvertisement  *int16                                                                            `path:"min-route-advertisement" module:"nokia-conf"`
	Multihop               *uint32                                                                           `path:"multihop" module:"nokia-conf"`
	Name                   *string                                                                           `path:"name" module:"nokia-conf"`
	NextHopSelf            *bool                                                                             `path:"next-hop-self" module:"nokia-conf"`
	Passive                *bool                                                                             `path:"passive" module:"nokia-conf"`
	PeerAs                 *uint32                                                                           `path:"peer-as" module:"nokia-conf"`
	Preference             *uint32                                                                           `path:"preference" module:"nokia-conf"`
	PrefixLimit            *uint32                                                                           `path:"prefix-limit" module:"nokia-conf"`
	RemovePrivate          *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_RemovePrivate   `path:"remove-private" module:"nokia-conf" yangPresence:"true"`
	SendCommunities        *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_SendCommunities `path:"send-communities" module:"nokia-conf"`
	TtlSecurity            *int32                                                                            `path:"ttl-security" module:"nokia-conf"`
	Type                   E_NokiaTypesBgp_PeerType                                                          `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) IsYANGGoStruct() {}

// GetOrCreateLocalAs retrieves the value of the LocalAs field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) GetOrCreateLocalAs() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_LocalAs {
	if t.LocalAs != nil {
		return t.LocalAs
	}
	t.LocalAs = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_LocalAs{}
	return t.LocalAs
}

// GetOrCreateRemovePrivate retrieves the value of the RemovePrivate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) GetOrCreateRemovePrivate() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_RemovePrivate {
	if t.RemovePrivate != nil {
		return t.RemovePrivate
	}
	t.RemovePrivate = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_RemovePrivate{}
	return t.RemovePrivate
}

// GetOrCreateSendCommunities retrieves the value of the SendCommunities field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) GetOrCreateSendCommunities() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_SendCommunities {
	if t.SendCommunities != nil {
		return t.SendCommunities
	}
	t.SendCommunities = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_SendCommunities{}
	return t.SendCommunities
}

// GetLocalAs returns the value of the LocalAs struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy. If the receiver or the field LocalAs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) GetLocalAs() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_LocalAs {
	if t != nil && t.LocalAs != nil {
		return t.LocalAs
	}
	return nil
}

// GetRemovePrivate returns the value of the RemovePrivate struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy. If the receiver or the field RemovePrivate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) GetRemovePrivate() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_RemovePrivate {
	if t != nil && t.RemovePrivate != nil {
		return t.RemovePrivate
	}
	return nil
}

// GetSendCommunities returns the value of the SendCommunities struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy. If the receiver or the field SendCommunities is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) GetSendCommunities() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_SendCommunities {
	if t != nil && t.SendCommunities != nil {
		return t.SendCommunities
	}
	return nil
}

// GetAdvertiseInactive retrieves the value of the leaf AdvertiseInactive from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseInactive is set, it can
// safely use t.GetAdvertiseInactive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseInactive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) GetAdvertiseInactive() bool {
	if t == nil || t.AdvertiseInactive == nil {
		return false
	}
	return *t.AdvertiseInactive
}

// GetAggregatorIdZero retrieves the value of the leaf AggregatorIdZero from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AggregatorIdZero is set, it can
// safely use t.GetAggregatorIdZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AggregatorIdZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) GetAggregatorIdZero() bool {
	if t == nil || t.AggregatorIdZero == nil {
		return false
	}
	return *t.AggregatorIdZero
}

// GetAsOverride retrieves the value of the leaf AsOverride from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsOverride is set, it can
// safely use t.GetAsOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) GetAsOverride() bool {
	if t == nil || t.AsOverride == nil {
		return false
	}
	return *t.AsOverride
}

// GetAsn_4Byte retrieves the value of the leaf Asn_4Byte from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Asn_4Byte is set, it can
// safely use t.GetAsn_4Byte() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Asn_4Byte == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) GetAsn_4Byte() bool {
	if t == nil || t.Asn_4Byte == nil {
		return false
	}
	return *t.Asn_4Byte
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationKeychain retrieves the value of the leaf AuthenticationKeychain from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKeychain is set, it can
// safely use t.GetAuthenticationKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKeychain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) GetAuthenticationKeychain() string {
	if t == nil || t.AuthenticationKeychain == nil {
		return ""
	}
	return *t.AuthenticationKeychain
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetClientReflect retrieves the value of the leaf ClientReflect from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientReflect is set, it can
// safely use t.GetClientReflect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientReflect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) GetClientReflect() bool {
	if t == nil || t.ClientReflect == nil {
		return false
	}
	return *t.ClientReflect
}

// GetCluster retrieves the value of the leaf Cluster from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cluster is set, it can
// safely use t.GetCluster() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cluster == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) GetCluster() string {
	if t == nil || t.Cluster == nil {
		return ""
	}
	return *t.Cluster
}

// GetConnectRetry retrieves the value of the leaf ConnectRetry from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectRetry is set, it can
// safely use t.GetConnectRetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectRetry == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) GetConnectRetry() int32 {
	if t == nil || t.ConnectRetry == nil {
		return 0
	}
	return *t.ConnectRetry
}

// GetDamping retrieves the value of the leaf Damping from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Damping is set, it can
// safely use t.GetDamping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Damping == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) GetDamping() bool {
	if t == nil || t.Damping == nil {
		return false
	}
	return *t.Damping
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExport retrieves the value of the leaf Export from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Export is set, it can
// safely use t.GetExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Export == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) GetExport() []string {
	if t == nil || t.Export == nil {
		return nil
	}
	return t.Export
}

// GetFastExternalFailover retrieves the value of the leaf FastExternalFailover from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastExternalFailover is set, it can
// safely use t.GetFastExternalFailover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastExternalFailover == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) GetFastExternalFailover() bool {
	if t == nil || t.FastExternalFailover == nil {
		return false
	}
	return *t.FastExternalFailover
}

// GetHoldTime retrieves the value of the leaf HoldTime from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTime is set, it can
// safely use t.GetHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) GetHoldTime() int32 {
	if t == nil || t.HoldTime == nil {
		return 0
	}
	return *t.HoldTime
}

// GetImport retrieves the value of the leaf Import from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Import is set, it can
// safely use t.GetImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Import == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) GetImport() []string {
	if t == nil || t.Import == nil {
		return nil
	}
	return t.Import
}

// GetKeepalive retrieves the value of the leaf Keepalive from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keepalive is set, it can
// safely use t.GetKeepalive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keepalive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) GetKeepalive() int32 {
	if t == nil || t.Keepalive == nil {
		return 0
	}
	return *t.Keepalive
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetLocalPreference retrieves the value of the leaf LocalPreference from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPreference is set, it can
// safely use t.GetLocalPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) GetLocalPreference() int64 {
	if t == nil || t.LocalPreference == nil {
		return 0
	}
	return *t.LocalPreference
}

// GetLoopDetect retrieves the value of the leaf LoopDetect from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopDetect is set, it can
// safely use t.GetLoopDetect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopDetect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) GetLoopDetect() E_NokiaTypesBgp_LoopDetect {
	if t == nil || t.LoopDetect == 0 {
		return 0
	}
	return t.LoopDetect
}

// GetMedOut retrieves the value of the leaf MedOut from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MedOut is set, it can
// safely use t.GetMedOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MedOut == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) GetMedOut() NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_MedOut_Union {
	if t == nil || t.MedOut == nil {
		return nil
	}
	return t.MedOut
}

// GetMinRouteAdvertisement retrieves the value of the leaf MinRouteAdvertisement from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinRouteAdvertisement is set, it can
// safely use t.GetMinRouteAdvertisement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinRouteAdvertisement == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) GetMinRouteAdvertisement() int16 {
	if t == nil || t.MinRouteAdvertisement == nil {
		return 0
	}
	return *t.MinRouteAdvertisement
}

// GetMultihop retrieves the value of the leaf Multihop from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multihop is set, it can
// safely use t.GetMultihop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multihop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) GetMultihop() uint32 {
	if t == nil || t.Multihop == nil {
		return 0
	}
	return *t.Multihop
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetNextHopSelf retrieves the value of the leaf NextHopSelf from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopSelf is set, it can
// safely use t.GetNextHopSelf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopSelf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) GetNextHopSelf() bool {
	if t == nil || t.NextHopSelf == nil {
		return false
	}
	return *t.NextHopSelf
}

// GetPassive retrieves the value of the leaf Passive from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Passive is set, it can
// safely use t.GetPassive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Passive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) GetPassive() bool {
	if t == nil || t.Passive == nil {
		return false
	}
	return *t.Passive
}

// GetPeerAs retrieves the value of the leaf PeerAs from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerAs is set, it can
// safely use t.GetPeerAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) GetPeerAs() uint32 {
	if t == nil || t.PeerAs == nil {
		return 0
	}
	return *t.PeerAs
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetPrefixLimit retrieves the value of the leaf PrefixLimit from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLimit is set, it can
// safely use t.GetPrefixLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) GetPrefixLimit() uint32 {
	if t == nil || t.PrefixLimit == nil {
		return 0
	}
	return *t.PrefixLimit
}

// GetTtlSecurity retrieves the value of the leaf TtlSecurity from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TtlSecurity is set, it can
// safely use t.GetTtlSecurity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TtlSecurity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) GetTtlSecurity() int32 {
	if t == nil || t.TtlSecurity == nil {
		return 0
	}
	return *t.TtlSecurity
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) GetType() E_NokiaTypesBgp_PeerType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BfdLiveness == nil {
		var v bool = false
		t.BfdLiveness = &v
	}
	t.LocalAs.PopulateDefaults()
	t.RemovePrivate.PopulateDefaults()
	t.SendCommunities.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_LocalAs represents the /nokia-conf/configure/groups/group/subscriber-mgmt/bgp-peering-policy/local-as YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_LocalAs struct {
	AsNumber *uint32 `path:"as-number" module:"nokia-conf"`
	Private  *bool   `path:"private" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_LocalAs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_LocalAs) IsYANGGoStruct() {}

// GetAsNumber retrieves the value of the leaf AsNumber from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsNumber is set, it can
// safely use t.GetAsNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_LocalAs) GetAsNumber() uint32 {
	if t == nil || t.AsNumber == nil {
		return 0
	}
	return *t.AsNumber
}

// GetPrivate retrieves the value of the leaf Private from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Private is set, it can
// safely use t.GetPrivate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Private == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_LocalAs) GetPrivate() bool {
	if t == nil || t.Private == nil {
		return false
	}
	return *t.Private
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_LocalAs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_LocalAs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Private == nil {
		var v bool = false
		t.Private = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_LocalAs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_LocalAs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_LocalAs) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_LocalAs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_LocalAs.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_LocalAs) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_RemovePrivate represents the /nokia-conf/configure/groups/group/subscriber-mgmt/bgp-peering-policy/remove-private YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_RemovePrivate struct {
	Limited *bool `path:"limited" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_RemovePrivate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_RemovePrivate) IsYANGGoStruct() {
}

// GetLimited retrieves the value of the leaf Limited from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_RemovePrivate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Limited is set, it can
// safely use t.GetLimited() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Limited == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_RemovePrivate) GetLimited() bool {
	if t == nil || t.Limited == nil {
		return false
	}
	return *t.Limited
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_RemovePrivate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_RemovePrivate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Limited == nil {
		var v bool = false
		t.Limited = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_RemovePrivate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_RemovePrivate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_RemovePrivate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_RemovePrivate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_RemovePrivate.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_RemovePrivate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_SendCommunities represents the /nokia-conf/configure/groups/group/subscriber-mgmt/bgp-peering-policy/send-communities YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_SendCommunities struct {
	Extended *bool `path:"extended" module:"nokia-conf"`
	Standard *bool `path:"standard" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_SendCommunities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_SendCommunities) IsYANGGoStruct() {
}

// GetExtended retrieves the value of the leaf Extended from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_SendCommunities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_SendCommunities) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetStandard retrieves the value of the leaf Standard from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_SendCommunities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Standard is set, it can
// safely use t.GetStandard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Standard == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_SendCommunities) GetStandard() bool {
	if t == nil || t.Standard == nil {
		return false
	}
	return *t.Standard
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_SendCommunities
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_SendCommunities) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_SendCommunities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_SendCommunities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_SendCommunities) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_SendCommunities) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_SendCommunities.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_BgpPeeringPolicy_SendCommunities) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap struct {
	ActivityThreshold      *uint32                                                                          `path:"activity-threshold" module:"nokia-conf"`
	Category               map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category `path:"category" module:"nokia-conf"`
	CategoryMapName        *string                                                                          `path:"category-map-name" module:"nokia-conf"`
	CreditExhaustThreshold *uint32                                                                          `path:"credit-exhaust-threshold" module:"nokia-conf"`
	CreditType             E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_CreditType         `path:"credit-type" module:"nokia-conf"`
	Description            *string                                                                          `path:"description" module:"nokia-conf"`
	GxSessionLevelUsage    *bool                                                                            `path:"gx-session-level-usage" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap) IsYANGGoStruct() {}

// NewCategory creates a new entry in the Category list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap) NewCategory(CategoryName string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Category == nil {
		t.Category = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category)
	}

	key := CategoryName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Category[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Category", key)
	}

	t.Category[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category{
		CategoryName: &CategoryName,
	}

	return t.Category[key], nil
}

// RenameCategory renames an entry in the list Category within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap) RenameCategory(oldK, newK string) error {
	if _, ok := t.Category[newK]; ok {
		return fmt.Errorf("key %v already exists in Category", newK)
	}

	e, ok := t.Category[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Category", oldK)
	}
	e.CategoryName = &newK

	t.Category[newK] = e
	delete(t.Category, oldK)
	return nil
}

// GetOrCreateCategory retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap) GetOrCreateCategory(CategoryName string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category {

	key := CategoryName

	if v, ok := t.Category[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCategory(CategoryName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCategory got unexpected error: %v", err))
	}
	return v
}

// GetCategory retrieves the value with the specified key from
// the Category map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap) GetCategory(CategoryName string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category {

	if t == nil {
		return nil
	}

	key := CategoryName

	if lm, ok := t.Category[key]; ok {
		return lm
	}
	return nil
}

// DeleteCategory deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap) DeleteCategory(CategoryName string) {
	key := CategoryName

	delete(t.Category, key)
}

// AppendCategory appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category struct to the
// list Category of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap) AppendCategory(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category) error {
	if v.CategoryName == nil {
		return fmt.Errorf("invalid nil key received for CategoryName")
	}

	key := *v.CategoryName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Category == nil {
		t.Category = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category)
	}

	if _, ok := t.Category[key]; ok {
		return fmt.Errorf("duplicate key for list Category %v", key)
	}

	t.Category[key] = v
	return nil
}

// GetActivityThreshold retrieves the value of the leaf ActivityThreshold from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActivityThreshold is set, it can
// safely use t.GetActivityThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActivityThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap) GetActivityThreshold() uint32 {
	if t == nil || t.ActivityThreshold == nil {
		return 0
	}
	return *t.ActivityThreshold
}

// GetCategoryMapName retrieves the value of the leaf CategoryMapName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CategoryMapName is set, it can
// safely use t.GetCategoryMapName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CategoryMapName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap) GetCategoryMapName() string {
	if t == nil || t.CategoryMapName == nil {
		return ""
	}
	return *t.CategoryMapName
}

// GetCreditExhaustThreshold retrieves the value of the leaf CreditExhaustThreshold from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CreditExhaustThreshold is set, it can
// safely use t.GetCreditExhaustThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CreditExhaustThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap) GetCreditExhaustThreshold() uint32 {
	if t == nil || t.CreditExhaustThreshold == nil {
		return 100
	}
	return *t.CreditExhaustThreshold
}

// GetCreditType retrieves the value of the leaf CreditType from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CreditType is set, it can
// safely use t.GetCreditType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CreditType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap) GetCreditType() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_CreditType {
	if t == nil || t.CreditType == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_CreditType_volume
	}
	return t.CreditType
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetGxSessionLevelUsage retrieves the value of the leaf GxSessionLevelUsage from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GxSessionLevelUsage is set, it can
// safely use t.GetGxSessionLevelUsage() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GxSessionLevelUsage == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap) GetGxSessionLevelUsage() bool {
	if t == nil || t.GxSessionLevelUsage == nil {
		return false
	}
	return *t.GxSessionLevelUsage
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CreditExhaustThreshold == nil {
		var v uint32 = 100
		t.CreditExhaustThreshold = &v
	}
	if t.CreditType == 0 {
		t.CreditType = NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_CreditType_volume
	}
	if t.GxSessionLevelUsage == nil {
		var v bool = false
		t.GxSessionLevelUsage = &v
	}
	for _, e := range t.Category {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CategoryMapName == nil {
		return nil, fmt.Errorf("nil value for key CategoryMapName")
	}

	return map[string]interface{}{
		"category-map-name": *t.CategoryMapName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category struct {
	CategoryName                *string                                                                                           `path:"category-name" module:"nokia-conf"`
	CreditTypeOverride          E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_CreditTypeOverride         `path:"credit-type-override" module:"nokia-conf"`
	DefaultCredit               *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit               `path:"default-credit" module:"nokia-conf"`
	Description                 *string                                                                                           `path:"description" module:"nokia-conf"`
	Egress                      *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Egress                      `path:"egress" module:"nokia-conf"`
	ExhaustedCreditServiceLevel *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel `path:"exhausted-credit-service-level" module:"nokia-conf"`
	Ingress                     *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Ingress                     `path:"ingress" module:"nokia-conf"`
	OutOfCreditActionOverride   E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_OutOfCreditActionOverride  `path:"out-of-credit-action-override" module:"nokia-conf"`
	RatingGroup                 *int64                                                                                            `path:"rating-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category) IsYANGGoStruct() {}

// GetOrCreateDefaultCredit retrieves the value of the DefaultCredit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category) GetOrCreateDefaultCredit() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit {
	if t.DefaultCredit != nil {
		return t.DefaultCredit
	}
	t.DefaultCredit = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit{}
	return t.DefaultCredit
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Egress{}
	return t.Egress
}

// GetOrCreateExhaustedCreditServiceLevel retrieves the value of the ExhaustedCreditServiceLevel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category) GetOrCreateExhaustedCreditServiceLevel() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel {
	if t.ExhaustedCreditServiceLevel != nil {
		return t.ExhaustedCreditServiceLevel
	}
	t.ExhaustedCreditServiceLevel = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel{}
	return t.ExhaustedCreditServiceLevel
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Ingress{}
	return t.Ingress
}

// GetDefaultCredit returns the value of the DefaultCredit struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category. If the receiver or the field DefaultCredit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category) GetDefaultCredit() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit {
	if t != nil && t.DefaultCredit != nil {
		return t.DefaultCredit
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category) GetEgress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetExhaustedCreditServiceLevel returns the value of the ExhaustedCreditServiceLevel struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category. If the receiver or the field ExhaustedCreditServiceLevel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category) GetExhaustedCreditServiceLevel() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel {
	if t != nil && t.ExhaustedCreditServiceLevel != nil {
		return t.ExhaustedCreditServiceLevel
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category) GetIngress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetCategoryName retrieves the value of the leaf CategoryName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CategoryName is set, it can
// safely use t.GetCategoryName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CategoryName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category) GetCategoryName() string {
	if t == nil || t.CategoryName == nil {
		return ""
	}
	return *t.CategoryName
}

// GetCreditTypeOverride retrieves the value of the leaf CreditTypeOverride from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CreditTypeOverride is set, it can
// safely use t.GetCreditTypeOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CreditTypeOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category) GetCreditTypeOverride() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_CreditTypeOverride {
	if t == nil || t.CreditTypeOverride == 0 {
		return 0
	}
	return t.CreditTypeOverride
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetOutOfCreditActionOverride retrieves the value of the leaf OutOfCreditActionOverride from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutOfCreditActionOverride is set, it can
// safely use t.GetOutOfCreditActionOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutOfCreditActionOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category) GetOutOfCreditActionOverride() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_OutOfCreditActionOverride {
	if t == nil || t.OutOfCreditActionOverride == 0 {
		return 0
	}
	return t.OutOfCreditActionOverride
}

// GetRatingGroup retrieves the value of the leaf RatingGroup from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RatingGroup is set, it can
// safely use t.GetRatingGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RatingGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category) GetRatingGroup() int64 {
	if t == nil || t.RatingGroup == nil {
		return 0
	}
	return *t.RatingGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DefaultCredit.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.ExhaustedCreditServiceLevel.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CategoryName == nil {
		return nil, fmt.Errorf("nil value for key CategoryName")
	}

	return map[string]interface{}{
		"category-name": *t.CategoryName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/default-credit YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit struct {
	Time   *uint32                                                                                    `path:"time" module:"nokia-conf"`
	Volume *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit_Volume `path:"volume" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit) IsYANGGoStruct() {
}

// GetOrCreateVolume retrieves the value of the Volume field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit) GetOrCreateVolume() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit_Volume {
	if t.Volume != nil {
		return t.Volume
	}
	t.Volume = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit_Volume{}
	return t.Volume
}

// GetVolume returns the value of the Volume struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit. If the receiver or the field Volume is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit) GetVolume() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit_Volume {
	if t != nil && t.Volume != nil {
		return t.Volume
	}
	return nil
}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit) GetTime() uint32 {
	if t == nil || t.Time == nil {
		return 0
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Volume.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit_Volume represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/default-credit/volume YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit_Volume struct {
	Unit  E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit_Volume_Unit `path:"unit" module:"nokia-conf"`
	Value *uint32                                                                                          `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit_Volume implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit_Volume) IsYANGGoStruct() {
}

// GetUnit retrieves the value of the leaf Unit from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit_Volume
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Unit is set, it can
// safely use t.GetUnit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Unit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit_Volume) GetUnit() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit_Volume_Unit {
	if t == nil || t.Unit == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit_Volume_Unit_bytes
	}
	return t.Unit
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit_Volume
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit_Volume) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit_Volume
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit_Volume) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Unit == 0 {
		t.Unit = NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit_Volume_Unit_bytes
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit_Volume) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit_Volume"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit_Volume) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit_Volume) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit_Volume.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_DefaultCredit_Volume) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Egress represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Egress struct {
	Policer []int8 `path:"policer" module:"nokia-conf"`
	Queue   []int8 `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Egress) IsYANGGoStruct() {
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Egress) GetPolicer() []int8 {
	if t == nil || t.Policer == nil {
		return nil
	}
	return t.Policer
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Egress) GetQueue() []int8 {
	if t == nil || t.Queue == nil {
		return nil
	}
	return t.Queue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Egress.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel struct {
	Egress  *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress   `path:"egress" module:"nokia-conf"`
	Ingress *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress  `path:"ingress" module:"nokia-conf"`
	Pir     NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel) IsYANGGoStruct() {
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress{}
	return t.Egress
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress{}
	return t.Ingress
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel) GetEgress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel) GetIngress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel) GetPir() NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Egress.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress struct {
	IpFilter   *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter   `path:"ip-filter" module:"nokia-conf"`
	Ipv6Filter *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter `path:"ipv6-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress) IsYANGGoStruct() {
}

// GetOrCreateIpFilter retrieves the value of the IpFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress) GetOrCreateIpFilter() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter {
	if t.IpFilter != nil {
		return t.IpFilter
	}
	t.IpFilter = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter{}
	return t.IpFilter
}

// GetOrCreateIpv6Filter retrieves the value of the Ipv6Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress) GetOrCreateIpv6Filter() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter {
	if t.Ipv6Filter != nil {
		return t.Ipv6Filter
	}
	t.Ipv6Filter = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter{}
	return t.Ipv6Filter
}

// GetIpFilter returns the value of the IpFilter struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress. If the receiver or the field IpFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress) GetIpFilter() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter {
	if t != nil && t.IpFilter != nil {
		return t.IpFilter
	}
	return nil
}

// GetIpv6Filter returns the value of the Ipv6Filter struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress. If the receiver or the field Ipv6Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress) GetIpv6Filter() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter {
	if t != nil && t.Ipv6Filter != nil {
		return t.Ipv6Filter
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IpFilter.PopulateDefaults()
	t.Ipv6Filter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/egress/ip-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter struct {
	Entry map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter) IsYANGGoStruct() {
}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter) NewEntry(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Id_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry{
		Id: Id,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Id_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.Id = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter) GetOrCreateEntry(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry {

	key := Id

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter) GetEntry(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter) DeleteEntry(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Id_Union) {
	key := Id

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter) AppendEntry(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry) error {
	key := v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/egress/ip-filter/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry struct {
	Action      *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action  `path:"action" module:"nokia-conf"`
	Description *string                                                                                                                         `path:"description" module:"nokia-conf"`
	Id          NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Id_Union `path:"id" module:"nokia-conf"`
	Match       *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match   `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry) IsYANGGoStruct() {
}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry) GetOrCreateAction() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry) GetOrCreateMatch() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry) GetAction() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry) GetMatch() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry) GetId() NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Id_Union {
	if t == nil || t.Id == nil {
		return nil
	}
	return t.Id
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"id": t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/egress/ip-filter/entry/action YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action struct {
	Drop         YANGEmpty                                                                                                                                   `path:"drop" module:"nokia-conf"`
	Forward      YANGEmpty                                                                                                                                   `path:"forward" module:"nokia-conf"`
	HttpRedirect *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action_HttpRedirect `path:"http-redirect" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action) IsYANGGoStruct() {
}

// GetOrCreateHttpRedirect retrieves the value of the HttpRedirect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action) GetOrCreateHttpRedirect() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action_HttpRedirect {
	if t.HttpRedirect != nil {
		return t.HttpRedirect
	}
	t.HttpRedirect = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action_HttpRedirect{}
	return t.HttpRedirect
}

// GetHttpRedirect returns the value of the HttpRedirect struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action. If the receiver or the field HttpRedirect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action) GetHttpRedirect() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action_HttpRedirect {
	if t != nil && t.HttpRedirect != nil {
		return t.HttpRedirect
	}
	return nil
}

// GetDrop retrieves the value of the leaf Drop from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action) GetDrop() YANGEmpty {
	if t == nil || t.Drop == false {
		return false
	}
	return t.Drop
}

// GetForward retrieves the value of the leaf Forward from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Forward is set, it can
// safely use t.GetForward() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Forward == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action) GetForward() YANGEmpty {
	if t == nil || t.Forward == false {
		return false
	}
	return t.Forward
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.HttpRedirect.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action_HttpRedirect represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/egress/ip-filter/entry/action/http-redirect YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action_HttpRedirect struct {
	AllowOverride *bool   `path:"allow-override" module:"nokia-conf"`
	Url           *string `path:"url" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action_HttpRedirect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action_HttpRedirect) IsYANGGoStruct() {
}

// GetAllowOverride retrieves the value of the leaf AllowOverride from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action_HttpRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowOverride is set, it can
// safely use t.GetAllowOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action_HttpRedirect) GetAllowOverride() bool {
	if t == nil || t.AllowOverride == nil {
		return false
	}
	return *t.AllowOverride
}

// GetUrl retrieves the value of the leaf Url from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action_HttpRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Url is set, it can
// safely use t.GetUrl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Url == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action_HttpRedirect) GetUrl() string {
	if t == nil || t.Url == nil {
		return ""
	}
	return *t.Url
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action_HttpRedirect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action_HttpRedirect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowOverride == nil {
		var v bool = false
		t.AllowOverride = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action_HttpRedirect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action_HttpRedirect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action_HttpRedirect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action_HttpRedirect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action_HttpRedirect.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Action_HttpRedirect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/egress/ip-filter/entry/match YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match struct {
	Dscp           E_NokiaTypesQos_DscpName                                                                                                                    `path:"dscp" module:"nokia-conf"`
	DstPort        *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort       `path:"dst-port" module:"nokia-conf"`
	Fragment       E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_Fragment     `path:"fragment" module:"nokia-conf"`
	Icmp           *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_Icmp          `path:"icmp" module:"nokia-conf"`
	IpOption       *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_IpOption      `path:"ip-option" module:"nokia-conf"`
	MultipleOption *bool                                                                                                                                       `path:"multiple-option" module:"nokia-conf"`
	OptionPresent  *bool                                                                                                                                       `path:"option-present" module:"nokia-conf"`
	Protocol       NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_Protocol_Union `path:"protocol" module:"nokia-conf"`
	SrcIp          *string                                                                                                                                     `path:"src-ip" module:"nokia-conf"`
	SrcPort        *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort       `path:"src-port" module:"nokia-conf"`
	TcpFlags       *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_TcpFlags      `path:"tcp-flags" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match) IsYANGGoStruct() {
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateIcmp retrieves the value of the Icmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match) GetOrCreateIcmp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_Icmp {
	if t.Icmp != nil {
		return t.Icmp
	}
	t.Icmp = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_Icmp{}
	return t.Icmp
}

// GetOrCreateIpOption retrieves the value of the IpOption field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match) GetOrCreateIpOption() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_IpOption {
	if t.IpOption != nil {
		return t.IpOption
	}
	t.IpOption = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_IpOption{}
	return t.IpOption
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetOrCreateTcpFlags retrieves the value of the TcpFlags field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match) GetOrCreateTcpFlags() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_TcpFlags {
	if t.TcpFlags != nil {
		return t.TcpFlags
	}
	t.TcpFlags = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_TcpFlags{}
	return t.TcpFlags
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match) GetDstPort() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetIcmp returns the value of the Icmp struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match. If the receiver or the field Icmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match) GetIcmp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_Icmp {
	if t != nil && t.Icmp != nil {
		return t.Icmp
	}
	return nil
}

// GetIpOption returns the value of the IpOption struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match. If the receiver or the field IpOption is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match) GetIpOption() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_IpOption {
	if t != nil && t.IpOption != nil {
		return t.IpOption
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match) GetSrcPort() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetTcpFlags returns the value of the TcpFlags struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match. If the receiver or the field TcpFlags is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match) GetTcpFlags() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_TcpFlags {
	if t != nil && t.TcpFlags != nil {
		return t.TcpFlags
	}
	return nil
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetFragment retrieves the value of the leaf Fragment from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fragment is set, it can
// safely use t.GetFragment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fragment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match) GetFragment() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_Fragment {
	if t == nil || t.Fragment == 0 {
		return 0
	}
	return t.Fragment
}

// GetMultipleOption retrieves the value of the leaf MultipleOption from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultipleOption is set, it can
// safely use t.GetMultipleOption() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultipleOption == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match) GetMultipleOption() bool {
	if t == nil || t.MultipleOption == nil {
		return false
	}
	return *t.MultipleOption
}

// GetOptionPresent retrieves the value of the leaf OptionPresent from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OptionPresent is set, it can
// safely use t.GetOptionPresent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OptionPresent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match) GetOptionPresent() bool {
	if t == nil || t.OptionPresent == nil {
		return false
	}
	return *t.OptionPresent
}

// GetProtocol retrieves the value of the leaf Protocol from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match) GetProtocol() NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// GetSrcIp retrieves the value of the leaf SrcIp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrcIp is set, it can
// safely use t.GetSrcIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrcIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match) GetSrcIp() string {
	if t == nil || t.SrcIp == nil {
		return ""
	}
	return *t.SrcIp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstPort.PopulateDefaults()
	t.Icmp.PopulateDefaults()
	t.IpOption.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
	t.TcpFlags.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/egress/ip-filter/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort struct {
	Eq    *uint16                                                                                                                                     `path:"eq" module:"nokia-conf"`
	Gt    *uint16                                                                                                                                     `path:"gt" module:"nokia-conf"`
	Lt    *uint16                                                                                                                                     `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort) GetRange() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort) GetEq() uint16 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort) GetGt() uint16 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort) GetLt() uint16 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort_Range represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/egress/ip-filter/entry/match/dst-port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort_Range struct {
	End   *uint16 `path:"end" module:"nokia-conf"`
	Start *uint16 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort_Range.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_DstPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_Icmp represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/egress/ip-filter/entry/match/icmp YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_Icmp struct {
	Code *int32 `path:"code" module:"nokia-conf"`
	Type *int32 `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_Icmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_Icmp) IsYANGGoStruct() {
}

// GetCode retrieves the value of the leaf Code from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Code is set, it can
// safely use t.GetCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Code == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_Icmp) GetCode() int32 {
	if t == nil || t.Code == nil {
		return 0
	}
	return *t.Code
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_Icmp) GetType() int32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_Icmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_Icmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_Icmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_Icmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_Icmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_Icmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_Icmp.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_Icmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_IpOption represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/egress/ip-filter/entry/match/ip-option YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_IpOption struct {
	Mask *int32 `path:"mask" module:"nokia-conf"`
	Type *int32 `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_IpOption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_IpOption) IsYANGGoStruct() {
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_IpOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_IpOption) GetMask() int32 {
	if t == nil || t.Mask == nil {
		return 0
	}
	return *t.Mask
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_IpOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_IpOption) GetType() int32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_IpOption
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_IpOption) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v int32 = 0
		t.Mask = &v
	}
	if t.Type == nil {
		var v int32 = 0
		t.Type = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_IpOption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_IpOption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_IpOption) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_IpOption) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_IpOption.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_IpOption) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/egress/ip-filter/entry/match/src-port YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort struct {
	Eq    *uint16                                                                                                                                     `path:"eq" module:"nokia-conf"`
	Gt    *uint16                                                                                                                                     `path:"gt" module:"nokia-conf"`
	Lt    *uint16                                                                                                                                     `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort) GetRange() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort) GetEq() uint16 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort) GetGt() uint16 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort) GetLt() uint16 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort_Range represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/egress/ip-filter/entry/match/src-port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort_Range struct {
	End   *uint16 `path:"end" module:"nokia-conf"`
	Start *uint16 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort_Range.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_SrcPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_TcpFlags represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/egress/ip-filter/entry/match/tcp-flags YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_TcpFlags struct {
	Ack *bool `path:"ack" module:"nokia-conf"`
	Syn *bool `path:"syn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_TcpFlags implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_TcpFlags) IsYANGGoStruct() {
}

// GetAck retrieves the value of the leaf Ack from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ack is set, it can
// safely use t.GetAck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ack == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_TcpFlags) GetAck() bool {
	if t == nil || t.Ack == nil {
		return false
	}
	return *t.Ack
}

// GetSyn retrieves the value of the leaf Syn from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Syn is set, it can
// safely use t.GetSyn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Syn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_TcpFlags) GetSyn() bool {
	if t == nil || t.Syn == nil {
		return false
	}
	return *t.Syn
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_TcpFlags
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_TcpFlags) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_TcpFlags) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_TcpFlags"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_TcpFlags) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_TcpFlags) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_TcpFlags.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_IpFilter_Entry_Match_TcpFlags) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/egress/ipv6-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter struct {
	Entry map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter) IsYANGGoStruct() {
}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter) NewEntry(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Id_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry{
		Id: Id,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Id_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.Id = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter) GetOrCreateEntry(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry {

	key := Id

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter) GetEntry(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter) DeleteEntry(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Id_Union) {
	key := Id

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter) AppendEntry(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry) error {
	key := v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/egress/ipv6-filter/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry struct {
	Action      *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Action  `path:"action" module:"nokia-conf"`
	Description *string                                                                                                                           `path:"description" module:"nokia-conf"`
	Id          NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Id_Union `path:"id" module:"nokia-conf"`
	Match       *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match   `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry) IsYANGGoStruct() {
}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry) GetOrCreateAction() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry) GetOrCreateMatch() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry) GetAction() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry) GetMatch() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry) GetId() NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Id_Union {
	if t == nil || t.Id == nil {
		return nil
	}
	return t.Id
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"id": t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Action represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/egress/ipv6-filter/entry/action YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Action struct {
	Drop    YANGEmpty `path:"drop" module:"nokia-conf"`
	Forward YANGEmpty `path:"forward" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Action) IsYANGGoStruct() {
}

// GetDrop retrieves the value of the leaf Drop from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Action) GetDrop() YANGEmpty {
	if t == nil || t.Drop == false {
		return false
	}
	return t.Drop
}

// GetForward retrieves the value of the leaf Forward from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Forward is set, it can
// safely use t.GetForward() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Forward == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Action) GetForward() YANGEmpty {
	if t == nil || t.Forward == false {
		return false
	}
	return t.Forward
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Action.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/egress/ipv6-filter/entry/match YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match struct {
	Dscp       E_NokiaTypesQos_DscpName                                                                                                                        `path:"dscp" module:"nokia-conf"`
	DstPort    *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort         `path:"dst-port" module:"nokia-conf"`
	Icmp       *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_Icmp            `path:"icmp" module:"nokia-conf"`
	NextHeader NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_NextHeader_Union `path:"next-header" module:"nokia-conf"`
	SrcIp      *string                                                                                                                                         `path:"src-ip" module:"nokia-conf"`
	SrcPort    *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort         `path:"src-port" module:"nokia-conf"`
	TcpFlags   *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_TcpFlags        `path:"tcp-flags" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match) IsYANGGoStruct() {
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateIcmp retrieves the value of the Icmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match) GetOrCreateIcmp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_Icmp {
	if t.Icmp != nil {
		return t.Icmp
	}
	t.Icmp = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_Icmp{}
	return t.Icmp
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetOrCreateTcpFlags retrieves the value of the TcpFlags field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match) GetOrCreateTcpFlags() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_TcpFlags {
	if t.TcpFlags != nil {
		return t.TcpFlags
	}
	t.TcpFlags = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_TcpFlags{}
	return t.TcpFlags
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match) GetDstPort() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetIcmp returns the value of the Icmp struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match. If the receiver or the field Icmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match) GetIcmp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_Icmp {
	if t != nil && t.Icmp != nil {
		return t.Icmp
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match) GetSrcPort() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetTcpFlags returns the value of the TcpFlags struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match. If the receiver or the field TcpFlags is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match) GetTcpFlags() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_TcpFlags {
	if t != nil && t.TcpFlags != nil {
		return t.TcpFlags
	}
	return nil
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetNextHeader retrieves the value of the leaf NextHeader from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHeader is set, it can
// safely use t.GetNextHeader() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHeader == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match) GetNextHeader() NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_NextHeader_Union {
	if t == nil || t.NextHeader == nil {
		return nil
	}
	return t.NextHeader
}

// GetSrcIp retrieves the value of the leaf SrcIp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrcIp is set, it can
// safely use t.GetSrcIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrcIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match) GetSrcIp() string {
	if t == nil || t.SrcIp == nil {
		return "0::0 0::0"
	}
	return *t.SrcIp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SrcIp == nil {
		var v string = "0::0 0::0"
		t.SrcIp = &v
	}
	t.DstPort.PopulateDefaults()
	t.Icmp.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
	t.TcpFlags.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/egress/ipv6-filter/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort struct {
	Eq    *uint16                                                                                                                                       `path:"eq" module:"nokia-conf"`
	Gt    *uint16                                                                                                                                       `path:"gt" module:"nokia-conf"`
	Lt    *uint16                                                                                                                                       `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort) GetRange() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort) GetEq() uint16 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort) GetGt() uint16 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort) GetLt() uint16 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort_Range represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/egress/ipv6-filter/entry/match/dst-port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort_Range struct {
	End   *uint16 `path:"end" module:"nokia-conf"`
	Start *uint16 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort_Range.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_DstPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_Icmp represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/egress/ipv6-filter/entry/match/icmp YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_Icmp struct {
	Code *int32 `path:"code" module:"nokia-conf"`
	Type *int32 `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_Icmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_Icmp) IsYANGGoStruct() {
}

// GetCode retrieves the value of the leaf Code from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Code is set, it can
// safely use t.GetCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Code == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_Icmp) GetCode() int32 {
	if t == nil || t.Code == nil {
		return 0
	}
	return *t.Code
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_Icmp) GetType() int32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_Icmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_Icmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_Icmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_Icmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_Icmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_Icmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_Icmp.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_Icmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/egress/ipv6-filter/entry/match/src-port YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort struct {
	Eq    *uint16                                                                                                                                       `path:"eq" module:"nokia-conf"`
	Gt    *uint16                                                                                                                                       `path:"gt" module:"nokia-conf"`
	Lt    *uint16                                                                                                                                       `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort) GetRange() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort) GetEq() uint16 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort) GetGt() uint16 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort) GetLt() uint16 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort_Range represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/egress/ipv6-filter/entry/match/src-port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort_Range struct {
	End   *uint16 `path:"end" module:"nokia-conf"`
	Start *uint16 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort_Range.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_SrcPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_TcpFlags represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/egress/ipv6-filter/entry/match/tcp-flags YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_TcpFlags struct {
	Ack *bool `path:"ack" module:"nokia-conf"`
	Syn *bool `path:"syn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_TcpFlags implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_TcpFlags) IsYANGGoStruct() {
}

// GetAck retrieves the value of the leaf Ack from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ack is set, it can
// safely use t.GetAck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ack == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_TcpFlags) GetAck() bool {
	if t == nil || t.Ack == nil {
		return false
	}
	return *t.Ack
}

// GetSyn retrieves the value of the leaf Syn from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Syn is set, it can
// safely use t.GetSyn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Syn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_TcpFlags) GetSyn() bool {
	if t == nil || t.Syn == nil {
		return false
	}
	return *t.Syn
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_TcpFlags
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_TcpFlags) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_TcpFlags) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_TcpFlags"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_TcpFlags) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_TcpFlags) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_TcpFlags.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Egress_Ipv6Filter_Entry_Match_TcpFlags) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress struct {
	IpFilter   *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter   `path:"ip-filter" module:"nokia-conf"`
	Ipv6Filter *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter `path:"ipv6-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress) IsYANGGoStruct() {
}

// GetOrCreateIpFilter retrieves the value of the IpFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress) GetOrCreateIpFilter() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter {
	if t.IpFilter != nil {
		return t.IpFilter
	}
	t.IpFilter = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter{}
	return t.IpFilter
}

// GetOrCreateIpv6Filter retrieves the value of the Ipv6Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress) GetOrCreateIpv6Filter() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter {
	if t.Ipv6Filter != nil {
		return t.Ipv6Filter
	}
	t.Ipv6Filter = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter{}
	return t.Ipv6Filter
}

// GetIpFilter returns the value of the IpFilter struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress. If the receiver or the field IpFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress) GetIpFilter() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter {
	if t != nil && t.IpFilter != nil {
		return t.IpFilter
	}
	return nil
}

// GetIpv6Filter returns the value of the Ipv6Filter struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress. If the receiver or the field Ipv6Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress) GetIpv6Filter() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter {
	if t != nil && t.Ipv6Filter != nil {
		return t.Ipv6Filter
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IpFilter.PopulateDefaults()
	t.Ipv6Filter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/ingress/ip-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter struct {
	Entry map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter) IsYANGGoStruct() {
}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter) NewEntry(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Id_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry{
		Id: Id,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Id_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.Id = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter) GetOrCreateEntry(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry {

	key := Id

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter) GetEntry(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter) DeleteEntry(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Id_Union) {
	key := Id

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter) AppendEntry(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry) error {
	key := v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/ingress/ip-filter/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry struct {
	Action      *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action  `path:"action" module:"nokia-conf"`
	Description *string                                                                                                                          `path:"description" module:"nokia-conf"`
	Id          NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Id_Union `path:"id" module:"nokia-conf"`
	Match       *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match   `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry) IsYANGGoStruct() {
}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry) GetOrCreateAction() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry) GetOrCreateMatch() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry) GetAction() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry) GetMatch() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry) GetId() NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Id_Union {
	if t == nil || t.Id == nil {
		return nil
	}
	return t.Id
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"id": t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/ingress/ip-filter/entry/action YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action struct {
	Drop         YANGEmpty                                                                                                                                    `path:"drop" module:"nokia-conf"`
	Forward      YANGEmpty                                                                                                                                    `path:"forward" module:"nokia-conf"`
	HttpRedirect *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action_HttpRedirect `path:"http-redirect" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action) IsYANGGoStruct() {
}

// GetOrCreateHttpRedirect retrieves the value of the HttpRedirect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action) GetOrCreateHttpRedirect() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action_HttpRedirect {
	if t.HttpRedirect != nil {
		return t.HttpRedirect
	}
	t.HttpRedirect = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action_HttpRedirect{}
	return t.HttpRedirect
}

// GetHttpRedirect returns the value of the HttpRedirect struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action. If the receiver or the field HttpRedirect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action) GetHttpRedirect() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action_HttpRedirect {
	if t != nil && t.HttpRedirect != nil {
		return t.HttpRedirect
	}
	return nil
}

// GetDrop retrieves the value of the leaf Drop from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action) GetDrop() YANGEmpty {
	if t == nil || t.Drop == false {
		return false
	}
	return t.Drop
}

// GetForward retrieves the value of the leaf Forward from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Forward is set, it can
// safely use t.GetForward() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Forward == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action) GetForward() YANGEmpty {
	if t == nil || t.Forward == false {
		return false
	}
	return t.Forward
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.HttpRedirect.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action_HttpRedirect represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/ingress/ip-filter/entry/action/http-redirect YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action_HttpRedirect struct {
	AllowOverride *bool   `path:"allow-override" module:"nokia-conf"`
	Url           *string `path:"url" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action_HttpRedirect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action_HttpRedirect) IsYANGGoStruct() {
}

// GetAllowOverride retrieves the value of the leaf AllowOverride from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action_HttpRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowOverride is set, it can
// safely use t.GetAllowOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action_HttpRedirect) GetAllowOverride() bool {
	if t == nil || t.AllowOverride == nil {
		return false
	}
	return *t.AllowOverride
}

// GetUrl retrieves the value of the leaf Url from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action_HttpRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Url is set, it can
// safely use t.GetUrl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Url == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action_HttpRedirect) GetUrl() string {
	if t == nil || t.Url == nil {
		return ""
	}
	return *t.Url
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action_HttpRedirect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action_HttpRedirect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowOverride == nil {
		var v bool = false
		t.AllowOverride = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action_HttpRedirect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action_HttpRedirect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action_HttpRedirect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action_HttpRedirect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action_HttpRedirect.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Action_HttpRedirect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/ingress/ip-filter/entry/match YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match struct {
	Dscp           E_NokiaTypesQos_DscpName                                                                                                                     `path:"dscp" module:"nokia-conf"`
	DstIp          *string                                                                                                                                      `path:"dst-ip" module:"nokia-conf"`
	DstPort        *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort       `path:"dst-port" module:"nokia-conf"`
	Fragment       E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_Fragment     `path:"fragment" module:"nokia-conf"`
	Icmp           *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_Icmp          `path:"icmp" module:"nokia-conf"`
	IpOption       *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_IpOption      `path:"ip-option" module:"nokia-conf"`
	MultipleOption *bool                                                                                                                                        `path:"multiple-option" module:"nokia-conf"`
	OptionPresent  *bool                                                                                                                                        `path:"option-present" module:"nokia-conf"`
	Protocol       NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_Protocol_Union `path:"protocol" module:"nokia-conf"`
	SrcPort        *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort       `path:"src-port" module:"nokia-conf"`
	TcpFlags       *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_TcpFlags      `path:"tcp-flags" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match) IsYANGGoStruct() {
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateIcmp retrieves the value of the Icmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match) GetOrCreateIcmp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_Icmp {
	if t.Icmp != nil {
		return t.Icmp
	}
	t.Icmp = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_Icmp{}
	return t.Icmp
}

// GetOrCreateIpOption retrieves the value of the IpOption field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match) GetOrCreateIpOption() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_IpOption {
	if t.IpOption != nil {
		return t.IpOption
	}
	t.IpOption = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_IpOption{}
	return t.IpOption
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetOrCreateTcpFlags retrieves the value of the TcpFlags field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match) GetOrCreateTcpFlags() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_TcpFlags {
	if t.TcpFlags != nil {
		return t.TcpFlags
	}
	t.TcpFlags = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_TcpFlags{}
	return t.TcpFlags
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match) GetDstPort() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetIcmp returns the value of the Icmp struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match. If the receiver or the field Icmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match) GetIcmp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_Icmp {
	if t != nil && t.Icmp != nil {
		return t.Icmp
	}
	return nil
}

// GetIpOption returns the value of the IpOption struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match. If the receiver or the field IpOption is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match) GetIpOption() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_IpOption {
	if t != nil && t.IpOption != nil {
		return t.IpOption
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match) GetSrcPort() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetTcpFlags returns the value of the TcpFlags struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match. If the receiver or the field TcpFlags is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match) GetTcpFlags() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_TcpFlags {
	if t != nil && t.TcpFlags != nil {
		return t.TcpFlags
	}
	return nil
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetDstIp retrieves the value of the leaf DstIp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DstIp is set, it can
// safely use t.GetDstIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DstIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match) GetDstIp() string {
	if t == nil || t.DstIp == nil {
		return ""
	}
	return *t.DstIp
}

// GetFragment retrieves the value of the leaf Fragment from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fragment is set, it can
// safely use t.GetFragment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fragment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match) GetFragment() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_Fragment {
	if t == nil || t.Fragment == 0 {
		return 0
	}
	return t.Fragment
}

// GetMultipleOption retrieves the value of the leaf MultipleOption from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultipleOption is set, it can
// safely use t.GetMultipleOption() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultipleOption == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match) GetMultipleOption() bool {
	if t == nil || t.MultipleOption == nil {
		return false
	}
	return *t.MultipleOption
}

// GetOptionPresent retrieves the value of the leaf OptionPresent from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OptionPresent is set, it can
// safely use t.GetOptionPresent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OptionPresent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match) GetOptionPresent() bool {
	if t == nil || t.OptionPresent == nil {
		return false
	}
	return *t.OptionPresent
}

// GetProtocol retrieves the value of the leaf Protocol from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match) GetProtocol() NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstPort.PopulateDefaults()
	t.Icmp.PopulateDefaults()
	t.IpOption.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
	t.TcpFlags.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/ingress/ip-filter/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort struct {
	Eq    *uint16                                                                                                                                      `path:"eq" module:"nokia-conf"`
	Gt    *uint16                                                                                                                                      `path:"gt" module:"nokia-conf"`
	Lt    *uint16                                                                                                                                      `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort) GetRange() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort) GetEq() uint16 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort) GetGt() uint16 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort) GetLt() uint16 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort_Range represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/ingress/ip-filter/entry/match/dst-port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort_Range struct {
	End   *uint16 `path:"end" module:"nokia-conf"`
	Start *uint16 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort_Range.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_DstPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_Icmp represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/ingress/ip-filter/entry/match/icmp YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_Icmp struct {
	Code *int32 `path:"code" module:"nokia-conf"`
	Type *int32 `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_Icmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_Icmp) IsYANGGoStruct() {
}

// GetCode retrieves the value of the leaf Code from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Code is set, it can
// safely use t.GetCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Code == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_Icmp) GetCode() int32 {
	if t == nil || t.Code == nil {
		return 0
	}
	return *t.Code
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_Icmp) GetType() int32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_Icmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_Icmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_Icmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_Icmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_Icmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_Icmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_Icmp.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_Icmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_IpOption represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/ingress/ip-filter/entry/match/ip-option YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_IpOption struct {
	Mask *int32 `path:"mask" module:"nokia-conf"`
	Type *int32 `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_IpOption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_IpOption) IsYANGGoStruct() {
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_IpOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_IpOption) GetMask() int32 {
	if t == nil || t.Mask == nil {
		return 0
	}
	return *t.Mask
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_IpOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_IpOption) GetType() int32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_IpOption
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_IpOption) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v int32 = 0
		t.Mask = &v
	}
	if t.Type == nil {
		var v int32 = 0
		t.Type = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_IpOption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_IpOption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_IpOption) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_IpOption) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_IpOption.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_IpOption) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/ingress/ip-filter/entry/match/src-port YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort struct {
	Eq    *uint16                                                                                                                                      `path:"eq" module:"nokia-conf"`
	Gt    *uint16                                                                                                                                      `path:"gt" module:"nokia-conf"`
	Lt    *uint16                                                                                                                                      `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort) GetRange() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort) GetEq() uint16 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort) GetGt() uint16 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort) GetLt() uint16 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort_Range represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/ingress/ip-filter/entry/match/src-port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort_Range struct {
	End   *uint16 `path:"end" module:"nokia-conf"`
	Start *uint16 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort_Range.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_SrcPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_TcpFlags represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/ingress/ip-filter/entry/match/tcp-flags YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_TcpFlags struct {
	Ack *bool `path:"ack" module:"nokia-conf"`
	Syn *bool `path:"syn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_TcpFlags implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_TcpFlags) IsYANGGoStruct() {
}

// GetAck retrieves the value of the leaf Ack from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ack is set, it can
// safely use t.GetAck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ack == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_TcpFlags) GetAck() bool {
	if t == nil || t.Ack == nil {
		return false
	}
	return *t.Ack
}

// GetSyn retrieves the value of the leaf Syn from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Syn is set, it can
// safely use t.GetSyn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Syn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_TcpFlags) GetSyn() bool {
	if t == nil || t.Syn == nil {
		return false
	}
	return *t.Syn
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_TcpFlags
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_TcpFlags) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_TcpFlags) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_TcpFlags"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_TcpFlags) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_TcpFlags) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_TcpFlags.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_IpFilter_Entry_Match_TcpFlags) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/ingress/ipv6-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter struct {
	Entry map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter) IsYANGGoStruct() {
}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter) NewEntry(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Id_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry{
		Id: Id,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Id_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.Id = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter) GetOrCreateEntry(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry {

	key := Id

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter) GetEntry(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter) DeleteEntry(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Id_Union) {
	key := Id

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter) AppendEntry(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry) error {
	key := v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/ingress/ipv6-filter/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry struct {
	Action      *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Action  `path:"action" module:"nokia-conf"`
	Description *string                                                                                                                            `path:"description" module:"nokia-conf"`
	Id          NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Id_Union `path:"id" module:"nokia-conf"`
	Match       *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match   `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry) IsYANGGoStruct() {
}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry) GetOrCreateAction() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry) GetOrCreateMatch() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry) GetAction() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry) GetMatch() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry) GetId() NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Id_Union {
	if t == nil || t.Id == nil {
		return nil
	}
	return t.Id
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"id": t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Action represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/ingress/ipv6-filter/entry/action YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Action struct {
	Drop    YANGEmpty `path:"drop" module:"nokia-conf"`
	Forward YANGEmpty `path:"forward" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Action) IsYANGGoStruct() {
}

// GetDrop retrieves the value of the leaf Drop from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Action) GetDrop() YANGEmpty {
	if t == nil || t.Drop == false {
		return false
	}
	return t.Drop
}

// GetForward retrieves the value of the leaf Forward from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Forward is set, it can
// safely use t.GetForward() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Forward == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Action) GetForward() YANGEmpty {
	if t == nil || t.Forward == false {
		return false
	}
	return t.Forward
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Action.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/ingress/ipv6-filter/entry/match YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match struct {
	Dscp       E_NokiaTypesQos_DscpName                                                                                                                         `path:"dscp" module:"nokia-conf"`
	DstIp      *string                                                                                                                                          `path:"dst-ip" module:"nokia-conf"`
	DstPort    *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort         `path:"dst-port" module:"nokia-conf"`
	Icmp       *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_Icmp            `path:"icmp" module:"nokia-conf"`
	NextHeader NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_NextHeader_Union `path:"next-header" module:"nokia-conf"`
	SrcPort    *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort         `path:"src-port" module:"nokia-conf"`
	TcpFlags   *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_TcpFlags        `path:"tcp-flags" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match) IsYANGGoStruct() {
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateIcmp retrieves the value of the Icmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match) GetOrCreateIcmp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_Icmp {
	if t.Icmp != nil {
		return t.Icmp
	}
	t.Icmp = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_Icmp{}
	return t.Icmp
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetOrCreateTcpFlags retrieves the value of the TcpFlags field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match) GetOrCreateTcpFlags() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_TcpFlags {
	if t.TcpFlags != nil {
		return t.TcpFlags
	}
	t.TcpFlags = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_TcpFlags{}
	return t.TcpFlags
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match) GetDstPort() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetIcmp returns the value of the Icmp struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match. If the receiver or the field Icmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match) GetIcmp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_Icmp {
	if t != nil && t.Icmp != nil {
		return t.Icmp
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match) GetSrcPort() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetTcpFlags returns the value of the TcpFlags struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match. If the receiver or the field TcpFlags is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match) GetTcpFlags() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_TcpFlags {
	if t != nil && t.TcpFlags != nil {
		return t.TcpFlags
	}
	return nil
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetDstIp retrieves the value of the leaf DstIp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DstIp is set, it can
// safely use t.GetDstIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DstIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match) GetDstIp() string {
	if t == nil || t.DstIp == nil {
		return "0::0 0::0"
	}
	return *t.DstIp
}

// GetNextHeader retrieves the value of the leaf NextHeader from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHeader is set, it can
// safely use t.GetNextHeader() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHeader == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match) GetNextHeader() NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_NextHeader_Union {
	if t == nil || t.NextHeader == nil {
		return nil
	}
	return t.NextHeader
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DstIp == nil {
		var v string = "0::0 0::0"
		t.DstIp = &v
	}
	t.DstPort.PopulateDefaults()
	t.Icmp.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
	t.TcpFlags.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/ingress/ipv6-filter/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort struct {
	Eq    *uint16                                                                                                                                        `path:"eq" module:"nokia-conf"`
	Gt    *uint16                                                                                                                                        `path:"gt" module:"nokia-conf"`
	Lt    *uint16                                                                                                                                        `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort) GetRange() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort) GetEq() uint16 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort) GetGt() uint16 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort) GetLt() uint16 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort_Range represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/ingress/ipv6-filter/entry/match/dst-port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort_Range struct {
	End   *uint16 `path:"end" module:"nokia-conf"`
	Start *uint16 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort_Range.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_DstPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_Icmp represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/ingress/ipv6-filter/entry/match/icmp YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_Icmp struct {
	Code *int32 `path:"code" module:"nokia-conf"`
	Type *int32 `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_Icmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_Icmp) IsYANGGoStruct() {
}

// GetCode retrieves the value of the leaf Code from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Code is set, it can
// safely use t.GetCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Code == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_Icmp) GetCode() int32 {
	if t == nil || t.Code == nil {
		return 0
	}
	return *t.Code
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_Icmp) GetType() int32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_Icmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_Icmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_Icmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_Icmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_Icmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_Icmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_Icmp.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_Icmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/ingress/ipv6-filter/entry/match/src-port YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort struct {
	Eq    *uint16                                                                                                                                        `path:"eq" module:"nokia-conf"`
	Gt    *uint16                                                                                                                                        `path:"gt" module:"nokia-conf"`
	Lt    *uint16                                                                                                                                        `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort) GetRange() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort) GetEq() uint16 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort) GetGt() uint16 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort) GetLt() uint16 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort_Range represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/ingress/ipv6-filter/entry/match/src-port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort_Range struct {
	End   *uint16 `path:"end" module:"nokia-conf"`
	Start *uint16 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort_Range.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_SrcPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_TcpFlags represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/exhausted-credit-service-level/ingress/ipv6-filter/entry/match/tcp-flags YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_TcpFlags struct {
	Ack *bool `path:"ack" module:"nokia-conf"`
	Syn *bool `path:"syn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_TcpFlags implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_TcpFlags) IsYANGGoStruct() {
}

// GetAck retrieves the value of the leaf Ack from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ack is set, it can
// safely use t.GetAck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ack == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_TcpFlags) GetAck() bool {
	if t == nil || t.Ack == nil {
		return false
	}
	return *t.Ack
}

// GetSyn retrieves the value of the leaf Syn from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Syn is set, it can
// safely use t.GetSyn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Syn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_TcpFlags) GetSyn() bool {
	if t == nil || t.Syn == nil {
		return false
	}
	return *t.Syn
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_TcpFlags
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_TcpFlags) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_TcpFlags) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_TcpFlags"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_TcpFlags) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_TcpFlags) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_TcpFlags.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_ExhaustedCreditServiceLevel_Ingress_Ipv6Filter_Entry_Match_TcpFlags) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Ingress represents the /nokia-conf/configure/groups/group/subscriber-mgmt/category-map/category/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Ingress struct {
	Policer []int8 `path:"policer" module:"nokia-conf"`
	Queue   []int8 `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Ingress) IsYANGGoStruct() {
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Ingress) GetPolicer() []int8 {
	if t == nil || t.Policer == nil {
		return nil
	}
	return t.Policer
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Ingress) GetQueue() []int8 {
	if t == nil || t.Queue == nil {
		return nil
	}
	return t.Queue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Ingress.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CategoryMap_Category_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy represents the /nokia-conf/configure/groups/group/subscriber-mgmt/credit-control-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy struct {
	DefaultCategoryMap  *string                                                                                   `path:"default-category-map" module:"nokia-conf"`
	Description         *string                                                                                   `path:"description" module:"nokia-conf"`
	ErrorHandlingAction E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy_ErrorHandlingAction `path:"error-handling-action" module:"nokia-conf"`
	Name                *string                                                                                   `path:"name" module:"nokia-conf"`
	OutOfCreditAction   E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy_OutOfCreditAction   `path:"out-of-credit-action" module:"nokia-conf"`
	Server              *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy_Server               `path:"server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy) IsYANGGoStruct() {}

// GetOrCreateServer retrieves the value of the Server field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy) GetOrCreateServer() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy_Server {
	if t.Server != nil {
		return t.Server
	}
	t.Server = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy_Server{}
	return t.Server
}

// GetServer returns the value of the Server struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy. If the receiver or the field Server is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy) GetServer() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy_Server {
	if t != nil && t.Server != nil {
		return t.Server
	}
	return nil
}

// GetDefaultCategoryMap retrieves the value of the leaf DefaultCategoryMap from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultCategoryMap is set, it can
// safely use t.GetDefaultCategoryMap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultCategoryMap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy) GetDefaultCategoryMap() string {
	if t == nil || t.DefaultCategoryMap == nil {
		return ""
	}
	return *t.DefaultCategoryMap
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetErrorHandlingAction retrieves the value of the leaf ErrorHandlingAction from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ErrorHandlingAction is set, it can
// safely use t.GetErrorHandlingAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ErrorHandlingAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy) GetErrorHandlingAction() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy_ErrorHandlingAction {
	if t == nil || t.ErrorHandlingAction == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy_ErrorHandlingAction_continue
	}
	return t.ErrorHandlingAction
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOutOfCreditAction retrieves the value of the leaf OutOfCreditAction from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutOfCreditAction is set, it can
// safely use t.GetOutOfCreditAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutOfCreditAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy) GetOutOfCreditAction() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy_OutOfCreditAction {
	if t == nil || t.OutOfCreditAction == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy_OutOfCreditAction_continue
	}
	return t.OutOfCreditAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ErrorHandlingAction == 0 {
		t.ErrorHandlingAction = NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy_ErrorHandlingAction_continue
	}
	if t.OutOfCreditAction == 0 {
		t.OutOfCreditAction = NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy_OutOfCreditAction_continue
	}
	t.Server.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy_Server represents the /nokia-conf/configure/groups/group/subscriber-mgmt/credit-control-policy/server YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy_Server struct {
	Diameter *string   `path:"diameter" module:"nokia-conf"`
	Radius   YANGEmpty `path:"radius" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy_Server) IsYANGGoStruct() {}

// GetDiameter retrieves the value of the leaf Diameter from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Diameter is set, it can
// safely use t.GetDiameter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Diameter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy_Server) GetDiameter() string {
	if t == nil || t.Diameter == nil {
		return ""
	}
	return *t.Diameter
}

// GetRadius retrieves the value of the leaf Radius from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Radius is set, it can
// safely use t.GetRadius() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Radius == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy_Server) GetRadius() YANGEmpty {
	if t == nil || t.Radius == false {
		return false
	}
	return t.Radius
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy_Server.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_CreditControlPolicy_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-gx-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy struct {
	Description *string                                                                     `path:"description" module:"nokia-conf"`
	Gx          *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx        `path:"gx" module:"nokia-conf"`
	Name        *string                                                                     `path:"name" module:"nokia-conf"`
	Node        *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Node      `path:"node" module:"nokia-conf"`
	OnFailure   *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_OnFailure `path:"on-failure" module:"nokia-conf"`
	PeerPolicy  *string                                                                     `path:"peer-policy" module:"nokia-conf"`
	TxTimer     *uint32                                                                     `path:"tx-timer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy) IsYANGGoStruct() {}

// GetOrCreateGx retrieves the value of the Gx field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy) GetOrCreateGx() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx {
	if t.Gx != nil {
		return t.Gx
	}
	t.Gx = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx{}
	return t.Gx
}

// GetOrCreateNode retrieves the value of the Node field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy) GetOrCreateNode() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Node {
	if t.Node != nil {
		return t.Node
	}
	t.Node = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Node{}
	return t.Node
}

// GetOrCreateOnFailure retrieves the value of the OnFailure field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy) GetOrCreateOnFailure() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_OnFailure {
	if t.OnFailure != nil {
		return t.OnFailure
	}
	t.OnFailure = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_OnFailure{}
	return t.OnFailure
}

// GetGx returns the value of the Gx struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy. If the receiver or the field Gx is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy) GetGx() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx {
	if t != nil && t.Gx != nil {
		return t.Gx
	}
	return nil
}

// GetNode returns the value of the Node struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy. If the receiver or the field Node is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy) GetNode() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Node {
	if t != nil && t.Node != nil {
		return t.Node
	}
	return nil
}

// GetOnFailure returns the value of the OnFailure struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy. If the receiver or the field OnFailure is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy) GetOnFailure() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_OnFailure {
	if t != nil && t.OnFailure != nil {
		return t.OnFailure
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPeerPolicy retrieves the value of the leaf PeerPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerPolicy is set, it can
// safely use t.GetPeerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy) GetPeerPolicy() string {
	if t == nil || t.PeerPolicy == nil {
		return ""
	}
	return *t.PeerPolicy
}

// GetTxTimer retrieves the value of the leaf TxTimer from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxTimer is set, it can
// safely use t.GetTxTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy) GetTxTimer() uint32 {
	if t == nil || t.TxTimer == nil {
		return 10
	}
	return *t.TxTimer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.TxTimer == nil {
		var v uint32 = 10
		t.TxTimer = &v
	}
	t.Gx.PopulateDefaults()
	t.Node.PopulateDefaults()
	t.OnFailure.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-gx-policy/gx YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx struct {
	AvpSubscriptionId        *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_AvpSubscriptionId  `path:"avp-subscription-id" module:"nokia-conf"`
	CcrtReplay               *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_CcrtReplay         `path:"ccrt-replay" module:"nokia-conf" yangPresence:"true"`
	CreditMcsInterval        *uint32                                                                                 `path:"credit-mcs-interval" module:"nokia-conf"`
	DestinationRealmLearning *bool                                                                                   `path:"destination-realm-learning" module:"nokia-conf"`
	Features                 *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_Features           `path:"features" module:"nokia-conf"`
	IncludeAvp               *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp         `path:"include-avp" module:"nokia-conf"`
	MacFormat                *string                                                                                 `path:"mac-format" module:"nokia-conf"`
	ReportIpAddressEvent     *bool                                                                                   `path:"report-ip-address-event" module:"nokia-conf"`
	ThreeGppQosMapping       *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping `path:"three-gpp-qos-mapping" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx) IsYANGGoStruct() {}

// GetOrCreateAvpSubscriptionId retrieves the value of the AvpSubscriptionId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx) GetOrCreateAvpSubscriptionId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_AvpSubscriptionId {
	if t.AvpSubscriptionId != nil {
		return t.AvpSubscriptionId
	}
	t.AvpSubscriptionId = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_AvpSubscriptionId{}
	return t.AvpSubscriptionId
}

// GetOrCreateCcrtReplay retrieves the value of the CcrtReplay field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx) GetOrCreateCcrtReplay() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_CcrtReplay {
	if t.CcrtReplay != nil {
		return t.CcrtReplay
	}
	t.CcrtReplay = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_CcrtReplay{}
	return t.CcrtReplay
}

// GetOrCreateFeatures retrieves the value of the Features field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx) GetOrCreateFeatures() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_Features {
	if t.Features != nil {
		return t.Features
	}
	t.Features = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_Features{}
	return t.Features
}

// GetOrCreateIncludeAvp retrieves the value of the IncludeAvp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx) GetOrCreateIncludeAvp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp {
	if t.IncludeAvp != nil {
		return t.IncludeAvp
	}
	t.IncludeAvp = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp{}
	return t.IncludeAvp
}

// GetOrCreateThreeGppQosMapping retrieves the value of the ThreeGppQosMapping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx) GetOrCreateThreeGppQosMapping() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping {
	if t.ThreeGppQosMapping != nil {
		return t.ThreeGppQosMapping
	}
	t.ThreeGppQosMapping = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping{}
	return t.ThreeGppQosMapping
}

// GetAvpSubscriptionId returns the value of the AvpSubscriptionId struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx. If the receiver or the field AvpSubscriptionId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx) GetAvpSubscriptionId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_AvpSubscriptionId {
	if t != nil && t.AvpSubscriptionId != nil {
		return t.AvpSubscriptionId
	}
	return nil
}

// GetCcrtReplay returns the value of the CcrtReplay struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx. If the receiver or the field CcrtReplay is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx) GetCcrtReplay() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_CcrtReplay {
	if t != nil && t.CcrtReplay != nil {
		return t.CcrtReplay
	}
	return nil
}

// GetFeatures returns the value of the Features struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx. If the receiver or the field Features is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx) GetFeatures() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_Features {
	if t != nil && t.Features != nil {
		return t.Features
	}
	return nil
}

// GetIncludeAvp returns the value of the IncludeAvp struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx. If the receiver or the field IncludeAvp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx) GetIncludeAvp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp {
	if t != nil && t.IncludeAvp != nil {
		return t.IncludeAvp
	}
	return nil
}

// GetThreeGppQosMapping returns the value of the ThreeGppQosMapping struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx. If the receiver or the field ThreeGppQosMapping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx) GetThreeGppQosMapping() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping {
	if t != nil && t.ThreeGppQosMapping != nil {
		return t.ThreeGppQosMapping
	}
	return nil
}

// GetCreditMcsInterval retrieves the value of the leaf CreditMcsInterval from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CreditMcsInterval is set, it can
// safely use t.GetCreditMcsInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CreditMcsInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx) GetCreditMcsInterval() uint32 {
	if t == nil || t.CreditMcsInterval == nil {
		return 10
	}
	return *t.CreditMcsInterval
}

// GetDestinationRealmLearning retrieves the value of the leaf DestinationRealmLearning from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationRealmLearning is set, it can
// safely use t.GetDestinationRealmLearning() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationRealmLearning == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx) GetDestinationRealmLearning() bool {
	if t == nil || t.DestinationRealmLearning == nil {
		return true
	}
	return *t.DestinationRealmLearning
}

// GetMacFormat retrieves the value of the leaf MacFormat from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacFormat is set, it can
// safely use t.GetMacFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacFormat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx) GetMacFormat() string {
	if t == nil || t.MacFormat == nil {
		return "aa:"
	}
	return *t.MacFormat
}

// GetReportIpAddressEvent retrieves the value of the leaf ReportIpAddressEvent from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReportIpAddressEvent is set, it can
// safely use t.GetReportIpAddressEvent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReportIpAddressEvent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx) GetReportIpAddressEvent() bool {
	if t == nil || t.ReportIpAddressEvent == nil {
		return true
	}
	return *t.ReportIpAddressEvent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CreditMcsInterval == nil {
		var v uint32 = 10
		t.CreditMcsInterval = &v
	}
	if t.DestinationRealmLearning == nil {
		var v bool = true
		t.DestinationRealmLearning = &v
	}
	if t.MacFormat == nil {
		var v string = "aa:"
		t.MacFormat = &v
	}
	if t.ReportIpAddressEvent == nil {
		var v bool = true
		t.ReportIpAddressEvent = &v
	}
	t.AvpSubscriptionId.PopulateDefaults()
	t.CcrtReplay.PopulateDefaults()
	t.Features.PopulateDefaults()
	t.IncludeAvp.PopulateDefaults()
	t.ThreeGppQosMapping.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_AvpSubscriptionId represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-gx-policy/gx/avp-subscription-id YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_AvpSubscriptionId struct {
	Origin E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_AvpSubscriptionId_Origin `path:"origin" module:"nokia-conf"`
	Type   E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_AvpSubscriptionId_Type   `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_AvpSubscriptionId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_AvpSubscriptionId) IsYANGGoStruct() {
}

// GetOrigin retrieves the value of the leaf Origin from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_AvpSubscriptionId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Origin is set, it can
// safely use t.GetOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Origin == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_AvpSubscriptionId) GetOrigin() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_AvpSubscriptionId_Origin {
	if t == nil || t.Origin == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_AvpSubscriptionId_Origin_subscriber_id
	}
	return t.Origin
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_AvpSubscriptionId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_AvpSubscriptionId) GetType() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_AvpSubscriptionId_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_AvpSubscriptionId_Type_private
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_AvpSubscriptionId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_AvpSubscriptionId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Origin == 0 {
		t.Origin = NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_AvpSubscriptionId_Origin_subscriber_id
	}
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_AvpSubscriptionId_Type_private
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_AvpSubscriptionId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_AvpSubscriptionId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_AvpSubscriptionId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_AvpSubscriptionId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_AvpSubscriptionId.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_AvpSubscriptionId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_CcrtReplay represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-gx-policy/gx/ccrt-replay YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_CcrtReplay struct {
	Interval    *uint32 `path:"interval" module:"nokia-conf"`
	MaxLifetime *uint32 `path:"max-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_CcrtReplay implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_CcrtReplay) IsYANGGoStruct() {
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_CcrtReplay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_CcrtReplay) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 3600
	}
	return *t.Interval
}

// GetMaxLifetime retrieves the value of the leaf MaxLifetime from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_CcrtReplay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLifetime is set, it can
// safely use t.GetMaxLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_CcrtReplay) GetMaxLifetime() uint32 {
	if t == nil || t.MaxLifetime == nil {
		return 24
	}
	return *t.MaxLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_CcrtReplay
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_CcrtReplay) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Interval == nil {
		var v uint32 = 3600
		t.Interval = &v
	}
	if t.MaxLifetime == nil {
		var v uint32 = 24
		t.MaxLifetime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_CcrtReplay) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_CcrtReplay"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_CcrtReplay) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_CcrtReplay) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_CcrtReplay.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_CcrtReplay) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_Features represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-gx-policy/gx/features YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_Features struct {
	ExtendedBandwidth *bool `path:"extended-bandwidth" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_Features implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_Features) IsYANGGoStruct() {
}

// GetExtendedBandwidth retrieves the value of the leaf ExtendedBandwidth from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_Features
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtendedBandwidth is set, it can
// safely use t.GetExtendedBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtendedBandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_Features) GetExtendedBandwidth() bool {
	if t == nil || t.ExtendedBandwidth == nil {
		return false
	}
	return *t.ExtendedBandwidth
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_Features
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_Features) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ExtendedBandwidth == nil {
		var v bool = false
		t.ExtendedBandwidth = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_Features) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_Features"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_Features) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_Features) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_Features.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_Features) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-gx-policy/gx/include-avp YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp struct {
	AnGwAddress       *bool                                                                                             `path:"an-gw-address" module:"nokia-conf"`
	ApnAmbr           *bool                                                                                             `path:"apn-ambr" module:"nokia-conf"`
	CalledStationId   *bool                                                                                             `path:"called-station-id" module:"nokia-conf"`
	CallingStationId  *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_CallingStationId  `path:"calling-station-id" module:"nokia-conf" yangPresence:"true"`
	IpCanType         *bool                                                                                             `path:"ip-can-type" module:"nokia-conf"`
	LogicalAccessId   *bool                                                                                             `path:"logical-access-id" module:"nokia-conf"`
	NasPort           *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPort           `path:"nas-port" module:"nokia-conf" yangPresence:"true"`
	NasPortId         *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId         `path:"nas-port-id" module:"nokia-conf" yangPresence:"true"`
	NasPortType       *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortType       `path:"nas-port-type" module:"nokia-conf" yangPresence:"true"`
	PdnConnectionId   *bool                                                                                             `path:"pdn-connection-id" module:"nokia-conf"`
	PhysicalAccessId  *bool                                                                                             `path:"physical-access-id" module:"nokia-conf"`
	Rai               *bool                                                                                             `path:"rai" module:"nokia-conf"`
	RatType           *bool                                                                                             `path:"rat-type" module:"nokia-conf"`
	SgsnMccMnc        *bool                                                                                             `path:"sgsn-mcc-mnc" module:"nokia-conf"`
	SupportedFeatures *bool                                                                                             `path:"supported-features" module:"nokia-conf"`
	UserEquipmentInfo *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_UserEquipmentInfo `path:"user-equipment-info" module:"nokia-conf" yangPresence:"true"`
	UserLocationInfo  *bool                                                                                             `path:"user-location-info" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp) IsYANGGoStruct() {
}

// GetOrCreateCallingStationId retrieves the value of the CallingStationId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp) GetOrCreateCallingStationId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_CallingStationId {
	if t.CallingStationId != nil {
		return t.CallingStationId
	}
	t.CallingStationId = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_CallingStationId{}
	return t.CallingStationId
}

// GetOrCreateNasPort retrieves the value of the NasPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp) GetOrCreateNasPort() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPort {
	if t.NasPort != nil {
		return t.NasPort
	}
	t.NasPort = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPort{}
	return t.NasPort
}

// GetOrCreateNasPortId retrieves the value of the NasPortId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp) GetOrCreateNasPortId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId {
	if t.NasPortId != nil {
		return t.NasPortId
	}
	t.NasPortId = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId{}
	return t.NasPortId
}

// GetOrCreateNasPortType retrieves the value of the NasPortType field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp) GetOrCreateNasPortType() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortType {
	if t.NasPortType != nil {
		return t.NasPortType
	}
	t.NasPortType = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortType{}
	return t.NasPortType
}

// GetOrCreateUserEquipmentInfo retrieves the value of the UserEquipmentInfo field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp) GetOrCreateUserEquipmentInfo() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_UserEquipmentInfo {
	if t.UserEquipmentInfo != nil {
		return t.UserEquipmentInfo
	}
	t.UserEquipmentInfo = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_UserEquipmentInfo{}
	return t.UserEquipmentInfo
}

// GetCallingStationId returns the value of the CallingStationId struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp. If the receiver or the field CallingStationId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp) GetCallingStationId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_CallingStationId {
	if t != nil && t.CallingStationId != nil {
		return t.CallingStationId
	}
	return nil
}

// GetNasPort returns the value of the NasPort struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp. If the receiver or the field NasPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp) GetNasPort() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPort {
	if t != nil && t.NasPort != nil {
		return t.NasPort
	}
	return nil
}

// GetNasPortId returns the value of the NasPortId struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp. If the receiver or the field NasPortId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp) GetNasPortId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId {
	if t != nil && t.NasPortId != nil {
		return t.NasPortId
	}
	return nil
}

// GetNasPortType returns the value of the NasPortType struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp. If the receiver or the field NasPortType is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp) GetNasPortType() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortType {
	if t != nil && t.NasPortType != nil {
		return t.NasPortType
	}
	return nil
}

// GetUserEquipmentInfo returns the value of the UserEquipmentInfo struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp. If the receiver or the field UserEquipmentInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp) GetUserEquipmentInfo() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_UserEquipmentInfo {
	if t != nil && t.UserEquipmentInfo != nil {
		return t.UserEquipmentInfo
	}
	return nil
}

// GetAnGwAddress retrieves the value of the leaf AnGwAddress from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AnGwAddress is set, it can
// safely use t.GetAnGwAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AnGwAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp) GetAnGwAddress() bool {
	if t == nil || t.AnGwAddress == nil {
		return false
	}
	return *t.AnGwAddress
}

// GetApnAmbr retrieves the value of the leaf ApnAmbr from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApnAmbr is set, it can
// safely use t.GetApnAmbr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApnAmbr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp) GetApnAmbr() bool {
	if t == nil || t.ApnAmbr == nil {
		return false
	}
	return *t.ApnAmbr
}

// GetCalledStationId retrieves the value of the leaf CalledStationId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CalledStationId is set, it can
// safely use t.GetCalledStationId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CalledStationId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp) GetCalledStationId() bool {
	if t == nil || t.CalledStationId == nil {
		return false
	}
	return *t.CalledStationId
}

// GetIpCanType retrieves the value of the leaf IpCanType from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpCanType is set, it can
// safely use t.GetIpCanType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpCanType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp) GetIpCanType() bool {
	if t == nil || t.IpCanType == nil {
		return false
	}
	return *t.IpCanType
}

// GetLogicalAccessId retrieves the value of the leaf LogicalAccessId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogicalAccessId is set, it can
// safely use t.GetLogicalAccessId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogicalAccessId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp) GetLogicalAccessId() bool {
	if t == nil || t.LogicalAccessId == nil {
		return false
	}
	return *t.LogicalAccessId
}

// GetPdnConnectionId retrieves the value of the leaf PdnConnectionId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PdnConnectionId is set, it can
// safely use t.GetPdnConnectionId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PdnConnectionId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp) GetPdnConnectionId() bool {
	if t == nil || t.PdnConnectionId == nil {
		return false
	}
	return *t.PdnConnectionId
}

// GetPhysicalAccessId retrieves the value of the leaf PhysicalAccessId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PhysicalAccessId is set, it can
// safely use t.GetPhysicalAccessId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PhysicalAccessId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp) GetPhysicalAccessId() bool {
	if t == nil || t.PhysicalAccessId == nil {
		return false
	}
	return *t.PhysicalAccessId
}

// GetRai retrieves the value of the leaf Rai from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rai is set, it can
// safely use t.GetRai() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rai == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp) GetRai() bool {
	if t == nil || t.Rai == nil {
		return false
	}
	return *t.Rai
}

// GetRatType retrieves the value of the leaf RatType from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RatType is set, it can
// safely use t.GetRatType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RatType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp) GetRatType() bool {
	if t == nil || t.RatType == nil {
		return false
	}
	return *t.RatType
}

// GetSgsnMccMnc retrieves the value of the leaf SgsnMccMnc from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SgsnMccMnc is set, it can
// safely use t.GetSgsnMccMnc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SgsnMccMnc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp) GetSgsnMccMnc() bool {
	if t == nil || t.SgsnMccMnc == nil {
		return false
	}
	return *t.SgsnMccMnc
}

// GetSupportedFeatures retrieves the value of the leaf SupportedFeatures from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SupportedFeatures is set, it can
// safely use t.GetSupportedFeatures() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SupportedFeatures == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp) GetSupportedFeatures() bool {
	if t == nil || t.SupportedFeatures == nil {
		return false
	}
	return *t.SupportedFeatures
}

// GetUserLocationInfo retrieves the value of the leaf UserLocationInfo from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserLocationInfo is set, it can
// safely use t.GetUserLocationInfo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserLocationInfo == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp) GetUserLocationInfo() bool {
	if t == nil || t.UserLocationInfo == nil {
		return false
	}
	return *t.UserLocationInfo
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AnGwAddress == nil {
		var v bool = false
		t.AnGwAddress = &v
	}
	if t.ApnAmbr == nil {
		var v bool = false
		t.ApnAmbr = &v
	}
	if t.CalledStationId == nil {
		var v bool = false
		t.CalledStationId = &v
	}
	if t.IpCanType == nil {
		var v bool = false
		t.IpCanType = &v
	}
	if t.LogicalAccessId == nil {
		var v bool = false
		t.LogicalAccessId = &v
	}
	if t.PdnConnectionId == nil {
		var v bool = false
		t.PdnConnectionId = &v
	}
	if t.PhysicalAccessId == nil {
		var v bool = false
		t.PhysicalAccessId = &v
	}
	if t.Rai == nil {
		var v bool = false
		t.Rai = &v
	}
	if t.RatType == nil {
		var v bool = false
		t.RatType = &v
	}
	if t.SgsnMccMnc == nil {
		var v bool = false
		t.SgsnMccMnc = &v
	}
	if t.SupportedFeatures == nil {
		var v bool = false
		t.SupportedFeatures = &v
	}
	if t.UserLocationInfo == nil {
		var v bool = false
		t.UserLocationInfo = &v
	}
	t.CallingStationId.PopulateDefaults()
	t.NasPort.PopulateDefaults()
	t.NasPortId.PopulateDefaults()
	t.NasPortType.PopulateDefaults()
	t.UserEquipmentInfo.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_CallingStationId represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-gx-policy/gx/include-avp/calling-station-id YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_CallingStationId struct {
	Type E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_CallingStationId_Type `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_CallingStationId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_CallingStationId) IsYANGGoStruct() {
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_CallingStationId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_CallingStationId) GetType() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_CallingStationId_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_CallingStationId_Type_sap_string
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_CallingStationId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_CallingStationId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_CallingStationId_Type_sap_string
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_CallingStationId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_CallingStationId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_CallingStationId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_CallingStationId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_CallingStationId.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_CallingStationId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPort represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-gx-policy/gx/include-avp/nas-port YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPort struct {
	BitSpec *string `path:"bit-spec" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPort) IsYANGGoStruct() {
}

// GetBitSpec retrieves the value of the leaf BitSpec from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitSpec is set, it can
// safely use t.GetBitSpec() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitSpec == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPort) GetBitSpec() string {
	if t == nil || t.BitSpec == nil {
		return ""
	}
	return *t.BitSpec
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPort.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-gx-policy/gx/include-avp/nas-port-id YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId struct {
	PrefixString *string                                                                                          `path:"prefix-string" module:"nokia-conf"`
	Suffix       *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId_Suffix `path:"suffix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId) IsYANGGoStruct() {
}

// GetOrCreateSuffix retrieves the value of the Suffix field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId) GetOrCreateSuffix() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId_Suffix {
	if t.Suffix != nil {
		return t.Suffix
	}
	t.Suffix = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId_Suffix{}
	return t.Suffix
}

// GetSuffix returns the value of the Suffix struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId. If the receiver or the field Suffix is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId) GetSuffix() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId_Suffix {
	if t != nil && t.Suffix != nil {
		return t.Suffix
	}
	return nil
}

// GetPrefixString retrieves the value of the leaf PrefixString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixString is set, it can
// safely use t.GetPrefixString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId) GetPrefixString() string {
	if t == nil || t.PrefixString == nil {
		return ""
	}
	return *t.PrefixString
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Suffix.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId_Suffix represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-gx-policy/gx/include-avp/nas-port-id/suffix YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId_Suffix struct {
	CircuitId   YANGEmpty `path:"circuit-id" module:"nokia-conf"`
	NotIncluded YANGEmpty `path:"not-included" module:"nokia-conf"`
	RemoteId    YANGEmpty `path:"remote-id" module:"nokia-conf"`
	UserString  *string   `path:"user-string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId_Suffix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId_Suffix) IsYANGGoStruct() {
}

// GetCircuitId retrieves the value of the leaf CircuitId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId_Suffix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CircuitId is set, it can
// safely use t.GetCircuitId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CircuitId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId_Suffix) GetCircuitId() YANGEmpty {
	if t == nil || t.CircuitId == false {
		return false
	}
	return t.CircuitId
}

// GetNotIncluded retrieves the value of the leaf NotIncluded from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId_Suffix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NotIncluded is set, it can
// safely use t.GetNotIncluded() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NotIncluded == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId_Suffix) GetNotIncluded() YANGEmpty {
	if t == nil || t.NotIncluded == false {
		return false
	}
	return t.NotIncluded
}

// GetRemoteId retrieves the value of the leaf RemoteId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId_Suffix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteId is set, it can
// safely use t.GetRemoteId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId_Suffix) GetRemoteId() YANGEmpty {
	if t == nil || t.RemoteId == false {
		return false
	}
	return t.RemoteId
}

// GetUserString retrieves the value of the leaf UserString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId_Suffix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserString is set, it can
// safely use t.GetUserString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId_Suffix) GetUserString() string {
	if t == nil || t.UserString == nil {
		return ""
	}
	return *t.UserString
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId_Suffix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId_Suffix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId_Suffix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId_Suffix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId_Suffix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId_Suffix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId_Suffix.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortId_Suffix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortType represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-gx-policy/gx/include-avp/nas-port-type YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortType struct {
	Type *uint32 `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortType) IsYANGGoStruct() {
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortType) GetType() uint32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortType) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortType.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_NasPortType) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_UserEquipmentInfo represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-gx-policy/gx/include-avp/user-equipment-info YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_UserEquipmentInfo struct {
	Type E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_UserEquipmentInfo_Type `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_UserEquipmentInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_UserEquipmentInfo) IsYANGGoStruct() {
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_UserEquipmentInfo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_UserEquipmentInfo) GetType() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_UserEquipmentInfo_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_UserEquipmentInfo_Type_mac
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_UserEquipmentInfo
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_UserEquipmentInfo) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_UserEquipmentInfo_Type_mac
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_UserEquipmentInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_UserEquipmentInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_UserEquipmentInfo) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_UserEquipmentInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_UserEquipmentInfo.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_IncludeAvp_UserEquipmentInfo) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-gx-policy/gx/three-gpp-qos-mapping YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping struct {
	ApnAmbrDl *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrDl `path:"apn-ambr-dl" module:"nokia-conf"`
	ApnAmbrUl *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrUl `path:"apn-ambr-ul" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping) IsYANGGoStruct() {
}

// GetOrCreateApnAmbrDl retrieves the value of the ApnAmbrDl field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping) GetOrCreateApnAmbrDl() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrDl {
	if t.ApnAmbrDl != nil {
		return t.ApnAmbrDl
	}
	t.ApnAmbrDl = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrDl{}
	return t.ApnAmbrDl
}

// GetOrCreateApnAmbrUl retrieves the value of the ApnAmbrUl field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping) GetOrCreateApnAmbrUl() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrUl {
	if t.ApnAmbrUl != nil {
		return t.ApnAmbrUl
	}
	t.ApnAmbrUl = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrUl{}
	return t.ApnAmbrUl
}

// GetApnAmbrDl returns the value of the ApnAmbrDl struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping. If the receiver or the field ApnAmbrDl is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping) GetApnAmbrDl() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrDl {
	if t != nil && t.ApnAmbrDl != nil {
		return t.ApnAmbrDl
	}
	return nil
}

// GetApnAmbrUl returns the value of the ApnAmbrUl struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping. If the receiver or the field ApnAmbrUl is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping) GetApnAmbrUl() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrUl {
	if t != nil && t.ApnAmbrUl != nil {
		return t.ApnAmbrUl
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ApnAmbrDl.PopulateDefaults()
	t.ApnAmbrUl.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrDl represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-gx-policy/gx/three-gpp-qos-mapping/apn-ambr-dl YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrDl struct {
	AggregateRate  YANGEmpty `path:"aggregate-rate" module:"nokia-conf"`
	Arbiter        *string   `path:"arbiter" module:"nokia-conf"`
	HsSlaAggRate   YANGEmpty `path:"hs-sla-agg-rate" module:"nokia-conf"`
	IgnoreOverride YANGEmpty `path:"ignore-override" module:"nokia-conf"`
	Policer        *int32    `path:"policer" module:"nokia-conf"`
	Queue          *int32    `path:"queue" module:"nokia-conf"`
	Scheduler      *string   `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrDl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrDl) IsYANGGoStruct() {
}

// GetAggregateRate retrieves the value of the leaf AggregateRate from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrDl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AggregateRate is set, it can
// safely use t.GetAggregateRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AggregateRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrDl) GetAggregateRate() YANGEmpty {
	if t == nil || t.AggregateRate == false {
		return false
	}
	return t.AggregateRate
}

// GetArbiter retrieves the value of the leaf Arbiter from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrDl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Arbiter is set, it can
// safely use t.GetArbiter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Arbiter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrDl) GetArbiter() string {
	if t == nil || t.Arbiter == nil {
		return ""
	}
	return *t.Arbiter
}

// GetHsSlaAggRate retrieves the value of the leaf HsSlaAggRate from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrDl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsSlaAggRate is set, it can
// safely use t.GetHsSlaAggRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsSlaAggRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrDl) GetHsSlaAggRate() YANGEmpty {
	if t == nil || t.HsSlaAggRate == false {
		return false
	}
	return t.HsSlaAggRate
}

// GetIgnoreOverride retrieves the value of the leaf IgnoreOverride from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrDl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreOverride is set, it can
// safely use t.GetIgnoreOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrDl) GetIgnoreOverride() YANGEmpty {
	if t == nil || t.IgnoreOverride == false {
		return false
	}
	return t.IgnoreOverride
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrDl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrDl) GetPolicer() int32 {
	if t == nil || t.Policer == nil {
		return 0
	}
	return *t.Policer
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrDl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrDl) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// GetScheduler retrieves the value of the leaf Scheduler from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrDl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scheduler is set, it can
// safely use t.GetScheduler() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scheduler == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrDl) GetScheduler() string {
	if t == nil || t.Scheduler == nil {
		return ""
	}
	return *t.Scheduler
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrDl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrDl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrDl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrDl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrDl) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrDl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrDl.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrDl) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrUl represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-gx-policy/gx/three-gpp-qos-mapping/apn-ambr-ul YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrUl struct {
	Arbiter        *string   `path:"arbiter" module:"nokia-conf"`
	IgnoreOverride YANGEmpty `path:"ignore-override" module:"nokia-conf"`
	Policer        *int32    `path:"policer" module:"nokia-conf"`
	Queue          *int32    `path:"queue" module:"nokia-conf"`
	Scheduler      *string   `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrUl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrUl) IsYANGGoStruct() {
}

// GetArbiter retrieves the value of the leaf Arbiter from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrUl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Arbiter is set, it can
// safely use t.GetArbiter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Arbiter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrUl) GetArbiter() string {
	if t == nil || t.Arbiter == nil {
		return ""
	}
	return *t.Arbiter
}

// GetIgnoreOverride retrieves the value of the leaf IgnoreOverride from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrUl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreOverride is set, it can
// safely use t.GetIgnoreOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrUl) GetIgnoreOverride() YANGEmpty {
	if t == nil || t.IgnoreOverride == false {
		return false
	}
	return t.IgnoreOverride
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrUl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrUl) GetPolicer() int32 {
	if t == nil || t.Policer == nil {
		return 0
	}
	return *t.Policer
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrUl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrUl) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// GetScheduler retrieves the value of the leaf Scheduler from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrUl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scheduler is set, it can
// safely use t.GetScheduler() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scheduler == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrUl) GetScheduler() string {
	if t == nil || t.Scheduler == nil {
		return ""
	}
	return *t.Scheduler
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrUl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrUl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrUl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrUl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrUl) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrUl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrUl.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Gx_ThreeGppQosMapping_ApnAmbrUl) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Node represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-gx-policy/node YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Node struct {
	DestinationRealm *string `path:"destination-realm" module:"nokia-conf"`
	OriginHost       *string `path:"origin-host" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Node implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Node) IsYANGGoStruct() {}

// GetDestinationRealm retrieves the value of the leaf DestinationRealm from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Node
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationRealm is set, it can
// safely use t.GetDestinationRealm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationRealm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Node) GetDestinationRealm() string {
	if t == nil || t.DestinationRealm == nil {
		return ""
	}
	return *t.DestinationRealm
}

// GetOriginHost retrieves the value of the leaf OriginHost from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Node
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginHost is set, it can
// safely use t.GetOriginHost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginHost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Node) GetOriginHost() string {
	if t == nil || t.OriginHost == nil {
		return ""
	}
	return *t.OriginHost
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Node
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Node) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Node) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Node"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Node) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Node) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Node.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_Node) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_OnFailure represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-gx-policy/on-failure YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_OnFailure struct {
	Failover *bool                                                                                 `path:"failover" module:"nokia-conf"`
	Handling E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_OnFailure_Handling `path:"handling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_OnFailure implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_OnFailure) IsYANGGoStruct() {}

// GetFailover retrieves the value of the leaf Failover from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_OnFailure
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Failover is set, it can
// safely use t.GetFailover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Failover == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_OnFailure) GetFailover() bool {
	if t == nil || t.Failover == nil {
		return true
	}
	return *t.Failover
}

// GetHandling retrieves the value of the leaf Handling from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_OnFailure
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Handling is set, it can
// safely use t.GetHandling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Handling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_OnFailure) GetHandling() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_OnFailure_Handling {
	if t == nil || t.Handling == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_OnFailure_Handling_terminate
	}
	return t.Handling
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_OnFailure
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_OnFailure) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Failover == nil {
		var v bool = true
		t.Failover = &v
	}
	if t.Handling == 0 {
		t.Handling = NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_OnFailure_Handling_terminate
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_OnFailure) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_OnFailure"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_OnFailure) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_OnFailure) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_OnFailure.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGxPolicy_OnFailure) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-gy-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy struct {
	Description *string                                                                     `path:"description" module:"nokia-conf"`
	Gy          *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy        `path:"gy" module:"nokia-conf"`
	Name        *string                                                                     `path:"name" module:"nokia-conf"`
	Node        *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Node      `path:"node" module:"nokia-conf"`
	OnFailure   *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_OnFailure `path:"on-failure" module:"nokia-conf"`
	PeerPolicy  *string                                                                     `path:"peer-policy" module:"nokia-conf"`
	TxTimer     *uint32                                                                     `path:"tx-timer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy) IsYANGGoStruct() {}

// GetOrCreateGy retrieves the value of the Gy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy) GetOrCreateGy() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy {
	if t.Gy != nil {
		return t.Gy
	}
	t.Gy = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy{}
	return t.Gy
}

// GetOrCreateNode retrieves the value of the Node field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy) GetOrCreateNode() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Node {
	if t.Node != nil {
		return t.Node
	}
	t.Node = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Node{}
	return t.Node
}

// GetOrCreateOnFailure retrieves the value of the OnFailure field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy) GetOrCreateOnFailure() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_OnFailure {
	if t.OnFailure != nil {
		return t.OnFailure
	}
	t.OnFailure = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_OnFailure{}
	return t.OnFailure
}

// GetGy returns the value of the Gy struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy. If the receiver or the field Gy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy) GetGy() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy {
	if t != nil && t.Gy != nil {
		return t.Gy
	}
	return nil
}

// GetNode returns the value of the Node struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy. If the receiver or the field Node is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy) GetNode() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Node {
	if t != nil && t.Node != nil {
		return t.Node
	}
	return nil
}

// GetOnFailure returns the value of the OnFailure struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy. If the receiver or the field OnFailure is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy) GetOnFailure() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_OnFailure {
	if t != nil && t.OnFailure != nil {
		return t.OnFailure
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPeerPolicy retrieves the value of the leaf PeerPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerPolicy is set, it can
// safely use t.GetPeerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy) GetPeerPolicy() string {
	if t == nil || t.PeerPolicy == nil {
		return ""
	}
	return *t.PeerPolicy
}

// GetTxTimer retrieves the value of the leaf TxTimer from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxTimer is set, it can
// safely use t.GetTxTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy) GetTxTimer() uint32 {
	if t == nil || t.TxTimer == nil {
		return 10
	}
	return *t.TxTimer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.TxTimer == nil {
		var v uint32 = 10
		t.TxTimer = &v
	}
	t.Gy.PopulateDefaults()
	t.Node.PopulateDefaults()
	t.OnFailure.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-gy-policy/gy YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy struct {
	AvpSubscriptionId        *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_AvpSubscriptionId       `path:"avp-subscription-id" module:"nokia-conf"`
	CcrtReplay               *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_CcrtReplay              `path:"ccrt-replay" module:"nokia-conf" yangPresence:"true"`
	DestinationRealmLearning *bool                                                                                        `path:"destination-realm-learning" module:"nokia-conf"`
	ExtendedFailureHandling  *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling `path:"extended-failure-handling" module:"nokia-conf"`
	IncludeAvp               *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp              `path:"include-avp" module:"nokia-conf"`
	MacFormat                *string                                                                                      `path:"mac-format" module:"nokia-conf"`
	OutOfCreditReporting     E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_OutOfCreditReporting   `path:"out-of-credit-reporting" module:"nokia-conf"`
	VendorSupport            E_NokiaTypesDiameter_DiamVendorSupport                                                       `path:"vendor-support" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy) IsYANGGoStruct() {}

// GetOrCreateAvpSubscriptionId retrieves the value of the AvpSubscriptionId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy) GetOrCreateAvpSubscriptionId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_AvpSubscriptionId {
	if t.AvpSubscriptionId != nil {
		return t.AvpSubscriptionId
	}
	t.AvpSubscriptionId = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_AvpSubscriptionId{}
	return t.AvpSubscriptionId
}

// GetOrCreateCcrtReplay retrieves the value of the CcrtReplay field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy) GetOrCreateCcrtReplay() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_CcrtReplay {
	if t.CcrtReplay != nil {
		return t.CcrtReplay
	}
	t.CcrtReplay = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_CcrtReplay{}
	return t.CcrtReplay
}

// GetOrCreateExtendedFailureHandling retrieves the value of the ExtendedFailureHandling field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy) GetOrCreateExtendedFailureHandling() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling {
	if t.ExtendedFailureHandling != nil {
		return t.ExtendedFailureHandling
	}
	t.ExtendedFailureHandling = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling{}
	return t.ExtendedFailureHandling
}

// GetOrCreateIncludeAvp retrieves the value of the IncludeAvp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy) GetOrCreateIncludeAvp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp {
	if t.IncludeAvp != nil {
		return t.IncludeAvp
	}
	t.IncludeAvp = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp{}
	return t.IncludeAvp
}

// GetAvpSubscriptionId returns the value of the AvpSubscriptionId struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy. If the receiver or the field AvpSubscriptionId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy) GetAvpSubscriptionId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_AvpSubscriptionId {
	if t != nil && t.AvpSubscriptionId != nil {
		return t.AvpSubscriptionId
	}
	return nil
}

// GetCcrtReplay returns the value of the CcrtReplay struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy. If the receiver or the field CcrtReplay is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy) GetCcrtReplay() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_CcrtReplay {
	if t != nil && t.CcrtReplay != nil {
		return t.CcrtReplay
	}
	return nil
}

// GetExtendedFailureHandling returns the value of the ExtendedFailureHandling struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy. If the receiver or the field ExtendedFailureHandling is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy) GetExtendedFailureHandling() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling {
	if t != nil && t.ExtendedFailureHandling != nil {
		return t.ExtendedFailureHandling
	}
	return nil
}

// GetIncludeAvp returns the value of the IncludeAvp struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy. If the receiver or the field IncludeAvp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy) GetIncludeAvp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp {
	if t != nil && t.IncludeAvp != nil {
		return t.IncludeAvp
	}
	return nil
}

// GetDestinationRealmLearning retrieves the value of the leaf DestinationRealmLearning from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationRealmLearning is set, it can
// safely use t.GetDestinationRealmLearning() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationRealmLearning == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy) GetDestinationRealmLearning() bool {
	if t == nil || t.DestinationRealmLearning == nil {
		return true
	}
	return *t.DestinationRealmLearning
}

// GetMacFormat retrieves the value of the leaf MacFormat from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacFormat is set, it can
// safely use t.GetMacFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacFormat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy) GetMacFormat() string {
	if t == nil || t.MacFormat == nil {
		return "aa:"
	}
	return *t.MacFormat
}

// GetOutOfCreditReporting retrieves the value of the leaf OutOfCreditReporting from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutOfCreditReporting is set, it can
// safely use t.GetOutOfCreditReporting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutOfCreditReporting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy) GetOutOfCreditReporting() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_OutOfCreditReporting {
	if t == nil || t.OutOfCreditReporting == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_OutOfCreditReporting_final
	}
	return t.OutOfCreditReporting
}

// GetVendorSupport retrieves the value of the leaf VendorSupport from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VendorSupport is set, it can
// safely use t.GetVendorSupport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VendorSupport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy) GetVendorSupport() E_NokiaTypesDiameter_DiamVendorSupport {
	if t == nil || t.VendorSupport == 0 {
		return NokiaTypesDiameter_DiamVendorSupport_three_gpp
	}
	return t.VendorSupport
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DestinationRealmLearning == nil {
		var v bool = true
		t.DestinationRealmLearning = &v
	}
	if t.MacFormat == nil {
		var v string = "aa:"
		t.MacFormat = &v
	}
	if t.OutOfCreditReporting == 0 {
		t.OutOfCreditReporting = NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_OutOfCreditReporting_final
	}
	if t.VendorSupport == 0 {
		t.VendorSupport = NokiaTypesDiameter_DiamVendorSupport_three_gpp
	}
	t.AvpSubscriptionId.PopulateDefaults()
	t.CcrtReplay.PopulateDefaults()
	t.ExtendedFailureHandling.PopulateDefaults()
	t.IncludeAvp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_AvpSubscriptionId represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-gy-policy/gy/avp-subscription-id YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_AvpSubscriptionId struct {
	Origin E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_AvpSubscriptionId_Origin `path:"origin" module:"nokia-conf"`
	Type   E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_AvpSubscriptionId_Type   `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_AvpSubscriptionId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_AvpSubscriptionId) IsYANGGoStruct() {
}

// GetOrigin retrieves the value of the leaf Origin from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_AvpSubscriptionId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Origin is set, it can
// safely use t.GetOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Origin == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_AvpSubscriptionId) GetOrigin() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_AvpSubscriptionId_Origin {
	if t == nil || t.Origin == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_AvpSubscriptionId_Origin_subscriber_id
	}
	return t.Origin
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_AvpSubscriptionId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_AvpSubscriptionId) GetType() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_AvpSubscriptionId_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_AvpSubscriptionId_Type_private
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_AvpSubscriptionId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_AvpSubscriptionId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Origin == 0 {
		t.Origin = NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_AvpSubscriptionId_Origin_subscriber_id
	}
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_AvpSubscriptionId_Type_private
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_AvpSubscriptionId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_AvpSubscriptionId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_AvpSubscriptionId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_AvpSubscriptionId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_AvpSubscriptionId.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_AvpSubscriptionId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_CcrtReplay represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-gy-policy/gy/ccrt-replay YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_CcrtReplay struct {
	Interval    *uint32 `path:"interval" module:"nokia-conf"`
	MaxLifetime *uint32 `path:"max-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_CcrtReplay implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_CcrtReplay) IsYANGGoStruct() {
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_CcrtReplay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_CcrtReplay) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 3600
	}
	return *t.Interval
}

// GetMaxLifetime retrieves the value of the leaf MaxLifetime from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_CcrtReplay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLifetime is set, it can
// safely use t.GetMaxLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_CcrtReplay) GetMaxLifetime() uint32 {
	if t == nil || t.MaxLifetime == nil {
		return 24
	}
	return *t.MaxLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_CcrtReplay
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_CcrtReplay) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Interval == nil {
		var v uint32 = 3600
		t.Interval = &v
	}
	if t.MaxLifetime == nil {
		var v uint32 = 24
		t.MaxLifetime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_CcrtReplay) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_CcrtReplay"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_CcrtReplay) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_CcrtReplay) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_CcrtReplay.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_CcrtReplay) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-gy-policy/gy/extended-failure-handling YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling struct {
	AdminState    E_NokiaTypesSros_AdminState                                                                                `path:"admin-state" module:"nokia-conf"`
	InterimCredit *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit `path:"interim-credit" module:"nokia-conf"`
	NewSessionId  *bool                                                                                                      `path:"new-session-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling) IsYANGGoStruct() {
}

// GetOrCreateInterimCredit retrieves the value of the InterimCredit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling) GetOrCreateInterimCredit() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit {
	if t.InterimCredit != nil {
		return t.InterimCredit
	}
	t.InterimCredit = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit{}
	return t.InterimCredit
}

// GetInterimCredit returns the value of the InterimCredit struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling. If the receiver or the field InterimCredit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling) GetInterimCredit() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit {
	if t != nil && t.InterimCredit != nil {
		return t.InterimCredit
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetNewSessionId retrieves the value of the leaf NewSessionId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NewSessionId is set, it can
// safely use t.GetNewSessionId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NewSessionId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling) GetNewSessionId() bool {
	if t == nil || t.NewSessionId == nil {
		return false
	}
	return *t.NewSessionId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.NewSessionId == nil {
		var v bool = false
		t.NewSessionId = &v
	}
	t.InterimCredit.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-gy-policy/gy/extended-failure-handling/interim-credit YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit struct {
	MaxAttempts  NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit_MaxAttempts_Union  `path:"max-attempts" module:"nokia-conf"`
	Reporting    *bool                                                                                                                        `path:"reporting" module:"nokia-conf"`
	ValidityTime NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit_ValidityTime_Union `path:"validity-time" module:"nokia-conf"`
	Volume       *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit_Volume            `path:"volume" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit) IsYANGGoStruct() {
}

// GetOrCreateVolume retrieves the value of the Volume field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit) GetOrCreateVolume() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit_Volume {
	if t.Volume != nil {
		return t.Volume
	}
	t.Volume = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit_Volume{}
	return t.Volume
}

// GetVolume returns the value of the Volume struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit. If the receiver or the field Volume is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit) GetVolume() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit_Volume {
	if t != nil && t.Volume != nil {
		return t.Volume
	}
	return nil
}

// GetMaxAttempts retrieves the value of the leaf MaxAttempts from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxAttempts is set, it can
// safely use t.GetMaxAttempts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxAttempts == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit) GetMaxAttempts() NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit_MaxAttempts_Union {
	if t == nil || t.MaxAttempts == nil {
		return UnionUint32(10)
	}
	return t.MaxAttempts
}

// GetReporting retrieves the value of the leaf Reporting from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Reporting is set, it can
// safely use t.GetReporting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Reporting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit) GetReporting() bool {
	if t == nil || t.Reporting == nil {
		return false
	}
	return *t.Reporting
}

// GetValidityTime retrieves the value of the leaf ValidityTime from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidityTime is set, it can
// safely use t.GetValidityTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidityTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit) GetValidityTime() NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit_ValidityTime_Union {
	if t == nil || t.ValidityTime == nil {
		return UnionUint32(1800)
	}
	return t.ValidityTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxAttempts == nil {
		t.MaxAttempts = UnionUint32(10)
	}
	if t.Reporting == nil {
		var v bool = false
		t.Reporting = &v
	}
	if t.ValidityTime == nil {
		t.ValidityTime = UnionUint32(1800)
	}
	t.Volume.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit_Volume represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-gy-policy/gy/extended-failure-handling/interim-credit/volume YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit_Volume struct {
	Credits *uint32                                                                                                                  `path:"credits" module:"nokia-conf"`
	Units   E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit_Volume_Units `path:"units" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit_Volume implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit_Volume) IsYANGGoStruct() {
}

// GetCredits retrieves the value of the leaf Credits from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit_Volume
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Credits is set, it can
// safely use t.GetCredits() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Credits == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit_Volume) GetCredits() uint32 {
	if t == nil || t.Credits == nil {
		return 500
	}
	return *t.Credits
}

// GetUnits retrieves the value of the leaf Units from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit_Volume
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Units is set, it can
// safely use t.GetUnits() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Units == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit_Volume) GetUnits() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit_Volume_Units {
	if t == nil || t.Units == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit_Volume_Units_megabytes
	}
	return t.Units
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit_Volume
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit_Volume) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Credits == nil {
		var v uint32 = 500
		t.Credits = &v
	}
	if t.Units == 0 {
		t.Units = NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit_Volume_Units_megabytes
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit_Volume) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit_Volume"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit_Volume) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit_Volume) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit_Volume.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_ExtendedFailureHandling_InterimCredit_Volume) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-gy-policy/gy/include-avp YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp struct {
	AaaUserName                      *bool                                                                                                 `path:"aaa-user-name" module:"nokia-conf"`
	AddressAvp                       *bool                                                                                                 `path:"address-avp" module:"nokia-conf"`
	CalledStationId                  *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_CalledStationId       `path:"called-station-id" module:"nokia-conf" yangPresence:"true"`
	ChargingRuleBaseName             *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ChargingRuleBaseName  `path:"charging-rule-base-name" module:"nokia-conf"`
	GgsnAddress                      *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_GgsnAddress           `path:"ggsn-address" module:"nokia-conf" yangPresence:"true"`
	PdpContextType                   *bool                                                                                                 `path:"pdp-context-type" module:"nokia-conf"`
	PsInformation                    *bool                                                                                                 `path:"ps-information" module:"nokia-conf"`
	ServiceContextId                 *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ServiceContextId      `path:"service-context-id" module:"nokia-conf" yangPresence:"true"`
	ThreeGppChargingCharacteristics  *bool                                                                                                 `path:"three-gpp-charging-characteristics" module:"nokia-conf"`
	ThreeGppChargingId               E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ThreeGppChargingId   `path:"three-gpp-charging-id" module:"nokia-conf"`
	ThreeGppGgsnIpv4Address          *bool                                                                                                 `path:"three-gpp-ggsn-ipv4-address" module:"nokia-conf"`
	ThreeGppGgsnIpv6Address          *bool                                                                                                 `path:"three-gpp-ggsn-ipv6-address" module:"nokia-conf"`
	ThreeGppGprsNegotiatedQosProfile *bool                                                                                                 `path:"three-gpp-gprs-negotiated-qos-profile" module:"nokia-conf"`
	ThreeGppImsi                     E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ThreeGppImsi         `path:"three-gpp-imsi" module:"nokia-conf"`
	ThreeGppNsapi                    *bool                                                                                                 `path:"three-gpp-nsapi" module:"nokia-conf"`
	ThreeGppRatType                  *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ThreeGppRatType       `path:"three-gpp-rat-type" module:"nokia-conf" yangPresence:"true"`
	ThreeGppSelectionMode            *bool                                                                                                 `path:"three-gpp-selection-mode" module:"nokia-conf"`
	ThreeGppSessionStopIndicator     *bool                                                                                                 `path:"three-gpp-session-stop-indicator" module:"nokia-conf"`
	ThreeGppUserLocationInfo         *bool                                                                                                 `path:"three-gpp-user-location-info" module:"nokia-conf"`
	UserEquipmentInfoType            *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_UserEquipmentInfoType `path:"user-equipment-info-type" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp) IsYANGGoStruct() {
}

// GetOrCreateCalledStationId retrieves the value of the CalledStationId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp) GetOrCreateCalledStationId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_CalledStationId {
	if t.CalledStationId != nil {
		return t.CalledStationId
	}
	t.CalledStationId = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_CalledStationId{}
	return t.CalledStationId
}

// GetOrCreateChargingRuleBaseName retrieves the value of the ChargingRuleBaseName field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp) GetOrCreateChargingRuleBaseName() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ChargingRuleBaseName {
	if t.ChargingRuleBaseName != nil {
		return t.ChargingRuleBaseName
	}
	t.ChargingRuleBaseName = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ChargingRuleBaseName{}
	return t.ChargingRuleBaseName
}

// GetOrCreateGgsnAddress retrieves the value of the GgsnAddress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp) GetOrCreateGgsnAddress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_GgsnAddress {
	if t.GgsnAddress != nil {
		return t.GgsnAddress
	}
	t.GgsnAddress = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_GgsnAddress{}
	return t.GgsnAddress
}

// GetOrCreateServiceContextId retrieves the value of the ServiceContextId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp) GetOrCreateServiceContextId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ServiceContextId {
	if t.ServiceContextId != nil {
		return t.ServiceContextId
	}
	t.ServiceContextId = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ServiceContextId{}
	return t.ServiceContextId
}

// GetOrCreateThreeGppRatType retrieves the value of the ThreeGppRatType field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp) GetOrCreateThreeGppRatType() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ThreeGppRatType {
	if t.ThreeGppRatType != nil {
		return t.ThreeGppRatType
	}
	t.ThreeGppRatType = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ThreeGppRatType{}
	return t.ThreeGppRatType
}

// GetOrCreateUserEquipmentInfoType retrieves the value of the UserEquipmentInfoType field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp) GetOrCreateUserEquipmentInfoType() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_UserEquipmentInfoType {
	if t.UserEquipmentInfoType != nil {
		return t.UserEquipmentInfoType
	}
	t.UserEquipmentInfoType = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_UserEquipmentInfoType{}
	return t.UserEquipmentInfoType
}

// GetCalledStationId returns the value of the CalledStationId struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp. If the receiver or the field CalledStationId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp) GetCalledStationId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_CalledStationId {
	if t != nil && t.CalledStationId != nil {
		return t.CalledStationId
	}
	return nil
}

// GetChargingRuleBaseName returns the value of the ChargingRuleBaseName struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp. If the receiver or the field ChargingRuleBaseName is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp) GetChargingRuleBaseName() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ChargingRuleBaseName {
	if t != nil && t.ChargingRuleBaseName != nil {
		return t.ChargingRuleBaseName
	}
	return nil
}

// GetGgsnAddress returns the value of the GgsnAddress struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp. If the receiver or the field GgsnAddress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp) GetGgsnAddress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_GgsnAddress {
	if t != nil && t.GgsnAddress != nil {
		return t.GgsnAddress
	}
	return nil
}

// GetServiceContextId returns the value of the ServiceContextId struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp. If the receiver or the field ServiceContextId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp) GetServiceContextId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ServiceContextId {
	if t != nil && t.ServiceContextId != nil {
		return t.ServiceContextId
	}
	return nil
}

// GetThreeGppRatType returns the value of the ThreeGppRatType struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp. If the receiver or the field ThreeGppRatType is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp) GetThreeGppRatType() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ThreeGppRatType {
	if t != nil && t.ThreeGppRatType != nil {
		return t.ThreeGppRatType
	}
	return nil
}

// GetUserEquipmentInfoType returns the value of the UserEquipmentInfoType struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp. If the receiver or the field UserEquipmentInfoType is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp) GetUserEquipmentInfoType() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_UserEquipmentInfoType {
	if t != nil && t.UserEquipmentInfoType != nil {
		return t.UserEquipmentInfoType
	}
	return nil
}

// GetAaaUserName retrieves the value of the leaf AaaUserName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AaaUserName is set, it can
// safely use t.GetAaaUserName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AaaUserName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp) GetAaaUserName() bool {
	if t == nil || t.AaaUserName == nil {
		return false
	}
	return *t.AaaUserName
}

// GetAddressAvp retrieves the value of the leaf AddressAvp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AddressAvp is set, it can
// safely use t.GetAddressAvp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AddressAvp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp) GetAddressAvp() bool {
	if t == nil || t.AddressAvp == nil {
		return true
	}
	return *t.AddressAvp
}

// GetPdpContextType retrieves the value of the leaf PdpContextType from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PdpContextType is set, it can
// safely use t.GetPdpContextType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PdpContextType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp) GetPdpContextType() bool {
	if t == nil || t.PdpContextType == nil {
		return true
	}
	return *t.PdpContextType
}

// GetPsInformation retrieves the value of the leaf PsInformation from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PsInformation is set, it can
// safely use t.GetPsInformation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PsInformation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp) GetPsInformation() bool {
	if t == nil || t.PsInformation == nil {
		return false
	}
	return *t.PsInformation
}

// GetThreeGppChargingCharacteristics retrieves the value of the leaf ThreeGppChargingCharacteristics from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ThreeGppChargingCharacteristics is set, it can
// safely use t.GetThreeGppChargingCharacteristics() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ThreeGppChargingCharacteristics == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp) GetThreeGppChargingCharacteristics() bool {
	if t == nil || t.ThreeGppChargingCharacteristics == nil {
		return true
	}
	return *t.ThreeGppChargingCharacteristics
}

// GetThreeGppChargingId retrieves the value of the leaf ThreeGppChargingId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ThreeGppChargingId is set, it can
// safely use t.GetThreeGppChargingId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ThreeGppChargingId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp) GetThreeGppChargingId() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ThreeGppChargingId {
	if t == nil || t.ThreeGppChargingId == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ThreeGppChargingId_auto
	}
	return t.ThreeGppChargingId
}

// GetThreeGppGgsnIpv4Address retrieves the value of the leaf ThreeGppGgsnIpv4Address from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ThreeGppGgsnIpv4Address is set, it can
// safely use t.GetThreeGppGgsnIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ThreeGppGgsnIpv4Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp) GetThreeGppGgsnIpv4Address() bool {
	if t == nil || t.ThreeGppGgsnIpv4Address == nil {
		return true
	}
	return *t.ThreeGppGgsnIpv4Address
}

// GetThreeGppGgsnIpv6Address retrieves the value of the leaf ThreeGppGgsnIpv6Address from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ThreeGppGgsnIpv6Address is set, it can
// safely use t.GetThreeGppGgsnIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ThreeGppGgsnIpv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp) GetThreeGppGgsnIpv6Address() bool {
	if t == nil || t.ThreeGppGgsnIpv6Address == nil {
		return false
	}
	return *t.ThreeGppGgsnIpv6Address
}

// GetThreeGppGprsNegotiatedQosProfile retrieves the value of the leaf ThreeGppGprsNegotiatedQosProfile from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ThreeGppGprsNegotiatedQosProfile is set, it can
// safely use t.GetThreeGppGprsNegotiatedQosProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ThreeGppGprsNegotiatedQosProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp) GetThreeGppGprsNegotiatedQosProfile() bool {
	if t == nil || t.ThreeGppGprsNegotiatedQosProfile == nil {
		return true
	}
	return *t.ThreeGppGprsNegotiatedQosProfile
}

// GetThreeGppImsi retrieves the value of the leaf ThreeGppImsi from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ThreeGppImsi is set, it can
// safely use t.GetThreeGppImsi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ThreeGppImsi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp) GetThreeGppImsi() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ThreeGppImsi {
	if t == nil || t.ThreeGppImsi == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ThreeGppImsi_subscriber_id
	}
	return t.ThreeGppImsi
}

// GetThreeGppNsapi retrieves the value of the leaf ThreeGppNsapi from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ThreeGppNsapi is set, it can
// safely use t.GetThreeGppNsapi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ThreeGppNsapi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp) GetThreeGppNsapi() bool {
	if t == nil || t.ThreeGppNsapi == nil {
		return true
	}
	return *t.ThreeGppNsapi
}

// GetThreeGppSelectionMode retrieves the value of the leaf ThreeGppSelectionMode from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ThreeGppSelectionMode is set, it can
// safely use t.GetThreeGppSelectionMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ThreeGppSelectionMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp) GetThreeGppSelectionMode() bool {
	if t == nil || t.ThreeGppSelectionMode == nil {
		return true
	}
	return *t.ThreeGppSelectionMode
}

// GetThreeGppSessionStopIndicator retrieves the value of the leaf ThreeGppSessionStopIndicator from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ThreeGppSessionStopIndicator is set, it can
// safely use t.GetThreeGppSessionStopIndicator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ThreeGppSessionStopIndicator == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp) GetThreeGppSessionStopIndicator() bool {
	if t == nil || t.ThreeGppSessionStopIndicator == nil {
		return true
	}
	return *t.ThreeGppSessionStopIndicator
}

// GetThreeGppUserLocationInfo retrieves the value of the leaf ThreeGppUserLocationInfo from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ThreeGppUserLocationInfo is set, it can
// safely use t.GetThreeGppUserLocationInfo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ThreeGppUserLocationInfo == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp) GetThreeGppUserLocationInfo() bool {
	if t == nil || t.ThreeGppUserLocationInfo == nil {
		return false
	}
	return *t.ThreeGppUserLocationInfo
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AaaUserName == nil {
		var v bool = false
		t.AaaUserName = &v
	}
	if t.AddressAvp == nil {
		var v bool = true
		t.AddressAvp = &v
	}
	if t.PdpContextType == nil {
		var v bool = true
		t.PdpContextType = &v
	}
	if t.PsInformation == nil {
		var v bool = false
		t.PsInformation = &v
	}
	if t.ThreeGppChargingCharacteristics == nil {
		var v bool = true
		t.ThreeGppChargingCharacteristics = &v
	}
	if t.ThreeGppChargingId == 0 {
		t.ThreeGppChargingId = NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ThreeGppChargingId_auto
	}
	if t.ThreeGppGgsnIpv4Address == nil {
		var v bool = true
		t.ThreeGppGgsnIpv4Address = &v
	}
	if t.ThreeGppGgsnIpv6Address == nil {
		var v bool = false
		t.ThreeGppGgsnIpv6Address = &v
	}
	if t.ThreeGppGprsNegotiatedQosProfile == nil {
		var v bool = true
		t.ThreeGppGprsNegotiatedQosProfile = &v
	}
	if t.ThreeGppImsi == 0 {
		t.ThreeGppImsi = NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ThreeGppImsi_subscriber_id
	}
	if t.ThreeGppNsapi == nil {
		var v bool = true
		t.ThreeGppNsapi = &v
	}
	if t.ThreeGppSelectionMode == nil {
		var v bool = true
		t.ThreeGppSelectionMode = &v
	}
	if t.ThreeGppSessionStopIndicator == nil {
		var v bool = true
		t.ThreeGppSessionStopIndicator = &v
	}
	if t.ThreeGppUserLocationInfo == nil {
		var v bool = false
		t.ThreeGppUserLocationInfo = &v
	}
	t.CalledStationId.PopulateDefaults()
	t.ChargingRuleBaseName.PopulateDefaults()
	t.GgsnAddress.PopulateDefaults()
	t.ServiceContextId.PopulateDefaults()
	t.ThreeGppRatType.PopulateDefaults()
	t.UserEquipmentInfoType.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_CalledStationId represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-gy-policy/gy/include-avp/called-station-id YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_CalledStationId struct {
	Id *string `path:"id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_CalledStationId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_CalledStationId) IsYANGGoStruct() {
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_CalledStationId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_CalledStationId) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_CalledStationId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_CalledStationId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_CalledStationId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_CalledStationId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_CalledStationId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_CalledStationId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_CalledStationId.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_CalledStationId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ChargingRuleBaseName represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-gy-policy/gy/include-avp/charging-rule-base-name YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ChargingRuleBaseName struct {
	CategoryMap YANGEmpty `path:"category-map" module:"nokia-conf"`
	NotIncluded YANGEmpty `path:"not-included" module:"nokia-conf"`
	UserString  *string   `path:"user-string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ChargingRuleBaseName implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ChargingRuleBaseName) IsYANGGoStruct() {
}

// GetCategoryMap retrieves the value of the leaf CategoryMap from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ChargingRuleBaseName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CategoryMap is set, it can
// safely use t.GetCategoryMap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CategoryMap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ChargingRuleBaseName) GetCategoryMap() YANGEmpty {
	if t == nil || t.CategoryMap == false {
		return false
	}
	return t.CategoryMap
}

// GetNotIncluded retrieves the value of the leaf NotIncluded from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ChargingRuleBaseName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NotIncluded is set, it can
// safely use t.GetNotIncluded() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NotIncluded == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ChargingRuleBaseName) GetNotIncluded() YANGEmpty {
	if t == nil || t.NotIncluded == false {
		return false
	}
	return t.NotIncluded
}

// GetUserString retrieves the value of the leaf UserString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ChargingRuleBaseName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserString is set, it can
// safely use t.GetUserString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ChargingRuleBaseName) GetUserString() string {
	if t == nil || t.UserString == nil {
		return ""
	}
	return *t.UserString
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ChargingRuleBaseName
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ChargingRuleBaseName) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ChargingRuleBaseName) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ChargingRuleBaseName"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ChargingRuleBaseName) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ChargingRuleBaseName) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ChargingRuleBaseName.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ChargingRuleBaseName) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_GgsnAddress represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-gy-policy/gy/include-avp/ggsn-address YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_GgsnAddress struct {
	Type E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_GgsnAddress_Type `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_GgsnAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_GgsnAddress) IsYANGGoStruct() {
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_GgsnAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_GgsnAddress) GetType() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_GgsnAddress_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_GgsnAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_GgsnAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_GgsnAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_GgsnAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_GgsnAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_GgsnAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_GgsnAddress.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_GgsnAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ServiceContextId represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-gy-policy/gy/include-avp/service-context-id YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ServiceContextId struct {
	Id *string `path:"id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ServiceContextId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ServiceContextId) IsYANGGoStruct() {
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ServiceContextId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ServiceContextId) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ServiceContextId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ServiceContextId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ServiceContextId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ServiceContextId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ServiceContextId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ServiceContextId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ServiceContextId.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ServiceContextId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ThreeGppRatType represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-gy-policy/gy/include-avp/three-gpp-rat-type YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ThreeGppRatType struct {
	Type *uint32 `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ThreeGppRatType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ThreeGppRatType) IsYANGGoStruct() {
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ThreeGppRatType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ThreeGppRatType) GetType() uint32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ThreeGppRatType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ThreeGppRatType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ThreeGppRatType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ThreeGppRatType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ThreeGppRatType) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ThreeGppRatType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ThreeGppRatType.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_ThreeGppRatType) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_UserEquipmentInfoType represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-gy-policy/gy/include-avp/user-equipment-info-type YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_UserEquipmentInfoType struct {
	Type E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_UserEquipmentInfoType_Type `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_UserEquipmentInfoType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_UserEquipmentInfoType) IsYANGGoStruct() {
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_UserEquipmentInfoType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_UserEquipmentInfoType) GetType() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_UserEquipmentInfoType_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_UserEquipmentInfoType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_UserEquipmentInfoType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_UserEquipmentInfoType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_UserEquipmentInfoType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_UserEquipmentInfoType) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_UserEquipmentInfoType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_UserEquipmentInfoType.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Gy_IncludeAvp_UserEquipmentInfoType) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Node represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-gy-policy/node YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Node struct {
	DestinationRealm *string `path:"destination-realm" module:"nokia-conf"`
	OriginHost       *string `path:"origin-host" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Node implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Node) IsYANGGoStruct() {}

// GetDestinationRealm retrieves the value of the leaf DestinationRealm from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Node
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationRealm is set, it can
// safely use t.GetDestinationRealm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationRealm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Node) GetDestinationRealm() string {
	if t == nil || t.DestinationRealm == nil {
		return ""
	}
	return *t.DestinationRealm
}

// GetOriginHost retrieves the value of the leaf OriginHost from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Node
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginHost is set, it can
// safely use t.GetOriginHost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginHost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Node) GetOriginHost() string {
	if t == nil || t.OriginHost == nil {
		return ""
	}
	return *t.OriginHost
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Node
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Node) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Node) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Node"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Node) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Node) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Node.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_Node) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_OnFailure represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-gy-policy/on-failure YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_OnFailure struct {
	Failover *bool                                                                                 `path:"failover" module:"nokia-conf"`
	Handling E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_OnFailure_Handling `path:"handling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_OnFailure implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_OnFailure) IsYANGGoStruct() {}

// GetFailover retrieves the value of the leaf Failover from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_OnFailure
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Failover is set, it can
// safely use t.GetFailover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Failover == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_OnFailure) GetFailover() bool {
	if t == nil || t.Failover == nil {
		return true
	}
	return *t.Failover
}

// GetHandling retrieves the value of the leaf Handling from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_OnFailure
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Handling is set, it can
// safely use t.GetHandling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Handling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_OnFailure) GetHandling() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_OnFailure_Handling {
	if t == nil || t.Handling == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_OnFailure_Handling_terminate
	}
	return t.Handling
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_OnFailure
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_OnFailure) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Failover == nil {
		var v bool = true
		t.Failover = &v
	}
	if t.Handling == 0 {
		t.Handling = NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_OnFailure_Handling_terminate
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_OnFailure) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_OnFailure"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_OnFailure) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_OnFailure) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_OnFailure.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterGyPolicy_OnFailure) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-nasreq-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy struct {
	Description *string                                                                         `path:"description" module:"nokia-conf"`
	Name        *string                                                                         `path:"name" module:"nokia-conf"`
	Nasreq      *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq    `path:"nasreq" module:"nokia-conf"`
	Node        *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Node      `path:"node" module:"nokia-conf"`
	OnFailure   *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_OnFailure `path:"on-failure" module:"nokia-conf"`
	PeerPolicy  *string                                                                         `path:"peer-policy" module:"nokia-conf"`
	TxTimer     *uint32                                                                         `path:"tx-timer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy) IsYANGGoStruct() {}

// GetOrCreateNasreq retrieves the value of the Nasreq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy) GetOrCreateNasreq() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq {
	if t.Nasreq != nil {
		return t.Nasreq
	}
	t.Nasreq = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq{}
	return t.Nasreq
}

// GetOrCreateNode retrieves the value of the Node field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy) GetOrCreateNode() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Node {
	if t.Node != nil {
		return t.Node
	}
	t.Node = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Node{}
	return t.Node
}

// GetOrCreateOnFailure retrieves the value of the OnFailure field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy) GetOrCreateOnFailure() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_OnFailure {
	if t.OnFailure != nil {
		return t.OnFailure
	}
	t.OnFailure = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_OnFailure{}
	return t.OnFailure
}

// GetNasreq returns the value of the Nasreq struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy. If the receiver or the field Nasreq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy) GetNasreq() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq {
	if t != nil && t.Nasreq != nil {
		return t.Nasreq
	}
	return nil
}

// GetNode returns the value of the Node struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy. If the receiver or the field Node is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy) GetNode() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Node {
	if t != nil && t.Node != nil {
		return t.Node
	}
	return nil
}

// GetOnFailure returns the value of the OnFailure struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy. If the receiver or the field OnFailure is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy) GetOnFailure() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_OnFailure {
	if t != nil && t.OnFailure != nil {
		return t.OnFailure
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPeerPolicy retrieves the value of the leaf PeerPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerPolicy is set, it can
// safely use t.GetPeerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy) GetPeerPolicy() string {
	if t == nil || t.PeerPolicy == nil {
		return ""
	}
	return *t.PeerPolicy
}

// GetTxTimer retrieves the value of the leaf TxTimer from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxTimer is set, it can
// safely use t.GetTxTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy) GetTxTimer() uint32 {
	if t == nil || t.TxTimer == nil {
		return 10
	}
	return *t.TxTimer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.TxTimer == nil {
		var v uint32 = 10
		t.TxTimer = &v
	}
	t.Nasreq.PopulateDefaults()
	t.Node.PopulateDefaults()
	t.OnFailure.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-nasreq-policy/nasreq YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq struct {
	IncludeAvp *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp `path:"include-avp" module:"nokia-conf"`
	MacFormat  *string                                                                                 `path:"mac-format" module:"nokia-conf"`
	Password   *string                                                                                 `path:"password" module:"nokia-conf"`
	UserName   *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_UserName   `path:"user-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq) IsYANGGoStruct() {
}

// GetOrCreateIncludeAvp retrieves the value of the IncludeAvp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq) GetOrCreateIncludeAvp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp {
	if t.IncludeAvp != nil {
		return t.IncludeAvp
	}
	t.IncludeAvp = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp{}
	return t.IncludeAvp
}

// GetOrCreateUserName retrieves the value of the UserName field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq) GetOrCreateUserName() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_UserName {
	if t.UserName != nil {
		return t.UserName
	}
	t.UserName = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_UserName{}
	return t.UserName
}

// GetIncludeAvp returns the value of the IncludeAvp struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq. If the receiver or the field IncludeAvp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq) GetIncludeAvp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp {
	if t != nil && t.IncludeAvp != nil {
		return t.IncludeAvp
	}
	return nil
}

// GetUserName returns the value of the UserName struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq. If the receiver or the field UserName is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq) GetUserName() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_UserName {
	if t != nil && t.UserName != nil {
		return t.UserName
	}
	return nil
}

// GetMacFormat retrieves the value of the leaf MacFormat from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacFormat is set, it can
// safely use t.GetMacFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacFormat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq) GetMacFormat() string {
	if t == nil || t.MacFormat == nil {
		return "aa:"
	}
	return *t.MacFormat
}

// GetPassword retrieves the value of the leaf Password from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MacFormat == nil {
		var v string = "aa:"
		t.MacFormat = &v
	}
	t.IncludeAvp.PopulateDefaults()
	t.UserName.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-nasreq-policy/nasreq/include-avp YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp struct {
	CalledStationId  *bool                                                                                                    `path:"called-station-id" module:"nokia-conf"`
	CallingStationId *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_CallingStationId `path:"calling-station-id" module:"nokia-conf" yangPresence:"true"`
	CircuitId        *bool                                                                                                    `path:"circuit-id" module:"nokia-conf"`
	Imei             *bool                                                                                                    `path:"imei" module:"nokia-conf"`
	NasPort          *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPort          `path:"nas-port" module:"nokia-conf" yangPresence:"true"`
	NasPortId        *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId        `path:"nas-port-id" module:"nokia-conf" yangPresence:"true"`
	NasPortType      *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortType      `path:"nas-port-type" module:"nokia-conf" yangPresence:"true"`
	RatType          *bool                                                                                                    `path:"rat-type" module:"nokia-conf"`
	RemoteId         *bool                                                                                                    `path:"remote-id" module:"nokia-conf"`
	UserLocationInfo *bool                                                                                                    `path:"user-location-info" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp) IsYANGGoStruct() {
}

// GetOrCreateCallingStationId retrieves the value of the CallingStationId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp) GetOrCreateCallingStationId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_CallingStationId {
	if t.CallingStationId != nil {
		return t.CallingStationId
	}
	t.CallingStationId = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_CallingStationId{}
	return t.CallingStationId
}

// GetOrCreateNasPort retrieves the value of the NasPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp) GetOrCreateNasPort() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPort {
	if t.NasPort != nil {
		return t.NasPort
	}
	t.NasPort = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPort{}
	return t.NasPort
}

// GetOrCreateNasPortId retrieves the value of the NasPortId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp) GetOrCreateNasPortId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId {
	if t.NasPortId != nil {
		return t.NasPortId
	}
	t.NasPortId = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId{}
	return t.NasPortId
}

// GetOrCreateNasPortType retrieves the value of the NasPortType field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp) GetOrCreateNasPortType() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortType {
	if t.NasPortType != nil {
		return t.NasPortType
	}
	t.NasPortType = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortType{}
	return t.NasPortType
}

// GetCallingStationId returns the value of the CallingStationId struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp. If the receiver or the field CallingStationId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp) GetCallingStationId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_CallingStationId {
	if t != nil && t.CallingStationId != nil {
		return t.CallingStationId
	}
	return nil
}

// GetNasPort returns the value of the NasPort struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp. If the receiver or the field NasPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp) GetNasPort() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPort {
	if t != nil && t.NasPort != nil {
		return t.NasPort
	}
	return nil
}

// GetNasPortId returns the value of the NasPortId struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp. If the receiver or the field NasPortId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp) GetNasPortId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId {
	if t != nil && t.NasPortId != nil {
		return t.NasPortId
	}
	return nil
}

// GetNasPortType returns the value of the NasPortType struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp. If the receiver or the field NasPortType is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp) GetNasPortType() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortType {
	if t != nil && t.NasPortType != nil {
		return t.NasPortType
	}
	return nil
}

// GetCalledStationId retrieves the value of the leaf CalledStationId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CalledStationId is set, it can
// safely use t.GetCalledStationId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CalledStationId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp) GetCalledStationId() bool {
	if t == nil || t.CalledStationId == nil {
		return false
	}
	return *t.CalledStationId
}

// GetCircuitId retrieves the value of the leaf CircuitId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CircuitId is set, it can
// safely use t.GetCircuitId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CircuitId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp) GetCircuitId() bool {
	if t == nil || t.CircuitId == nil {
		return false
	}
	return *t.CircuitId
}

// GetImei retrieves the value of the leaf Imei from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Imei is set, it can
// safely use t.GetImei() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Imei == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp) GetImei() bool {
	if t == nil || t.Imei == nil {
		return false
	}
	return *t.Imei
}

// GetRatType retrieves the value of the leaf RatType from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RatType is set, it can
// safely use t.GetRatType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RatType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp) GetRatType() bool {
	if t == nil || t.RatType == nil {
		return false
	}
	return *t.RatType
}

// GetRemoteId retrieves the value of the leaf RemoteId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteId is set, it can
// safely use t.GetRemoteId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp) GetRemoteId() bool {
	if t == nil || t.RemoteId == nil {
		return false
	}
	return *t.RemoteId
}

// GetUserLocationInfo retrieves the value of the leaf UserLocationInfo from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserLocationInfo is set, it can
// safely use t.GetUserLocationInfo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserLocationInfo == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp) GetUserLocationInfo() bool {
	if t == nil || t.UserLocationInfo == nil {
		return false
	}
	return *t.UserLocationInfo
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CalledStationId == nil {
		var v bool = false
		t.CalledStationId = &v
	}
	if t.CircuitId == nil {
		var v bool = false
		t.CircuitId = &v
	}
	if t.Imei == nil {
		var v bool = false
		t.Imei = &v
	}
	if t.RatType == nil {
		var v bool = false
		t.RatType = &v
	}
	if t.RemoteId == nil {
		var v bool = false
		t.RemoteId = &v
	}
	if t.UserLocationInfo == nil {
		var v bool = false
		t.UserLocationInfo = &v
	}
	t.CallingStationId.PopulateDefaults()
	t.NasPort.PopulateDefaults()
	t.NasPortId.PopulateDefaults()
	t.NasPortType.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_CallingStationId represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-nasreq-policy/nasreq/include-avp/calling-station-id YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_CallingStationId struct {
	Type E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_CallingStationId_Type `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_CallingStationId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_CallingStationId) IsYANGGoStruct() {
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_CallingStationId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_CallingStationId) GetType() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_CallingStationId_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_CallingStationId_Type_sap_string
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_CallingStationId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_CallingStationId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_CallingStationId_Type_sap_string
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_CallingStationId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_CallingStationId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_CallingStationId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_CallingStationId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_CallingStationId.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_CallingStationId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPort represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-nasreq-policy/nasreq/include-avp/nas-port YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPort struct {
	BitSpec *string `path:"bit-spec" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPort) IsYANGGoStruct() {
}

// GetBitSpec retrieves the value of the leaf BitSpec from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitSpec is set, it can
// safely use t.GetBitSpec() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitSpec == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPort) GetBitSpec() string {
	if t == nil || t.BitSpec == nil {
		return ""
	}
	return *t.BitSpec
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPort.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-nasreq-policy/nasreq/include-avp/nas-port-id YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId struct {
	PrefixString *string                                                                                                  `path:"prefix-string" module:"nokia-conf"`
	Suffix       *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId_Suffix `path:"suffix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId) IsYANGGoStruct() {
}

// GetOrCreateSuffix retrieves the value of the Suffix field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId) GetOrCreateSuffix() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId_Suffix {
	if t.Suffix != nil {
		return t.Suffix
	}
	t.Suffix = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId_Suffix{}
	return t.Suffix
}

// GetSuffix returns the value of the Suffix struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId. If the receiver or the field Suffix is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId) GetSuffix() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId_Suffix {
	if t != nil && t.Suffix != nil {
		return t.Suffix
	}
	return nil
}

// GetPrefixString retrieves the value of the leaf PrefixString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixString is set, it can
// safely use t.GetPrefixString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId) GetPrefixString() string {
	if t == nil || t.PrefixString == nil {
		return ""
	}
	return *t.PrefixString
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Suffix.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId_Suffix represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-nasreq-policy/nasreq/include-avp/nas-port-id/suffix YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId_Suffix struct {
	CircuitId   YANGEmpty `path:"circuit-id" module:"nokia-conf"`
	NotIncluded YANGEmpty `path:"not-included" module:"nokia-conf"`
	RemoteId    YANGEmpty `path:"remote-id" module:"nokia-conf"`
	UserString  *string   `path:"user-string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId_Suffix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId_Suffix) IsYANGGoStruct() {
}

// GetCircuitId retrieves the value of the leaf CircuitId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId_Suffix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CircuitId is set, it can
// safely use t.GetCircuitId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CircuitId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId_Suffix) GetCircuitId() YANGEmpty {
	if t == nil || t.CircuitId == false {
		return false
	}
	return t.CircuitId
}

// GetNotIncluded retrieves the value of the leaf NotIncluded from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId_Suffix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NotIncluded is set, it can
// safely use t.GetNotIncluded() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NotIncluded == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId_Suffix) GetNotIncluded() YANGEmpty {
	if t == nil || t.NotIncluded == false {
		return false
	}
	return t.NotIncluded
}

// GetRemoteId retrieves the value of the leaf RemoteId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId_Suffix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteId is set, it can
// safely use t.GetRemoteId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId_Suffix) GetRemoteId() YANGEmpty {
	if t == nil || t.RemoteId == false {
		return false
	}
	return t.RemoteId
}

// GetUserString retrieves the value of the leaf UserString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId_Suffix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserString is set, it can
// safely use t.GetUserString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId_Suffix) GetUserString() string {
	if t == nil || t.UserString == nil {
		return ""
	}
	return *t.UserString
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId_Suffix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId_Suffix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId_Suffix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId_Suffix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId_Suffix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId_Suffix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId_Suffix.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortId_Suffix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortType represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-nasreq-policy/nasreq/include-avp/nas-port-type YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortType struct {
	Type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortType_Type_Union `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortType) IsYANGGoStruct() {
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortType) GetType() NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortType_Type_Union {
	if t == nil || t.Type == nil {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortType_Type_Enum_rfc_aligned
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == nil {
		t.Type = NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortType_Type_Enum_rfc_aligned
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortType) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortType.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_IncludeAvp_NasPortType) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_UserName represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-nasreq-policy/nasreq/user-name YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_UserName struct {
	DomainName *string                                                                                       `path:"domain-name" module:"nokia-conf"`
	Format     E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_UserName_Format `path:"format" module:"nokia-conf"`
	Operation  E_NokiaTypesSubscriberMgmt_UserNameFormatDomainOperation                                      `path:"operation" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_UserName implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_UserName) IsYANGGoStruct() {
}

// GetDomainName retrieves the value of the leaf DomainName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_UserName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainName is set, it can
// safely use t.GetDomainName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_UserName) GetDomainName() string {
	if t == nil || t.DomainName == nil {
		return ""
	}
	return *t.DomainName
}

// GetFormat retrieves the value of the leaf Format from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_UserName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Format is set, it can
// safely use t.GetFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Format == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_UserName) GetFormat() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_UserName_Format {
	if t == nil || t.Format == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_UserName_Format_mac
	}
	return t.Format
}

// GetOperation retrieves the value of the leaf Operation from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_UserName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Operation is set, it can
// safely use t.GetOperation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Operation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_UserName) GetOperation() E_NokiaTypesSubscriberMgmt_UserNameFormatDomainOperation {
	if t == nil || t.Operation == 0 {
		return 0
	}
	return t.Operation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_UserName
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_UserName) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Format == 0 {
		t.Format = NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_UserName_Format_mac
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_UserName) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_UserName"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_UserName) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_UserName) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_UserName.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Nasreq_UserName) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Node represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-nasreq-policy/node YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Node struct {
	DestinationRealm *string `path:"destination-realm" module:"nokia-conf"`
	OriginHost       *string `path:"origin-host" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Node implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Node) IsYANGGoStruct() {}

// GetDestinationRealm retrieves the value of the leaf DestinationRealm from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Node
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationRealm is set, it can
// safely use t.GetDestinationRealm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationRealm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Node) GetDestinationRealm() string {
	if t == nil || t.DestinationRealm == nil {
		return ""
	}
	return *t.DestinationRealm
}

// GetOriginHost retrieves the value of the leaf OriginHost from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Node
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginHost is set, it can
// safely use t.GetOriginHost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginHost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Node) GetOriginHost() string {
	if t == nil || t.OriginHost == nil {
		return ""
	}
	return *t.OriginHost
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Node
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Node) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Node) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Node"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Node) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Node) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Node.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_Node) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_OnFailure represents the /nokia-conf/configure/groups/group/subscriber-mgmt/diameter-nasreq-policy/on-failure YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_OnFailure struct {
	Failover *bool                                                                                     `path:"failover" module:"nokia-conf"`
	Handling E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_OnFailure_Handling `path:"handling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_OnFailure implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_OnFailure) IsYANGGoStruct() {
}

// GetFailover retrieves the value of the leaf Failover from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_OnFailure
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Failover is set, it can
// safely use t.GetFailover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Failover == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_OnFailure) GetFailover() bool {
	if t == nil || t.Failover == nil {
		return true
	}
	return *t.Failover
}

// GetHandling retrieves the value of the leaf Handling from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_OnFailure
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Handling is set, it can
// safely use t.GetHandling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Handling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_OnFailure) GetHandling() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_OnFailure_Handling {
	if t == nil || t.Handling == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_OnFailure_Handling_terminate
	}
	return t.Handling
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_OnFailure
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_OnFailure) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Failover == nil {
		var v bool = true
		t.Failover = &v
	}
	if t.Handling == 0 {
		t.Handling = NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_OnFailure_Handling_terminate
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_OnFailure) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_OnFailure"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_OnFailure) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_OnFailure) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_OnFailure.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_DiameterNasreqPolicy_OnFailure) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap represents the /nokia-conf/configure/groups/group/subscriber-mgmt/explicit-subscriber-map YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap struct {
	Entry map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap) NewEntry(SubscriberId string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap_Entry)
	}

	key := SubscriberId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap_Entry{
		SubscriberId: &SubscriberId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap) RenameEntry(oldK, newK string) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.SubscriberId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap) GetOrCreateEntry(SubscriberId string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap_Entry {

	key := SubscriberId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(SubscriberId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap) GetEntry(SubscriberId string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap_Entry {

	if t == nil {
		return nil
	}

	key := SubscriberId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap) DeleteEntry(SubscriberId string) {
	key := SubscriberId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap) AppendEntry(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap_Entry) error {
	if v.SubscriberId == nil {
		return fmt.Errorf("invalid nil key received for SubscriberId")
	}

	key := *v.SubscriberId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap_Entry represents the /nokia-conf/configure/groups/group/subscriber-mgmt/explicit-subscriber-map/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap_Entry struct {
	Alias        *string `path:"alias" module:"nokia-conf"`
	AppProfile   *string `path:"app-profile" module:"nokia-conf"`
	SlaProfile   *string `path:"sla-profile" module:"nokia-conf"`
	SubProfile   *string `path:"sub-profile" module:"nokia-conf"`
	SubscriberId *string `path:"subscriber-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap_Entry) IsYANGGoStruct() {
}

// GetAlias retrieves the value of the leaf Alias from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Alias is set, it can
// safely use t.GetAlias() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Alias == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap_Entry) GetAlias() string {
	if t == nil || t.Alias == nil {
		return ""
	}
	return *t.Alias
}

// GetAppProfile retrieves the value of the leaf AppProfile from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfile is set, it can
// safely use t.GetAppProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap_Entry) GetAppProfile() string {
	if t == nil || t.AppProfile == nil {
		return ""
	}
	return *t.AppProfile
}

// GetSlaProfile retrieves the value of the leaf SlaProfile from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlaProfile is set, it can
// safely use t.GetSlaProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlaProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap_Entry) GetSlaProfile() string {
	if t == nil || t.SlaProfile == nil {
		return ""
	}
	return *t.SlaProfile
}

// GetSubProfile retrieves the value of the leaf SubProfile from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubProfile is set, it can
// safely use t.GetSubProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap_Entry) GetSubProfile() string {
	if t == nil || t.SubProfile == nil {
		return ""
	}
	return *t.SubProfile
}

// GetSubscriberId retrieves the value of the leaf SubscriberId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubscriberId is set, it can
// safely use t.GetSubscriberId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubscriberId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap_Entry) GetSubscriberId() string {
	if t == nil || t.SubscriberId == nil {
		return ""
	}
	return *t.SubscriberId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SubscriberId == nil {
		return nil, fmt.Errorf("nil value for key SubscriberId")
	}

	return map[string]interface{}{
		"subscriber-id": *t.SubscriberId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap_Entry.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_ExplicitSubscriberMap_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceStatistics represents the /nokia-conf/configure/groups/group/subscriber-mgmt/group-interface-statistics YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceStatistics struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceStatistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceStatistics) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceStatistics) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceStatistics
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceStatistics) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceStatistics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceStatistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceStatistics) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceStatistics) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceStatistics.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceStatistics) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate represents the /nokia-conf/configure/groups/group/subscriber-mgmt/group-interface-template YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate struct {
	Description *string                                                                      `path:"description" module:"nokia-conf"`
	IpMtu       *uint32                                                                      `path:"ip-mtu" module:"nokia-conf"`
	Ipv4        *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4 `path:"ipv4" module:"nokia-conf"`
	Ipv6        *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv6 `path:"ipv6" module:"nokia-conf"`
	Name        *string                                                                      `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate) GetOrCreateIpv6() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv6{}
	return t.Ipv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate) GetIpv4() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate) GetIpv6() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIpMtu retrieves the value of the leaf IpMtu from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpMtu is set, it can
// safely use t.GetIpMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate) GetIpMtu() uint32 {
	if t == nil || t.IpMtu == nil {
		return 0
	}
	return *t.IpMtu
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4 represents the /nokia-conf/configure/groups/group/subscriber-mgmt/group-interface-template/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4 struct {
	Icmp              *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp              `path:"icmp" module:"nokia-conf"`
	NeighborDiscovery *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_NeighborDiscovery `path:"neighbor-discovery" module:"nokia-conf"`
	UrpfCheck         *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_UrpfCheck         `path:"urpf-check" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4) IsYANGGoStruct() {
}

// GetOrCreateIcmp retrieves the value of the Icmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4) GetOrCreateIcmp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp {
	if t.Icmp != nil {
		return t.Icmp
	}
	t.Icmp = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp{}
	return t.Icmp
}

// GetOrCreateNeighborDiscovery retrieves the value of the NeighborDiscovery field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4) GetOrCreateNeighborDiscovery() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_NeighborDiscovery {
	if t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	t.NeighborDiscovery = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_NeighborDiscovery{}
	return t.NeighborDiscovery
}

// GetOrCreateUrpfCheck retrieves the value of the UrpfCheck field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4) GetOrCreateUrpfCheck() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_UrpfCheck {
	if t.UrpfCheck != nil {
		return t.UrpfCheck
	}
	t.UrpfCheck = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_UrpfCheck{}
	return t.UrpfCheck
}

// GetIcmp returns the value of the Icmp struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4. If the receiver or the field Icmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4) GetIcmp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp {
	if t != nil && t.Icmp != nil {
		return t.Icmp
	}
	return nil
}

// GetNeighborDiscovery returns the value of the NeighborDiscovery struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4. If the receiver or the field NeighborDiscovery is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4) GetNeighborDiscovery() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_NeighborDiscovery {
	if t != nil && t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	return nil
}

// GetUrpfCheck returns the value of the UrpfCheck struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4. If the receiver or the field UrpfCheck is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4) GetUrpfCheck() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_UrpfCheck {
	if t != nil && t.UrpfCheck != nil {
		return t.UrpfCheck
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Icmp.PopulateDefaults()
	t.NeighborDiscovery.PopulateDefaults()
	t.UrpfCheck.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp represents the /nokia-conf/configure/groups/group/subscriber-mgmt/group-interface-template/ipv4/icmp YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp struct {
	MaskReply    *bool                                                                                          `path:"mask-reply" module:"nokia-conf"`
	ParamProblem *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_ParamProblem `path:"param-problem" module:"nokia-conf"`
	Redirects    *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Redirects    `path:"redirects" module:"nokia-conf"`
	TtlExpired   *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_TtlExpired   `path:"ttl-expired" module:"nokia-conf"`
	Unreachables *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Unreachables `path:"unreachables" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp) IsYANGGoStruct() {
}

// GetOrCreateParamProblem retrieves the value of the ParamProblem field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp) GetOrCreateParamProblem() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_ParamProblem {
	if t.ParamProblem != nil {
		return t.ParamProblem
	}
	t.ParamProblem = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_ParamProblem{}
	return t.ParamProblem
}

// GetOrCreateRedirects retrieves the value of the Redirects field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp) GetOrCreateRedirects() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Redirects {
	if t.Redirects != nil {
		return t.Redirects
	}
	t.Redirects = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Redirects{}
	return t.Redirects
}

// GetOrCreateTtlExpired retrieves the value of the TtlExpired field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp) GetOrCreateTtlExpired() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_TtlExpired {
	if t.TtlExpired != nil {
		return t.TtlExpired
	}
	t.TtlExpired = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_TtlExpired{}
	return t.TtlExpired
}

// GetOrCreateUnreachables retrieves the value of the Unreachables field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp) GetOrCreateUnreachables() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Unreachables {
	if t.Unreachables != nil {
		return t.Unreachables
	}
	t.Unreachables = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Unreachables{}
	return t.Unreachables
}

// GetParamProblem returns the value of the ParamProblem struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp. If the receiver or the field ParamProblem is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp) GetParamProblem() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_ParamProblem {
	if t != nil && t.ParamProblem != nil {
		return t.ParamProblem
	}
	return nil
}

// GetRedirects returns the value of the Redirects struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp. If the receiver or the field Redirects is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp) GetRedirects() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Redirects {
	if t != nil && t.Redirects != nil {
		return t.Redirects
	}
	return nil
}

// GetTtlExpired returns the value of the TtlExpired struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp. If the receiver or the field TtlExpired is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp) GetTtlExpired() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_TtlExpired {
	if t != nil && t.TtlExpired != nil {
		return t.TtlExpired
	}
	return nil
}

// GetUnreachables returns the value of the Unreachables struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp. If the receiver or the field Unreachables is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp) GetUnreachables() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Unreachables {
	if t != nil && t.Unreachables != nil {
		return t.Unreachables
	}
	return nil
}

// GetMaskReply retrieves the value of the leaf MaskReply from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaskReply is set, it can
// safely use t.GetMaskReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaskReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp) GetMaskReply() bool {
	if t == nil || t.MaskReply == nil {
		return true
	}
	return *t.MaskReply
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaskReply == nil {
		var v bool = true
		t.MaskReply = &v
	}
	t.ParamProblem.PopulateDefaults()
	t.Redirects.PopulateDefaults()
	t.TtlExpired.PopulateDefaults()
	t.Unreachables.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_ParamProblem represents the /nokia-conf/configure/groups/group/subscriber-mgmt/group-interface-template/ipv4/icmp/param-problem YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_ParamProblem struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint32                     `path:"number" module:"nokia-conf"`
	Seconds    *uint32                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_ParamProblem implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_ParamProblem) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_ParamProblem
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_ParamProblem) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_ParamProblem
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_ParamProblem) GetNumber() uint32 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_ParamProblem
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_ParamProblem) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_ParamProblem
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_ParamProblem) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint32 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint32 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_ParamProblem) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_ParamProblem"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_ParamProblem) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_ParamProblem) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_ParamProblem.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_ParamProblem) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Redirects represents the /nokia-conf/configure/groups/group/subscriber-mgmt/group-interface-template/ipv4/icmp/redirects YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Redirects struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Redirects implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Redirects) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Redirects
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Redirects) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Redirects
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Redirects) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Redirects
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Redirects) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Redirects
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Redirects) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Redirects) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Redirects"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Redirects) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Redirects) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Redirects.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Redirects) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_TtlExpired represents the /nokia-conf/configure/groups/group/subscriber-mgmt/group-interface-template/ipv4/icmp/ttl-expired YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_TtlExpired struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_TtlExpired implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_TtlExpired) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_TtlExpired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_TtlExpired) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_TtlExpired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_TtlExpired) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_TtlExpired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_TtlExpired) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_TtlExpired
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_TtlExpired) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_TtlExpired) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_TtlExpired"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_TtlExpired) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_TtlExpired) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_TtlExpired.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_TtlExpired) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Unreachables represents the /nokia-conf/configure/groups/group/subscriber-mgmt/group-interface-template/ipv4/icmp/unreachables YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Unreachables struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Unreachables implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Unreachables) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Unreachables
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Unreachables) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Unreachables
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Unreachables) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Unreachables
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Unreachables) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Unreachables
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Unreachables) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Unreachables) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Unreachables"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Unreachables) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Unreachables) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Unreachables.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_Icmp_Unreachables) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_NeighborDiscovery represents the /nokia-conf/configure/groups/group/subscriber-mgmt/group-interface-template/ipv4/neighbor-discovery YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_NeighborDiscovery struct {
	ProxyArpPolicy []string `path:"proxy-arp-policy" module:"nokia-conf"`
	RemoteProxyArp *bool    `path:"remote-proxy-arp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_NeighborDiscovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_NeighborDiscovery) IsYANGGoStruct() {
}

// GetProxyArpPolicy retrieves the value of the leaf ProxyArpPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProxyArpPolicy is set, it can
// safely use t.GetProxyArpPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProxyArpPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_NeighborDiscovery) GetProxyArpPolicy() []string {
	if t == nil || t.ProxyArpPolicy == nil {
		return nil
	}
	return t.ProxyArpPolicy
}

// GetRemoteProxyArp retrieves the value of the leaf RemoteProxyArp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteProxyArp is set, it can
// safely use t.GetRemoteProxyArp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteProxyArp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_NeighborDiscovery) GetRemoteProxyArp() bool {
	if t == nil || t.RemoteProxyArp == nil {
		return false
	}
	return *t.RemoteProxyArp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_NeighborDiscovery
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_NeighborDiscovery) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RemoteProxyArp == nil {
		var v bool = false
		t.RemoteProxyArp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_NeighborDiscovery) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_NeighborDiscovery"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_NeighborDiscovery) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_NeighborDiscovery) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_NeighborDiscovery.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_NeighborDiscovery) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_UrpfCheck represents the /nokia-conf/configure/groups/group/subscriber-mgmt/group-interface-template/ipv4/urpf-check YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_UrpfCheck struct {
	Mode E_NokiaTypesRouter_UrpfCheckMode `path:"mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_UrpfCheck implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_UrpfCheck) IsYANGGoStruct() {
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_UrpfCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_UrpfCheck) GetMode() E_NokiaTypesRouter_UrpfCheckMode {
	if t == nil || t.Mode == 0 {
		return NokiaTypesRouter_UrpfCheckMode_strict
	}
	return t.Mode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_UrpfCheck
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_UrpfCheck) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mode == 0 {
		t.Mode = NokiaTypesRouter_UrpfCheckMode_strict
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_UrpfCheck) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_UrpfCheck"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_UrpfCheck) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_UrpfCheck) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_UrpfCheck.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv4_UrpfCheck) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv6 represents the /nokia-conf/configure/groups/group/subscriber-mgmt/group-interface-template/ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv6 struct {
	UrpfCheck *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv6_UrpfCheck `path:"urpf-check" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv6) IsYANGGoStruct() {
}

// GetOrCreateUrpfCheck retrieves the value of the UrpfCheck field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv6) GetOrCreateUrpfCheck() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv6_UrpfCheck {
	if t.UrpfCheck != nil {
		return t.UrpfCheck
	}
	t.UrpfCheck = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv6_UrpfCheck{}
	return t.UrpfCheck
}

// GetUrpfCheck returns the value of the UrpfCheck struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv6. If the receiver or the field UrpfCheck is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv6) GetUrpfCheck() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv6_UrpfCheck {
	if t != nil && t.UrpfCheck != nil {
		return t.UrpfCheck
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.UrpfCheck.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv6.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv6_UrpfCheck represents the /nokia-conf/configure/groups/group/subscriber-mgmt/group-interface-template/ipv6/urpf-check YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv6_UrpfCheck struct {
	Mode E_NokiaTypesRouter_UrpfCheckMode `path:"mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv6_UrpfCheck implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv6_UrpfCheck) IsYANGGoStruct() {
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv6_UrpfCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv6_UrpfCheck) GetMode() E_NokiaTypesRouter_UrpfCheckMode {
	if t == nil || t.Mode == 0 {
		return NokiaTypesRouter_UrpfCheckMode_strict
	}
	return t.Mode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv6_UrpfCheck
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv6_UrpfCheck) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mode == 0 {
		t.Mode = NokiaTypesRouter_UrpfCheckMode_strict
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv6_UrpfCheck) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv6_UrpfCheck"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv6_UrpfCheck) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv6_UrpfCheck) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv6_UrpfCheck.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_GroupInterfaceTemplate_Ipv6_UrpfCheck) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp represents the /nokia-conf/configure/groups/group/subscriber-mgmt/gtp YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp struct {
	ApnPolicy             map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy   `path:"apn-policy" module:"nokia-conf"`
	MaxHeldUplinkSessions *uint32                                                                     `path:"max-held-uplink-sessions" module:"nokia-conf"`
	PeerProfile           map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile `path:"peer-profile" module:"nokia-conf"`
	ServingNetwork        *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ServingNetwork         `path:"serving-network" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp) IsYANGGoStruct() {}

// NewApnPolicy creates a new entry in the ApnPolicy list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp) NewApnPolicy(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ApnPolicy == nil {
		t.ApnPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ApnPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ApnPolicy", key)
	}

	t.ApnPolicy[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy{
		Name: &Name,
	}

	return t.ApnPolicy[key], nil
}

// RenameApnPolicy renames an entry in the list ApnPolicy within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp) RenameApnPolicy(oldK, newK string) error {
	if _, ok := t.ApnPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in ApnPolicy", newK)
	}

	e, ok := t.ApnPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ApnPolicy", oldK)
	}
	e.Name = &newK

	t.ApnPolicy[newK] = e
	delete(t.ApnPolicy, oldK)
	return nil
}

// GetOrCreateApnPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp) GetOrCreateApnPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy {

	key := Name

	if v, ok := t.ApnPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewApnPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateApnPolicy got unexpected error: %v", err))
	}
	return v
}

// GetApnPolicy retrieves the value with the specified key from
// the ApnPolicy map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp) GetApnPolicy(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.ApnPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteApnPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp) DeleteApnPolicy(Name string) {
	key := Name

	delete(t.ApnPolicy, key)
}

// AppendApnPolicy appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy struct to the
// list ApnPolicy of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp) AppendApnPolicy(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ApnPolicy == nil {
		t.ApnPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy)
	}

	if _, ok := t.ApnPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list ApnPolicy %v", key)
	}

	t.ApnPolicy[key] = v
	return nil
}

// NewPeerProfile creates a new entry in the PeerProfile list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp) NewPeerProfile(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PeerProfile == nil {
		t.PeerProfile = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PeerProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PeerProfile", key)
	}

	t.PeerProfile[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile{
		Name: &Name,
	}

	return t.PeerProfile[key], nil
}

// RenamePeerProfile renames an entry in the list PeerProfile within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp) RenamePeerProfile(oldK, newK string) error {
	if _, ok := t.PeerProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in PeerProfile", newK)
	}

	e, ok := t.PeerProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PeerProfile", oldK)
	}
	e.Name = &newK

	t.PeerProfile[newK] = e
	delete(t.PeerProfile, oldK)
	return nil
}

// GetOrCreatePeerProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp) GetOrCreatePeerProfile(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile {

	key := Name

	if v, ok := t.PeerProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeerProfile(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeerProfile got unexpected error: %v", err))
	}
	return v
}

// GetPeerProfile retrieves the value with the specified key from
// the PeerProfile map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp) GetPeerProfile(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PeerProfile[key]; ok {
		return lm
	}
	return nil
}

// DeletePeerProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp) DeletePeerProfile(Name string) {
	key := Name

	delete(t.PeerProfile, key)
}

// AppendPeerProfile appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile struct to the
// list PeerProfile of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp) AppendPeerProfile(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PeerProfile == nil {
		t.PeerProfile = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile)
	}

	if _, ok := t.PeerProfile[key]; ok {
		return fmt.Errorf("duplicate key for list PeerProfile %v", key)
	}

	t.PeerProfile[key] = v
	return nil
}

// GetOrCreateServingNetwork retrieves the value of the ServingNetwork field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp) GetOrCreateServingNetwork() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ServingNetwork {
	if t.ServingNetwork != nil {
		return t.ServingNetwork
	}
	t.ServingNetwork = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ServingNetwork{}
	return t.ServingNetwork
}

// GetServingNetwork returns the value of the ServingNetwork struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp. If the receiver or the field ServingNetwork is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp) GetServingNetwork() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ServingNetwork {
	if t != nil && t.ServingNetwork != nil {
		return t.ServingNetwork
	}
	return nil
}

// GetMaxHeldUplinkSessions retrieves the value of the leaf MaxHeldUplinkSessions from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxHeldUplinkSessions is set, it can
// safely use t.GetMaxHeldUplinkSessions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxHeldUplinkSessions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp) GetMaxHeldUplinkSessions() uint32 {
	if t == nil || t.MaxHeldUplinkSessions == nil {
		return 2000
	}
	return *t.MaxHeldUplinkSessions
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxHeldUplinkSessions == nil {
		var v uint32 = 2000
		t.MaxHeldUplinkSessions = &v
	}
	t.ServingNetwork.PopulateDefaults()
	for _, e := range t.ApnPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.PeerProfile {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy represents the /nokia-conf/configure/groups/group/subscriber-mgmt/gtp/apn-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy struct {
	Apn  map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn `path:"apn" module:"nokia-conf"`
	Name *string                                                                       `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy) IsYANGGoStruct() {}

// NewApn creates a new entry in the Apn list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy) NewApn(ApnName string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Apn == nil {
		t.Apn = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn)
	}

	key := ApnName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Apn[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Apn", key)
	}

	t.Apn[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn{
		ApnName: &ApnName,
	}

	return t.Apn[key], nil
}

// RenameApn renames an entry in the list Apn within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy) RenameApn(oldK, newK string) error {
	if _, ok := t.Apn[newK]; ok {
		return fmt.Errorf("key %v already exists in Apn", newK)
	}

	e, ok := t.Apn[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Apn", oldK)
	}
	e.ApnName = &newK

	t.Apn[newK] = e
	delete(t.Apn, oldK)
	return nil
}

// GetOrCreateApn retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy) GetOrCreateApn(ApnName string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn {

	key := ApnName

	if v, ok := t.Apn[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewApn(ApnName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateApn got unexpected error: %v", err))
	}
	return v
}

// GetApn retrieves the value with the specified key from
// the Apn map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy) GetApn(ApnName string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn {

	if t == nil {
		return nil
	}

	key := ApnName

	if lm, ok := t.Apn[key]; ok {
		return lm
	}
	return nil
}

// DeleteApn deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy) DeleteApn(ApnName string) {
	key := ApnName

	delete(t.Apn, key)
}

// AppendApn appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn struct to the
// list Apn of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy) AppendApn(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn) error {
	if v.ApnName == nil {
		return fmt.Errorf("invalid nil key received for ApnName")
	}

	key := *v.ApnName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Apn == nil {
		t.Apn = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn)
	}

	if _, ok := t.Apn[key]; ok {
		return fmt.Errorf("duplicate key for list Apn %v", key)
	}

	t.Apn[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Apn {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn represents the /nokia-conf/configure/groups/group/subscriber-mgmt/gtp/apn-policy/apn YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn struct {
	AmbrQosMapping        *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping `path:"ambr-qos-mapping" module:"nokia-conf" yangPresence:"true"`
	ApnName               *string                                                                           `path:"apn-name" module:"nokia-conf"`
	Defaults              *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults       `path:"defaults" module:"nokia-conf"`
	DiameterNasreqPolicy  *string                                                                           `path:"diameter-nasreq-policy" module:"nokia-conf"`
	RadiusAuthPolicy      *string                                                                           `path:"radius-auth-policy" module:"nokia-conf"`
	SkipGtpIpv4Allocation *bool                                                                             `path:"skip-gtp-ipv4-allocation" module:"nokia-conf"`
	UserDb                *string                                                                           `path:"user-db" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn) IsYANGGoStruct() {}

// GetOrCreateAmbrQosMapping retrieves the value of the AmbrQosMapping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn) GetOrCreateAmbrQosMapping() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping {
	if t.AmbrQosMapping != nil {
		return t.AmbrQosMapping
	}
	t.AmbrQosMapping = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping{}
	return t.AmbrQosMapping
}

// GetOrCreateDefaults retrieves the value of the Defaults field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn) GetOrCreateDefaults() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults {
	if t.Defaults != nil {
		return t.Defaults
	}
	t.Defaults = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults{}
	return t.Defaults
}

// GetAmbrQosMapping returns the value of the AmbrQosMapping struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn. If the receiver or the field AmbrQosMapping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn) GetAmbrQosMapping() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping {
	if t != nil && t.AmbrQosMapping != nil {
		return t.AmbrQosMapping
	}
	return nil
}

// GetDefaults returns the value of the Defaults struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn. If the receiver or the field Defaults is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn) GetDefaults() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults {
	if t != nil && t.Defaults != nil {
		return t.Defaults
	}
	return nil
}

// GetApnName retrieves the value of the leaf ApnName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApnName is set, it can
// safely use t.GetApnName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApnName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn) GetApnName() string {
	if t == nil || t.ApnName == nil {
		return ""
	}
	return *t.ApnName
}

// GetDiameterNasreqPolicy retrieves the value of the leaf DiameterNasreqPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiameterNasreqPolicy is set, it can
// safely use t.GetDiameterNasreqPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiameterNasreqPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn) GetDiameterNasreqPolicy() string {
	if t == nil || t.DiameterNasreqPolicy == nil {
		return ""
	}
	return *t.DiameterNasreqPolicy
}

// GetRadiusAuthPolicy retrieves the value of the leaf RadiusAuthPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusAuthPolicy is set, it can
// safely use t.GetRadiusAuthPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusAuthPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn) GetRadiusAuthPolicy() string {
	if t == nil || t.RadiusAuthPolicy == nil {
		return ""
	}
	return *t.RadiusAuthPolicy
}

// GetSkipGtpIpv4Allocation retrieves the value of the leaf SkipGtpIpv4Allocation from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SkipGtpIpv4Allocation is set, it can
// safely use t.GetSkipGtpIpv4Allocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SkipGtpIpv4Allocation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn) GetSkipGtpIpv4Allocation() bool {
	if t == nil || t.SkipGtpIpv4Allocation == nil {
		return false
	}
	return *t.SkipGtpIpv4Allocation
}

// GetUserDb retrieves the value of the leaf UserDb from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserDb is set, it can
// safely use t.GetUserDb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserDb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn) GetUserDb() string {
	if t == nil || t.UserDb == nil {
		return ""
	}
	return *t.UserDb
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SkipGtpIpv4Allocation == nil {
		var v bool = false
		t.SkipGtpIpv4Allocation = &v
	}
	t.AmbrQosMapping.PopulateDefaults()
	t.Defaults.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ApnName == nil {
		return nil, fmt.Errorf("nil value for key ApnName")
	}

	return map[string]interface{}{
		"apn-name": *t.ApnName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping represents the /nokia-conf/configure/groups/group/subscriber-mgmt/gtp/apn-policy/apn/ambr-qos-mapping YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping struct {
	Downlink *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Downlink `path:"downlink" module:"nokia-conf" yangPresence:"true"`
	Uplink   *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Uplink   `path:"uplink" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping) IsYANGGoStruct() {
}

// GetOrCreateDownlink retrieves the value of the Downlink field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping) GetOrCreateDownlink() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Downlink {
	if t.Downlink != nil {
		return t.Downlink
	}
	t.Downlink = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Downlink{}
	return t.Downlink
}

// GetOrCreateUplink retrieves the value of the Uplink field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping) GetOrCreateUplink() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Uplink {
	if t.Uplink != nil {
		return t.Uplink
	}
	t.Uplink = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Uplink{}
	return t.Uplink
}

// GetDownlink returns the value of the Downlink struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping. If the receiver or the field Downlink is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping) GetDownlink() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Downlink {
	if t != nil && t.Downlink != nil {
		return t.Downlink
	}
	return nil
}

// GetUplink returns the value of the Uplink struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping. If the receiver or the field Uplink is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping) GetUplink() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Uplink {
	if t != nil && t.Uplink != nil {
		return t.Uplink
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Downlink.PopulateDefaults()
	t.Uplink.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Downlink represents the /nokia-conf/configure/groups/group/subscriber-mgmt/gtp/apn-policy/apn/ambr-qos-mapping/downlink YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Downlink struct {
	AggregateRate YANGEmpty `path:"aggregate-rate" module:"nokia-conf"`
	Arbiter       *string   `path:"arbiter" module:"nokia-conf"`
	Policer       *int32    `path:"policer" module:"nokia-conf"`
	Queue         *int32    `path:"queue" module:"nokia-conf"`
	Scheduler     *string   `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Downlink implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Downlink) IsYANGGoStruct() {
}

// GetAggregateRate retrieves the value of the leaf AggregateRate from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Downlink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AggregateRate is set, it can
// safely use t.GetAggregateRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AggregateRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Downlink) GetAggregateRate() YANGEmpty {
	if t == nil || t.AggregateRate == false {
		return false
	}
	return t.AggregateRate
}

// GetArbiter retrieves the value of the leaf Arbiter from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Downlink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Arbiter is set, it can
// safely use t.GetArbiter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Arbiter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Downlink) GetArbiter() string {
	if t == nil || t.Arbiter == nil {
		return ""
	}
	return *t.Arbiter
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Downlink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Downlink) GetPolicer() int32 {
	if t == nil || t.Policer == nil {
		return 0
	}
	return *t.Policer
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Downlink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Downlink) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// GetScheduler retrieves the value of the leaf Scheduler from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Downlink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scheduler is set, it can
// safely use t.GetScheduler() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scheduler == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Downlink) GetScheduler() string {
	if t == nil || t.Scheduler == nil {
		return ""
	}
	return *t.Scheduler
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Downlink
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Downlink) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Downlink) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Downlink"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Downlink) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Downlink) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Downlink.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Downlink) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Uplink represents the /nokia-conf/configure/groups/group/subscriber-mgmt/gtp/apn-policy/apn/ambr-qos-mapping/uplink YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Uplink struct {
	Arbiter   *string `path:"arbiter" module:"nokia-conf"`
	Policer   *int32  `path:"policer" module:"nokia-conf"`
	Queue     *int32  `path:"queue" module:"nokia-conf"`
	Scheduler *string `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Uplink implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Uplink) IsYANGGoStruct() {
}

// GetArbiter retrieves the value of the leaf Arbiter from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Uplink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Arbiter is set, it can
// safely use t.GetArbiter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Arbiter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Uplink) GetArbiter() string {
	if t == nil || t.Arbiter == nil {
		return ""
	}
	return *t.Arbiter
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Uplink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Uplink) GetPolicer() int32 {
	if t == nil || t.Policer == nil {
		return 0
	}
	return *t.Policer
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Uplink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Uplink) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// GetScheduler retrieves the value of the leaf Scheduler from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Uplink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scheduler is set, it can
// safely use t.GetScheduler() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scheduler == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Uplink) GetScheduler() string {
	if t == nil || t.Scheduler == nil {
		return ""
	}
	return *t.Scheduler
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Uplink
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Uplink) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Uplink) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Uplink"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Uplink) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Uplink) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Uplink.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_AmbrQosMapping_Uplink) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults represents the /nokia-conf/configure/groups/group/subscriber-mgmt/gtp/apn-policy/apn/defaults YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults struct {
	GroupInterface *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults_GroupInterface `path:"group-interface" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults) IsYANGGoStruct() {}

// GetOrCreateGroupInterface retrieves the value of the GroupInterface field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults) GetOrCreateGroupInterface() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults_GroupInterface {
	if t.GroupInterface != nil {
		return t.GroupInterface
	}
	t.GroupInterface = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults_GroupInterface{}
	return t.GroupInterface
}

// GetGroupInterface returns the value of the GroupInterface struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults. If the receiver or the field GroupInterface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults) GetGroupInterface() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults_GroupInterface {
	if t != nil && t.GroupInterface != nil {
		return t.GroupInterface
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.GroupInterface.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults_GroupInterface represents the /nokia-conf/configure/groups/group/subscriber-mgmt/gtp/apn-policy/apn/defaults/group-interface YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults_GroupInterface struct {
	Name    *string `path:"name" module:"nokia-conf"`
	SvcName *string `path:"svc-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults_GroupInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults_GroupInterface) IsYANGGoStruct() {
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults_GroupInterface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetSvcName retrieves the value of the leaf SvcName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SvcName is set, it can
// safely use t.GetSvcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SvcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults_GroupInterface) GetSvcName() string {
	if t == nil || t.SvcName == nil {
		return ""
	}
	return *t.SvcName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults_GroupInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults_GroupInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults_GroupInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults_GroupInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults_GroupInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults_GroupInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults_GroupInterface.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ApnPolicy_Apn_Defaults_GroupInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile represents the /nokia-conf/configure/groups/group/subscriber-mgmt/gtp/peer-profile YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile struct {
	Description       *string                                                                            `path:"description" module:"nokia-conf"`
	InterfaceType     E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_InterfaceType    `path:"interface-type" module:"nokia-conf"`
	IpTtl             *uint8                                                                             `path:"ip-ttl" module:"nokia-conf"`
	KeepAlive         *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_KeepAlive         `path:"keep-alive" module:"nokia-conf"`
	MessageRetransmit *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_MessageRetransmit `path:"message-retransmit" module:"nokia-conf"`
	Name              *string                                                                            `path:"name" module:"nokia-conf"`
	PythonPolicy      *string                                                                            `path:"python-policy" module:"nokia-conf"`
	S11               *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11               `path:"s11" module:"nokia-conf"`
	Uplink            *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink            `path:"uplink" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile) IsYANGGoStruct() {}

// GetOrCreateKeepAlive retrieves the value of the KeepAlive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile) GetOrCreateKeepAlive() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_KeepAlive {
	if t.KeepAlive != nil {
		return t.KeepAlive
	}
	t.KeepAlive = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_KeepAlive{}
	return t.KeepAlive
}

// GetOrCreateMessageRetransmit retrieves the value of the MessageRetransmit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile) GetOrCreateMessageRetransmit() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_MessageRetransmit {
	if t.MessageRetransmit != nil {
		return t.MessageRetransmit
	}
	t.MessageRetransmit = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_MessageRetransmit{}
	return t.MessageRetransmit
}

// GetOrCreateS11 retrieves the value of the S11 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile) GetOrCreateS11() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11 {
	if t.S11 != nil {
		return t.S11
	}
	t.S11 = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11{}
	return t.S11
}

// GetOrCreateUplink retrieves the value of the Uplink field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile) GetOrCreateUplink() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink {
	if t.Uplink != nil {
		return t.Uplink
	}
	t.Uplink = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink{}
	return t.Uplink
}

// GetKeepAlive returns the value of the KeepAlive struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile. If the receiver or the field KeepAlive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile) GetKeepAlive() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_KeepAlive {
	if t != nil && t.KeepAlive != nil {
		return t.KeepAlive
	}
	return nil
}

// GetMessageRetransmit returns the value of the MessageRetransmit struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile. If the receiver or the field MessageRetransmit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile) GetMessageRetransmit() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_MessageRetransmit {
	if t != nil && t.MessageRetransmit != nil {
		return t.MessageRetransmit
	}
	return nil
}

// GetS11 returns the value of the S11 struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile. If the receiver or the field S11 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile) GetS11() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11 {
	if t != nil && t.S11 != nil {
		return t.S11
	}
	return nil
}

// GetUplink returns the value of the Uplink struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile. If the receiver or the field Uplink is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile) GetUplink() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink {
	if t != nil && t.Uplink != nil {
		return t.Uplink
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetInterfaceType retrieves the value of the leaf InterfaceType from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceType is set, it can
// safely use t.GetInterfaceType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile) GetInterfaceType() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_InterfaceType {
	if t == nil || t.InterfaceType == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_InterfaceType_s2a
	}
	return t.InterfaceType
}

// GetIpTtl retrieves the value of the leaf IpTtl from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpTtl is set, it can
// safely use t.GetIpTtl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpTtl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile) GetIpTtl() uint8 {
	if t == nil || t.IpTtl == nil {
		return 255
	}
	return *t.IpTtl
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InterfaceType == 0 {
		t.InterfaceType = NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_InterfaceType_s2a
	}
	if t.IpTtl == nil {
		var v uint8 = 255
		t.IpTtl = &v
	}
	t.KeepAlive.PopulateDefaults()
	t.MessageRetransmit.PopulateDefaults()
	t.S11.PopulateDefaults()
	t.Uplink.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_KeepAlive represents the /nokia-conf/configure/groups/group/subscriber-mgmt/gtp/peer-profile/keep-alive YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_KeepAlive struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Interval   *uint32                     `path:"interval" module:"nokia-conf"`
	RetryCount *uint32                     `path:"retry-count" module:"nokia-conf"`
	Timeout    *uint32                     `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_KeepAlive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_KeepAlive) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_KeepAlive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_KeepAlive) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_KeepAlive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_KeepAlive) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 60
	}
	return *t.Interval
}

// GetRetryCount retrieves the value of the leaf RetryCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_KeepAlive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetryCount is set, it can
// safely use t.GetRetryCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetryCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_KeepAlive) GetRetryCount() uint32 {
	if t == nil || t.RetryCount == nil {
		return 4
	}
	return *t.RetryCount
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_KeepAlive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_KeepAlive) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 5
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_KeepAlive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_KeepAlive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Interval == nil {
		var v uint32 = 60
		t.Interval = &v
	}
	if t.RetryCount == nil {
		var v uint32 = 4
		t.RetryCount = &v
	}
	if t.Timeout == nil {
		var v uint32 = 5
		t.Timeout = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_KeepAlive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_KeepAlive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_KeepAlive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_KeepAlive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_KeepAlive.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_KeepAlive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_MessageRetransmit represents the /nokia-conf/configure/groups/group/subscriber-mgmt/gtp/peer-profile/message-retransmit YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_MessageRetransmit struct {
	RetryCount *uint32 `path:"retry-count" module:"nokia-conf"`
	Timeout    *uint32 `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_MessageRetransmit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_MessageRetransmit) IsYANGGoStruct() {
}

// GetRetryCount retrieves the value of the leaf RetryCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_MessageRetransmit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetryCount is set, it can
// safely use t.GetRetryCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetryCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_MessageRetransmit) GetRetryCount() uint32 {
	if t == nil || t.RetryCount == nil {
		return 3
	}
	return *t.RetryCount
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_MessageRetransmit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_MessageRetransmit) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 5
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_MessageRetransmit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_MessageRetransmit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RetryCount == nil {
		var v uint32 = 3
		t.RetryCount = &v
	}
	if t.Timeout == nil {
		var v uint32 = 5
		t.Timeout = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_MessageRetransmit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_MessageRetransmit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_MessageRetransmit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_MessageRetransmit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_MessageRetransmit.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_MessageRetransmit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11 represents the /nokia-conf/configure/groups/group/subscriber-mgmt/gtp/peer-profile/s11 YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11 struct {
	ChangeReportingAction NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_ChangeReportingAction_Union `path:"change-reporting-action" module:"nokia-conf"`
	EndMarkerCount        *uint32                                                                                         `path:"end-marker-count" module:"nokia-conf"`
	Ipv4Mtu               *uint32                                                                                         `path:"ipv4-mtu" module:"nokia-conf"`
	Qos                   *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos                        `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11) IsYANGGoStruct() {}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos{}
	return t.Qos
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11) GetQos() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetChangeReportingAction retrieves the value of the leaf ChangeReportingAction from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ChangeReportingAction is set, it can
// safely use t.GetChangeReportingAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ChangeReportingAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11) GetChangeReportingAction() NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_ChangeReportingAction_Union {
	if t == nil || t.ChangeReportingAction == nil {
		return nil
	}
	return t.ChangeReportingAction
}

// GetEndMarkerCount retrieves the value of the leaf EndMarkerCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndMarkerCount is set, it can
// safely use t.GetEndMarkerCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndMarkerCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11) GetEndMarkerCount() uint32 {
	if t == nil || t.EndMarkerCount == nil {
		return 1
	}
	return *t.EndMarkerCount
}

// GetIpv4Mtu retrieves the value of the leaf Ipv4Mtu from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Mtu is set, it can
// safely use t.GetIpv4Mtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11) GetIpv4Mtu() uint32 {
	if t == nil || t.Ipv4Mtu == nil {
		return 1400
	}
	return *t.Ipv4Mtu
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EndMarkerCount == nil {
		var v uint32 = 1
		t.EndMarkerCount = &v
	}
	if t.Ipv4Mtu == nil {
		var v uint32 = 1400
		t.Ipv4Mtu = &v
	}
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos represents the /nokia-conf/configure/groups/group/subscriber-mgmt/gtp/peer-profile/s11/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos struct {
	Ambr     *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_Ambr     `path:"ambr" module:"nokia-conf"`
	Arp      *uint32                                                                           `path:"arp" module:"nokia-conf"`
	DownLink *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_DownLink `path:"down-link" module:"nokia-conf"`
	Qci      *uint32                                                                           `path:"qci" module:"nokia-conf"`
	UpLink   *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_UpLink   `path:"up-link" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos) IsYANGGoStruct() {}

// GetOrCreateAmbr retrieves the value of the Ambr field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos) GetOrCreateAmbr() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_Ambr {
	if t.Ambr != nil {
		return t.Ambr
	}
	t.Ambr = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_Ambr{}
	return t.Ambr
}

// GetOrCreateDownLink retrieves the value of the DownLink field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos) GetOrCreateDownLink() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_DownLink {
	if t.DownLink != nil {
		return t.DownLink
	}
	t.DownLink = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_DownLink{}
	return t.DownLink
}

// GetOrCreateUpLink retrieves the value of the UpLink field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos) GetOrCreateUpLink() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_UpLink {
	if t.UpLink != nil {
		return t.UpLink
	}
	t.UpLink = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_UpLink{}
	return t.UpLink
}

// GetAmbr returns the value of the Ambr struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos. If the receiver or the field Ambr is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos) GetAmbr() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_Ambr {
	if t != nil && t.Ambr != nil {
		return t.Ambr
	}
	return nil
}

// GetDownLink returns the value of the DownLink struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos. If the receiver or the field DownLink is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos) GetDownLink() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_DownLink {
	if t != nil && t.DownLink != nil {
		return t.DownLink
	}
	return nil
}

// GetUpLink returns the value of the UpLink struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos. If the receiver or the field UpLink is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos) GetUpLink() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_UpLink {
	if t != nil && t.UpLink != nil {
		return t.UpLink
	}
	return nil
}

// GetArp retrieves the value of the leaf Arp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Arp is set, it can
// safely use t.GetArp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Arp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos) GetArp() uint32 {
	if t == nil || t.Arp == nil {
		return 1
	}
	return *t.Arp
}

// GetQci retrieves the value of the leaf Qci from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Qci is set, it can
// safely use t.GetQci() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Qci == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos) GetQci() uint32 {
	if t == nil || t.Qci == nil {
		return 8
	}
	return *t.Qci
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Arp == nil {
		var v uint32 = 1
		t.Arp = &v
	}
	if t.Qci == nil {
		var v uint32 = 8
		t.Qci = &v
	}
	t.Ambr.PopulateDefaults()
	t.DownLink.PopulateDefaults()
	t.UpLink.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_Ambr represents the /nokia-conf/configure/groups/group/subscriber-mgmt/gtp/peer-profile/s11/qos/ambr YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_Ambr struct {
	DownLink *int32 `path:"down-link" module:"nokia-conf"`
	UpLink   *int32 `path:"up-link" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_Ambr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_Ambr) IsYANGGoStruct() {
}

// GetDownLink retrieves the value of the leaf DownLink from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_Ambr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DownLink is set, it can
// safely use t.GetDownLink() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DownLink == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_Ambr) GetDownLink() int32 {
	if t == nil || t.DownLink == nil {
		return 20000
	}
	return *t.DownLink
}

// GetUpLink retrieves the value of the leaf UpLink from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_Ambr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UpLink is set, it can
// safely use t.GetUpLink() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UpLink == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_Ambr) GetUpLink() int32 {
	if t == nil || t.UpLink == nil {
		return 10000
	}
	return *t.UpLink
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_Ambr
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_Ambr) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DownLink == nil {
		var v int32 = 20000
		t.DownLink = &v
	}
	if t.UpLink == nil {
		var v int32 = 10000
		t.UpLink = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_Ambr) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_Ambr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_Ambr) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_Ambr) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_Ambr.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_Ambr) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_DownLink represents the /nokia-conf/configure/groups/group/subscriber-mgmt/gtp/peer-profile/s11/qos/down-link YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_DownLink struct {
	Gbr *uint32 `path:"gbr" module:"nokia-conf"`
	Mbr *uint32 `path:"mbr" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_DownLink implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_DownLink) IsYANGGoStruct() {
}

// GetGbr retrieves the value of the leaf Gbr from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_DownLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gbr is set, it can
// safely use t.GetGbr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gbr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_DownLink) GetGbr() uint32 {
	if t == nil || t.Gbr == nil {
		return 0
	}
	return *t.Gbr
}

// GetMbr retrieves the value of the leaf Mbr from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_DownLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbr is set, it can
// safely use t.GetMbr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_DownLink) GetMbr() uint32 {
	if t == nil || t.Mbr == nil {
		return 0
	}
	return *t.Mbr
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_DownLink
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_DownLink) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Gbr == nil {
		var v uint32 = 0
		t.Gbr = &v
	}
	if t.Mbr == nil {
		var v uint32 = 0
		t.Mbr = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_DownLink) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_DownLink"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_DownLink) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_DownLink) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_DownLink.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_DownLink) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_UpLink represents the /nokia-conf/configure/groups/group/subscriber-mgmt/gtp/peer-profile/s11/qos/up-link YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_UpLink struct {
	Gbr *uint32 `path:"gbr" module:"nokia-conf"`
	Mbr *uint32 `path:"mbr" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_UpLink implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_UpLink) IsYANGGoStruct() {
}

// GetGbr retrieves the value of the leaf Gbr from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_UpLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gbr is set, it can
// safely use t.GetGbr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gbr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_UpLink) GetGbr() uint32 {
	if t == nil || t.Gbr == nil {
		return 0
	}
	return *t.Gbr
}

// GetMbr retrieves the value of the leaf Mbr from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_UpLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbr is set, it can
// safely use t.GetMbr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_UpLink) GetMbr() uint32 {
	if t == nil || t.Mbr == nil {
		return 0
	}
	return *t.Mbr
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_UpLink
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_UpLink) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Gbr == nil {
		var v uint32 = 0
		t.Gbr = &v
	}
	if t.Mbr == nil {
		var v uint32 = 0
		t.Mbr = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_UpLink) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_UpLink"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_UpLink) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_UpLink) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_UpLink.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_S11_Qos_UpLink) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink represents the /nokia-conf/configure/groups/group/subscriber-mgmt/gtp/peer-profile/uplink YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink struct {
	ChargingCharacteristics      *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics       `path:"charging-characteristics" module:"nokia-conf"`
	Ggsn                         *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn                          `path:"ggsn" module:"nokia-conf"`
	Pgw                          *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw                           `path:"pgw" module:"nokia-conf"`
	ProtocolConfigurationOptions E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ProtocolConfigurationOptions `path:"protocol-configuration-options" module:"nokia-conf"`
	RatType                      NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_RatType_Union                  `path:"rat-type" module:"nokia-conf"`
	ReportWlanLocation           *bool                                                                                                 `path:"report-wlan-location" module:"nokia-conf"`
	SessionHoldTime              NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_SessionHoldTime_Union          `path:"session-hold-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink) IsYANGGoStruct() {}

// GetOrCreateChargingCharacteristics retrieves the value of the ChargingCharacteristics field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink) GetOrCreateChargingCharacteristics() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics {
	if t.ChargingCharacteristics != nil {
		return t.ChargingCharacteristics
	}
	t.ChargingCharacteristics = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics{}
	return t.ChargingCharacteristics
}

// GetOrCreateGgsn retrieves the value of the Ggsn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink) GetOrCreateGgsn() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn {
	if t.Ggsn != nil {
		return t.Ggsn
	}
	t.Ggsn = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn{}
	return t.Ggsn
}

// GetOrCreatePgw retrieves the value of the Pgw field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink) GetOrCreatePgw() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw {
	if t.Pgw != nil {
		return t.Pgw
	}
	t.Pgw = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw{}
	return t.Pgw
}

// GetChargingCharacteristics returns the value of the ChargingCharacteristics struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink. If the receiver or the field ChargingCharacteristics is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink) GetChargingCharacteristics() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics {
	if t != nil && t.ChargingCharacteristics != nil {
		return t.ChargingCharacteristics
	}
	return nil
}

// GetGgsn returns the value of the Ggsn struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink. If the receiver or the field Ggsn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink) GetGgsn() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn {
	if t != nil && t.Ggsn != nil {
		return t.Ggsn
	}
	return nil
}

// GetPgw returns the value of the Pgw struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink. If the receiver or the field Pgw is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink) GetPgw() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw {
	if t != nil && t.Pgw != nil {
		return t.Pgw
	}
	return nil
}

// GetProtocolConfigurationOptions retrieves the value of the leaf ProtocolConfigurationOptions from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtocolConfigurationOptions is set, it can
// safely use t.GetProtocolConfigurationOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtocolConfigurationOptions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink) GetProtocolConfigurationOptions() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ProtocolConfigurationOptions {
	if t == nil || t.ProtocolConfigurationOptions == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ProtocolConfigurationOptions_pco
	}
	return t.ProtocolConfigurationOptions
}

// GetRatType retrieves the value of the leaf RatType from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RatType is set, it can
// safely use t.GetRatType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RatType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink) GetRatType() NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_RatType_Union {
	if t == nil || t.RatType == nil {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_RatType_Enum_wlan
	}
	return t.RatType
}

// GetReportWlanLocation retrieves the value of the leaf ReportWlanLocation from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReportWlanLocation is set, it can
// safely use t.GetReportWlanLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReportWlanLocation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink) GetReportWlanLocation() bool {
	if t == nil || t.ReportWlanLocation == nil {
		return false
	}
	return *t.ReportWlanLocation
}

// GetSessionHoldTime retrieves the value of the leaf SessionHoldTime from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionHoldTime is set, it can
// safely use t.GetSessionHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionHoldTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink) GetSessionHoldTime() NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_SessionHoldTime_Union {
	if t == nil || t.SessionHoldTime == nil {
		return UnionUint32(30)
	}
	return t.SessionHoldTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ProtocolConfigurationOptions == 0 {
		t.ProtocolConfigurationOptions = NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ProtocolConfigurationOptions_pco
	}
	if t.RatType == nil {
		t.RatType = NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_RatType_Enum_wlan
	}
	if t.ReportWlanLocation == nil {
		var v bool = false
		t.ReportWlanLocation = &v
	}
	if t.SessionHoldTime == nil {
		t.SessionHoldTime = UnionUint32(30)
	}
	t.ChargingCharacteristics.PopulateDefaults()
	t.Ggsn.PopulateDefaults()
	t.Pgw.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics represents the /nokia-conf/configure/groups/group/subscriber-mgmt/gtp/peer-profile/uplink/charging-characteristics YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics struct {
	Home    *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home    `path:"home" module:"nokia-conf"`
	Roaming *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming `path:"roaming" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics) IsYANGGoStruct() {
}

// GetOrCreateHome retrieves the value of the Home field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics) GetOrCreateHome() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home {
	if t.Home != nil {
		return t.Home
	}
	t.Home = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home{}
	return t.Home
}

// GetOrCreateRoaming retrieves the value of the Roaming field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics) GetOrCreateRoaming() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming {
	if t.Roaming != nil {
		return t.Roaming
	}
	t.Roaming = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming{}
	return t.Roaming
}

// GetHome returns the value of the Home struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics. If the receiver or the field Home is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics) GetHome() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home {
	if t != nil && t.Home != nil {
		return t.Home
	}
	return nil
}

// GetRoaming returns the value of the Roaming struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics. If the receiver or the field Roaming is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics) GetRoaming() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming {
	if t != nil && t.Roaming != nil {
		return t.Roaming
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Home.PopulateDefaults()
	t.Roaming.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home represents the /nokia-conf/configure/groups/group/subscriber-mgmt/gtp/peer-profile/uplink/charging-characteristics/home YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home struct {
	Bit0  *bool `path:"bit0" module:"nokia-conf"`
	Bit1  *bool `path:"bit1" module:"nokia-conf"`
	Bit10 *bool `path:"bit10" module:"nokia-conf"`
	Bit11 *bool `path:"bit11" module:"nokia-conf"`
	Bit12 *bool `path:"bit12" module:"nokia-conf"`
	Bit13 *bool `path:"bit13" module:"nokia-conf"`
	Bit14 *bool `path:"bit14" module:"nokia-conf"`
	Bit15 *bool `path:"bit15" module:"nokia-conf"`
	Bit2  *bool `path:"bit2" module:"nokia-conf"`
	Bit3  *bool `path:"bit3" module:"nokia-conf"`
	Bit4  *bool `path:"bit4" module:"nokia-conf"`
	Bit5  *bool `path:"bit5" module:"nokia-conf"`
	Bit6  *bool `path:"bit6" module:"nokia-conf"`
	Bit7  *bool `path:"bit7" module:"nokia-conf"`
	Bit8  *bool `path:"bit8" module:"nokia-conf"`
	Bit9  *bool `path:"bit9" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home) IsYANGGoStruct() {
}

// GetBit0 retrieves the value of the leaf Bit0 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bit0 is set, it can
// safely use t.GetBit0() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bit0 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home) GetBit0() bool {
	if t == nil || t.Bit0 == nil {
		return false
	}
	return *t.Bit0
}

// GetBit1 retrieves the value of the leaf Bit1 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bit1 is set, it can
// safely use t.GetBit1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bit1 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home) GetBit1() bool {
	if t == nil || t.Bit1 == nil {
		return false
	}
	return *t.Bit1
}

// GetBit10 retrieves the value of the leaf Bit10 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bit10 is set, it can
// safely use t.GetBit10() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bit10 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home) GetBit10() bool {
	if t == nil || t.Bit10 == nil {
		return false
	}
	return *t.Bit10
}

// GetBit11 retrieves the value of the leaf Bit11 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bit11 is set, it can
// safely use t.GetBit11() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bit11 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home) GetBit11() bool {
	if t == nil || t.Bit11 == nil {
		return false
	}
	return *t.Bit11
}

// GetBit12 retrieves the value of the leaf Bit12 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bit12 is set, it can
// safely use t.GetBit12() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bit12 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home) GetBit12() bool {
	if t == nil || t.Bit12 == nil {
		return false
	}
	return *t.Bit12
}

// GetBit13 retrieves the value of the leaf Bit13 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bit13 is set, it can
// safely use t.GetBit13() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bit13 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home) GetBit13() bool {
	if t == nil || t.Bit13 == nil {
		return false
	}
	return *t.Bit13
}

// GetBit14 retrieves the value of the leaf Bit14 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bit14 is set, it can
// safely use t.GetBit14() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bit14 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home) GetBit14() bool {
	if t == nil || t.Bit14 == nil {
		return false
	}
	return *t.Bit14
}

// GetBit15 retrieves the value of the leaf Bit15 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bit15 is set, it can
// safely use t.GetBit15() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bit15 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home) GetBit15() bool {
	if t == nil || t.Bit15 == nil {
		return false
	}
	return *t.Bit15
}

// GetBit2 retrieves the value of the leaf Bit2 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bit2 is set, it can
// safely use t.GetBit2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bit2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home) GetBit2() bool {
	if t == nil || t.Bit2 == nil {
		return false
	}
	return *t.Bit2
}

// GetBit3 retrieves the value of the leaf Bit3 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bit3 is set, it can
// safely use t.GetBit3() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bit3 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home) GetBit3() bool {
	if t == nil || t.Bit3 == nil {
		return false
	}
	return *t.Bit3
}

// GetBit4 retrieves the value of the leaf Bit4 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bit4 is set, it can
// safely use t.GetBit4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bit4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home) GetBit4() bool {
	if t == nil || t.Bit4 == nil {
		return false
	}
	return *t.Bit4
}

// GetBit5 retrieves the value of the leaf Bit5 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bit5 is set, it can
// safely use t.GetBit5() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bit5 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home) GetBit5() bool {
	if t == nil || t.Bit5 == nil {
		return false
	}
	return *t.Bit5
}

// GetBit6 retrieves the value of the leaf Bit6 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bit6 is set, it can
// safely use t.GetBit6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bit6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home) GetBit6() bool {
	if t == nil || t.Bit6 == nil {
		return false
	}
	return *t.Bit6
}

// GetBit7 retrieves the value of the leaf Bit7 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bit7 is set, it can
// safely use t.GetBit7() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bit7 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home) GetBit7() bool {
	if t == nil || t.Bit7 == nil {
		return false
	}
	return *t.Bit7
}

// GetBit8 retrieves the value of the leaf Bit8 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bit8 is set, it can
// safely use t.GetBit8() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bit8 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home) GetBit8() bool {
	if t == nil || t.Bit8 == nil {
		return false
	}
	return *t.Bit8
}

// GetBit9 retrieves the value of the leaf Bit9 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bit9 is set, it can
// safely use t.GetBit9() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bit9 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home) GetBit9() bool {
	if t == nil || t.Bit9 == nil {
		return false
	}
	return *t.Bit9
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Bit0 == nil {
		var v bool = false
		t.Bit0 = &v
	}
	if t.Bit1 == nil {
		var v bool = false
		t.Bit1 = &v
	}
	if t.Bit10 == nil {
		var v bool = false
		t.Bit10 = &v
	}
	if t.Bit11 == nil {
		var v bool = false
		t.Bit11 = &v
	}
	if t.Bit12 == nil {
		var v bool = false
		t.Bit12 = &v
	}
	if t.Bit13 == nil {
		var v bool = false
		t.Bit13 = &v
	}
	if t.Bit14 == nil {
		var v bool = false
		t.Bit14 = &v
	}
	if t.Bit15 == nil {
		var v bool = false
		t.Bit15 = &v
	}
	if t.Bit2 == nil {
		var v bool = false
		t.Bit2 = &v
	}
	if t.Bit3 == nil {
		var v bool = false
		t.Bit3 = &v
	}
	if t.Bit4 == nil {
		var v bool = false
		t.Bit4 = &v
	}
	if t.Bit5 == nil {
		var v bool = false
		t.Bit5 = &v
	}
	if t.Bit6 == nil {
		var v bool = false
		t.Bit6 = &v
	}
	if t.Bit7 == nil {
		var v bool = false
		t.Bit7 = &v
	}
	if t.Bit8 == nil {
		var v bool = false
		t.Bit8 = &v
	}
	if t.Bit9 == nil {
		var v bool = false
		t.Bit9 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Home) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming represents the /nokia-conf/configure/groups/group/subscriber-mgmt/gtp/peer-profile/uplink/charging-characteristics/roaming YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming struct {
	Bit0  *bool `path:"bit0" module:"nokia-conf"`
	Bit1  *bool `path:"bit1" module:"nokia-conf"`
	Bit10 *bool `path:"bit10" module:"nokia-conf"`
	Bit11 *bool `path:"bit11" module:"nokia-conf"`
	Bit12 *bool `path:"bit12" module:"nokia-conf"`
	Bit13 *bool `path:"bit13" module:"nokia-conf"`
	Bit14 *bool `path:"bit14" module:"nokia-conf"`
	Bit15 *bool `path:"bit15" module:"nokia-conf"`
	Bit2  *bool `path:"bit2" module:"nokia-conf"`
	Bit3  *bool `path:"bit3" module:"nokia-conf"`
	Bit4  *bool `path:"bit4" module:"nokia-conf"`
	Bit5  *bool `path:"bit5" module:"nokia-conf"`
	Bit6  *bool `path:"bit6" module:"nokia-conf"`
	Bit7  *bool `path:"bit7" module:"nokia-conf"`
	Bit8  *bool `path:"bit8" module:"nokia-conf"`
	Bit9  *bool `path:"bit9" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming) IsYANGGoStruct() {
}

// GetBit0 retrieves the value of the leaf Bit0 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bit0 is set, it can
// safely use t.GetBit0() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bit0 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming) GetBit0() bool {
	if t == nil || t.Bit0 == nil {
		return false
	}
	return *t.Bit0
}

// GetBit1 retrieves the value of the leaf Bit1 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bit1 is set, it can
// safely use t.GetBit1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bit1 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming) GetBit1() bool {
	if t == nil || t.Bit1 == nil {
		return false
	}
	return *t.Bit1
}

// GetBit10 retrieves the value of the leaf Bit10 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bit10 is set, it can
// safely use t.GetBit10() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bit10 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming) GetBit10() bool {
	if t == nil || t.Bit10 == nil {
		return false
	}
	return *t.Bit10
}

// GetBit11 retrieves the value of the leaf Bit11 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bit11 is set, it can
// safely use t.GetBit11() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bit11 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming) GetBit11() bool {
	if t == nil || t.Bit11 == nil {
		return false
	}
	return *t.Bit11
}

// GetBit12 retrieves the value of the leaf Bit12 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bit12 is set, it can
// safely use t.GetBit12() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bit12 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming) GetBit12() bool {
	if t == nil || t.Bit12 == nil {
		return false
	}
	return *t.Bit12
}

// GetBit13 retrieves the value of the leaf Bit13 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bit13 is set, it can
// safely use t.GetBit13() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bit13 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming) GetBit13() bool {
	if t == nil || t.Bit13 == nil {
		return false
	}
	return *t.Bit13
}

// GetBit14 retrieves the value of the leaf Bit14 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bit14 is set, it can
// safely use t.GetBit14() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bit14 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming) GetBit14() bool {
	if t == nil || t.Bit14 == nil {
		return false
	}
	return *t.Bit14
}

// GetBit15 retrieves the value of the leaf Bit15 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bit15 is set, it can
// safely use t.GetBit15() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bit15 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming) GetBit15() bool {
	if t == nil || t.Bit15 == nil {
		return false
	}
	return *t.Bit15
}

// GetBit2 retrieves the value of the leaf Bit2 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bit2 is set, it can
// safely use t.GetBit2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bit2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming) GetBit2() bool {
	if t == nil || t.Bit2 == nil {
		return false
	}
	return *t.Bit2
}

// GetBit3 retrieves the value of the leaf Bit3 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bit3 is set, it can
// safely use t.GetBit3() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bit3 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming) GetBit3() bool {
	if t == nil || t.Bit3 == nil {
		return false
	}
	return *t.Bit3
}

// GetBit4 retrieves the value of the leaf Bit4 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bit4 is set, it can
// safely use t.GetBit4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bit4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming) GetBit4() bool {
	if t == nil || t.Bit4 == nil {
		return false
	}
	return *t.Bit4
}

// GetBit5 retrieves the value of the leaf Bit5 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bit5 is set, it can
// safely use t.GetBit5() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bit5 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming) GetBit5() bool {
	if t == nil || t.Bit5 == nil {
		return false
	}
	return *t.Bit5
}

// GetBit6 retrieves the value of the leaf Bit6 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bit6 is set, it can
// safely use t.GetBit6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bit6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming) GetBit6() bool {
	if t == nil || t.Bit6 == nil {
		return false
	}
	return *t.Bit6
}

// GetBit7 retrieves the value of the leaf Bit7 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bit7 is set, it can
// safely use t.GetBit7() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bit7 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming) GetBit7() bool {
	if t == nil || t.Bit7 == nil {
		return false
	}
	return *t.Bit7
}

// GetBit8 retrieves the value of the leaf Bit8 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bit8 is set, it can
// safely use t.GetBit8() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bit8 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming) GetBit8() bool {
	if t == nil || t.Bit8 == nil {
		return false
	}
	return *t.Bit8
}

// GetBit9 retrieves the value of the leaf Bit9 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bit9 is set, it can
// safely use t.GetBit9() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bit9 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming) GetBit9() bool {
	if t == nil || t.Bit9 == nil {
		return false
	}
	return *t.Bit9
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Bit0 == nil {
		var v bool = false
		t.Bit0 = &v
	}
	if t.Bit1 == nil {
		var v bool = false
		t.Bit1 = &v
	}
	if t.Bit10 == nil {
		var v bool = false
		t.Bit10 = &v
	}
	if t.Bit11 == nil {
		var v bool = false
		t.Bit11 = &v
	}
	if t.Bit12 == nil {
		var v bool = false
		t.Bit12 = &v
	}
	if t.Bit13 == nil {
		var v bool = false
		t.Bit13 = &v
	}
	if t.Bit14 == nil {
		var v bool = false
		t.Bit14 = &v
	}
	if t.Bit15 == nil {
		var v bool = false
		t.Bit15 = &v
	}
	if t.Bit2 == nil {
		var v bool = false
		t.Bit2 = &v
	}
	if t.Bit3 == nil {
		var v bool = false
		t.Bit3 = &v
	}
	if t.Bit4 == nil {
		var v bool = false
		t.Bit4 = &v
	}
	if t.Bit5 == nil {
		var v bool = false
		t.Bit5 = &v
	}
	if t.Bit6 == nil {
		var v bool = false
		t.Bit6 = &v
	}
	if t.Bit7 == nil {
		var v bool = false
		t.Bit7 = &v
	}
	if t.Bit8 == nil {
		var v bool = false
		t.Bit8 = &v
	}
	if t.Bit9 == nil {
		var v bool = false
		t.Bit9 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_ChargingCharacteristics_Roaming) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn represents the /nokia-conf/configure/groups/group/subscriber-mgmt/gtp/peer-profile/uplink/ggsn YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn struct {
	Qos *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn) IsYANGGoStruct() {
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos{}
	return t.Qos
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn) GetQos() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos represents the /nokia-conf/configure/groups/group/subscriber-mgmt/gtp/peer-profile/uplink/ggsn/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos struct {
	Ambr     *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_Ambr     `path:"ambr" module:"nokia-conf" yangPresence:"true"`
	Arp      *uint32                                                                                   `path:"arp" module:"nokia-conf"`
	DownLink *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_DownLink `path:"down-link" module:"nokia-conf"`
	UpLink   *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_UpLink   `path:"up-link" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos) IsYANGGoStruct() {
}

// GetOrCreateAmbr retrieves the value of the Ambr field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos) GetOrCreateAmbr() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_Ambr {
	if t.Ambr != nil {
		return t.Ambr
	}
	t.Ambr = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_Ambr{}
	return t.Ambr
}

// GetOrCreateDownLink retrieves the value of the DownLink field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos) GetOrCreateDownLink() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_DownLink {
	if t.DownLink != nil {
		return t.DownLink
	}
	t.DownLink = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_DownLink{}
	return t.DownLink
}

// GetOrCreateUpLink retrieves the value of the UpLink field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos) GetOrCreateUpLink() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_UpLink {
	if t.UpLink != nil {
		return t.UpLink
	}
	t.UpLink = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_UpLink{}
	return t.UpLink
}

// GetAmbr returns the value of the Ambr struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos. If the receiver or the field Ambr is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos) GetAmbr() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_Ambr {
	if t != nil && t.Ambr != nil {
		return t.Ambr
	}
	return nil
}

// GetDownLink returns the value of the DownLink struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos. If the receiver or the field DownLink is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos) GetDownLink() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_DownLink {
	if t != nil && t.DownLink != nil {
		return t.DownLink
	}
	return nil
}

// GetUpLink returns the value of the UpLink struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos. If the receiver or the field UpLink is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos) GetUpLink() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_UpLink {
	if t != nil && t.UpLink != nil {
		return t.UpLink
	}
	return nil
}

// GetArp retrieves the value of the leaf Arp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Arp is set, it can
// safely use t.GetArp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Arp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos) GetArp() uint32 {
	if t == nil || t.Arp == nil {
		return 1
	}
	return *t.Arp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Arp == nil {
		var v uint32 = 1
		t.Arp = &v
	}
	t.Ambr.PopulateDefaults()
	t.DownLink.PopulateDefaults()
	t.UpLink.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_Ambr represents the /nokia-conf/configure/groups/group/subscriber-mgmt/gtp/peer-profile/uplink/ggsn/qos/ambr YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_Ambr struct {
	DownLink *int32 `path:"down-link" module:"nokia-conf"`
	UpLink   *int32 `path:"up-link" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_Ambr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_Ambr) IsYANGGoStruct() {
}

// GetDownLink retrieves the value of the leaf DownLink from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_Ambr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DownLink is set, it can
// safely use t.GetDownLink() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DownLink == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_Ambr) GetDownLink() int32 {
	if t == nil || t.DownLink == nil {
		return 0
	}
	return *t.DownLink
}

// GetUpLink retrieves the value of the leaf UpLink from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_Ambr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UpLink is set, it can
// safely use t.GetUpLink() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UpLink == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_Ambr) GetUpLink() int32 {
	if t == nil || t.UpLink == nil {
		return 0
	}
	return *t.UpLink
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_Ambr
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_Ambr) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_Ambr) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_Ambr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_Ambr) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_Ambr) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_Ambr.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_Ambr) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_DownLink represents the /nokia-conf/configure/groups/group/subscriber-mgmt/gtp/peer-profile/uplink/ggsn/qos/down-link YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_DownLink struct {
	Gbr *uint32 `path:"gbr" module:"nokia-conf"`
	Mbr *uint32 `path:"mbr" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_DownLink implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_DownLink) IsYANGGoStruct() {
}

// GetGbr retrieves the value of the leaf Gbr from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_DownLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gbr is set, it can
// safely use t.GetGbr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gbr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_DownLink) GetGbr() uint32 {
	if t == nil || t.Gbr == nil {
		return 2000
	}
	return *t.Gbr
}

// GetMbr retrieves the value of the leaf Mbr from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_DownLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbr is set, it can
// safely use t.GetMbr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_DownLink) GetMbr() uint32 {
	if t == nil || t.Mbr == nil {
		return 2000
	}
	return *t.Mbr
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_DownLink
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_DownLink) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Gbr == nil {
		var v uint32 = 2000
		t.Gbr = &v
	}
	if t.Mbr == nil {
		var v uint32 = 2000
		t.Mbr = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_DownLink) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_DownLink"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_DownLink) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_DownLink) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_DownLink.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_DownLink) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_UpLink represents the /nokia-conf/configure/groups/group/subscriber-mgmt/gtp/peer-profile/uplink/ggsn/qos/up-link YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_UpLink struct {
	Gbr *uint32 `path:"gbr" module:"nokia-conf"`
	Mbr *uint32 `path:"mbr" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_UpLink implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_UpLink) IsYANGGoStruct() {
}

// GetGbr retrieves the value of the leaf Gbr from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_UpLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gbr is set, it can
// safely use t.GetGbr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gbr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_UpLink) GetGbr() uint32 {
	if t == nil || t.Gbr == nil {
		return 5000
	}
	return *t.Gbr
}

// GetMbr retrieves the value of the leaf Mbr from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_UpLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbr is set, it can
// safely use t.GetMbr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_UpLink) GetMbr() uint32 {
	if t == nil || t.Mbr == nil {
		return 5000
	}
	return *t.Mbr
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_UpLink
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_UpLink) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Gbr == nil {
		var v uint32 = 5000
		t.Gbr = &v
	}
	if t.Mbr == nil {
		var v uint32 = 5000
		t.Mbr = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_UpLink) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_UpLink"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_UpLink) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_UpLink) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_UpLink.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Ggsn_Qos_UpLink) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw represents the /nokia-conf/configure/groups/group/subscriber-mgmt/gtp/peer-profile/uplink/pgw YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw struct {
	Qos *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw) IsYANGGoStruct() {}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos{}
	return t.Qos
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw) GetQos() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos represents the /nokia-conf/configure/groups/group/subscriber-mgmt/gtp/peer-profile/uplink/pgw/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos struct {
	Ambr     *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_Ambr     `path:"ambr" module:"nokia-conf"`
	Arp      *uint32                                                                                  `path:"arp" module:"nokia-conf"`
	DownLink *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_DownLink `path:"down-link" module:"nokia-conf"`
	Qci      *uint32                                                                                  `path:"qci" module:"nokia-conf"`
	UpLink   *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_UpLink   `path:"up-link" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos) IsYANGGoStruct() {
}

// GetOrCreateAmbr retrieves the value of the Ambr field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos) GetOrCreateAmbr() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_Ambr {
	if t.Ambr != nil {
		return t.Ambr
	}
	t.Ambr = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_Ambr{}
	return t.Ambr
}

// GetOrCreateDownLink retrieves the value of the DownLink field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos) GetOrCreateDownLink() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_DownLink {
	if t.DownLink != nil {
		return t.DownLink
	}
	t.DownLink = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_DownLink{}
	return t.DownLink
}

// GetOrCreateUpLink retrieves the value of the UpLink field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos) GetOrCreateUpLink() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_UpLink {
	if t.UpLink != nil {
		return t.UpLink
	}
	t.UpLink = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_UpLink{}
	return t.UpLink
}

// GetAmbr returns the value of the Ambr struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos. If the receiver or the field Ambr is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos) GetAmbr() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_Ambr {
	if t != nil && t.Ambr != nil {
		return t.Ambr
	}
	return nil
}

// GetDownLink returns the value of the DownLink struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos. If the receiver or the field DownLink is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos) GetDownLink() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_DownLink {
	if t != nil && t.DownLink != nil {
		return t.DownLink
	}
	return nil
}

// GetUpLink returns the value of the UpLink struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos. If the receiver or the field UpLink is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos) GetUpLink() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_UpLink {
	if t != nil && t.UpLink != nil {
		return t.UpLink
	}
	return nil
}

// GetArp retrieves the value of the leaf Arp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Arp is set, it can
// safely use t.GetArp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Arp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos) GetArp() uint32 {
	if t == nil || t.Arp == nil {
		return 1
	}
	return *t.Arp
}

// GetQci retrieves the value of the leaf Qci from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Qci is set, it can
// safely use t.GetQci() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Qci == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos) GetQci() uint32 {
	if t == nil || t.Qci == nil {
		return 8
	}
	return *t.Qci
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Arp == nil {
		var v uint32 = 1
		t.Arp = &v
	}
	if t.Qci == nil {
		var v uint32 = 8
		t.Qci = &v
	}
	t.Ambr.PopulateDefaults()
	t.DownLink.PopulateDefaults()
	t.UpLink.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_Ambr represents the /nokia-conf/configure/groups/group/subscriber-mgmt/gtp/peer-profile/uplink/pgw/qos/ambr YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_Ambr struct {
	DownLink *int32 `path:"down-link" module:"nokia-conf"`
	UpLink   *int32 `path:"up-link" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_Ambr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_Ambr) IsYANGGoStruct() {
}

// GetDownLink retrieves the value of the leaf DownLink from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_Ambr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DownLink is set, it can
// safely use t.GetDownLink() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DownLink == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_Ambr) GetDownLink() int32 {
	if t == nil || t.DownLink == nil {
		return 20000
	}
	return *t.DownLink
}

// GetUpLink retrieves the value of the leaf UpLink from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_Ambr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UpLink is set, it can
// safely use t.GetUpLink() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UpLink == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_Ambr) GetUpLink() int32 {
	if t == nil || t.UpLink == nil {
		return 10000
	}
	return *t.UpLink
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_Ambr
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_Ambr) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DownLink == nil {
		var v int32 = 20000
		t.DownLink = &v
	}
	if t.UpLink == nil {
		var v int32 = 10000
		t.UpLink = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_Ambr) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_Ambr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_Ambr) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_Ambr) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_Ambr.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_Ambr) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_DownLink represents the /nokia-conf/configure/groups/group/subscriber-mgmt/gtp/peer-profile/uplink/pgw/qos/down-link YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_DownLink struct {
	Gbr *uint32 `path:"gbr" module:"nokia-conf"`
	Mbr *uint32 `path:"mbr" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_DownLink implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_DownLink) IsYANGGoStruct() {
}

// GetGbr retrieves the value of the leaf Gbr from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_DownLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gbr is set, it can
// safely use t.GetGbr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gbr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_DownLink) GetGbr() uint32 {
	if t == nil || t.Gbr == nil {
		return 0
	}
	return *t.Gbr
}

// GetMbr retrieves the value of the leaf Mbr from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_DownLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbr is set, it can
// safely use t.GetMbr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_DownLink) GetMbr() uint32 {
	if t == nil || t.Mbr == nil {
		return 0
	}
	return *t.Mbr
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_DownLink
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_DownLink) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Gbr == nil {
		var v uint32 = 0
		t.Gbr = &v
	}
	if t.Mbr == nil {
		var v uint32 = 0
		t.Mbr = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_DownLink) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_DownLink"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_DownLink) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_DownLink) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_DownLink.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_DownLink) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_UpLink represents the /nokia-conf/configure/groups/group/subscriber-mgmt/gtp/peer-profile/uplink/pgw/qos/up-link YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_UpLink struct {
	Gbr *uint32 `path:"gbr" module:"nokia-conf"`
	Mbr *uint32 `path:"mbr" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_UpLink implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_UpLink) IsYANGGoStruct() {
}

// GetGbr retrieves the value of the leaf Gbr from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_UpLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gbr is set, it can
// safely use t.GetGbr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gbr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_UpLink) GetGbr() uint32 {
	if t == nil || t.Gbr == nil {
		return 0
	}
	return *t.Gbr
}

// GetMbr retrieves the value of the leaf Mbr from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_UpLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbr is set, it can
// safely use t.GetMbr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_UpLink) GetMbr() uint32 {
	if t == nil || t.Mbr == nil {
		return 0
	}
	return *t.Mbr
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_UpLink
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_UpLink) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Gbr == nil {
		var v uint32 = 0
		t.Gbr = &v
	}
	if t.Mbr == nil {
		var v uint32 = 0
		t.Mbr = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_UpLink) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_UpLink"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_UpLink) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_UpLink) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_UpLink.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_PeerProfile_Uplink_Pgw_Qos_UpLink) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ServingNetwork represents the /nokia-conf/configure/groups/group/subscriber-mgmt/gtp/serving-network YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ServingNetwork struct {
	Mcc *string `path:"mcc" module:"nokia-conf"`
	Mnc *string `path:"mnc" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ServingNetwork implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ServingNetwork) IsYANGGoStruct() {}

// GetMcc retrieves the value of the leaf Mcc from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ServingNetwork
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mcc is set, it can
// safely use t.GetMcc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mcc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ServingNetwork) GetMcc() string {
	if t == nil || t.Mcc == nil {
		return ""
	}
	return *t.Mcc
}

// GetMnc retrieves the value of the leaf Mnc from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ServingNetwork
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mnc is set, it can
// safely use t.GetMnc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mnc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ServingNetwork) GetMnc() string {
	if t == nil || t.Mnc == nil {
		return ""
	}
	return *t.Mnc
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ServingNetwork
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ServingNetwork) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ServingNetwork) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ServingNetwork"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ServingNetwork) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ServingNetwork) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ServingNetwork.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Gtp_ServingNetwork) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy represents the /nokia-conf/configure/groups/group/subscriber-mgmt/host-lockout-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy struct {
	Description      *string                                                                        `path:"description" module:"nokia-conf"`
	HostKey          E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy_HostKey    `path:"host-key" module:"nokia-conf"`
	LockoutResetTime *uint32                                                                        `path:"lockout-reset-time" module:"nokia-conf"`
	LockoutTime      *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy_LockoutTime `path:"lockout-time" module:"nokia-conf"`
	MaxLockoutHosts  *uint32                                                                        `path:"max-lockout-hosts" module:"nokia-conf"`
	Name             *string                                                                        `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy) IsYANGGoStruct() {}

// GetOrCreateLockoutTime retrieves the value of the LockoutTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy) GetOrCreateLockoutTime() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy_LockoutTime {
	if t.LockoutTime != nil {
		return t.LockoutTime
	}
	t.LockoutTime = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy_LockoutTime{}
	return t.LockoutTime
}

// GetLockoutTime returns the value of the LockoutTime struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy. If the receiver or the field LockoutTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy) GetLockoutTime() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy_LockoutTime {
	if t != nil && t.LockoutTime != nil {
		return t.LockoutTime
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHostKey retrieves the value of the leaf HostKey from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostKey is set, it can
// safely use t.GetHostKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy) GetHostKey() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy_HostKey {
	if t == nil || t.HostKey == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy_HostKey_all
	}
	return t.HostKey
}

// GetLockoutResetTime retrieves the value of the leaf LockoutResetTime from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LockoutResetTime is set, it can
// safely use t.GetLockoutResetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LockoutResetTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy) GetLockoutResetTime() uint32 {
	if t == nil || t.LockoutResetTime == nil {
		return 60
	}
	return *t.LockoutResetTime
}

// GetMaxLockoutHosts retrieves the value of the leaf MaxLockoutHosts from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLockoutHosts is set, it can
// safely use t.GetMaxLockoutHosts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLockoutHosts == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy) GetMaxLockoutHosts() uint32 {
	if t == nil || t.MaxLockoutHosts == nil {
		return 100
	}
	return *t.MaxLockoutHosts
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HostKey == 0 {
		t.HostKey = NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy_HostKey_all
	}
	if t.LockoutResetTime == nil {
		var v uint32 = 60
		t.LockoutResetTime = &v
	}
	if t.MaxLockoutHosts == nil {
		var v uint32 = 100
		t.MaxLockoutHosts = &v
	}
	t.LockoutTime.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy_LockoutTime represents the /nokia-conf/configure/groups/group/subscriber-mgmt/host-lockout-policy/lockout-time YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy_LockoutTime struct {
	Max *uint32 `path:"max" module:"nokia-conf"`
	Min *uint32 `path:"min" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy_LockoutTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy_LockoutTime) IsYANGGoStruct() {
}

// GetMax retrieves the value of the leaf Max from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy_LockoutTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy_LockoutTime) GetMax() uint32 {
	if t == nil || t.Max == nil {
		return 3600
	}
	return *t.Max
}

// GetMin retrieves the value of the leaf Min from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy_LockoutTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy_LockoutTime) GetMin() uint32 {
	if t == nil || t.Min == nil {
		return 10
	}
	return *t.Min
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy_LockoutTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy_LockoutTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Max == nil {
		var v uint32 = 3600
		t.Max = &v
	}
	if t.Min == nil {
		var v uint32 = 10
		t.Min = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy_LockoutTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy_LockoutTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy_LockoutTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy_LockoutTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy_LockoutTime.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostLockoutPolicy_LockoutTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy represents the /nokia-conf/configure/groups/group/subscriber-mgmt/host-tracking-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy struct {
	Description      *string                                                                              `path:"description" module:"nokia-conf"`
	EgressRateModify *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy_EgressRateModify `path:"egress-rate-modify" module:"nokia-conf"`
	Name             *string                                                                              `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy) IsYANGGoStruct() {}

// GetOrCreateEgressRateModify retrieves the value of the EgressRateModify field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy) GetOrCreateEgressRateModify() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy_EgressRateModify {
	if t.EgressRateModify != nil {
		return t.EgressRateModify
	}
	t.EgressRateModify = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy_EgressRateModify{}
	return t.EgressRateModify
}

// GetEgressRateModify returns the value of the EgressRateModify struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy. If the receiver or the field EgressRateModify is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy) GetEgressRateModify() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy_EgressRateModify {
	if t != nil && t.EgressRateModify != nil {
		return t.EgressRateModify
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EgressRateModify.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy_EgressRateModify represents the /nokia-conf/configure/groups/group/subscriber-mgmt/host-tracking-policy/egress-rate-modify YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy_EgressRateModify struct {
	AggRate   YANGEmpty `path:"agg-rate" module:"nokia-conf"`
	Scheduler *string   `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy_EgressRateModify implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy_EgressRateModify) IsYANGGoStruct() {
}

// GetAggRate retrieves the value of the leaf AggRate from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy_EgressRateModify
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AggRate is set, it can
// safely use t.GetAggRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AggRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy_EgressRateModify) GetAggRate() YANGEmpty {
	if t == nil || t.AggRate == false {
		return false
	}
	return t.AggRate
}

// GetScheduler retrieves the value of the leaf Scheduler from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy_EgressRateModify
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scheduler is set, it can
// safely use t.GetScheduler() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scheduler == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy_EgressRateModify) GetScheduler() string {
	if t == nil || t.Scheduler == nil {
		return ""
	}
	return *t.Scheduler
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy_EgressRateModify
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy_EgressRateModify) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy_EgressRateModify) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy_EgressRateModify"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy_EgressRateModify) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy_EgressRateModify) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy_EgressRateModify.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_HostTrackingPolicy_EgressRateModify) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy represents the /nokia-conf/configure/groups/group/subscriber-mgmt/http-redirect-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy struct {
	AaUrlParameter       *string                                                                                                                                                                  `path:"aa-url-parameter" module:"nokia-conf"`
	ApplicationAssurance *string                                                                                                                                                                  `path:"application-assurance" module:"nokia-conf"`
	Description          *string                                                                                                                                                                  `path:"description" module:"nokia-conf"`
	DstPort              *int32                                                                                                                                                                   `path:"dst-port" module:"nokia-conf"`
	ForwardEntry         map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry_Key]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry `path:"forward-entry" module:"nokia-conf"`
	IgnoreAppProfile     *bool                                                                                                                                                                    `path:"ignore-app-profile" module:"nokia-conf"`
	Name                 *string                                                                                                                                                                  `path:"name" module:"nokia-conf"`
	PortalHoldTime       *uint32                                                                                                                                                                  `path:"portal-hold-time" module:"nokia-conf"`
	Url                  *string                                                                                                                                                                  `path:"url" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry_Key represents the key for list ForwardEntry of element /nokia-conf/configure/groups/group/subscriber-mgmt/http-redirect-policy.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry_Key struct {
	DstIp    string                                                                                         `path:"dst-ip"`
	Protocol NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry_Protocol_Union `path:"protocol"`
	DstPort  NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry_DstPort_Union  `path:"dst-port"`
}

// NewForwardEntry creates a new entry in the ForwardEntry list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy) NewForwardEntry(DstIp string, Protocol NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry_Protocol_Union, DstPort NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry_DstPort_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ForwardEntry == nil {
		t.ForwardEntry = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry_Key]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry)
	}

	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry_Key{
		DstIp:    DstIp,
		Protocol: Protocol,
		DstPort:  DstPort,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ForwardEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ForwardEntry", key)
	}

	t.ForwardEntry[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry{
		DstIp:    &DstIp,
		Protocol: Protocol,
		DstPort:  DstPort,
	}

	return t.ForwardEntry[key], nil
}

// RenameForwardEntry renames an entry in the list ForwardEntry within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy) RenameForwardEntry(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry_Key) error {
	if _, ok := t.ForwardEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in ForwardEntry", newK)
	}

	e, ok := t.ForwardEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ForwardEntry", oldK)
	}
	e.DstIp = &newK.DstIp
	e.Protocol = newK.Protocol
	e.DstPort = newK.DstPort

	t.ForwardEntry[newK] = e
	delete(t.ForwardEntry, oldK)
	return nil
}

// GetOrCreateForwardEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy) GetOrCreateForwardEntry(DstIp string, Protocol NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry_Protocol_Union, DstPort NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry_DstPort_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry {

	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry_Key{
		DstIp:    DstIp,
		Protocol: Protocol,
		DstPort:  DstPort,
	}

	if v, ok := t.ForwardEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewForwardEntry(DstIp, Protocol, DstPort)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateForwardEntry got unexpected error: %v", err))
	}
	return v
}

// GetForwardEntry retrieves the value with the specified key from
// the ForwardEntry map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy) GetForwardEntry(DstIp string, Protocol NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry_Protocol_Union, DstPort NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry_DstPort_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry_Key{
		DstIp:    DstIp,
		Protocol: Protocol,
		DstPort:  DstPort,
	}

	if lm, ok := t.ForwardEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteForwardEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy) DeleteForwardEntry(DstIp string, Protocol NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry_Protocol_Union, DstPort NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry_DstPort_Union) {
	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry_Key{
		DstIp:    DstIp,
		Protocol: Protocol,
		DstPort:  DstPort,
	}

	delete(t.ForwardEntry, key)
}

// AppendForwardEntry appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry struct to the
// list ForwardEntry of NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy) AppendForwardEntry(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry) error {
	if v.DstIp == nil {
		return fmt.Errorf("invalid nil key for DstIp")
	}

	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry_Key{
		DstIp:    *v.DstIp,
		Protocol: v.Protocol,
		DstPort:  v.DstPort,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ForwardEntry == nil {
		t.ForwardEntry = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry_Key]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry)
	}

	if _, ok := t.ForwardEntry[key]; ok {
		return fmt.Errorf("duplicate key for list ForwardEntry %v", key)
	}

	t.ForwardEntry[key] = v
	return nil
}

// GetAaUrlParameter retrieves the value of the leaf AaUrlParameter from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AaUrlParameter is set, it can
// safely use t.GetAaUrlParameter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AaUrlParameter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy) GetAaUrlParameter() string {
	if t == nil || t.AaUrlParameter == nil {
		return ""
	}
	return *t.AaUrlParameter
}

// GetApplicationAssurance retrieves the value of the leaf ApplicationAssurance from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplicationAssurance is set, it can
// safely use t.GetApplicationAssurance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplicationAssurance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy) GetApplicationAssurance() string {
	if t == nil || t.ApplicationAssurance == nil {
		return ""
	}
	return *t.ApplicationAssurance
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDstPort retrieves the value of the leaf DstPort from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DstPort is set, it can
// safely use t.GetDstPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DstPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy) GetDstPort() int32 {
	if t == nil || t.DstPort == nil {
		return 80
	}
	return *t.DstPort
}

// GetIgnoreAppProfile retrieves the value of the leaf IgnoreAppProfile from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreAppProfile is set, it can
// safely use t.GetIgnoreAppProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreAppProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy) GetIgnoreAppProfile() bool {
	if t == nil || t.IgnoreAppProfile == nil {
		return false
	}
	return *t.IgnoreAppProfile
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPortalHoldTime retrieves the value of the leaf PortalHoldTime from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortalHoldTime is set, it can
// safely use t.GetPortalHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortalHoldTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy) GetPortalHoldTime() uint32 {
	if t == nil || t.PortalHoldTime == nil {
		return 0
	}
	return *t.PortalHoldTime
}

// GetUrl retrieves the value of the leaf Url from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Url is set, it can
// safely use t.GetUrl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Url == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy) GetUrl() string {
	if t == nil || t.Url == nil {
		return ""
	}
	return *t.Url
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DstPort == nil {
		var v int32 = 80
		t.DstPort = &v
	}
	if t.IgnoreAppProfile == nil {
		var v bool = false
		t.IgnoreAppProfile = &v
	}
	for _, e := range t.ForwardEntry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry represents the /nokia-conf/configure/groups/group/subscriber-mgmt/http-redirect-policy/forward-entry YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry struct {
	DstIp    *string                                                                                        `path:"dst-ip" module:"nokia-conf"`
	DstPort  NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry_DstPort_Union  `path:"dst-port" module:"nokia-conf"`
	Protocol NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry_Protocol_Union `path:"protocol" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry) IsYANGGoStruct() {
}

// GetDstIp retrieves the value of the leaf DstIp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DstIp is set, it can
// safely use t.GetDstIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DstIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry) GetDstIp() string {
	if t == nil || t.DstIp == nil {
		return ""
	}
	return *t.DstIp
}

// GetDstPort retrieves the value of the leaf DstPort from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DstPort is set, it can
// safely use t.GetDstPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DstPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry) GetDstPort() NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry_DstPort_Union {
	if t == nil || t.DstPort == nil {
		return nil
	}
	return t.DstPort
}

// GetProtocol retrieves the value of the leaf Protocol from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry) GetProtocol() NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DstIp == nil {
		return nil, fmt.Errorf("nil value for key DstIp")
	}

	return map[string]interface{}{
		"dst-ip":   *t.DstIp,
		"dst-port": t.DstPort,
		"protocol": t.Protocol,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_HttpRedirectPolicy_ForwardEntry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy represents the /nokia-conf/configure/groups/group/subscriber-mgmt/igmp-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy struct {
	Description                *string                                                                       `path:"description" module:"nokia-conf"`
	EgressRateModify           *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_EgressRateModify  `path:"egress-rate-modify" module:"nokia-conf"`
	FastLeave                  *bool                                                                         `path:"fast-leave" module:"nokia-conf"`
	ImportPolicy               *string                                                                       `path:"import-policy" module:"nokia-conf"`
	MaximumNumberGroupSources  *uint32                                                                       `path:"maximum-number-group-sources" module:"nokia-conf"`
	MaximumNumberGroups        *uint32                                                                       `path:"maximum-number-groups" module:"nokia-conf"`
	MaximumNumberSources       *uint32                                                                       `path:"maximum-number-sources" module:"nokia-conf"`
	MulticastReporter          *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter `path:"multicast-reporter" module:"nokia-conf"`
	Name                       *string                                                                       `path:"name" module:"nokia-conf"`
	QueryInterval              *uint32                                                                       `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval    *uint32                                                                       `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval      *uint32                                                                       `path:"query-response-interval" module:"nokia-conf"`
	RedirectionPolicy          *string                                                                       `path:"redirection-policy" module:"nokia-conf"`
	Replication                E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Replication      `path:"replication" module:"nokia-conf"`
	RouterAlertCheck           *bool                                                                         `path:"router-alert-check" module:"nokia-conf"`
	Static                     *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static            `path:"static" module:"nokia-conf"`
	UseMulticastDestinationMac *bool                                                                         `path:"use-multicast-destination-mac" module:"nokia-conf"`
	Version                    E_NokiaTypesIgmp_IgmpVersion                                                  `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy) IsYANGGoStruct() {}

// GetOrCreateEgressRateModify retrieves the value of the EgressRateModify field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy) GetOrCreateEgressRateModify() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_EgressRateModify {
	if t.EgressRateModify != nil {
		return t.EgressRateModify
	}
	t.EgressRateModify = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_EgressRateModify{}
	return t.EgressRateModify
}

// GetOrCreateMulticastReporter retrieves the value of the MulticastReporter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy) GetOrCreateMulticastReporter() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter {
	if t.MulticastReporter != nil {
		return t.MulticastReporter
	}
	t.MulticastReporter = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter{}
	return t.MulticastReporter
}

// GetOrCreateStatic retrieves the value of the Static field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy) GetOrCreateStatic() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static {
	if t.Static != nil {
		return t.Static
	}
	t.Static = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static{}
	return t.Static
}

// GetEgressRateModify returns the value of the EgressRateModify struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy. If the receiver or the field EgressRateModify is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy) GetEgressRateModify() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_EgressRateModify {
	if t != nil && t.EgressRateModify != nil {
		return t.EgressRateModify
	}
	return nil
}

// GetMulticastReporter returns the value of the MulticastReporter struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy. If the receiver or the field MulticastReporter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy) GetMulticastReporter() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter {
	if t != nil && t.MulticastReporter != nil {
		return t.MulticastReporter
	}
	return nil
}

// GetStatic returns the value of the Static struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy. If the receiver or the field Static is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy) GetStatic() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static {
	if t != nil && t.Static != nil {
		return t.Static
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFastLeave retrieves the value of the leaf FastLeave from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastLeave is set, it can
// safely use t.GetFastLeave() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastLeave == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy) GetFastLeave() bool {
	if t == nil || t.FastLeave == nil {
		return true
	}
	return *t.FastLeave
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetMaximumNumberGroupSources retrieves the value of the leaf MaximumNumberGroupSources from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroupSources is set, it can
// safely use t.GetMaximumNumberGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroupSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy) GetMaximumNumberGroupSources() uint32 {
	if t == nil || t.MaximumNumberGroupSources == nil {
		return 0
	}
	return *t.MaximumNumberGroupSources
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMaximumNumberSources retrieves the value of the leaf MaximumNumberSources from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberSources is set, it can
// safely use t.GetMaximumNumberSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy) GetMaximumNumberSources() uint32 {
	if t == nil || t.MaximumNumberSources == nil {
		return 0
	}
	return *t.MaximumNumberSources
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 0
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 0
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 0
	}
	return *t.QueryResponseInterval
}

// GetRedirectionPolicy retrieves the value of the leaf RedirectionPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedirectionPolicy is set, it can
// safely use t.GetRedirectionPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedirectionPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy) GetRedirectionPolicy() string {
	if t == nil || t.RedirectionPolicy == nil {
		return ""
	}
	return *t.RedirectionPolicy
}

// GetReplication retrieves the value of the leaf Replication from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Replication is set, it can
// safely use t.GetReplication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Replication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy) GetReplication() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Replication {
	if t == nil || t.Replication == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Replication_per_sap
	}
	return t.Replication
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetUseMulticastDestinationMac retrieves the value of the leaf UseMulticastDestinationMac from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseMulticastDestinationMac is set, it can
// safely use t.GetUseMulticastDestinationMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseMulticastDestinationMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy) GetUseMulticastDestinationMac() bool {
	if t == nil || t.UseMulticastDestinationMac == nil {
		return false
	}
	return *t.UseMulticastDestinationMac
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy) GetVersion() E_NokiaTypesIgmp_IgmpVersion {
	if t == nil || t.Version == 0 {
		return NokiaTypesIgmp_IgmpVersion_3
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastLeave == nil {
		var v bool = true
		t.FastLeave = &v
	}
	if t.Replication == 0 {
		t.Replication = NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Replication_per_sap
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.UseMulticastDestinationMac == nil {
		var v bool = false
		t.UseMulticastDestinationMac = &v
	}
	if t.Version == 0 {
		t.Version = NokiaTypesIgmp_IgmpVersion_3
	}
	t.EgressRateModify.PopulateDefaults()
	t.MulticastReporter.PopulateDefaults()
	t.Static.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_EgressRateModify represents the /nokia-conf/configure/groups/group/subscriber-mgmt/igmp-policy/egress-rate-modify YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_EgressRateModify struct {
	AggRate   YANGEmpty `path:"agg-rate" module:"nokia-conf"`
	Scheduler *string   `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_EgressRateModify implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_EgressRateModify) IsYANGGoStruct() {
}

// GetAggRate retrieves the value of the leaf AggRate from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_EgressRateModify
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AggRate is set, it can
// safely use t.GetAggRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AggRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_EgressRateModify) GetAggRate() YANGEmpty {
	if t == nil || t.AggRate == false {
		return false
	}
	return t.AggRate
}

// GetScheduler retrieves the value of the leaf Scheduler from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_EgressRateModify
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scheduler is set, it can
// safely use t.GetScheduler() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scheduler == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_EgressRateModify) GetScheduler() string {
	if t == nil || t.Scheduler == nil {
		return ""
	}
	return *t.Scheduler
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_EgressRateModify
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_EgressRateModify) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_EgressRateModify) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_EgressRateModify"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_EgressRateModify) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_EgressRateModify) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_EgressRateModify.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_EgressRateModify) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter represents the /nokia-conf/configure/groups/group/subscriber-mgmt/igmp-policy/multicast-reporter YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter struct {
	AdminState     E_NokiaTypesSros_AdminState                                                                  `path:"admin-state" module:"nokia-conf"`
	Destination    *string                                                                                      `path:"destination" module:"nokia-conf"`
	OptionalFields *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter_OptionalFields `path:"optional-fields" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter) IsYANGGoStruct() {
}

// GetOrCreateOptionalFields retrieves the value of the OptionalFields field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter) GetOrCreateOptionalFields() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter_OptionalFields {
	if t.OptionalFields != nil {
		return t.OptionalFields
	}
	t.OptionalFields = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter_OptionalFields{}
	return t.OptionalFields
}

// GetOptionalFields returns the value of the OptionalFields struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter. If the receiver or the field OptionalFields is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter) GetOptionalFields() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter_OptionalFields {
	if t != nil && t.OptionalFields != nil {
		return t.OptionalFields
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDestination retrieves the value of the leaf Destination from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Destination is set, it can
// safely use t.GetDestination() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Destination == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter) GetDestination() string {
	if t == nil || t.Destination == nil {
		return ""
	}
	return *t.Destination
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.OptionalFields.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter_OptionalFields represents the /nokia-conf/configure/groups/group/subscriber-mgmt/igmp-policy/multicast-reporter/optional-fields YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter_OptionalFields struct {
	HostMac        *bool `path:"host-mac" module:"nokia-conf"`
	PppoeSessionId *bool `path:"pppoe-session-id" module:"nokia-conf"`
	SapId          *bool `path:"sap-id" module:"nokia-conf"`
	SvcId          *bool `path:"svc-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter_OptionalFields implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter_OptionalFields) IsYANGGoStruct() {
}

// GetHostMac retrieves the value of the leaf HostMac from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter_OptionalFields
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostMac is set, it can
// safely use t.GetHostMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter_OptionalFields) GetHostMac() bool {
	if t == nil || t.HostMac == nil {
		return false
	}
	return *t.HostMac
}

// GetPppoeSessionId retrieves the value of the leaf PppoeSessionId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter_OptionalFields
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PppoeSessionId is set, it can
// safely use t.GetPppoeSessionId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PppoeSessionId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter_OptionalFields) GetPppoeSessionId() bool {
	if t == nil || t.PppoeSessionId == nil {
		return false
	}
	return *t.PppoeSessionId
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter_OptionalFields
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter_OptionalFields) GetSapId() bool {
	if t == nil || t.SapId == nil {
		return false
	}
	return *t.SapId
}

// GetSvcId retrieves the value of the leaf SvcId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter_OptionalFields
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SvcId is set, it can
// safely use t.GetSvcId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SvcId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter_OptionalFields) GetSvcId() bool {
	if t == nil || t.SvcId == nil {
		return false
	}
	return *t.SvcId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter_OptionalFields
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter_OptionalFields) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HostMac == nil {
		var v bool = false
		t.HostMac = &v
	}
	if t.PppoeSessionId == nil {
		var v bool = false
		t.PppoeSessionId = &v
	}
	if t.SapId == nil {
		var v bool = false
		t.SapId = &v
	}
	if t.SvcId == nil {
		var v bool = false
		t.SvcId = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter_OptionalFields) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter_OptionalFields"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter_OptionalFields) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter_OptionalFields) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter_OptionalFields.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_MulticastReporter_OptionalFields) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static represents the /nokia-conf/configure/groups/group/subscriber-mgmt/igmp-policy/static YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static struct {
	Group map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group `path:"group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static) NewGroup(GroupAddress string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group)
	}

	key := GroupAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group{
		GroupAddress: &GroupAddress,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupAddress = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static) GetOrCreateGroup(GroupAddress string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group {

	key := GroupAddress

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static) GetGroup(GroupAddress string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group {

	if t == nil {
		return nil
	}

	key := GroupAddress

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static) DeleteGroup(GroupAddress string) {
	key := GroupAddress

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group struct to the
// list Group of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static) AppendGroup(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group) error {
	if v.GroupAddress == nil {
		return fmt.Errorf("invalid nil key received for GroupAddress")
	}

	key := *v.GroupAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group represents the /nokia-conf/configure/groups/group/subscriber-mgmt/igmp-policy/static/group YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group struct {
	GroupAddress *string                                                                                    `path:"group-address" module:"nokia-conf"`
	Source       map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group_Source `path:"source" module:"nokia-conf"`
	Starg        YANGEmpty                                                                                  `path:"starg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group) IsYANGGoStruct() {}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group) NewSource(SourceAddress string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group) GetSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group_Source struct to the
// list Source of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group) AppendSource(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetStarg retrieves the value of the leaf Starg from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group) GetStarg() YANGEmpty {
	if t == nil || t.Starg == false {
		return false
	}
	return t.Starg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupAddress == nil {
		return nil, fmt.Errorf("nil value for key GroupAddress")
	}

	return map[string]interface{}{
		"group-address": *t.GroupAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group_Source represents the /nokia-conf/configure/groups/group/subscriber-mgmt/igmp-policy/static/group/source YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group_Source) IsYANGGoStruct() {
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group_Source.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IgmpPolicy_Static_Group_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy represents the /nokia-conf/configure/groups/group/subscriber-mgmt/ipoe-session-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy struct {
	CircuitIdFromAuth *bool                                                                                  `path:"circuit-id-from-auth" module:"nokia-conf"`
	Description       *string                                                                                `path:"description" module:"nokia-conf"`
	Name              *string                                                                                `path:"name" module:"nokia-conf"`
	SessionKey        *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy_SessionKey          `path:"session-key" module:"nokia-conf"`
	SessionTimeout    NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy_SessionTimeout_Union `path:"session-timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy) IsYANGGoStruct() {}

// GetOrCreateSessionKey retrieves the value of the SessionKey field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy) GetOrCreateSessionKey() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy_SessionKey {
	if t.SessionKey != nil {
		return t.SessionKey
	}
	t.SessionKey = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy_SessionKey{}
	return t.SessionKey
}

// GetSessionKey returns the value of the SessionKey struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy. If the receiver or the field SessionKey is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy) GetSessionKey() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy_SessionKey {
	if t != nil && t.SessionKey != nil {
		return t.SessionKey
	}
	return nil
}

// GetCircuitIdFromAuth retrieves the value of the leaf CircuitIdFromAuth from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CircuitIdFromAuth is set, it can
// safely use t.GetCircuitIdFromAuth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CircuitIdFromAuth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy) GetCircuitIdFromAuth() bool {
	if t == nil || t.CircuitIdFromAuth == nil {
		return false
	}
	return *t.CircuitIdFromAuth
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetSessionTimeout retrieves the value of the leaf SessionTimeout from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionTimeout is set, it can
// safely use t.GetSessionTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy) GetSessionTimeout() NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy_SessionTimeout_Union {
	if t == nil || t.SessionTimeout == nil {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy_SessionTimeout_Enum_unlimited
	}
	return t.SessionTimeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CircuitIdFromAuth == nil {
		var v bool = false
		t.CircuitIdFromAuth = &v
	}
	if t.SessionTimeout == nil {
		t.SessionTimeout = NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy_SessionTimeout_Enum_unlimited
	}
	t.SessionKey.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy_SessionKey represents the /nokia-conf/configure/groups/group/subscriber-mgmt/ipoe-session-policy/session-key YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy_SessionKey struct {
	Cid *bool `path:"cid" module:"nokia-conf"`
	Mac *bool `path:"mac" module:"nokia-conf"`
	Rid *bool `path:"rid" module:"nokia-conf"`
	Sap *bool `path:"sap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy_SessionKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy_SessionKey) IsYANGGoStruct() {
}

// GetCid retrieves the value of the leaf Cid from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy_SessionKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cid is set, it can
// safely use t.GetCid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy_SessionKey) GetCid() bool {
	if t == nil || t.Cid == nil {
		return false
	}
	return *t.Cid
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy_SessionKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy_SessionKey) GetMac() bool {
	if t == nil || t.Mac == nil {
		return true
	}
	return *t.Mac
}

// GetRid retrieves the value of the leaf Rid from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy_SessionKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rid is set, it can
// safely use t.GetRid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy_SessionKey) GetRid() bool {
	if t == nil || t.Rid == nil {
		return false
	}
	return *t.Rid
}

// GetSap retrieves the value of the leaf Sap from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy_SessionKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sap is set, it can
// safely use t.GetSap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy_SessionKey) GetSap() bool {
	if t == nil || t.Sap == nil {
		return true
	}
	return *t.Sap
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy_SessionKey
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy_SessionKey) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cid == nil {
		var v bool = false
		t.Cid = &v
	}
	if t.Mac == nil {
		var v bool = true
		t.Mac = &v
	}
	if t.Rid == nil {
		var v bool = false
		t.Rid = &v
	}
	if t.Sap == nil {
		var v bool = true
		t.Sap = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy_SessionKey) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy_SessionKey"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy_SessionKey) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy_SessionKey) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy_SessionKey.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IpoeSessionPolicy_SessionKey) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter represents the /nokia-conf/configure/groups/group/subscriber-mgmt/isa-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter struct {
	Description *string                                                          `path:"description" module:"nokia-conf"`
	Ipv4        *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4  `path:"ipv4" module:"nokia-conf"`
	Ipv6        *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6  `path:"ipv6" module:"nokia-conf"`
	Name        *string                                                          `path:"name" module:"nokia-conf"`
	Type        E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Type `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter) GetOrCreateIpv6() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6{}
	return t.Ipv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter) GetIpv4() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter) GetIpv6() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter) GetType() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Type_dsm
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Type_dsm
	}
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4 represents the /nokia-conf/configure/groups/group/subscriber-mgmt/isa-filter/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4 struct {
	DefaultAction E_NokiaTypesFilter_IsaFilterDefaultAction                                                                                                               `path:"default-action" module:"nokia-conf"`
	Entry         map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4) NewEntry(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Id_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry{
		Id: Id,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Id_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.Id = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4) GetOrCreateEntry(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry {

	key := Id

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4) GetEntry(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4) DeleteEntry(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Id_Union) {
	key := Id

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4) AppendEntry(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry) error {
	key := v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetDefaultAction retrieves the value of the leaf DefaultAction from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultAction is set, it can
// safely use t.GetDefaultAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4) GetDefaultAction() E_NokiaTypesFilter_IsaFilterDefaultAction {
	if t == nil || t.DefaultAction == 0 {
		return NokiaTypesFilter_IsaFilterDefaultAction_drop
	}
	return t.DefaultAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultAction == 0 {
		t.DefaultAction = NokiaTypesFilter_IsaFilterDefaultAction_drop
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry represents the /nokia-conf/configure/groups/group/subscriber-mgmt/isa-filter/ipv4/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry struct {
	Action      *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action  `path:"action" module:"nokia-conf" yangPresence:"true"`
	Description *string                                                                       `path:"description" module:"nokia-conf"`
	Id          NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Id_Union `path:"id" module:"nokia-conf"`
	Match       *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match   `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry) GetOrCreateAction() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry) GetOrCreateMatch() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry) GetAction() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry) GetMatch() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry) GetId() NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Id_Union {
	if t == nil || t.Id == nil {
		return nil
	}
	return t.Id
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"id": t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action represents the /nokia-conf/configure/groups/group/subscriber-mgmt/isa-filter/ipv4/entry/action YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action struct {
	Drop         YANGEmpty                                                                                 `path:"drop" module:"nokia-conf"`
	Forward      YANGEmpty                                                                                 `path:"forward" module:"nokia-conf"`
	HttpRedirect *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action_HttpRedirect `path:"http-redirect" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action) IsYANGGoStruct() {
}

// GetOrCreateHttpRedirect retrieves the value of the HttpRedirect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action) GetOrCreateHttpRedirect() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action_HttpRedirect {
	if t.HttpRedirect != nil {
		return t.HttpRedirect
	}
	t.HttpRedirect = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action_HttpRedirect{}
	return t.HttpRedirect
}

// GetHttpRedirect returns the value of the HttpRedirect struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action. If the receiver or the field HttpRedirect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action) GetHttpRedirect() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action_HttpRedirect {
	if t != nil && t.HttpRedirect != nil {
		return t.HttpRedirect
	}
	return nil
}

// GetDrop retrieves the value of the leaf Drop from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action) GetDrop() YANGEmpty {
	if t == nil || t.Drop == false {
		return false
	}
	return t.Drop
}

// GetForward retrieves the value of the leaf Forward from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Forward is set, it can
// safely use t.GetForward() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Forward == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action) GetForward() YANGEmpty {
	if t == nil || t.Forward == false {
		return false
	}
	return t.Forward
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.HttpRedirect.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action_HttpRedirect represents the /nokia-conf/configure/groups/group/subscriber-mgmt/isa-filter/ipv4/entry/action/http-redirect YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action_HttpRedirect struct {
	Url *string `path:"url" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action_HttpRedirect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action_HttpRedirect) IsYANGGoStruct() {
}

// GetUrl retrieves the value of the leaf Url from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action_HttpRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Url is set, it can
// safely use t.GetUrl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Url == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action_HttpRedirect) GetUrl() string {
	if t == nil || t.Url == nil {
		return ""
	}
	return *t.Url
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action_HttpRedirect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action_HttpRedirect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action_HttpRedirect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action_HttpRedirect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action_HttpRedirect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action_HttpRedirect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action_HttpRedirect.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Action_HttpRedirect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match represents the /nokia-conf/configure/groups/group/subscriber-mgmt/isa-filter/ipv4/entry/match YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match struct {
	DstIp    *string                                                                               `path:"dst-ip" module:"nokia-conf"`
	DstPort  *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match_DstPort   `path:"dst-port" module:"nokia-conf"`
	Protocol E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match_Protocol `path:"protocol" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match_DstPort{}
	return t.DstPort
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match) GetDstPort() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetDstIp retrieves the value of the leaf DstIp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DstIp is set, it can
// safely use t.GetDstIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DstIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match) GetDstIp() string {
	if t == nil || t.DstIp == nil {
		return ""
	}
	return *t.DstIp
}

// GetProtocol retrieves the value of the leaf Protocol from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match) GetProtocol() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match_Protocol {
	if t == nil || t.Protocol == 0 {
		return 0
	}
	return t.Protocol
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstPort.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match_DstPort represents the /nokia-conf/configure/groups/group/subscriber-mgmt/isa-filter/ipv4/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match_DstPort struct {
	Equals *int32 `path:"equals" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match_DstPort) IsYANGGoStruct() {
}

// GetEquals retrieves the value of the leaf Equals from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Equals is set, it can
// safely use t.GetEquals() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Equals == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match_DstPort) GetEquals() int32 {
	if t == nil || t.Equals == nil {
		return 0
	}
	return *t.Equals
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match_DstPort.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv4_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6 represents the /nokia-conf/configure/groups/group/subscriber-mgmt/isa-filter/ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6 struct {
	DefaultAction E_NokiaTypesFilter_IsaFilterDefaultAction                                                                                                               `path:"default-action" module:"nokia-conf"`
	Entry         map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6) NewEntry(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Id_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry{
		Id: Id,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Id_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.Id = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6) GetOrCreateEntry(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry {

	key := Id

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6) GetEntry(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6) DeleteEntry(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Id_Union) {
	key := Id

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6) AppendEntry(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry) error {
	key := v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetDefaultAction retrieves the value of the leaf DefaultAction from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultAction is set, it can
// safely use t.GetDefaultAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6) GetDefaultAction() E_NokiaTypesFilter_IsaFilterDefaultAction {
	if t == nil || t.DefaultAction == 0 {
		return NokiaTypesFilter_IsaFilterDefaultAction_drop
	}
	return t.DefaultAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultAction == 0 {
		t.DefaultAction = NokiaTypesFilter_IsaFilterDefaultAction_drop
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry represents the /nokia-conf/configure/groups/group/subscriber-mgmt/isa-filter/ipv6/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry struct {
	Action      *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action  `path:"action" module:"nokia-conf" yangPresence:"true"`
	Description *string                                                                       `path:"description" module:"nokia-conf"`
	Id          NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Id_Union `path:"id" module:"nokia-conf"`
	Match       *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match   `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry) GetOrCreateAction() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry) GetOrCreateMatch() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry) GetAction() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry) GetMatch() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry) GetId() NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Id_Union {
	if t == nil || t.Id == nil {
		return nil
	}
	return t.Id
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"id": t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action represents the /nokia-conf/configure/groups/group/subscriber-mgmt/isa-filter/ipv6/entry/action YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action struct {
	Drop         YANGEmpty                                                                                 `path:"drop" module:"nokia-conf"`
	Forward      YANGEmpty                                                                                 `path:"forward" module:"nokia-conf"`
	HttpRedirect *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action_HttpRedirect `path:"http-redirect" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action) IsYANGGoStruct() {
}

// GetOrCreateHttpRedirect retrieves the value of the HttpRedirect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action) GetOrCreateHttpRedirect() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action_HttpRedirect {
	if t.HttpRedirect != nil {
		return t.HttpRedirect
	}
	t.HttpRedirect = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action_HttpRedirect{}
	return t.HttpRedirect
}

// GetHttpRedirect returns the value of the HttpRedirect struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action. If the receiver or the field HttpRedirect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action) GetHttpRedirect() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action_HttpRedirect {
	if t != nil && t.HttpRedirect != nil {
		return t.HttpRedirect
	}
	return nil
}

// GetDrop retrieves the value of the leaf Drop from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action) GetDrop() YANGEmpty {
	if t == nil || t.Drop == false {
		return false
	}
	return t.Drop
}

// GetForward retrieves the value of the leaf Forward from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Forward is set, it can
// safely use t.GetForward() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Forward == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action) GetForward() YANGEmpty {
	if t == nil || t.Forward == false {
		return false
	}
	return t.Forward
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.HttpRedirect.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action_HttpRedirect represents the /nokia-conf/configure/groups/group/subscriber-mgmt/isa-filter/ipv6/entry/action/http-redirect YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action_HttpRedirect struct {
	Url *string `path:"url" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action_HttpRedirect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action_HttpRedirect) IsYANGGoStruct() {
}

// GetUrl retrieves the value of the leaf Url from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action_HttpRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Url is set, it can
// safely use t.GetUrl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Url == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action_HttpRedirect) GetUrl() string {
	if t == nil || t.Url == nil {
		return ""
	}
	return *t.Url
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action_HttpRedirect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action_HttpRedirect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action_HttpRedirect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action_HttpRedirect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action_HttpRedirect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action_HttpRedirect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action_HttpRedirect.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Action_HttpRedirect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match represents the /nokia-conf/configure/groups/group/subscriber-mgmt/isa-filter/ipv6/entry/match YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match struct {
	DstIp    *string                                                                               `path:"dst-ip" module:"nokia-conf"`
	DstPort  *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match_DstPort   `path:"dst-port" module:"nokia-conf"`
	Protocol E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match_Protocol `path:"protocol" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match_DstPort{}
	return t.DstPort
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match) GetDstPort() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetDstIp retrieves the value of the leaf DstIp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DstIp is set, it can
// safely use t.GetDstIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DstIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match) GetDstIp() string {
	if t == nil || t.DstIp == nil {
		return ""
	}
	return *t.DstIp
}

// GetProtocol retrieves the value of the leaf Protocol from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match) GetProtocol() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match_Protocol {
	if t == nil || t.Protocol == 0 {
		return 0
	}
	return t.Protocol
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstPort.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match_DstPort represents the /nokia-conf/configure/groups/group/subscriber-mgmt/isa-filter/ipv6/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match_DstPort struct {
	Equals *int32 `path:"equals" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match_DstPort) IsYANGGoStruct() {
}

// GetEquals retrieves the value of the leaf Equals from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Equals is set, it can
// safely use t.GetEquals() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Equals == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match_DstPort) GetEquals() int32 {
	if t == nil || t.Equals == nil {
		return 0
	}
	return *t.Equals
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match_DstPort.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaFilter_Ipv6_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer represents the /nokia-conf/configure/groups/group/subscriber-mgmt/isa-policer YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer struct {
	Action         E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_Action        `path:"action" module:"nokia-conf"`
	AdaptationRule *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_AdaptationRule `path:"adaptation-rule" module:"nokia-conf"`
	Cbs            *int32                                                                     `path:"cbs" module:"nokia-conf"`
	Description    *string                                                                    `path:"description" module:"nokia-conf"`
	Mbs            *int32                                                                     `path:"mbs" module:"nokia-conf"`
	Name           *string                                                                    `path:"name" module:"nokia-conf"`
	Rate           *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_Rate           `path:"rate" module:"nokia-conf"`
	Type           E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_Type          `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer) IsYANGGoStruct() {}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer) GetOrCreateAdaptationRule() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_Rate{}
	return t.Rate
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer) GetAdaptationRule() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer) GetRate() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer) GetAction() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_Action {
	if t == nil || t.Action == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_Action_permit_deny
	}
	return t.Action
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer) GetCbs() int32 {
	if t == nil || t.Cbs == nil {
		return 0
	}
	return *t.Cbs
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer) GetMbs() int32 {
	if t == nil || t.Mbs == nil {
		return 0
	}
	return *t.Mbs
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer) GetType() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_Type_single_bucket_bandwidth
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_Action_permit_deny
	}
	if t.Cbs == nil {
		var v int32 = 0
		t.Cbs = &v
	}
	if t.Mbs == nil {
		var v int32 = 0
		t.Mbs = &v
	}
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_Type_single_bucket_bandwidth
	}
	t.AdaptationRule.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_AdaptationRule represents the /nokia-conf/configure/groups/group/subscriber-mgmt/isa-policer/adaptation-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRule `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_AdaptationRule) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Cir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == 0 {
		t.Cir = NokiaTypesQos_AdaptationRule_closest
	}
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_AdaptationRule.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_Rate represents the /nokia-conf/configure/groups/group/subscriber-mgmt/isa-policer/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_Rate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_Rate) GetCir() NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionInt32(0)
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_Rate) GetPir() NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesQos_IsaPolicerPirRate_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = UnionInt32(0)
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesQos_IsaPolicerPirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_Rate.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaPolicer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining represents the /nokia-conf/configure/groups/group/subscriber-mgmt/isa-service-chaining YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining struct {
	Evpn      map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn      `path:"evpn" module:"nokia-conf"`
	MacPrefix *string                                                                                  `path:"mac-prefix" module:"nokia-conf"`
	VasFilter map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter `path:"vas-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining) IsYANGGoStruct() {}

// NewEvpn creates a new entry in the Evpn list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining) NewEvpn(Id string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Evpn == nil {
		t.Evpn = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Evpn[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Evpn", key)
	}

	t.Evpn[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn{
		Id: &Id,
	}

	return t.Evpn[key], nil
}

// RenameEvpn renames an entry in the list Evpn within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining) RenameEvpn(oldK, newK string) error {
	if _, ok := t.Evpn[newK]; ok {
		return fmt.Errorf("key %v already exists in Evpn", newK)
	}

	e, ok := t.Evpn[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Evpn", oldK)
	}
	e.Id = &newK

	t.Evpn[newK] = e
	delete(t.Evpn, oldK)
	return nil
}

// GetOrCreateEvpn retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining) GetOrCreateEvpn(Id string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn {

	key := Id

	if v, ok := t.Evpn[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEvpn(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEvpn got unexpected error: %v", err))
	}
	return v
}

// GetEvpn retrieves the value with the specified key from
// the Evpn map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining) GetEvpn(Id string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Evpn[key]; ok {
		return lm
	}
	return nil
}

// DeleteEvpn deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining) DeleteEvpn(Id string) {
	key := Id

	delete(t.Evpn, key)
}

// AppendEvpn appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn struct to the
// list Evpn of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining) AppendEvpn(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Evpn == nil {
		t.Evpn = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn)
	}

	if _, ok := t.Evpn[key]; ok {
		return fmt.Errorf("duplicate key for list Evpn %v", key)
	}

	t.Evpn[key] = v
	return nil
}

// NewVasFilter creates a new entry in the VasFilter list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining) NewVasFilter(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VasFilter == nil {
		t.VasFilter = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VasFilter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VasFilter", key)
	}

	t.VasFilter[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter{
		Name: &Name,
	}

	return t.VasFilter[key], nil
}

// RenameVasFilter renames an entry in the list VasFilter within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining) RenameVasFilter(oldK, newK string) error {
	if _, ok := t.VasFilter[newK]; ok {
		return fmt.Errorf("key %v already exists in VasFilter", newK)
	}

	e, ok := t.VasFilter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VasFilter", oldK)
	}
	e.Name = &newK

	t.VasFilter[newK] = e
	delete(t.VasFilter, oldK)
	return nil
}

// GetOrCreateVasFilter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining) GetOrCreateVasFilter(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter {

	key := Name

	if v, ok := t.VasFilter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVasFilter(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVasFilter got unexpected error: %v", err))
	}
	return v
}

// GetVasFilter retrieves the value with the specified key from
// the VasFilter map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining) GetVasFilter(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.VasFilter[key]; ok {
		return lm
	}
	return nil
}

// DeleteVasFilter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining) DeleteVasFilter(Name string) {
	key := Name

	delete(t.VasFilter, key)
}

// AppendVasFilter appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter struct to the
// list VasFilter of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining) AppendVasFilter(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VasFilter == nil {
		t.VasFilter = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter)
	}

	if _, ok := t.VasFilter[key]; ok {
		return fmt.Errorf("duplicate key for list VasFilter %v", key)
	}

	t.VasFilter[key] = v
	return nil
}

// GetMacPrefix retrieves the value of the leaf MacPrefix from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacPrefix is set, it can
// safely use t.GetMacPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining) GetMacPrefix() string {
	if t == nil || t.MacPrefix == nil {
		return ""
	}
	return *t.MacPrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Evpn {
		e.PopulateDefaults()
	}
	for _, e := range t.VasFilter {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn represents the /nokia-conf/configure/groups/group/subscriber-mgmt/isa-service-chaining/evpn YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn struct {
	AdminState            E_NokiaTypesSros_AdminState                                                                     `path:"admin-state" module:"nokia-conf"`
	Bgp                   *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp                    `path:"bgp" module:"nokia-conf"`
	Description           *string                                                                                         `path:"description" module:"nokia-conf"`
	Export                *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export                 `path:"export" module:"nokia-conf"`
	Id                    *string                                                                                         `path:"id" module:"nokia-conf"`
	ImportMode            E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_ImportMode            `path:"import-mode" module:"nokia-conf"`
	PrefixRouteResolution E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_PrefixRouteResolution `path:"prefix-route-resolution" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn) IsYANGGoStruct() {}

// GetOrCreateBgp retrieves the value of the Bgp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn) GetOrCreateBgp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp {
	if t.Bgp != nil {
		return t.Bgp
	}
	t.Bgp = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp{}
	return t.Bgp
}

// GetOrCreateExport retrieves the value of the Export field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn) GetOrCreateExport() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export {
	if t.Export != nil {
		return t.Export
	}
	t.Export = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export{}
	return t.Export
}

// GetBgp returns the value of the Bgp struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn. If the receiver or the field Bgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn) GetBgp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp {
	if t != nil && t.Bgp != nil {
		return t.Bgp
	}
	return nil
}

// GetExport returns the value of the Export struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn. If the receiver or the field Export is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn) GetExport() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export {
	if t != nil && t.Export != nil {
		return t.Export
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetImportMode retrieves the value of the leaf ImportMode from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportMode is set, it can
// safely use t.GetImportMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn) GetImportMode() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_ImportMode {
	if t == nil || t.ImportMode == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_ImportMode_none
	}
	return t.ImportMode
}

// GetPrefixRouteResolution retrieves the value of the leaf PrefixRouteResolution from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixRouteResolution is set, it can
// safely use t.GetPrefixRouteResolution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixRouteResolution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn) GetPrefixRouteResolution() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_PrefixRouteResolution {
	if t == nil || t.PrefixRouteResolution == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_PrefixRouteResolution_recursive
	}
	return t.PrefixRouteResolution
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ImportMode == 0 {
		t.ImportMode = NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_ImportMode_none
	}
	if t.PrefixRouteResolution == 0 {
		t.PrefixRouteResolution = NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_PrefixRouteResolution_recursive
	}
	t.Bgp.PopulateDefaults()
	t.Export.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp represents the /nokia-conf/configure/groups/group/subscriber-mgmt/isa-service-chaining/evpn/bgp YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp struct {
	RouteDistinguisher *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteDistinguisher `path:"route-distinguisher" module:"nokia-conf"`
	RouteTarget        *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteTarget        `path:"route-target" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp) IsYANGGoStruct() {
}

// GetOrCreateRouteDistinguisher retrieves the value of the RouteDistinguisher field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp) GetOrCreateRouteDistinguisher() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteDistinguisher {
	if t.RouteDistinguisher != nil {
		return t.RouteDistinguisher
	}
	t.RouteDistinguisher = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteDistinguisher{}
	return t.RouteDistinguisher
}

// GetOrCreateRouteTarget retrieves the value of the RouteTarget field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp) GetOrCreateRouteTarget() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteTarget {
	if t.RouteTarget != nil {
		return t.RouteTarget
	}
	t.RouteTarget = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteTarget{}
	return t.RouteTarget
}

// GetRouteDistinguisher returns the value of the RouteDistinguisher struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp. If the receiver or the field RouteDistinguisher is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp) GetRouteDistinguisher() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteDistinguisher {
	if t != nil && t.RouteDistinguisher != nil {
		return t.RouteDistinguisher
	}
	return nil
}

// GetRouteTarget returns the value of the RouteTarget struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp. If the receiver or the field RouteTarget is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp) GetRouteTarget() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteTarget {
	if t != nil && t.RouteTarget != nil {
		return t.RouteTarget
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RouteDistinguisher.PopulateDefaults()
	t.RouteTarget.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteDistinguisher represents the /nokia-conf/configure/groups/group/subscriber-mgmt/isa-service-chaining/evpn/bgp/route-distinguisher YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteDistinguisher struct {
	Rd NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteDistinguisher_Rd_Union `path:"rd" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteDistinguisher implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteDistinguisher) IsYANGGoStruct() {
}

// GetRd retrieves the value of the leaf Rd from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteDistinguisher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rd is set, it can
// safely use t.GetRd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteDistinguisher) GetRd() NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteDistinguisher_Rd_Union {
	if t == nil || t.Rd == nil {
		return nil
	}
	return t.Rd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteDistinguisher
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteDistinguisher) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteDistinguisher) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteDistinguisher"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteDistinguisher) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteDistinguisher) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteDistinguisher.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteDistinguisher) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteTarget represents the /nokia-conf/configure/groups/group/subscriber-mgmt/isa-service-chaining/evpn/bgp/route-target YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteTarget struct {
	Export *string `path:"export" module:"nokia-conf"`
	Import *string `path:"import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteTarget implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteTarget) IsYANGGoStruct() {
}

// GetExport retrieves the value of the leaf Export from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Export is set, it can
// safely use t.GetExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Export == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteTarget) GetExport() string {
	if t == nil || t.Export == nil {
		return ""
	}
	return *t.Export
}

// GetImport retrieves the value of the leaf Import from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Import is set, it can
// safely use t.GetImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Import == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteTarget) GetImport() string {
	if t == nil || t.Import == nil {
		return ""
	}
	return *t.Import
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteTarget
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteTarget) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteTarget) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteTarget"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteTarget) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteTarget) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteTarget.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Bgp_RouteTarget) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export represents the /nokia-conf/configure/groups/group/subscriber-mgmt/isa-service-chaining/evpn/export YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export struct {
	AdvertisePools      *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools      `path:"advertise-pools" module:"nokia-conf"`
	GatewayAddressRange *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_GatewayAddressRange `path:"gateway-address-range" module:"nokia-conf" yangPresence:"true"`
	Vxlan               *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_Vxlan               `path:"vxlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export) IsYANGGoStruct() {
}

// GetOrCreateAdvertisePools retrieves the value of the AdvertisePools field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export) GetOrCreateAdvertisePools() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools {
	if t.AdvertisePools != nil {
		return t.AdvertisePools
	}
	t.AdvertisePools = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools{}
	return t.AdvertisePools
}

// GetOrCreateGatewayAddressRange retrieves the value of the GatewayAddressRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export) GetOrCreateGatewayAddressRange() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_GatewayAddressRange {
	if t.GatewayAddressRange != nil {
		return t.GatewayAddressRange
	}
	t.GatewayAddressRange = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_GatewayAddressRange{}
	return t.GatewayAddressRange
}

// GetOrCreateVxlan retrieves the value of the Vxlan field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export) GetOrCreateVxlan() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_Vxlan {
	if t.Vxlan != nil {
		return t.Vxlan
	}
	t.Vxlan = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_Vxlan{}
	return t.Vxlan
}

// GetAdvertisePools returns the value of the AdvertisePools struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export. If the receiver or the field AdvertisePools is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export) GetAdvertisePools() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools {
	if t != nil && t.AdvertisePools != nil {
		return t.AdvertisePools
	}
	return nil
}

// GetGatewayAddressRange returns the value of the GatewayAddressRange struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export. If the receiver or the field GatewayAddressRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export) GetGatewayAddressRange() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_GatewayAddressRange {
	if t != nil && t.GatewayAddressRange != nil {
		return t.GatewayAddressRange
	}
	return nil
}

// GetVxlan returns the value of the Vxlan struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export. If the receiver or the field Vxlan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export) GetVxlan() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_Vxlan {
	if t != nil && t.Vxlan != nil {
		return t.Vxlan
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AdvertisePools.PopulateDefaults()
	t.GatewayAddressRange.PopulateDefaults()
	t.Vxlan.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools represents the /nokia-conf/configure/groups/group/subscriber-mgmt/isa-service-chaining/evpn/export/advertise-pools YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools struct {
	AdminState E_NokiaTypesSros_AdminState                                                                                                                                                                                    `path:"admin-state" module:"nokia-conf"`
	Pool       map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool_Key]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool `path:"pool" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools) IsYANGGoStruct() {
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool_Key represents the key for list Pool of element /nokia-conf/configure/groups/group/subscriber-mgmt/isa-service-chaining/evpn/export/advertise-pools.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool_Key struct {
	RouterInstance string `path:"router-instance"`
	Name           string `path:"name"`
}

// NewPool creates a new entry in the Pool list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools) NewPool(RouterInstance string, Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool_Key]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool)
	}

	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool_Key{
		RouterInstance: RouterInstance,
		Name:           Name,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Pool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Pool", key)
	}

	t.Pool[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool{
		RouterInstance: &RouterInstance,
		Name:           &Name,
	}

	return t.Pool[key], nil
}

// RenamePool renames an entry in the list Pool within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools) RenamePool(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool_Key) error {
	if _, ok := t.Pool[newK]; ok {
		return fmt.Errorf("key %v already exists in Pool", newK)
	}

	e, ok := t.Pool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Pool", oldK)
	}
	e.RouterInstance = &newK.RouterInstance
	e.Name = &newK.Name

	t.Pool[newK] = e
	delete(t.Pool, oldK)
	return nil
}

// GetOrCreatePool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools) GetOrCreatePool(RouterInstance string, Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool {

	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool_Key{
		RouterInstance: RouterInstance,
		Name:           Name,
	}

	if v, ok := t.Pool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPool(RouterInstance, Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePool got unexpected error: %v", err))
	}
	return v
}

// GetPool retrieves the value with the specified key from
// the Pool map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools) GetPool(RouterInstance string, Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool_Key{
		RouterInstance: RouterInstance,
		Name:           Name,
	}

	if lm, ok := t.Pool[key]; ok {
		return lm
	}
	return nil
}

// DeletePool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools) DeletePool(RouterInstance string, Name string) {
	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool_Key{
		RouterInstance: RouterInstance,
		Name:           Name,
	}

	delete(t.Pool, key)
}

// AppendPool appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool struct to the
// list Pool of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools) AppendPool(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool) error {
	if v.RouterInstance == nil {
		return fmt.Errorf("invalid nil key for RouterInstance")
	}

	if v.Name == nil {
		return fmt.Errorf("invalid nil key for Name")
	}

	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool_Key{
		RouterInstance: *v.RouterInstance,
		Name:           *v.Name,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool_Key]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool)
	}

	if _, ok := t.Pool[key]; ok {
		return fmt.Errorf("duplicate key for list Pool %v", key)
	}

	t.Pool[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Pool {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool represents the /nokia-conf/configure/groups/group/subscriber-mgmt/isa-service-chaining/evpn/export/advertise-pools/pool YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool struct {
	Name           *string `path:"name" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool) IsYANGGoStruct() {
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	if t.RouterInstance == nil {
		return nil, fmt.Errorf("nil value for key RouterInstance")
	}

	return map[string]interface{}{
		"name":            *t.Name,
		"router-instance": *t.RouterInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_AdvertisePools_Pool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_GatewayAddressRange represents the /nokia-conf/configure/groups/group/subscriber-mgmt/isa-service-chaining/evpn/export/gateway-address-range YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_GatewayAddressRange struct {
	End   *string `path:"end" module:"nokia-conf"`
	Start *string `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_GatewayAddressRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_GatewayAddressRange) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_GatewayAddressRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_GatewayAddressRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_GatewayAddressRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_GatewayAddressRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_GatewayAddressRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_GatewayAddressRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_GatewayAddressRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_GatewayAddressRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_GatewayAddressRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_GatewayAddressRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_GatewayAddressRange.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_GatewayAddressRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_Vxlan represents the /nokia-conf/configure/groups/group/subscriber-mgmt/isa-service-chaining/evpn/export/vxlan YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_Vxlan struct {
	Vni *uint32 `path:"vni" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_Vxlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_Vxlan) IsYANGGoStruct() {
}

// GetVni retrieves the value of the leaf Vni from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vni is set, it can
// safely use t.GetVni() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vni == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_Vxlan) GetVni() uint32 {
	if t == nil || t.Vni == nil {
		return 0
	}
	return *t.Vni
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_Vxlan
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_Vxlan) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_Vxlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_Vxlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_Vxlan) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_Vxlan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_Vxlan.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_Evpn_Export_Vxlan) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter represents the /nokia-conf/configure/groups/group/subscriber-mgmt/isa-service-chaining/vas-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter struct {
	Description *string                                                                                                                                                                             `path:"description" module:"nokia-conf"`
	Entry       map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry `path:"entry" module:"nokia-conf"`
	Name        *string                                                                                                                                                                             `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter) IsYANGGoStruct() {
}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter) NewEntry(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Id_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry{
		Id: Id,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Id_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.Id = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter) GetOrCreateEntry(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry {

	key := Id

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter) GetEntry(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter) DeleteEntry(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Id_Union) {
	key := Id

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter) AppendEntry(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry) error {
	key := v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry represents the /nokia-conf/configure/groups/group/subscriber-mgmt/isa-service-chaining/vas-filter/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry struct {
	Action      map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_Direction_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action `path:"action" module:"nokia-conf"`
	AdminState  E_NokiaTypesSros_AdminState                                                                                                                                                                              `path:"admin-state" module:"nokia-conf"`
	Description *string                                                                                                                                                                                                  `path:"description" module:"nokia-conf"`
	Id          NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Id_Union                                                                                                              `path:"id" module:"nokia-conf"`
	Match       *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Match                                                                                                                `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry) IsYANGGoStruct() {
}

// NewAction creates a new entry in the Action list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry) NewAction(Direction NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_Direction_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Action == nil {
		t.Action = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_Direction_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action)
	}

	key := Direction

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Action[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Action", key)
	}

	t.Action[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action{
		Direction: Direction,
	}

	return t.Action[key], nil
}

// RenameAction renames an entry in the list Action within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry) RenameAction(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_Direction_Union) error {
	if _, ok := t.Action[newK]; ok {
		return fmt.Errorf("key %v already exists in Action", newK)
	}

	e, ok := t.Action[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Action", oldK)
	}
	e.Direction = newK

	t.Action[newK] = e
	delete(t.Action, oldK)
	return nil
}

// GetOrCreateAction retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry) GetOrCreateAction(Direction NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_Direction_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action {

	key := Direction

	if v, ok := t.Action[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAction(Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAction got unexpected error: %v", err))
	}
	return v
}

// GetAction retrieves the value with the specified key from
// the Action map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry) GetAction(Direction NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_Direction_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action {

	if t == nil {
		return nil
	}

	key := Direction

	if lm, ok := t.Action[key]; ok {
		return lm
	}
	return nil
}

// DeleteAction deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry) DeleteAction(Direction NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_Direction_Union) {
	key := Direction

	delete(t.Action, key)
}

// AppendAction appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action struct to the
// list Action of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry) AppendAction(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action) error {
	key := v.Direction

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Action == nil {
		t.Action = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_Direction_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action)
	}

	if _, ok := t.Action[key]; ok {
		return fmt.Errorf("duplicate key for list Action %v", key)
	}

	t.Action[key] = v
	return nil
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry) GetOrCreateMatch() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Match{}
	return t.Match
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry) GetMatch() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry) GetId() NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Id_Union {
	if t == nil || t.Id == nil {
		return nil
	}
	return t.Id
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Match.PopulateDefaults()
	for _, e := range t.Action {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"id": t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action represents the /nokia-conf/configure/groups/group/subscriber-mgmt/isa-service-chaining/vas-filter/entry/action YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action struct {
	Direction  NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_Direction_Union `path:"direction" module:"nokia-conf"`
	FailAction E_NokiaTypesFilter_FilterDefaultAction                                                                    `path:"fail-action" module:"nokia-conf"`
	Forward    *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_Forward        `path:"forward" module:"nokia-conf" yangPresence:"true"`
	InsertNsh  *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh      `path:"insert-nsh" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action) IsYANGGoStruct() {
}

// GetOrCreateForward retrieves the value of the Forward field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action) GetOrCreateForward() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_Forward {
	if t.Forward != nil {
		return t.Forward
	}
	t.Forward = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_Forward{}
	return t.Forward
}

// GetOrCreateInsertNsh retrieves the value of the InsertNsh field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action) GetOrCreateInsertNsh() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh {
	if t.InsertNsh != nil {
		return t.InsertNsh
	}
	t.InsertNsh = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh{}
	return t.InsertNsh
}

// GetForward returns the value of the Forward struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action. If the receiver or the field Forward is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action) GetForward() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_Forward {
	if t != nil && t.Forward != nil {
		return t.Forward
	}
	return nil
}

// GetInsertNsh returns the value of the InsertNsh struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action. If the receiver or the field InsertNsh is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action) GetInsertNsh() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh {
	if t != nil && t.InsertNsh != nil {
		return t.InsertNsh
	}
	return nil
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action) GetDirection() NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_Direction_Union {
	if t == nil || t.Direction == nil {
		return nil
	}
	return t.Direction
}

// GetFailAction retrieves the value of the leaf FailAction from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FailAction is set, it can
// safely use t.GetFailAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FailAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action) GetFailAction() E_NokiaTypesFilter_FilterDefaultAction {
	if t == nil || t.FailAction == 0 {
		return NokiaTypesFilter_FilterDefaultAction_accept
	}
	return t.FailAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FailAction == 0 {
		t.FailAction = NokiaTypesFilter_FilterDefaultAction_accept
	}
	t.Forward.PopulateDefaults()
	t.InsertNsh.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction": t.Direction,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_Forward represents the /nokia-conf/configure/groups/group/subscriber-mgmt/isa-service-chaining/vas-filter/entry/action/forward YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_Forward struct {
	Esi  *string `path:"esi" module:"nokia-conf"`
	SfIp *string `path:"sf-ip" module:"nokia-conf"`
	Svc  *string `path:"svc" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_Forward implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_Forward) IsYANGGoStruct() {
}

// GetEsi retrieves the value of the leaf Esi from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_Forward
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Esi is set, it can
// safely use t.GetEsi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Esi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_Forward) GetEsi() string {
	if t == nil || t.Esi == nil {
		return "00:00:00:00:00:00:00:00:00:00"
	}
	return *t.Esi
}

// GetSfIp retrieves the value of the leaf SfIp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_Forward
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SfIp is set, it can
// safely use t.GetSfIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SfIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_Forward) GetSfIp() string {
	if t == nil || t.SfIp == nil {
		return ""
	}
	return *t.SfIp
}

// GetSvc retrieves the value of the leaf Svc from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_Forward
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Svc is set, it can
// safely use t.GetSvc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Svc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_Forward) GetSvc() string {
	if t == nil || t.Svc == nil {
		return ""
	}
	return *t.Svc
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_Forward
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_Forward) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Esi == nil {
		var v string = "00:00:00:00:00:00:00:00:00:00"
		t.Esi = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_Forward) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_Forward"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_Forward) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_Forward) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_Forward.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_Forward) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh represents the /nokia-conf/configure/groups/group/subscriber-mgmt/isa-service-chaining/vas-filter/entry/action/insert-nsh YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh struct {
	MetaData *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_MetaData `path:"meta-data" module:"nokia-conf"`
	SvcPath  *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_SvcPath  `path:"svc-path" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh) IsYANGGoStruct() {
}

// GetOrCreateMetaData retrieves the value of the MetaData field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh) GetOrCreateMetaData() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_MetaData {
	if t.MetaData != nil {
		return t.MetaData
	}
	t.MetaData = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_MetaData{}
	return t.MetaData
}

// GetOrCreateSvcPath retrieves the value of the SvcPath field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh) GetOrCreateSvcPath() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_SvcPath {
	if t.SvcPath != nil {
		return t.SvcPath
	}
	t.SvcPath = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_SvcPath{}
	return t.SvcPath
}

// GetMetaData returns the value of the MetaData struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh. If the receiver or the field MetaData is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh) GetMetaData() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_MetaData {
	if t != nil && t.MetaData != nil {
		return t.MetaData
	}
	return nil
}

// GetSvcPath returns the value of the SvcPath struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh. If the receiver or the field SvcPath is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh) GetSvcPath() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_SvcPath {
	if t != nil && t.SvcPath != nil {
		return t.SvcPath
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MetaData.PopulateDefaults()
	t.SvcPath.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_MetaData represents the /nokia-conf/configure/groups/group/subscriber-mgmt/isa-service-chaining/vas-filter/entry/action/insert-nsh/meta-data YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_MetaData struct {
	InsertSubscriberId YANGEmpty `path:"insert-subscriber-id" module:"nokia-conf"`
	OpaqueData         *string   `path:"opaque-data" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_MetaData implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_MetaData) IsYANGGoStruct() {
}

// GetInsertSubscriberId retrieves the value of the leaf InsertSubscriberId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_MetaData
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InsertSubscriberId is set, it can
// safely use t.GetInsertSubscriberId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InsertSubscriberId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_MetaData) GetInsertSubscriberId() YANGEmpty {
	if t == nil || t.InsertSubscriberId == false {
		return false
	}
	return t.InsertSubscriberId
}

// GetOpaqueData retrieves the value of the leaf OpaqueData from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_MetaData
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OpaqueData is set, it can
// safely use t.GetOpaqueData() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OpaqueData == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_MetaData) GetOpaqueData() string {
	if t == nil || t.OpaqueData == nil {
		return ""
	}
	return *t.OpaqueData
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_MetaData
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_MetaData) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_MetaData) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_MetaData"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_MetaData) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_MetaData) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_MetaData.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_MetaData) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_SvcPath represents the /nokia-conf/configure/groups/group/subscriber-mgmt/isa-service-chaining/vas-filter/entry/action/insert-nsh/svc-path YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_SvcPath struct {
	PathId   *uint32 `path:"path-id" module:"nokia-conf"`
	SvcIndex *uint32 `path:"svc-index" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_SvcPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_SvcPath) IsYANGGoStruct() {
}

// GetPathId retrieves the value of the leaf PathId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_SvcPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_SvcPath) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetSvcIndex retrieves the value of the leaf SvcIndex from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_SvcPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SvcIndex is set, it can
// safely use t.GetSvcIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SvcIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_SvcPath) GetSvcIndex() uint32 {
	if t == nil || t.SvcIndex == nil {
		return 0
	}
	return *t.SvcIndex
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_SvcPath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_SvcPath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_SvcPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_SvcPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_SvcPath) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_SvcPath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_SvcPath.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Action_InsertNsh_SvcPath) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Match represents the /nokia-conf/configure/groups/group/subscriber-mgmt/isa-service-chaining/vas-filter/entry/match YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Match struct {
	ForeignIp   *string                                                                                             `path:"foreign-ip" module:"nokia-conf"`
	ForeignPort *int32                                                                                              `path:"foreign-port" module:"nokia-conf"`
	Protocol    E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Match_Protocol `path:"protocol" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Match) IsYANGGoStruct() {
}

// GetForeignIp retrieves the value of the leaf ForeignIp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForeignIp is set, it can
// safely use t.GetForeignIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForeignIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Match) GetForeignIp() string {
	if t == nil || t.ForeignIp == nil {
		return ""
	}
	return *t.ForeignIp
}

// GetForeignPort retrieves the value of the leaf ForeignPort from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForeignPort is set, it can
// safely use t.GetForeignPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForeignPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Match) GetForeignPort() int32 {
	if t == nil || t.ForeignPort == nil {
		return 0
	}
	return *t.ForeignPort
}

// GetProtocol retrieves the value of the leaf Protocol from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Match) GetProtocol() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Match_Protocol {
	if t == nil || t.Protocol == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Match_Protocol_none
	}
	return t.Protocol
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Protocol == 0 {
		t.Protocol = NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Match_Protocol_none
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Match.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_IsaServiceChaining_VasFilter_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb struct {
	AdminState  E_NokiaTypesSros_AdminState                                       `path:"admin-state" module:"nokia-conf"`
	Description *string                                                           `path:"description" module:"nokia-conf"`
	Ipoe        *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe `path:"ipoe" module:"nokia-conf"`
	Name        *string                                                           `path:"name" module:"nokia-conf"`
	Ppp         *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp  `path:"ppp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb) IsYANGGoStruct() {}

// GetOrCreateIpoe retrieves the value of the Ipoe field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb) GetOrCreateIpoe() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe {
	if t.Ipoe != nil {
		return t.Ipoe
	}
	t.Ipoe = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe{}
	return t.Ipoe
}

// GetOrCreatePpp retrieves the value of the Ppp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb) GetOrCreatePpp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp {
	if t.Ppp != nil {
		return t.Ppp
	}
	t.Ppp = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp{}
	return t.Ppp
}

// GetIpoe returns the value of the Ipoe struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb. If the receiver or the field Ipoe is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb) GetIpoe() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe {
	if t != nil && t.Ipoe != nil {
		return t.Ipoe
	}
	return nil
}

// GetPpp returns the value of the Ppp struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb. If the receiver or the field Ppp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb) GetPpp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp {
	if t != nil && t.Ppp != nil {
		return t.Ppp
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Ipoe.PopulateDefaults()
	t.Ppp.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe struct {
	Host      map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host                                                                           `path:"host" module:"nokia-conf"`
	Mask      map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Type_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask `path:"mask" module:"nokia-conf"`
	MatchList []E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_MatchList                                                                              `path:"match-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe) IsYANGGoStruct() {}

// NewHost creates a new entry in the Host list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe) NewHost(HostName string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Host == nil {
		t.Host = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host)
	}

	key := HostName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Host[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Host", key)
	}

	t.Host[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host{
		HostName: &HostName,
	}

	return t.Host[key], nil
}

// RenameHost renames an entry in the list Host within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe) RenameHost(oldK, newK string) error {
	if _, ok := t.Host[newK]; ok {
		return fmt.Errorf("key %v already exists in Host", newK)
	}

	e, ok := t.Host[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Host", oldK)
	}
	e.HostName = &newK

	t.Host[newK] = e
	delete(t.Host, oldK)
	return nil
}

// GetOrCreateHost retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe) GetOrCreateHost(HostName string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host {

	key := HostName

	if v, ok := t.Host[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHost(HostName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHost got unexpected error: %v", err))
	}
	return v
}

// GetHost retrieves the value with the specified key from
// the Host map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe) GetHost(HostName string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host {

	if t == nil {
		return nil
	}

	key := HostName

	if lm, ok := t.Host[key]; ok {
		return lm
	}
	return nil
}

// DeleteHost deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe) DeleteHost(HostName string) {
	key := HostName

	delete(t.Host, key)
}

// AppendHost appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host struct to the
// list Host of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe) AppendHost(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) error {
	if v.HostName == nil {
		return fmt.Errorf("invalid nil key received for HostName")
	}

	key := *v.HostName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Host == nil {
		t.Host = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host)
	}

	if _, ok := t.Host[key]; ok {
		return fmt.Errorf("duplicate key for list Host %v", key)
	}

	t.Host[key] = v
	return nil
}

// NewMask creates a new entry in the Mask list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe) NewMask(Type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Type_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mask == nil {
		t.Mask = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Type_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask)
	}

	key := Type

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mask[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mask", key)
	}

	t.Mask[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask{
		Type: Type,
	}

	return t.Mask[key], nil
}

// RenameMask renames an entry in the list Mask within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe) RenameMask(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Type_Union) error {
	if _, ok := t.Mask[newK]; ok {
		return fmt.Errorf("key %v already exists in Mask", newK)
	}

	e, ok := t.Mask[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mask", oldK)
	}
	e.Type = newK

	t.Mask[newK] = e
	delete(t.Mask, oldK)
	return nil
}

// GetOrCreateMask retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe) GetOrCreateMask(Type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Type_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask {

	key := Type

	if v, ok := t.Mask[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMask(Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMask got unexpected error: %v", err))
	}
	return v
}

// GetMask retrieves the value with the specified key from
// the Mask map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe) GetMask(Type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Type_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask {

	if t == nil {
		return nil
	}

	key := Type

	if lm, ok := t.Mask[key]; ok {
		return lm
	}
	return nil
}

// DeleteMask deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe) DeleteMask(Type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Type_Union) {
	key := Type

	delete(t.Mask, key)
}

// AppendMask appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask struct to the
// list Mask of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe) AppendMask(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask) error {
	key := v.Type

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mask == nil {
		t.Mask = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Type_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask)
	}

	if _, ok := t.Mask[key]; ok {
		return fmt.Errorf("duplicate key for list Mask %v", key)
	}

	t.Mask[key] = v
	return nil
}

// GetMatchList retrieves the value of the leaf MatchList from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchList is set, it can
// safely use t.GetMatchList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe) GetMatchList() []E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_MatchList {
	if t == nil || t.MatchList == nil {
		return nil
	}
	return t.MatchList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Host {
		e.PopulateDefaults()
	}
	for _, e := range t.Mask {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/host YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host struct {
	AdminState             E_NokiaTypesSros_AdminState                                                                   `path:"admin-state" module:"nokia-conf"`
	Authentication         *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Authentication         `path:"authentication" module:"nokia-conf"`
	GtpInterface           *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_GtpInterface           `path:"gtp-interface" module:"nokia-conf" yangPresence:"true"`
	HostIdentification     *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification     `path:"host-identification" module:"nokia-conf"`
	HostName               *string                                                                                       `path:"host-name" module:"nokia-conf"`
	Identification         *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Identification         `path:"identification" module:"nokia-conf" yangPresence:"true"`
	Ipv4                   *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4                   `path:"ipv4" module:"nokia-conf"`
	Ipv6                   *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6                   `path:"ipv6" module:"nokia-conf"`
	MatchRadiusProxyCache  *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache  `path:"match-radius-proxy-cache" module:"nokia-conf"`
	MldImport              map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MldImport   `path:"mld-import" module:"nokia-conf"`
	MsapDefaults           *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults           `path:"msap-defaults" module:"nokia-conf"`
	RadiusAccountingPolicy *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_RadiusAccountingPolicy `path:"radius-accounting-policy" module:"nokia-conf"`
	RetailServiceId        *uint32                                                                                       `path:"retail-service-id" module:"nokia-conf"`
	RipPolicy              *string                                                                                       `path:"rip-policy" module:"nokia-conf"`
	ToClientOptions        *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions        `path:"to-client-options" module:"nokia-conf"`
	ToServerOptions        *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions        `path:"to-server-options" module:"nokia-conf"`
	Wpp                    *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp                    `path:"wpp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) IsYANGGoStruct() {}

// NewMldImport creates a new entry in the MldImport list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) NewMldImport(PolicyName string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MldImport, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MldImport == nil {
		t.MldImport = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MldImport)
	}

	key := PolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MldImport[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MldImport", key)
	}

	t.MldImport[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MldImport{
		PolicyName: &PolicyName,
	}

	return t.MldImport[key], nil
}

// RenameMldImport renames an entry in the list MldImport within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) RenameMldImport(oldK, newK string) error {
	if _, ok := t.MldImport[newK]; ok {
		return fmt.Errorf("key %v already exists in MldImport", newK)
	}

	e, ok := t.MldImport[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MldImport", oldK)
	}
	e.PolicyName = &newK

	t.MldImport[newK] = e
	delete(t.MldImport, oldK)
	return nil
}

// GetOrCreateMldImport retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) GetOrCreateMldImport(PolicyName string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MldImport {

	key := PolicyName

	if v, ok := t.MldImport[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMldImport(PolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMldImport got unexpected error: %v", err))
	}
	return v
}

// GetMldImport retrieves the value with the specified key from
// the MldImport map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) GetMldImport(PolicyName string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MldImport {

	if t == nil {
		return nil
	}

	key := PolicyName

	if lm, ok := t.MldImport[key]; ok {
		return lm
	}
	return nil
}

// DeleteMldImport deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) DeleteMldImport(PolicyName string) {
	key := PolicyName

	delete(t.MldImport, key)
}

// AppendMldImport appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MldImport struct to the
// list MldImport of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MldImport already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) AppendMldImport(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MldImport) error {
	if v.PolicyName == nil {
		return fmt.Errorf("invalid nil key received for PolicyName")
	}

	key := *v.PolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MldImport == nil {
		t.MldImport = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MldImport)
	}

	if _, ok := t.MldImport[key]; ok {
		return fmt.Errorf("duplicate key for list MldImport %v", key)
	}

	t.MldImport[key] = v
	return nil
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) GetOrCreateAuthentication() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Authentication{}
	return t.Authentication
}

// GetOrCreateGtpInterface retrieves the value of the GtpInterface field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) GetOrCreateGtpInterface() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_GtpInterface {
	if t.GtpInterface != nil {
		return t.GtpInterface
	}
	t.GtpInterface = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_GtpInterface{}
	return t.GtpInterface
}

// GetOrCreateHostIdentification retrieves the value of the HostIdentification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) GetOrCreateHostIdentification() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification {
	if t.HostIdentification != nil {
		return t.HostIdentification
	}
	t.HostIdentification = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification{}
	return t.HostIdentification
}

// GetOrCreateIdentification retrieves the value of the Identification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) GetOrCreateIdentification() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Identification {
	if t.Identification != nil {
		return t.Identification
	}
	t.Identification = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Identification{}
	return t.Identification
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) GetOrCreateIpv6() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6{}
	return t.Ipv6
}

// GetOrCreateMatchRadiusProxyCache retrieves the value of the MatchRadiusProxyCache field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) GetOrCreateMatchRadiusProxyCache() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache {
	if t.MatchRadiusProxyCache != nil {
		return t.MatchRadiusProxyCache
	}
	t.MatchRadiusProxyCache = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache{}
	return t.MatchRadiusProxyCache
}

// GetOrCreateMsapDefaults retrieves the value of the MsapDefaults field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) GetOrCreateMsapDefaults() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults {
	if t.MsapDefaults != nil {
		return t.MsapDefaults
	}
	t.MsapDefaults = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults{}
	return t.MsapDefaults
}

// GetOrCreateRadiusAccountingPolicy retrieves the value of the RadiusAccountingPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) GetOrCreateRadiusAccountingPolicy() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_RadiusAccountingPolicy {
	if t.RadiusAccountingPolicy != nil {
		return t.RadiusAccountingPolicy
	}
	t.RadiusAccountingPolicy = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_RadiusAccountingPolicy{}
	return t.RadiusAccountingPolicy
}

// GetOrCreateToClientOptions retrieves the value of the ToClientOptions field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) GetOrCreateToClientOptions() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions {
	if t.ToClientOptions != nil {
		return t.ToClientOptions
	}
	t.ToClientOptions = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions{}
	return t.ToClientOptions
}

// GetOrCreateToServerOptions retrieves the value of the ToServerOptions field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) GetOrCreateToServerOptions() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions {
	if t.ToServerOptions != nil {
		return t.ToServerOptions
	}
	t.ToServerOptions = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions{}
	return t.ToServerOptions
}

// GetOrCreateWpp retrieves the value of the Wpp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) GetOrCreateWpp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp {
	if t.Wpp != nil {
		return t.Wpp
	}
	t.Wpp = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp{}
	return t.Wpp
}

// GetAuthentication returns the value of the Authentication struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) GetAuthentication() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetGtpInterface returns the value of the GtpInterface struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host. If the receiver or the field GtpInterface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) GetGtpInterface() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_GtpInterface {
	if t != nil && t.GtpInterface != nil {
		return t.GtpInterface
	}
	return nil
}

// GetHostIdentification returns the value of the HostIdentification struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host. If the receiver or the field HostIdentification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) GetHostIdentification() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification {
	if t != nil && t.HostIdentification != nil {
		return t.HostIdentification
	}
	return nil
}

// GetIdentification returns the value of the Identification struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host. If the receiver or the field Identification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) GetIdentification() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Identification {
	if t != nil && t.Identification != nil {
		return t.Identification
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) GetIpv4() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) GetIpv6() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetMatchRadiusProxyCache returns the value of the MatchRadiusProxyCache struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host. If the receiver or the field MatchRadiusProxyCache is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) GetMatchRadiusProxyCache() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache {
	if t != nil && t.MatchRadiusProxyCache != nil {
		return t.MatchRadiusProxyCache
	}
	return nil
}

// GetMsapDefaults returns the value of the MsapDefaults struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host. If the receiver or the field MsapDefaults is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) GetMsapDefaults() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults {
	if t != nil && t.MsapDefaults != nil {
		return t.MsapDefaults
	}
	return nil
}

// GetRadiusAccountingPolicy returns the value of the RadiusAccountingPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host. If the receiver or the field RadiusAccountingPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) GetRadiusAccountingPolicy() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_RadiusAccountingPolicy {
	if t != nil && t.RadiusAccountingPolicy != nil {
		return t.RadiusAccountingPolicy
	}
	return nil
}

// GetToClientOptions returns the value of the ToClientOptions struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host. If the receiver or the field ToClientOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) GetToClientOptions() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions {
	if t != nil && t.ToClientOptions != nil {
		return t.ToClientOptions
	}
	return nil
}

// GetToServerOptions returns the value of the ToServerOptions struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host. If the receiver or the field ToServerOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) GetToServerOptions() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions {
	if t != nil && t.ToServerOptions != nil {
		return t.ToServerOptions
	}
	return nil
}

// GetWpp returns the value of the Wpp struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host. If the receiver or the field Wpp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) GetWpp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp {
	if t != nil && t.Wpp != nil {
		return t.Wpp
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetHostName retrieves the value of the leaf HostName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostName is set, it can
// safely use t.GetHostName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) GetHostName() string {
	if t == nil || t.HostName == nil {
		return ""
	}
	return *t.HostName
}

// GetRetailServiceId retrieves the value of the leaf RetailServiceId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetailServiceId is set, it can
// safely use t.GetRetailServiceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetailServiceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) GetRetailServiceId() uint32 {
	if t == nil || t.RetailServiceId == nil {
		return 0
	}
	return *t.RetailServiceId
}

// GetRipPolicy retrieves the value of the leaf RipPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RipPolicy is set, it can
// safely use t.GetRipPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RipPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) GetRipPolicy() string {
	if t == nil || t.RipPolicy == nil {
		return ""
	}
	return *t.RipPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Authentication.PopulateDefaults()
	t.GtpInterface.PopulateDefaults()
	t.HostIdentification.PopulateDefaults()
	t.Identification.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	t.MatchRadiusProxyCache.PopulateDefaults()
	t.MsapDefaults.PopulateDefaults()
	t.RadiusAccountingPolicy.PopulateDefaults()
	t.ToClientOptions.PopulateDefaults()
	t.ToServerOptions.PopulateDefaults()
	t.Wpp.PopulateDefaults()
	for _, e := range t.MldImport {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) ΛListKeyMap() (map[string]interface{}, error) {
	if t.HostName == nil {
		return nil, fmt.Errorf("nil value for key HostName")
	}

	return map[string]interface{}{
		"host-name": *t.HostName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Authentication represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/host/authentication YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Authentication struct {
	AuthDomainName   *string `path:"auth-domain-name" module:"nokia-conf"`
	GxPolicy         *string `path:"gx-policy" module:"nokia-conf"`
	NasreqAuthPolicy *string `path:"nasreq-auth-policy" module:"nokia-conf"`
	RadiusAuthPolicy *string `path:"radius-auth-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Authentication) IsYANGGoStruct() {
}

// GetAuthDomainName retrieves the value of the leaf AuthDomainName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthDomainName is set, it can
// safely use t.GetAuthDomainName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthDomainName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Authentication) GetAuthDomainName() string {
	if t == nil || t.AuthDomainName == nil {
		return ""
	}
	return *t.AuthDomainName
}

// GetGxPolicy retrieves the value of the leaf GxPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GxPolicy is set, it can
// safely use t.GetGxPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GxPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Authentication) GetGxPolicy() string {
	if t == nil || t.GxPolicy == nil {
		return ""
	}
	return *t.GxPolicy
}

// GetNasreqAuthPolicy retrieves the value of the leaf NasreqAuthPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NasreqAuthPolicy is set, it can
// safely use t.GetNasreqAuthPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NasreqAuthPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Authentication) GetNasreqAuthPolicy() string {
	if t == nil || t.NasreqAuthPolicy == nil {
		return ""
	}
	return *t.NasreqAuthPolicy
}

// GetRadiusAuthPolicy retrieves the value of the leaf RadiusAuthPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusAuthPolicy is set, it can
// safely use t.GetRadiusAuthPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusAuthPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Authentication) GetRadiusAuthPolicy() string {
	if t == nil || t.RadiusAuthPolicy == nil {
		return ""
	}
	return *t.RadiusAuthPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Authentication) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Authentication.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Authentication) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_GtpInterface represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/host/gtp-interface YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_GtpInterface struct {
	Name      *string `path:"name" module:"nokia-conf"`
	ServiceId *uint32 `path:"service-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_GtpInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_GtpInterface) IsYANGGoStruct() {
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_GtpInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_GtpInterface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetServiceId retrieves the value of the leaf ServiceId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_GtpInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceId is set, it can
// safely use t.GetServiceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_GtpInterface) GetServiceId() uint32 {
	if t == nil || t.ServiceId == nil {
		return 0
	}
	return *t.ServiceId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_GtpInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_GtpInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_GtpInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_GtpInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_GtpInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_GtpInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_GtpInterface.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_GtpInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/host/host-identification YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification struct {
	CircuitId             *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_CircuitId             `path:"circuit-id" module:"nokia-conf"`
	DerivedId             *string                                                                                                         `path:"derived-id" module:"nokia-conf"`
	EncapTagRange         *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagRange         `path:"encap-tag-range" module:"nokia-conf" yangPresence:"true"`
	EncapTagSeparateRange *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange `path:"encap-tag-separate-range" module:"nokia-conf"`
	IpPrefix              *string                                                                                                         `path:"ip-prefix" module:"nokia-conf"`
	Mac                   *string                                                                                                         `path:"mac" module:"nokia-conf"`
	Option60              *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_Option60              `path:"option60" module:"nokia-conf"`
	RemoteId              *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_RemoteId              `path:"remote-id" module:"nokia-conf"`
	SapId                 *string                                                                                                         `path:"sap-id" module:"nokia-conf"`
	ServiceId             *uint32                                                                                                         `path:"service-id" module:"nokia-conf"`
	String                *string                                                                                                         `path:"string" module:"nokia-conf"`
	SystemId              *string                                                                                                         `path:"system-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification) IsYANGGoStruct() {
}

// GetOrCreateCircuitId retrieves the value of the CircuitId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification) GetOrCreateCircuitId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_CircuitId {
	if t.CircuitId != nil {
		return t.CircuitId
	}
	t.CircuitId = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_CircuitId{}
	return t.CircuitId
}

// GetOrCreateEncapTagRange retrieves the value of the EncapTagRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification) GetOrCreateEncapTagRange() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagRange {
	if t.EncapTagRange != nil {
		return t.EncapTagRange
	}
	t.EncapTagRange = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagRange{}
	return t.EncapTagRange
}

// GetOrCreateEncapTagSeparateRange retrieves the value of the EncapTagSeparateRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification) GetOrCreateEncapTagSeparateRange() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange {
	if t.EncapTagSeparateRange != nil {
		return t.EncapTagSeparateRange
	}
	t.EncapTagSeparateRange = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange{}
	return t.EncapTagSeparateRange
}

// GetOrCreateOption60 retrieves the value of the Option60 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification) GetOrCreateOption60() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_Option60 {
	if t.Option60 != nil {
		return t.Option60
	}
	t.Option60 = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_Option60{}
	return t.Option60
}

// GetOrCreateRemoteId retrieves the value of the RemoteId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification) GetOrCreateRemoteId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_RemoteId {
	if t.RemoteId != nil {
		return t.RemoteId
	}
	t.RemoteId = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_RemoteId{}
	return t.RemoteId
}

// GetCircuitId returns the value of the CircuitId struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification. If the receiver or the field CircuitId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification) GetCircuitId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_CircuitId {
	if t != nil && t.CircuitId != nil {
		return t.CircuitId
	}
	return nil
}

// GetEncapTagRange returns the value of the EncapTagRange struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification. If the receiver or the field EncapTagRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification) GetEncapTagRange() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagRange {
	if t != nil && t.EncapTagRange != nil {
		return t.EncapTagRange
	}
	return nil
}

// GetEncapTagSeparateRange returns the value of the EncapTagSeparateRange struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification. If the receiver or the field EncapTagSeparateRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification) GetEncapTagSeparateRange() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange {
	if t != nil && t.EncapTagSeparateRange != nil {
		return t.EncapTagSeparateRange
	}
	return nil
}

// GetOption60 returns the value of the Option60 struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification. If the receiver or the field Option60 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification) GetOption60() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_Option60 {
	if t != nil && t.Option60 != nil {
		return t.Option60
	}
	return nil
}

// GetRemoteId returns the value of the RemoteId struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification. If the receiver or the field RemoteId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification) GetRemoteId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_RemoteId {
	if t != nil && t.RemoteId != nil {
		return t.RemoteId
	}
	return nil
}

// GetDerivedId retrieves the value of the leaf DerivedId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DerivedId is set, it can
// safely use t.GetDerivedId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DerivedId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification) GetDerivedId() string {
	if t == nil || t.DerivedId == nil {
		return ""
	}
	return *t.DerivedId
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// GetServiceId retrieves the value of the leaf ServiceId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceId is set, it can
// safely use t.GetServiceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification) GetServiceId() uint32 {
	if t == nil || t.ServiceId == nil {
		return 0
	}
	return *t.ServiceId
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// GetSystemId retrieves the value of the leaf SystemId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemId is set, it can
// safely use t.GetSystemId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification) GetSystemId() string {
	if t == nil || t.SystemId == nil {
		return ""
	}
	return *t.SystemId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.CircuitId.PopulateDefaults()
	t.EncapTagRange.PopulateDefaults()
	t.EncapTagSeparateRange.PopulateDefaults()
	t.Option60.PopulateDefaults()
	t.RemoteId.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_CircuitId represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/host/host-identification/circuit-id YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_CircuitId struct {
	AsciiString *string `path:"ascii-string" module:"nokia-conf"`
	HexString   *string `path:"hex-string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_CircuitId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_CircuitId) IsYANGGoStruct() {
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_CircuitId) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_CircuitId) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_CircuitId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_CircuitId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_CircuitId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_CircuitId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_CircuitId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_CircuitId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_CircuitId.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_CircuitId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagRange represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/host/host-identification/encap-tag-range YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagRange struct {
	From *string `path:"from" module:"nokia-conf"`
	To   *string `path:"to" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagRange) IsYANGGoStruct() {
}

// GetFrom retrieves the value of the leaf From from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if From is set, it can
// safely use t.GetFrom() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.From == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagRange) GetFrom() string {
	if t == nil || t.From == nil {
		return ""
	}
	return *t.From
}

// GetTo retrieves the value of the leaf To from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if To is set, it can
// safely use t.GetTo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.To == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagRange) GetTo() string {
	if t == nil || t.To == nil {
		return ""
	}
	return *t.To
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagRange.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/host/host-identification/encap-tag-separate-range YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange struct {
	Inner *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Inner `path:"inner" module:"nokia-conf"`
	Outer *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Outer `path:"outer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange) IsYANGGoStruct() {
}

// GetOrCreateInner retrieves the value of the Inner field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange) GetOrCreateInner() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Inner {
	if t.Inner != nil {
		return t.Inner
	}
	t.Inner = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Inner{}
	return t.Inner
}

// GetOrCreateOuter retrieves the value of the Outer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange) GetOrCreateOuter() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Outer {
	if t.Outer != nil {
		return t.Outer
	}
	t.Outer = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Outer{}
	return t.Outer
}

// GetInner returns the value of the Inner struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange. If the receiver or the field Inner is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange) GetInner() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Inner {
	if t != nil && t.Inner != nil {
		return t.Inner
	}
	return nil
}

// GetOuter returns the value of the Outer struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange. If the receiver or the field Outer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange) GetOuter() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Outer {
	if t != nil && t.Outer != nil {
		return t.Outer
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Inner.PopulateDefaults()
	t.Outer.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Inner represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/host/host-identification/encap-tag-separate-range/inner YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Inner struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Inner implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Inner) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Inner
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Inner) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Inner
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Inner) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Inner
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Inner) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Inner) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Inner"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Inner) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Inner) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Inner.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Inner) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Outer represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/host/host-identification/encap-tag-separate-range/outer YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Outer struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Outer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Outer) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Outer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Outer) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Outer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Outer) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Outer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Outer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Outer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Outer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Outer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Outer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Outer.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_EncapTagSeparateRange_Outer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_Option60 represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/host/host-identification/option60 YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_Option60 struct {
	AsciiString *string `path:"ascii-string" module:"nokia-conf"`
	HexString   *string `path:"hex-string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_Option60 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_Option60) IsYANGGoStruct() {
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_Option60
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_Option60) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_Option60
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_Option60) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_Option60
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_Option60) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_Option60) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_Option60"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_Option60) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_Option60) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_Option60.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_Option60) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_RemoteId represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/host/host-identification/remote-id YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_RemoteId struct {
	AsciiString *string `path:"ascii-string" module:"nokia-conf"`
	HexString   *string `path:"hex-string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_RemoteId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_RemoteId) IsYANGGoStruct() {
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_RemoteId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_RemoteId) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_RemoteId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_RemoteId) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_RemoteId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_RemoteId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_RemoteId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_RemoteId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_RemoteId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_RemoteId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_RemoteId.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_HostIdentification_RemoteId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Identification represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/host/identification YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Identification struct {
	AncpString        *string `path:"ancp-string" module:"nokia-conf"`
	AppProfileString  *string `path:"app-profile-string" module:"nokia-conf"`
	CategoryMapName   *string `path:"category-map-name" module:"nokia-conf"`
	IntDestId         *string `path:"int-dest-id" module:"nokia-conf"`
	OptionNumber      *uint32 `path:"option-number" module:"nokia-conf"`
	SlaProfileString  *string `path:"sla-profile-string" module:"nokia-conf"`
	SpiSharingGroupId *int32  `path:"spi-sharing-group-id" module:"nokia-conf"`
	SubProfileString  *string `path:"sub-profile-string" module:"nokia-conf"`
	SubscriberId      *string `path:"subscriber-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Identification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Identification) IsYANGGoStruct() {
}

// GetAncpString retrieves the value of the leaf AncpString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Identification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AncpString is set, it can
// safely use t.GetAncpString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AncpString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Identification) GetAncpString() string {
	if t == nil || t.AncpString == nil {
		return ""
	}
	return *t.AncpString
}

// GetAppProfileString retrieves the value of the leaf AppProfileString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Identification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfileString is set, it can
// safely use t.GetAppProfileString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfileString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Identification) GetAppProfileString() string {
	if t == nil || t.AppProfileString == nil {
		return ""
	}
	return *t.AppProfileString
}

// GetCategoryMapName retrieves the value of the leaf CategoryMapName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Identification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CategoryMapName is set, it can
// safely use t.GetCategoryMapName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CategoryMapName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Identification) GetCategoryMapName() string {
	if t == nil || t.CategoryMapName == nil {
		return ""
	}
	return *t.CategoryMapName
}

// GetIntDestId retrieves the value of the leaf IntDestId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Identification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IntDestId is set, it can
// safely use t.GetIntDestId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IntDestId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Identification) GetIntDestId() string {
	if t == nil || t.IntDestId == nil {
		return ""
	}
	return *t.IntDestId
}

// GetOptionNumber retrieves the value of the leaf OptionNumber from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Identification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OptionNumber is set, it can
// safely use t.GetOptionNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OptionNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Identification) GetOptionNumber() uint32 {
	if t == nil || t.OptionNumber == nil {
		return 254
	}
	return *t.OptionNumber
}

// GetSlaProfileString retrieves the value of the leaf SlaProfileString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Identification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlaProfileString is set, it can
// safely use t.GetSlaProfileString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlaProfileString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Identification) GetSlaProfileString() string {
	if t == nil || t.SlaProfileString == nil {
		return ""
	}
	return *t.SlaProfileString
}

// GetSpiSharingGroupId retrieves the value of the leaf SpiSharingGroupId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Identification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpiSharingGroupId is set, it can
// safely use t.GetSpiSharingGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpiSharingGroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Identification) GetSpiSharingGroupId() int32 {
	if t == nil || t.SpiSharingGroupId == nil {
		return 0
	}
	return *t.SpiSharingGroupId
}

// GetSubProfileString retrieves the value of the leaf SubProfileString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Identification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubProfileString is set, it can
// safely use t.GetSubProfileString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubProfileString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Identification) GetSubProfileString() string {
	if t == nil || t.SubProfileString == nil {
		return ""
	}
	return *t.SubProfileString
}

// GetSubscriberId retrieves the value of the leaf SubscriberId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Identification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubscriberId is set, it can
// safely use t.GetSubscriberId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubscriberId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Identification) GetSubscriberId() string {
	if t == nil || t.SubscriberId == nil {
		return ""
	}
	return *t.SubscriberId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Identification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Identification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.OptionNumber == nil {
		var v uint32 = 254
		t.OptionNumber = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Identification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Identification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Identification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Identification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Identification.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Identification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4 represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/host/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4 struct {
	Address   *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address                                                                                                   `path:"address" module:"nokia-conf"`
	GiAddress *string                                                                                                                                                                               `path:"gi-address" module:"nokia-conf"`
	Option    map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option_Number_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option `path:"option" module:"nokia-conf"`
	Server    *string                                                                                                                                                                               `path:"server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4) IsYANGGoStruct() {}

// NewOption creates a new entry in the Option list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4) NewOption(Number NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option_Number_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option_Number_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option)
	}

	key := Number

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Option[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Option", key)
	}

	t.Option[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option{
		Number: Number,
	}

	return t.Option[key], nil
}

// RenameOption renames an entry in the list Option within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4) RenameOption(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option_Number_Union) error {
	if _, ok := t.Option[newK]; ok {
		return fmt.Errorf("key %v already exists in Option", newK)
	}

	e, ok := t.Option[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Option", oldK)
	}
	e.Number = newK

	t.Option[newK] = e
	delete(t.Option, oldK)
	return nil
}

// GetOrCreateOption retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4) GetOrCreateOption(Number NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option_Number_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option {

	key := Number

	if v, ok := t.Option[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOption(Number)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOption got unexpected error: %v", err))
	}
	return v
}

// GetOption retrieves the value with the specified key from
// the Option map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4) GetOption(Number NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option_Number_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option {

	if t == nil {
		return nil
	}

	key := Number

	if lm, ok := t.Option[key]; ok {
		return lm
	}
	return nil
}

// DeleteOption deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4) DeleteOption(Number NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option_Number_Union) {
	key := Number

	delete(t.Option, key)
}

// AppendOption appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option struct to the
// list Option of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4) AppendOption(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option) error {
	key := v.Number

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option_Number_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option)
	}

	if _, ok := t.Option[key]; ok {
		return fmt.Errorf("duplicate key for list Option %v", key)
	}

	t.Option[key] = v
	return nil
}

// GetOrCreateAddress retrieves the value of the Address field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4) GetOrCreateAddress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address {
	if t.Address != nil {
		return t.Address
	}
	t.Address = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address{}
	return t.Address
}

// GetAddress returns the value of the Address struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4. If the receiver or the field Address is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4) GetAddress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address {
	if t != nil && t.Address != nil {
		return t.Address
	}
	return nil
}

// GetGiAddress retrieves the value of the leaf GiAddress from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GiAddress is set, it can
// safely use t.GetGiAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GiAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4) GetGiAddress() string {
	if t == nil || t.GiAddress == nil {
		return ""
	}
	return *t.GiAddress
}

// GetServer retrieves the value of the leaf Server from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Server is set, it can
// safely use t.GetServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Server == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4) GetServer() string {
	if t == nil || t.Server == nil {
		return ""
	}
	return *t.Server
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Address.PopulateDefaults()
	for _, e := range t.Option {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/host/ipv4/address YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address struct {
	GiAddress         E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_GiAddress        `path:"gi-address" module:"nokia-conf"`
	IpAddress         *string                                                                                               `path:"ip-address" module:"nokia-conf"`
	Pool              *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_Pool              `path:"pool" module:"nokia-conf" yangPresence:"true"`
	UsePoolFromClient *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_UsePoolFromClient `path:"use-pool-from-client" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address) IsYANGGoStruct() {
}

// GetOrCreatePool retrieves the value of the Pool field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address) GetOrCreatePool() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_Pool {
	if t.Pool != nil {
		return t.Pool
	}
	t.Pool = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_Pool{}
	return t.Pool
}

// GetOrCreateUsePoolFromClient retrieves the value of the UsePoolFromClient field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address) GetOrCreateUsePoolFromClient() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_UsePoolFromClient {
	if t.UsePoolFromClient != nil {
		return t.UsePoolFromClient
	}
	t.UsePoolFromClient = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_UsePoolFromClient{}
	return t.UsePoolFromClient
}

// GetPool returns the value of the Pool struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address. If the receiver or the field Pool is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address) GetPool() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_Pool {
	if t != nil && t.Pool != nil {
		return t.Pool
	}
	return nil
}

// GetUsePoolFromClient returns the value of the UsePoolFromClient struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address. If the receiver or the field UsePoolFromClient is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address) GetUsePoolFromClient() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_UsePoolFromClient {
	if t != nil && t.UsePoolFromClient != nil {
		return t.UsePoolFromClient
	}
	return nil
}

// GetGiAddress retrieves the value of the leaf GiAddress from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GiAddress is set, it can
// safely use t.GetGiAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GiAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address) GetGiAddress() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_GiAddress {
	if t == nil || t.GiAddress == 0 {
		return 0
	}
	return t.GiAddress
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Pool.PopulateDefaults()
	t.UsePoolFromClient.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_Pool represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/host/ipv4/address/pool YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_Pool struct {
	Delimiter *string `path:"delimiter" module:"nokia-conf"`
	Primary   *string `path:"primary" module:"nokia-conf"`
	Secondary *string `path:"secondary" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_Pool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_Pool) IsYANGGoStruct() {
}

// GetDelimiter retrieves the value of the leaf Delimiter from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Delimiter is set, it can
// safely use t.GetDelimiter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Delimiter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_Pool) GetDelimiter() string {
	if t == nil || t.Delimiter == nil {
		return ""
	}
	return *t.Delimiter
}

// GetPrimary retrieves the value of the leaf Primary from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Primary is set, it can
// safely use t.GetPrimary() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Primary == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_Pool) GetPrimary() string {
	if t == nil || t.Primary == nil {
		return ""
	}
	return *t.Primary
}

// GetSecondary retrieves the value of the leaf Secondary from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Secondary is set, it can
// safely use t.GetSecondary() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Secondary == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_Pool) GetSecondary() string {
	if t == nil || t.Secondary == nil {
		return ""
	}
	return *t.Secondary
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_Pool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_Pool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_Pool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_Pool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_Pool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_Pool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_Pool.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_Pool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_UsePoolFromClient represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/host/ipv4/address/use-pool-from-client YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_UsePoolFromClient struct {
	Delimiter *string `path:"delimiter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_UsePoolFromClient implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_UsePoolFromClient) IsYANGGoStruct() {
}

// GetDelimiter retrieves the value of the leaf Delimiter from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_UsePoolFromClient
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Delimiter is set, it can
// safely use t.GetDelimiter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Delimiter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_UsePoolFromClient) GetDelimiter() string {
	if t == nil || t.Delimiter == nil {
		return ""
	}
	return *t.Delimiter
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_UsePoolFromClient
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_UsePoolFromClient) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_UsePoolFromClient) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_UsePoolFromClient"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_UsePoolFromClient) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_UsePoolFromClient) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_UsePoolFromClient.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Address_UsePoolFromClient) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/host/ipv4/option YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option struct {
	AsciiString     *string                                                                                             `path:"ascii-string" module:"nokia-conf"`
	Duration        *uint32                                                                                             `path:"duration" module:"nokia-conf"`
	Empty           YANGEmpty                                                                                           `path:"empty" module:"nokia-conf"`
	HexString       *string                                                                                             `path:"hex-string" module:"nokia-conf"`
	Ipv4Address     []string                                                                                            `path:"ipv4-address" module:"nokia-conf"`
	NetbiosNodeType E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option_NetbiosNodeType `path:"netbios-node-type" module:"nokia-conf"`
	Number          NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option_Number_Union      `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option) IsYANGGoStruct() {
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetDuration retrieves the value of the leaf Duration from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Duration is set, it can
// safely use t.GetDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Duration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option) GetDuration() uint32 {
	if t == nil || t.Duration == nil {
		return 0
	}
	return *t.Duration
}

// GetEmpty retrieves the value of the leaf Empty from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Empty is set, it can
// safely use t.GetEmpty() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Empty == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option) GetEmpty() YANGEmpty {
	if t == nil || t.Empty == false {
		return false
	}
	return t.Empty
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option) GetIpv4Address() []string {
	if t == nil || t.Ipv4Address == nil {
		return nil
	}
	return t.Ipv4Address
}

// GetNetbiosNodeType retrieves the value of the leaf NetbiosNodeType from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetbiosNodeType is set, it can
// safely use t.GetNetbiosNodeType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetbiosNodeType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option) GetNetbiosNodeType() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option_NetbiosNodeType {
	if t == nil || t.NetbiosNodeType == 0 {
		return 0
	}
	return t.NetbiosNodeType
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option) GetNumber() NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option_Number_Union {
	if t == nil || t.Number == nil {
		return nil
	}
	return t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"number": t.Number,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv4_Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6 represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/host/ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6 struct {
	Address                   *string                                                                                                                                                                               `path:"address" module:"nokia-conf"`
	AddressPool               *string                                                                                                                                                                               `path:"address-pool" module:"nokia-conf"`
	DelegatedPrefix           *string                                                                                                                                                                               `path:"delegated-prefix" module:"nokia-conf"`
	DelegatedPrefixLength     *uint32                                                                                                                                                                               `path:"delegated-prefix-length" module:"nokia-conf"`
	DelegatedPrefixPool       *string                                                                                                                                                                               `path:"delegated-prefix-pool" module:"nokia-conf"`
	LinkAddress               *string                                                                                                                                                                               `path:"link-address" module:"nokia-conf"`
	Option                    map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option_Number_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option `path:"option" module:"nokia-conf"`
	RouterAdvertisementPolicy *string                                                                                                                                                                               `path:"router-advertisement-policy" module:"nokia-conf"`
	Server                    *string                                                                                                                                                                               `path:"server" module:"nokia-conf"`
	SlaacPrefix               *string                                                                                                                                                                               `path:"slaac-prefix" module:"nokia-conf"`
	SlaacPrefixPool           *string                                                                                                                                                                               `path:"slaac-prefix-pool" module:"nokia-conf"`
	Timers                    *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Timers                                                                                                    `path:"timers" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6) IsYANGGoStruct() {}

// NewOption creates a new entry in the Option list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6) NewOption(Number NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option_Number_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option_Number_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option)
	}

	key := Number

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Option[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Option", key)
	}

	t.Option[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option{
		Number: Number,
	}

	return t.Option[key], nil
}

// RenameOption renames an entry in the list Option within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6) RenameOption(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option_Number_Union) error {
	if _, ok := t.Option[newK]; ok {
		return fmt.Errorf("key %v already exists in Option", newK)
	}

	e, ok := t.Option[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Option", oldK)
	}
	e.Number = newK

	t.Option[newK] = e
	delete(t.Option, oldK)
	return nil
}

// GetOrCreateOption retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6) GetOrCreateOption(Number NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option_Number_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option {

	key := Number

	if v, ok := t.Option[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOption(Number)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOption got unexpected error: %v", err))
	}
	return v
}

// GetOption retrieves the value with the specified key from
// the Option map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6) GetOption(Number NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option_Number_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option {

	if t == nil {
		return nil
	}

	key := Number

	if lm, ok := t.Option[key]; ok {
		return lm
	}
	return nil
}

// DeleteOption deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6) DeleteOption(Number NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option_Number_Union) {
	key := Number

	delete(t.Option, key)
}

// AppendOption appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option struct to the
// list Option of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6) AppendOption(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option) error {
	key := v.Number

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option_Number_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option)
	}

	if _, ok := t.Option[key]; ok {
		return fmt.Errorf("duplicate key for list Option %v", key)
	}

	t.Option[key] = v
	return nil
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6) GetOrCreateTimers() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Timers{}
	return t.Timers
}

// GetTimers returns the value of the Timers struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6) GetTimers() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAddressPool retrieves the value of the leaf AddressPool from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AddressPool is set, it can
// safely use t.GetAddressPool() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AddressPool == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6) GetAddressPool() string {
	if t == nil || t.AddressPool == nil {
		return ""
	}
	return *t.AddressPool
}

// GetDelegatedPrefix retrieves the value of the leaf DelegatedPrefix from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DelegatedPrefix is set, it can
// safely use t.GetDelegatedPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DelegatedPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6) GetDelegatedPrefix() string {
	if t == nil || t.DelegatedPrefix == nil {
		return ""
	}
	return *t.DelegatedPrefix
}

// GetDelegatedPrefixLength retrieves the value of the leaf DelegatedPrefixLength from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DelegatedPrefixLength is set, it can
// safely use t.GetDelegatedPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DelegatedPrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6) GetDelegatedPrefixLength() uint32 {
	if t == nil || t.DelegatedPrefixLength == nil {
		return 0
	}
	return *t.DelegatedPrefixLength
}

// GetDelegatedPrefixPool retrieves the value of the leaf DelegatedPrefixPool from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DelegatedPrefixPool is set, it can
// safely use t.GetDelegatedPrefixPool() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DelegatedPrefixPool == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6) GetDelegatedPrefixPool() string {
	if t == nil || t.DelegatedPrefixPool == nil {
		return ""
	}
	return *t.DelegatedPrefixPool
}

// GetLinkAddress retrieves the value of the leaf LinkAddress from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkAddress is set, it can
// safely use t.GetLinkAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6) GetLinkAddress() string {
	if t == nil || t.LinkAddress == nil {
		return ""
	}
	return *t.LinkAddress
}

// GetRouterAdvertisementPolicy retrieves the value of the leaf RouterAdvertisementPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAdvertisementPolicy is set, it can
// safely use t.GetRouterAdvertisementPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAdvertisementPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6) GetRouterAdvertisementPolicy() string {
	if t == nil || t.RouterAdvertisementPolicy == nil {
		return ""
	}
	return *t.RouterAdvertisementPolicy
}

// GetServer retrieves the value of the leaf Server from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Server is set, it can
// safely use t.GetServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Server == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6) GetServer() string {
	if t == nil || t.Server == nil {
		return ""
	}
	return *t.Server
}

// GetSlaacPrefix retrieves the value of the leaf SlaacPrefix from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlaacPrefix is set, it can
// safely use t.GetSlaacPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlaacPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6) GetSlaacPrefix() string {
	if t == nil || t.SlaacPrefix == nil {
		return ""
	}
	return *t.SlaacPrefix
}

// GetSlaacPrefixPool retrieves the value of the leaf SlaacPrefixPool from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlaacPrefixPool is set, it can
// safely use t.GetSlaacPrefixPool() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlaacPrefixPool == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6) GetSlaacPrefixPool() string {
	if t == nil || t.SlaacPrefixPool == nil {
		return ""
	}
	return *t.SlaacPrefixPool
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Timers.PopulateDefaults()
	for _, e := range t.Option {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/host/ipv6/option YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option struct {
	HexString   *string                                                                                        `path:"hex-string" module:"nokia-conf"`
	Ipv6Address []string                                                                                       `path:"ipv6-address" module:"nokia-conf"`
	Number      NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option_Number_Union `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option) IsYANGGoStruct() {
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option) GetIpv6Address() []string {
	if t == nil || t.Ipv6Address == nil {
		return nil
	}
	return t.Ipv6Address
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option) GetNumber() NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option_Number_Union {
	if t == nil || t.Number == nil {
		return nil
	}
	return t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"number": t.Number,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Timers represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/host/ipv6/timers YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Timers struct {
	PreferredLifetime NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Timers_PreferredLifetime_Union `path:"preferred-lifetime" module:"nokia-conf"`
	Rebind            *uint32                                                                                                   `path:"rebind" module:"nokia-conf"`
	Renew             *uint32                                                                                                   `path:"renew" module:"nokia-conf"`
	ValidLifetime     NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Timers_ValidLifetime_Union     `path:"valid-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Timers) IsYANGGoStruct() {
}

// GetPreferredLifetime retrieves the value of the leaf PreferredLifetime from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferredLifetime is set, it can
// safely use t.GetPreferredLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferredLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Timers) GetPreferredLifetime() NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Timers_PreferredLifetime_Union {
	if t == nil || t.PreferredLifetime == nil {
		return nil
	}
	return t.PreferredLifetime
}

// GetRebind retrieves the value of the leaf Rebind from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rebind is set, it can
// safely use t.GetRebind() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rebind == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Timers) GetRebind() uint32 {
	if t == nil || t.Rebind == nil {
		return 0
	}
	return *t.Rebind
}

// GetRenew retrieves the value of the leaf Renew from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Renew is set, it can
// safely use t.GetRenew() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Renew == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Timers) GetRenew() uint32 {
	if t == nil || t.Renew == nil {
		return 0
	}
	return *t.Renew
}

// GetValidLifetime retrieves the value of the leaf ValidLifetime from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidLifetime is set, it can
// safely use t.GetValidLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Timers) GetValidLifetime() NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Timers_ValidLifetime_Union {
	if t == nil || t.ValidLifetime == nil {
		return nil
	}
	return t.ValidLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Timers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Timers.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Ipv6_Timers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/host/match-radius-proxy-cache YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache struct {
	FailAction E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_FailAction `path:"fail-action" module:"nokia-conf"`
	MacFormat  *string                                                                                                  `path:"mac-format" module:"nokia-conf"`
	Match      *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Match       `path:"match" module:"nokia-conf"`
	Server     *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Server      `path:"server" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache) IsYANGGoStruct() {
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache) GetOrCreateMatch() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Match{}
	return t.Match
}

// GetOrCreateServer retrieves the value of the Server field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache) GetOrCreateServer() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Server {
	if t.Server != nil {
		return t.Server
	}
	t.Server = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Server{}
	return t.Server
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache) GetMatch() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetServer returns the value of the Server struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache. If the receiver or the field Server is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache) GetServer() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Server {
	if t != nil && t.Server != nil {
		return t.Server
	}
	return nil
}

// GetFailAction retrieves the value of the leaf FailAction from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FailAction is set, it can
// safely use t.GetFailAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FailAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache) GetFailAction() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_FailAction {
	if t == nil || t.FailAction == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_FailAction_drop
	}
	return t.FailAction
}

// GetMacFormat retrieves the value of the leaf MacFormat from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacFormat is set, it can
// safely use t.GetMacFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacFormat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache) GetMacFormat() string {
	if t == nil || t.MacFormat == nil {
		return "aa:"
	}
	return *t.MacFormat
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FailAction == 0 {
		t.FailAction = NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_FailAction_drop
	}
	if t.MacFormat == nil {
		var v string = "aa:"
		t.MacFormat = &v
	}
	t.Match.PopulateDefaults()
	t.Server.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Match represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/host/match-radius-proxy-cache/match YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Match struct {
	CircuitId  *bool   `path:"circuit-id" module:"nokia-conf"`
	Ipv4Option *uint8  `path:"ipv4-option" module:"nokia-conf"`
	Ipv6Option *uint32 `path:"ipv6-option" module:"nokia-conf"`
	Mac        *bool   `path:"mac" module:"nokia-conf"`
	RemoteId   *bool   `path:"remote-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Match) IsYANGGoStruct() {
}

// GetCircuitId retrieves the value of the leaf CircuitId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CircuitId is set, it can
// safely use t.GetCircuitId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CircuitId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Match) GetCircuitId() bool {
	if t == nil || t.CircuitId == nil {
		return false
	}
	return *t.CircuitId
}

// GetIpv4Option retrieves the value of the leaf Ipv4Option from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Option is set, it can
// safely use t.GetIpv4Option() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Option == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Match) GetIpv4Option() uint8 {
	if t == nil || t.Ipv4Option == nil {
		return 0
	}
	return *t.Ipv4Option
}

// GetIpv6Option retrieves the value of the leaf Ipv6Option from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Option is set, it can
// safely use t.GetIpv6Option() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Option == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Match) GetIpv6Option() uint32 {
	if t == nil || t.Ipv6Option == nil {
		return 0
	}
	return *t.Ipv6Option
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Match) GetMac() bool {
	if t == nil || t.Mac == nil {
		return true
	}
	return *t.Mac
}

// GetRemoteId retrieves the value of the leaf RemoteId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteId is set, it can
// safely use t.GetRemoteId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Match) GetRemoteId() bool {
	if t == nil || t.RemoteId == nil {
		return false
	}
	return *t.RemoteId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mac == nil {
		var v bool = true
		t.Mac = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Match.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Server represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/host/match-radius-proxy-cache/server YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Server struct {
	Name    *string `path:"name" module:"nokia-conf"`
	Service *uint32 `path:"service" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Server) IsYANGGoStruct() {
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Server) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetService retrieves the value of the leaf Service from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Service is set, it can
// safely use t.GetService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Service == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Server) GetService() uint32 {
	if t == nil || t.Service == nil {
		return 0
	}
	return *t.Service
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Server.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MatchRadiusProxyCache_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MldImport represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/host/mld-import YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MldImport struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MldImport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MldImport) IsYANGGoStruct() {
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MldImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MldImport) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MldImport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MldImport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MldImport struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MldImport) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicyName == nil {
		return nil, fmt.Errorf("nil value for key PolicyName")
	}

	return map[string]interface{}{
		"policy-name": *t.PolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MldImport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MldImport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MldImport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MldImport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MldImport.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MldImport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/host/msap-defaults YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults struct {
	GroupInterface *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults_GroupInterface `path:"group-interface" module:"nokia-conf" yangPresence:"true"`
	Policy         *string                                                                                            `path:"policy" module:"nokia-conf"`
	Service        *uint32                                                                                            `path:"service" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults) IsYANGGoStruct() {
}

// GetOrCreateGroupInterface retrieves the value of the GroupInterface field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults) GetOrCreateGroupInterface() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults_GroupInterface {
	if t.GroupInterface != nil {
		return t.GroupInterface
	}
	t.GroupInterface = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults_GroupInterface{}
	return t.GroupInterface
}

// GetGroupInterface returns the value of the GroupInterface struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults. If the receiver or the field GroupInterface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults) GetGroupInterface() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults_GroupInterface {
	if t != nil && t.GroupInterface != nil {
		return t.GroupInterface
	}
	return nil
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// GetService retrieves the value of the leaf Service from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Service is set, it can
// safely use t.GetService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Service == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults) GetService() uint32 {
	if t == nil || t.Service == nil {
		return 0
	}
	return *t.Service
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.GroupInterface.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults_GroupInterface represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/host/msap-defaults/group-interface YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults_GroupInterface struct {
	Name   *string                                                                                                    `path:"name" module:"nokia-conf"`
	Prefix E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults_GroupInterface_Prefix `path:"prefix" module:"nokia-conf"`
	Suffix E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults_GroupInterface_Suffix `path:"suffix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults_GroupInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults_GroupInterface) IsYANGGoStruct() {
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults_GroupInterface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPrefix retrieves the value of the leaf Prefix from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults_GroupInterface) GetPrefix() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults_GroupInterface_Prefix {
	if t == nil || t.Prefix == 0 {
		return 0
	}
	return t.Prefix
}

// GetSuffix retrieves the value of the leaf Suffix from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Suffix is set, it can
// safely use t.GetSuffix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Suffix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults_GroupInterface) GetSuffix() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults_GroupInterface_Suffix {
	if t == nil || t.Suffix == 0 {
		return 0
	}
	return t.Suffix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults_GroupInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults_GroupInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults_GroupInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults_GroupInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults_GroupInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults_GroupInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults_GroupInterface.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_MsapDefaults_GroupInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_RadiusAccountingPolicy represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/host/radius-accounting-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_RadiusAccountingPolicy struct {
	Duplicate *string `path:"duplicate" module:"nokia-conf"`
	Name      *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_RadiusAccountingPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_RadiusAccountingPolicy) IsYANGGoStruct() {
}

// GetDuplicate retrieves the value of the leaf Duplicate from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_RadiusAccountingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Duplicate is set, it can
// safely use t.GetDuplicate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Duplicate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_RadiusAccountingPolicy) GetDuplicate() string {
	if t == nil || t.Duplicate == nil {
		return ""
	}
	return *t.Duplicate
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_RadiusAccountingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_RadiusAccountingPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_RadiusAccountingPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_RadiusAccountingPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_RadiusAccountingPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_RadiusAccountingPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_RadiusAccountingPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_RadiusAccountingPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_RadiusAccountingPolicy.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_RadiusAccountingPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/host/to-client-options YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions struct {
	Ipv4Option map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option_Number_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option `path:"ipv4-option" module:"nokia-conf"`
	Ipv6Option map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option_Number_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option `path:"ipv6-option" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions) IsYANGGoStruct() {
}

// NewIpv4Option creates a new entry in the Ipv4Option list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions) NewIpv4Option(Number NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option_Number_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4Option == nil {
		t.Ipv4Option = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option_Number_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option)
	}

	key := Number

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv4Option[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv4Option", key)
	}

	t.Ipv4Option[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option{
		Number: Number,
	}

	return t.Ipv4Option[key], nil
}

// RenameIpv4Option renames an entry in the list Ipv4Option within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions) RenameIpv4Option(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option_Number_Union) error {
	if _, ok := t.Ipv4Option[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv4Option", newK)
	}

	e, ok := t.Ipv4Option[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv4Option", oldK)
	}
	e.Number = newK

	t.Ipv4Option[newK] = e
	delete(t.Ipv4Option, oldK)
	return nil
}

// GetOrCreateIpv4Option retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions) GetOrCreateIpv4Option(Number NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option_Number_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option {

	key := Number

	if v, ok := t.Ipv4Option[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv4Option(Number)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv4Option got unexpected error: %v", err))
	}
	return v
}

// GetIpv4Option retrieves the value with the specified key from
// the Ipv4Option map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions) GetIpv4Option(Number NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option_Number_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option {

	if t == nil {
		return nil
	}

	key := Number

	if lm, ok := t.Ipv4Option[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv4Option deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions) DeleteIpv4Option(Number NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option_Number_Union) {
	key := Number

	delete(t.Ipv4Option, key)
}

// AppendIpv4Option appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option struct to the
// list Ipv4Option of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions) AppendIpv4Option(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option) error {
	key := v.Number

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4Option == nil {
		t.Ipv4Option = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option_Number_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option)
	}

	if _, ok := t.Ipv4Option[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv4Option %v", key)
	}

	t.Ipv4Option[key] = v
	return nil
}

// NewIpv6Option creates a new entry in the Ipv6Option list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions) NewIpv6Option(Number NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option_Number_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6Option == nil {
		t.Ipv6Option = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option_Number_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option)
	}

	key := Number

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv6Option[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv6Option", key)
	}

	t.Ipv6Option[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option{
		Number: Number,
	}

	return t.Ipv6Option[key], nil
}

// RenameIpv6Option renames an entry in the list Ipv6Option within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions) RenameIpv6Option(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option_Number_Union) error {
	if _, ok := t.Ipv6Option[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv6Option", newK)
	}

	e, ok := t.Ipv6Option[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv6Option", oldK)
	}
	e.Number = newK

	t.Ipv6Option[newK] = e
	delete(t.Ipv6Option, oldK)
	return nil
}

// GetOrCreateIpv6Option retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions) GetOrCreateIpv6Option(Number NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option_Number_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option {

	key := Number

	if v, ok := t.Ipv6Option[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv6Option(Number)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv6Option got unexpected error: %v", err))
	}
	return v
}

// GetIpv6Option retrieves the value with the specified key from
// the Ipv6Option map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions) GetIpv6Option(Number NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option_Number_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option {

	if t == nil {
		return nil
	}

	key := Number

	if lm, ok := t.Ipv6Option[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv6Option deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions) DeleteIpv6Option(Number NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option_Number_Union) {
	key := Number

	delete(t.Ipv6Option, key)
}

// AppendIpv6Option appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option struct to the
// list Ipv6Option of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions) AppendIpv6Option(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option) error {
	key := v.Number

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6Option == nil {
		t.Ipv6Option = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option_Number_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option)
	}

	if _, ok := t.Ipv6Option[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv6Option %v", key)
	}

	t.Ipv6Option[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Ipv4Option {
		e.PopulateDefaults()
	}
	for _, e := range t.Ipv6Option {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/host/to-client-options/ipv4-option YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option struct {
	AsciiString     *string                                                                                                            `path:"ascii-string" module:"nokia-conf"`
	Duration        *uint32                                                                                                            `path:"duration" module:"nokia-conf"`
	Empty           YANGEmpty                                                                                                          `path:"empty" module:"nokia-conf"`
	HexString       *string                                                                                                            `path:"hex-string" module:"nokia-conf"`
	Ipv4Address     []string                                                                                                           `path:"ipv4-address" module:"nokia-conf"`
	NetbiosNodeType E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option_NetbiosNodeType `path:"netbios-node-type" module:"nokia-conf"`
	Number          NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option_Number_Union      `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option) IsYANGGoStruct() {
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetDuration retrieves the value of the leaf Duration from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Duration is set, it can
// safely use t.GetDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Duration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option) GetDuration() uint32 {
	if t == nil || t.Duration == nil {
		return 0
	}
	return *t.Duration
}

// GetEmpty retrieves the value of the leaf Empty from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Empty is set, it can
// safely use t.GetEmpty() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Empty == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option) GetEmpty() YANGEmpty {
	if t == nil || t.Empty == false {
		return false
	}
	return t.Empty
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option) GetIpv4Address() []string {
	if t == nil || t.Ipv4Address == nil {
		return nil
	}
	return t.Ipv4Address
}

// GetNetbiosNodeType retrieves the value of the leaf NetbiosNodeType from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetbiosNodeType is set, it can
// safely use t.GetNetbiosNodeType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetbiosNodeType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option) GetNetbiosNodeType() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option_NetbiosNodeType {
	if t == nil || t.NetbiosNodeType == 0 {
		return 0
	}
	return t.NetbiosNodeType
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option) GetNumber() NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option_Number_Union {
	if t == nil || t.Number == nil {
		return nil
	}
	return t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"number": t.Number,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv4Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/host/to-client-options/ipv6-option YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option struct {
	AsciiString  *string                                                                                                       `path:"ascii-string" module:"nokia-conf"`
	DomainString *string                                                                                                       `path:"domain-string" module:"nokia-conf"`
	Empty        YANGEmpty                                                                                                     `path:"empty" module:"nokia-conf"`
	HexString    *string                                                                                                       `path:"hex-string" module:"nokia-conf"`
	Ipv6Address  []string                                                                                                      `path:"ipv6-address" module:"nokia-conf"`
	Number       NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option_Number_Union `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option) IsYANGGoStruct() {
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetDomainString retrieves the value of the leaf DomainString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainString is set, it can
// safely use t.GetDomainString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option) GetDomainString() string {
	if t == nil || t.DomainString == nil {
		return ""
	}
	return *t.DomainString
}

// GetEmpty retrieves the value of the leaf Empty from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Empty is set, it can
// safely use t.GetEmpty() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Empty == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option) GetEmpty() YANGEmpty {
	if t == nil || t.Empty == false {
		return false
	}
	return t.Empty
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option) GetIpv6Address() []string {
	if t == nil || t.Ipv6Address == nil {
		return nil
	}
	return t.Ipv6Address
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option) GetNumber() NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option_Number_Union {
	if t == nil || t.Number == nil {
		return nil
	}
	return t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"number": t.Number,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToClientOptions_Ipv6Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/host/to-server-options YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions struct {
	Ipv6Option map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option_Number_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option `path:"ipv6-option" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions) IsYANGGoStruct() {
}

// NewIpv6Option creates a new entry in the Ipv6Option list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions) NewIpv6Option(Number NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option_Number_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6Option == nil {
		t.Ipv6Option = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option_Number_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option)
	}

	key := Number

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv6Option[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv6Option", key)
	}

	t.Ipv6Option[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option{
		Number: Number,
	}

	return t.Ipv6Option[key], nil
}

// RenameIpv6Option renames an entry in the list Ipv6Option within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions) RenameIpv6Option(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option_Number_Union) error {
	if _, ok := t.Ipv6Option[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv6Option", newK)
	}

	e, ok := t.Ipv6Option[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv6Option", oldK)
	}
	e.Number = newK

	t.Ipv6Option[newK] = e
	delete(t.Ipv6Option, oldK)
	return nil
}

// GetOrCreateIpv6Option retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions) GetOrCreateIpv6Option(Number NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option_Number_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option {

	key := Number

	if v, ok := t.Ipv6Option[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv6Option(Number)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv6Option got unexpected error: %v", err))
	}
	return v
}

// GetIpv6Option retrieves the value with the specified key from
// the Ipv6Option map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions) GetIpv6Option(Number NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option_Number_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option {

	if t == nil {
		return nil
	}

	key := Number

	if lm, ok := t.Ipv6Option[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv6Option deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions) DeleteIpv6Option(Number NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option_Number_Union) {
	key := Number

	delete(t.Ipv6Option, key)
}

// AppendIpv6Option appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option struct to the
// list Ipv6Option of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions) AppendIpv6Option(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option) error {
	key := v.Number

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6Option == nil {
		t.Ipv6Option = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option_Number_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option)
	}

	if _, ok := t.Ipv6Option[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv6Option %v", key)
	}

	t.Ipv6Option[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Ipv6Option {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/host/to-server-options/ipv6-option YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option struct {
	AsciiString  *string                                                                                                       `path:"ascii-string" module:"nokia-conf"`
	DomainString *string                                                                                                       `path:"domain-string" module:"nokia-conf"`
	Empty        YANGEmpty                                                                                                     `path:"empty" module:"nokia-conf"`
	HexString    *string                                                                                                       `path:"hex-string" module:"nokia-conf"`
	Ipv6Address  []string                                                                                                      `path:"ipv6-address" module:"nokia-conf"`
	Number       NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option_Number_Union `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option) IsYANGGoStruct() {
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetDomainString retrieves the value of the leaf DomainString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainString is set, it can
// safely use t.GetDomainString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option) GetDomainString() string {
	if t == nil || t.DomainString == nil {
		return ""
	}
	return *t.DomainString
}

// GetEmpty retrieves the value of the leaf Empty from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Empty is set, it can
// safely use t.GetEmpty() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Empty == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option) GetEmpty() YANGEmpty {
	if t == nil || t.Empty == false {
		return false
	}
	return t.Empty
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option) GetIpv6Address() []string {
	if t == nil || t.Ipv6Address == nil {
		return nil
	}
	return t.Ipv6Address
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option) GetNumber() NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option_Number_Union {
	if t == nil || t.Number == nil {
		return nil
	}
	return t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"number": t.Number,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_ToServerOptions_Ipv6Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/host/wpp YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp struct {
	Initial                      *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Initial                       `path:"initial" module:"nokia-conf"`
	Portal                       *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Portal                        `path:"portal" module:"nokia-conf"`
	RestoreToInitialOnDisconnect E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_RestoreToInitialOnDisconnect `path:"restore-to-initial-on-disconnect" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp) IsYANGGoStruct() {}

// GetOrCreateInitial retrieves the value of the Initial field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp) GetOrCreateInitial() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Initial {
	if t.Initial != nil {
		return t.Initial
	}
	t.Initial = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Initial{}
	return t.Initial
}

// GetOrCreatePortal retrieves the value of the Portal field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp) GetOrCreatePortal() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Portal {
	if t.Portal != nil {
		return t.Portal
	}
	t.Portal = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Portal{}
	return t.Portal
}

// GetInitial returns the value of the Initial struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp. If the receiver or the field Initial is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp) GetInitial() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Initial {
	if t != nil && t.Initial != nil {
		return t.Initial
	}
	return nil
}

// GetPortal returns the value of the Portal struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp. If the receiver or the field Portal is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp) GetPortal() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Portal {
	if t != nil && t.Portal != nil {
		return t.Portal
	}
	return nil
}

// GetRestoreToInitialOnDisconnect retrieves the value of the leaf RestoreToInitialOnDisconnect from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RestoreToInitialOnDisconnect is set, it can
// safely use t.GetRestoreToInitialOnDisconnect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RestoreToInitialOnDisconnect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp) GetRestoreToInitialOnDisconnect() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_RestoreToInitialOnDisconnect {
	if t == nil || t.RestoreToInitialOnDisconnect == 0 {
		return 0
	}
	return t.RestoreToInitialOnDisconnect
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Initial.PopulateDefaults()
	t.Portal.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Initial represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/host/wpp/initial YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Initial struct {
	AppProfile *string `path:"app-profile" module:"nokia-conf"`
	SlaProfile *string `path:"sla-profile" module:"nokia-conf"`
	SubProfile *string `path:"sub-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Initial implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Initial) IsYANGGoStruct() {
}

// GetAppProfile retrieves the value of the leaf AppProfile from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Initial
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfile is set, it can
// safely use t.GetAppProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Initial) GetAppProfile() string {
	if t == nil || t.AppProfile == nil {
		return ""
	}
	return *t.AppProfile
}

// GetSlaProfile retrieves the value of the leaf SlaProfile from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Initial
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlaProfile is set, it can
// safely use t.GetSlaProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlaProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Initial) GetSlaProfile() string {
	if t == nil || t.SlaProfile == nil {
		return ""
	}
	return *t.SlaProfile
}

// GetSubProfile retrieves the value of the leaf SubProfile from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Initial
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubProfile is set, it can
// safely use t.GetSubProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Initial) GetSubProfile() string {
	if t == nil || t.SubProfile == nil {
		return ""
	}
	return *t.SubProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Initial
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Initial) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Initial) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Initial"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Initial) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Initial) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Initial.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Initial) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Portal represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/host/wpp/portal YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Portal struct {
	Name           *string                                                                                               `path:"name" module:"nokia-conf"`
	PortalGroup    *string                                                                                               `path:"portal-group" module:"nokia-conf"`
	RouterInstance NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Portal_RouterInstance_Union `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Portal implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Portal) IsYANGGoStruct() {
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Portal) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPortalGroup retrieves the value of the leaf PortalGroup from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortalGroup is set, it can
// safely use t.GetPortalGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortalGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Portal) GetPortalGroup() string {
	if t == nil || t.PortalGroup == nil {
		return ""
	}
	return *t.PortalGroup
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Portal) GetRouterInstance() NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Portal_RouterInstance_Union {
	if t == nil || t.RouterInstance == nil {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Portal_RouterInstance_Enum_base
	}
	return t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Portal
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Portal) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RouterInstance == nil {
		t.RouterInstance = NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Portal_RouterInstance_Enum_base
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Portal) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Portal"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Portal) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Portal) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Portal.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Host_Wpp_Portal) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/mask YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask struct {
	Prefix *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Prefix    `path:"prefix" module:"nokia-conf" yangPresence:"true"`
	Suffix *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Suffix    `path:"suffix" module:"nokia-conf" yangPresence:"true"`
	Type   NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Type_Union `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask) IsYANGGoStruct() {}

// GetOrCreatePrefix retrieves the value of the Prefix field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask) GetOrCreatePrefix() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Prefix {
	if t.Prefix != nil {
		return t.Prefix
	}
	t.Prefix = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Prefix{}
	return t.Prefix
}

// GetOrCreateSuffix retrieves the value of the Suffix field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask) GetOrCreateSuffix() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Suffix {
	if t.Suffix != nil {
		return t.Suffix
	}
	t.Suffix = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Suffix{}
	return t.Suffix
}

// GetPrefix returns the value of the Prefix struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask. If the receiver or the field Prefix is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask) GetPrefix() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Prefix {
	if t != nil && t.Prefix != nil {
		return t.Prefix
	}
	return nil
}

// GetSuffix returns the value of the Suffix struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask. If the receiver or the field Suffix is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask) GetSuffix() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Suffix {
	if t != nil && t.Suffix != nil {
		return t.Suffix
	}
	return nil
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask) GetType() NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Type_Union {
	if t == nil || t.Type == nil {
		return nil
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Prefix.PopulateDefaults()
	t.Suffix.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"type": t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Prefix represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/mask/prefix YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Prefix struct {
	Length *uint32 `path:"length" module:"nokia-conf"`
	String *string `path:"string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Prefix) IsYANGGoStruct() {
}

// GetLength retrieves the value of the leaf Length from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Length is set, it can
// safely use t.GetLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Length == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Prefix) GetLength() uint32 {
	if t == nil || t.Length == nil {
		return 0
	}
	return *t.Length
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Prefix) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Prefix.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Suffix represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ipoe/mask/suffix YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Suffix struct {
	Length *uint32 `path:"length" module:"nokia-conf"`
	String *string `path:"string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Suffix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Suffix) IsYANGGoStruct() {
}

// GetLength retrieves the value of the leaf Length from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Suffix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Length is set, it can
// safely use t.GetLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Length == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Suffix) GetLength() uint32 {
	if t == nil || t.Length == nil {
		return 0
	}
	return *t.Length
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Suffix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Suffix) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Suffix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Suffix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Suffix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Suffix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Suffix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Suffix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Suffix.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ipoe_Mask_Suffix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp struct {
	Host      map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host                                                                          `path:"host" module:"nokia-conf"`
	Mask      map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Type_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask `path:"mask" module:"nokia-conf"`
	MatchList []E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_MatchList                                                                             `path:"match-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp) IsYANGGoStruct() {}

// NewHost creates a new entry in the Host list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp) NewHost(HostName string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Host == nil {
		t.Host = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host)
	}

	key := HostName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Host[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Host", key)
	}

	t.Host[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host{
		HostName: &HostName,
	}

	return t.Host[key], nil
}

// RenameHost renames an entry in the list Host within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp) RenameHost(oldK, newK string) error {
	if _, ok := t.Host[newK]; ok {
		return fmt.Errorf("key %v already exists in Host", newK)
	}

	e, ok := t.Host[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Host", oldK)
	}
	e.HostName = &newK

	t.Host[newK] = e
	delete(t.Host, oldK)
	return nil
}

// GetOrCreateHost retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp) GetOrCreateHost(HostName string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host {

	key := HostName

	if v, ok := t.Host[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHost(HostName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHost got unexpected error: %v", err))
	}
	return v
}

// GetHost retrieves the value with the specified key from
// the Host map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp) GetHost(HostName string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host {

	if t == nil {
		return nil
	}

	key := HostName

	if lm, ok := t.Host[key]; ok {
		return lm
	}
	return nil
}

// DeleteHost deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp) DeleteHost(HostName string) {
	key := HostName

	delete(t.Host, key)
}

// AppendHost appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host struct to the
// list Host of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp) AppendHost(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) error {
	if v.HostName == nil {
		return fmt.Errorf("invalid nil key received for HostName")
	}

	key := *v.HostName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Host == nil {
		t.Host = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host)
	}

	if _, ok := t.Host[key]; ok {
		return fmt.Errorf("duplicate key for list Host %v", key)
	}

	t.Host[key] = v
	return nil
}

// NewMask creates a new entry in the Mask list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp) NewMask(Type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Type_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mask == nil {
		t.Mask = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Type_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask)
	}

	key := Type

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mask[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mask", key)
	}

	t.Mask[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask{
		Type: Type,
	}

	return t.Mask[key], nil
}

// RenameMask renames an entry in the list Mask within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp) RenameMask(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Type_Union) error {
	if _, ok := t.Mask[newK]; ok {
		return fmt.Errorf("key %v already exists in Mask", newK)
	}

	e, ok := t.Mask[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mask", oldK)
	}
	e.Type = newK

	t.Mask[newK] = e
	delete(t.Mask, oldK)
	return nil
}

// GetOrCreateMask retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp) GetOrCreateMask(Type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Type_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask {

	key := Type

	if v, ok := t.Mask[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMask(Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMask got unexpected error: %v", err))
	}
	return v
}

// GetMask retrieves the value with the specified key from
// the Mask map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp) GetMask(Type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Type_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask {

	if t == nil {
		return nil
	}

	key := Type

	if lm, ok := t.Mask[key]; ok {
		return lm
	}
	return nil
}

// DeleteMask deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp) DeleteMask(Type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Type_Union) {
	key := Type

	delete(t.Mask, key)
}

// AppendMask appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask struct to the
// list Mask of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp) AppendMask(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask) error {
	key := v.Type

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mask == nil {
		t.Mask = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Type_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask)
	}

	if _, ok := t.Mask[key]; ok {
		return fmt.Errorf("duplicate key for list Mask %v", key)
	}

	t.Mask[key] = v
	return nil
}

// GetMatchList retrieves the value of the leaf MatchList from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchList is set, it can
// safely use t.GetMatchList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp) GetMatchList() []E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_MatchList {
	if t == nil || t.MatchList == nil {
		return nil
	}
	return t.MatchList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Host {
		e.PopulateDefaults()
	}
	for _, e := range t.Mask {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp/host YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host struct {
	AccessLoopEncapsulation *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation `path:"access-loop-encapsulation" module:"nokia-conf" yangPresence:"true"`
	AccessLoopInformation   *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation   `path:"access-loop-information" module:"nokia-conf"`
	AdminState              E_NokiaTypesSros_AdminState                                                                   `path:"admin-state" module:"nokia-conf"`
	Authentication          *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Authentication          `path:"authentication" module:"nokia-conf"`
	HostIdentification      *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification      `path:"host-identification" module:"nokia-conf"`
	HostName                *string                                                                                       `path:"host-name" module:"nokia-conf"`
	Identification          *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Identification          `path:"identification" module:"nokia-conf" yangPresence:"true"`
	Ipv4                    *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4                    `path:"ipv4" module:"nokia-conf"`
	Ipv6                    *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6                    `path:"ipv6" module:"nokia-conf"`
	L2Tp                    *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp                    `path:"l2tp" module:"nokia-conf"`
	LnsInterface            *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_LnsInterface            `path:"lns-interface" module:"nokia-conf" yangPresence:"true"`
	MldImport               map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MldImport    `path:"mld-import" module:"nokia-conf"`
	MsapDefaults            *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults            `path:"msap-defaults" module:"nokia-conf"`
	PadoDelay               *uint32                                                                                       `path:"pado-delay" module:"nokia-conf"`
	Password                *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Password                `path:"password" module:"nokia-conf"`
	RadiusAccountingPolicy  *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_RadiusAccountingPolicy  `path:"radius-accounting-policy" module:"nokia-conf"`
	RetailServiceId         *uint32                                                                                       `path:"retail-service-id" module:"nokia-conf"`
	RipPolicy               *string                                                                                       `path:"rip-policy" module:"nokia-conf"`
	SteeringProfile         *string                                                                                       `path:"steering-profile" module:"nokia-conf"`
	ToClientOptions         *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions         `path:"to-client-options" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) IsYANGGoStruct() {}

// NewMldImport creates a new entry in the MldImport list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) NewMldImport(PolicyName string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MldImport, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MldImport == nil {
		t.MldImport = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MldImport)
	}

	key := PolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MldImport[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MldImport", key)
	}

	t.MldImport[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MldImport{
		PolicyName: &PolicyName,
	}

	return t.MldImport[key], nil
}

// RenameMldImport renames an entry in the list MldImport within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) RenameMldImport(oldK, newK string) error {
	if _, ok := t.MldImport[newK]; ok {
		return fmt.Errorf("key %v already exists in MldImport", newK)
	}

	e, ok := t.MldImport[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MldImport", oldK)
	}
	e.PolicyName = &newK

	t.MldImport[newK] = e
	delete(t.MldImport, oldK)
	return nil
}

// GetOrCreateMldImport retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) GetOrCreateMldImport(PolicyName string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MldImport {

	key := PolicyName

	if v, ok := t.MldImport[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMldImport(PolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMldImport got unexpected error: %v", err))
	}
	return v
}

// GetMldImport retrieves the value with the specified key from
// the MldImport map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) GetMldImport(PolicyName string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MldImport {

	if t == nil {
		return nil
	}

	key := PolicyName

	if lm, ok := t.MldImport[key]; ok {
		return lm
	}
	return nil
}

// DeleteMldImport deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) DeleteMldImport(PolicyName string) {
	key := PolicyName

	delete(t.MldImport, key)
}

// AppendMldImport appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MldImport struct to the
// list MldImport of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MldImport already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) AppendMldImport(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MldImport) error {
	if v.PolicyName == nil {
		return fmt.Errorf("invalid nil key received for PolicyName")
	}

	key := *v.PolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MldImport == nil {
		t.MldImport = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MldImport)
	}

	if _, ok := t.MldImport[key]; ok {
		return fmt.Errorf("duplicate key for list MldImport %v", key)
	}

	t.MldImport[key] = v
	return nil
}

// GetOrCreateAccessLoopEncapsulation retrieves the value of the AccessLoopEncapsulation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) GetOrCreateAccessLoopEncapsulation() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation {
	if t.AccessLoopEncapsulation != nil {
		return t.AccessLoopEncapsulation
	}
	t.AccessLoopEncapsulation = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation{}
	return t.AccessLoopEncapsulation
}

// GetOrCreateAccessLoopInformation retrieves the value of the AccessLoopInformation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) GetOrCreateAccessLoopInformation() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation {
	if t.AccessLoopInformation != nil {
		return t.AccessLoopInformation
	}
	t.AccessLoopInformation = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation{}
	return t.AccessLoopInformation
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) GetOrCreateAuthentication() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Authentication{}
	return t.Authentication
}

// GetOrCreateHostIdentification retrieves the value of the HostIdentification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) GetOrCreateHostIdentification() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification {
	if t.HostIdentification != nil {
		return t.HostIdentification
	}
	t.HostIdentification = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification{}
	return t.HostIdentification
}

// GetOrCreateIdentification retrieves the value of the Identification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) GetOrCreateIdentification() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Identification {
	if t.Identification != nil {
		return t.Identification
	}
	t.Identification = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Identification{}
	return t.Identification
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) GetOrCreateIpv6() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6{}
	return t.Ipv6
}

// GetOrCreateL2Tp retrieves the value of the L2Tp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) GetOrCreateL2Tp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp {
	if t.L2Tp != nil {
		return t.L2Tp
	}
	t.L2Tp = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp{}
	return t.L2Tp
}

// GetOrCreateLnsInterface retrieves the value of the LnsInterface field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) GetOrCreateLnsInterface() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_LnsInterface {
	if t.LnsInterface != nil {
		return t.LnsInterface
	}
	t.LnsInterface = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_LnsInterface{}
	return t.LnsInterface
}

// GetOrCreateMsapDefaults retrieves the value of the MsapDefaults field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) GetOrCreateMsapDefaults() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults {
	if t.MsapDefaults != nil {
		return t.MsapDefaults
	}
	t.MsapDefaults = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults{}
	return t.MsapDefaults
}

// GetOrCreatePassword retrieves the value of the Password field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) GetOrCreatePassword() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Password {
	if t.Password != nil {
		return t.Password
	}
	t.Password = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Password{}
	return t.Password
}

// GetOrCreateRadiusAccountingPolicy retrieves the value of the RadiusAccountingPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) GetOrCreateRadiusAccountingPolicy() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_RadiusAccountingPolicy {
	if t.RadiusAccountingPolicy != nil {
		return t.RadiusAccountingPolicy
	}
	t.RadiusAccountingPolicy = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_RadiusAccountingPolicy{}
	return t.RadiusAccountingPolicy
}

// GetOrCreateToClientOptions retrieves the value of the ToClientOptions field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) GetOrCreateToClientOptions() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions {
	if t.ToClientOptions != nil {
		return t.ToClientOptions
	}
	t.ToClientOptions = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions{}
	return t.ToClientOptions
}

// GetAccessLoopEncapsulation returns the value of the AccessLoopEncapsulation struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host. If the receiver or the field AccessLoopEncapsulation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) GetAccessLoopEncapsulation() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation {
	if t != nil && t.AccessLoopEncapsulation != nil {
		return t.AccessLoopEncapsulation
	}
	return nil
}

// GetAccessLoopInformation returns the value of the AccessLoopInformation struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host. If the receiver or the field AccessLoopInformation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) GetAccessLoopInformation() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation {
	if t != nil && t.AccessLoopInformation != nil {
		return t.AccessLoopInformation
	}
	return nil
}

// GetAuthentication returns the value of the Authentication struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) GetAuthentication() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetHostIdentification returns the value of the HostIdentification struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host. If the receiver or the field HostIdentification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) GetHostIdentification() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification {
	if t != nil && t.HostIdentification != nil {
		return t.HostIdentification
	}
	return nil
}

// GetIdentification returns the value of the Identification struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host. If the receiver or the field Identification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) GetIdentification() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Identification {
	if t != nil && t.Identification != nil {
		return t.Identification
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) GetIpv4() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) GetIpv6() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetL2Tp returns the value of the L2Tp struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host. If the receiver or the field L2Tp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) GetL2Tp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp {
	if t != nil && t.L2Tp != nil {
		return t.L2Tp
	}
	return nil
}

// GetLnsInterface returns the value of the LnsInterface struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host. If the receiver or the field LnsInterface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) GetLnsInterface() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_LnsInterface {
	if t != nil && t.LnsInterface != nil {
		return t.LnsInterface
	}
	return nil
}

// GetMsapDefaults returns the value of the MsapDefaults struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host. If the receiver or the field MsapDefaults is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) GetMsapDefaults() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults {
	if t != nil && t.MsapDefaults != nil {
		return t.MsapDefaults
	}
	return nil
}

// GetPassword returns the value of the Password struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host. If the receiver or the field Password is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) GetPassword() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Password {
	if t != nil && t.Password != nil {
		return t.Password
	}
	return nil
}

// GetRadiusAccountingPolicy returns the value of the RadiusAccountingPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host. If the receiver or the field RadiusAccountingPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) GetRadiusAccountingPolicy() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_RadiusAccountingPolicy {
	if t != nil && t.RadiusAccountingPolicy != nil {
		return t.RadiusAccountingPolicy
	}
	return nil
}

// GetToClientOptions returns the value of the ToClientOptions struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host. If the receiver or the field ToClientOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) GetToClientOptions() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions {
	if t != nil && t.ToClientOptions != nil {
		return t.ToClientOptions
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetHostName retrieves the value of the leaf HostName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostName is set, it can
// safely use t.GetHostName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) GetHostName() string {
	if t == nil || t.HostName == nil {
		return ""
	}
	return *t.HostName
}

// GetPadoDelay retrieves the value of the leaf PadoDelay from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PadoDelay is set, it can
// safely use t.GetPadoDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PadoDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) GetPadoDelay() uint32 {
	if t == nil || t.PadoDelay == nil {
		return 0
	}
	return *t.PadoDelay
}

// GetRetailServiceId retrieves the value of the leaf RetailServiceId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetailServiceId is set, it can
// safely use t.GetRetailServiceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetailServiceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) GetRetailServiceId() uint32 {
	if t == nil || t.RetailServiceId == nil {
		return 0
	}
	return *t.RetailServiceId
}

// GetRipPolicy retrieves the value of the leaf RipPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RipPolicy is set, it can
// safely use t.GetRipPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RipPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) GetRipPolicy() string {
	if t == nil || t.RipPolicy == nil {
		return ""
	}
	return *t.RipPolicy
}

// GetSteeringProfile retrieves the value of the leaf SteeringProfile from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SteeringProfile is set, it can
// safely use t.GetSteeringProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SteeringProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) GetSteeringProfile() string {
	if t == nil || t.SteeringProfile == nil {
		return ""
	}
	return *t.SteeringProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.AccessLoopEncapsulation.PopulateDefaults()
	t.AccessLoopInformation.PopulateDefaults()
	t.Authentication.PopulateDefaults()
	t.HostIdentification.PopulateDefaults()
	t.Identification.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	t.L2Tp.PopulateDefaults()
	t.LnsInterface.PopulateDefaults()
	t.MsapDefaults.PopulateDefaults()
	t.Password.PopulateDefaults()
	t.RadiusAccountingPolicy.PopulateDefaults()
	t.ToClientOptions.PopulateDefaults()
	for _, e := range t.MldImport {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) ΛListKeyMap() (map[string]interface{}, error) {
	if t.HostName == nil {
		return nil, fmt.Errorf("nil value for key HostName")
	}

	return map[string]interface{}{
		"host-name": *t.HostName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp/host/access-loop-encapsulation YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation struct {
	EncapOffset *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation_EncapOffset `path:"encap-offset" module:"nokia-conf"`
	RateDown    *uint32                                                                                                   `path:"rate-down" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation) IsYANGGoStruct() {
}

// GetOrCreateEncapOffset retrieves the value of the EncapOffset field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation) GetOrCreateEncapOffset() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation_EncapOffset {
	if t.EncapOffset != nil {
		return t.EncapOffset
	}
	t.EncapOffset = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation_EncapOffset{}
	return t.EncapOffset
}

// GetEncapOffset returns the value of the EncapOffset struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation. If the receiver or the field EncapOffset is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation) GetEncapOffset() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation_EncapOffset {
	if t != nil && t.EncapOffset != nil {
		return t.EncapOffset
	}
	return nil
}

// GetRateDown retrieves the value of the leaf RateDown from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RateDown is set, it can
// safely use t.GetRateDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RateDown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation) GetRateDown() uint32 {
	if t == nil || t.RateDown == nil {
		return 0
	}
	return *t.RateDown
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EncapOffset.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation_EncapOffset represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp/host/access-loop-encapsulation/encap-offset YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation_EncapOffset struct {
	Type E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation_EncapOffset_Type `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation_EncapOffset implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation_EncapOffset) IsYANGGoStruct() {
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation_EncapOffset
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation_EncapOffset) GetType() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation_EncapOffset_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation_EncapOffset
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation_EncapOffset) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation_EncapOffset) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation_EncapOffset"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation_EncapOffset) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation_EncapOffset) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation_EncapOffset.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopEncapsulation_EncapOffset) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp/host/access-loop-information YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation struct {
	CircuitId *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_CircuitId `path:"circuit-id" module:"nokia-conf" yangPresence:"true"`
	RemoteId  *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_RemoteId  `path:"remote-id" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation) IsYANGGoStruct() {
}

// GetOrCreateCircuitId retrieves the value of the CircuitId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation) GetOrCreateCircuitId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_CircuitId {
	if t.CircuitId != nil {
		return t.CircuitId
	}
	t.CircuitId = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_CircuitId{}
	return t.CircuitId
}

// GetOrCreateRemoteId retrieves the value of the RemoteId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation) GetOrCreateRemoteId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_RemoteId {
	if t.RemoteId != nil {
		return t.RemoteId
	}
	t.RemoteId = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_RemoteId{}
	return t.RemoteId
}

// GetCircuitId returns the value of the CircuitId struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation. If the receiver or the field CircuitId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation) GetCircuitId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_CircuitId {
	if t != nil && t.CircuitId != nil {
		return t.CircuitId
	}
	return nil
}

// GetRemoteId returns the value of the RemoteId struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation. If the receiver or the field RemoteId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation) GetRemoteId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_RemoteId {
	if t != nil && t.RemoteId != nil {
		return t.RemoteId
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.CircuitId.PopulateDefaults()
	t.RemoteId.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_CircuitId represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp/host/access-loop-information/circuit-id YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_CircuitId struct {
	AsciiString *string   `path:"ascii-string" module:"nokia-conf"`
	SapId       *bool     `path:"sap-id" module:"nokia-conf"`
	UseSapId    YANGEmpty `path:"use-sap-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_CircuitId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_CircuitId) IsYANGGoStruct() {
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_CircuitId) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_CircuitId) GetSapId() bool {
	if t == nil || t.SapId == nil {
		return false
	}
	return *t.SapId
}

// GetUseSapId retrieves the value of the leaf UseSapId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseSapId is set, it can
// safely use t.GetUseSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseSapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_CircuitId) GetUseSapId() YANGEmpty {
	if t == nil || t.UseSapId == false {
		return false
	}
	return t.UseSapId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_CircuitId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_CircuitId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_CircuitId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_CircuitId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_CircuitId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_CircuitId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_CircuitId.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_CircuitId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_RemoteId represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp/host/access-loop-information/remote-id YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_RemoteId struct {
	AsciiString   *string   `path:"ascii-string" module:"nokia-conf"`
	Mac           *bool     `path:"mac" module:"nokia-conf"`
	UseMacAddress YANGEmpty `path:"use-mac-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_RemoteId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_RemoteId) IsYANGGoStruct() {
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_RemoteId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_RemoteId) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_RemoteId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_RemoteId) GetMac() bool {
	if t == nil || t.Mac == nil {
		return false
	}
	return *t.Mac
}

// GetUseMacAddress retrieves the value of the leaf UseMacAddress from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_RemoteId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseMacAddress is set, it can
// safely use t.GetUseMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseMacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_RemoteId) GetUseMacAddress() YANGEmpty {
	if t == nil || t.UseMacAddress == false {
		return false
	}
	return t.UseMacAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_RemoteId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_RemoteId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_RemoteId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_RemoteId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_RemoteId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_RemoteId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_RemoteId.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_AccessLoopInformation_RemoteId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Authentication represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp/host/authentication YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Authentication struct {
	GxPolicy         *string `path:"gx-policy" module:"nokia-conf"`
	NasreqAuthPolicy *string `path:"nasreq-auth-policy" module:"nokia-conf"`
	PadiAuthPolicy   *string `path:"padi-auth-policy" module:"nokia-conf"`
	PreAuthPolicy    *string `path:"pre-auth-policy" module:"nokia-conf"`
	RadiusAuthPolicy *string `path:"radius-auth-policy" module:"nokia-conf"`
	UserDb           *string `path:"user-db" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Authentication) IsYANGGoStruct() {
}

// GetGxPolicy retrieves the value of the leaf GxPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GxPolicy is set, it can
// safely use t.GetGxPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GxPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Authentication) GetGxPolicy() string {
	if t == nil || t.GxPolicy == nil {
		return ""
	}
	return *t.GxPolicy
}

// GetNasreqAuthPolicy retrieves the value of the leaf NasreqAuthPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NasreqAuthPolicy is set, it can
// safely use t.GetNasreqAuthPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NasreqAuthPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Authentication) GetNasreqAuthPolicy() string {
	if t == nil || t.NasreqAuthPolicy == nil {
		return ""
	}
	return *t.NasreqAuthPolicy
}

// GetPadiAuthPolicy retrieves the value of the leaf PadiAuthPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PadiAuthPolicy is set, it can
// safely use t.GetPadiAuthPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PadiAuthPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Authentication) GetPadiAuthPolicy() string {
	if t == nil || t.PadiAuthPolicy == nil {
		return ""
	}
	return *t.PadiAuthPolicy
}

// GetPreAuthPolicy retrieves the value of the leaf PreAuthPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreAuthPolicy is set, it can
// safely use t.GetPreAuthPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreAuthPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Authentication) GetPreAuthPolicy() string {
	if t == nil || t.PreAuthPolicy == nil {
		return ""
	}
	return *t.PreAuthPolicy
}

// GetRadiusAuthPolicy retrieves the value of the leaf RadiusAuthPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusAuthPolicy is set, it can
// safely use t.GetRadiusAuthPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusAuthPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Authentication) GetRadiusAuthPolicy() string {
	if t == nil || t.RadiusAuthPolicy == nil {
		return ""
	}
	return *t.RadiusAuthPolicy
}

// GetUserDb retrieves the value of the leaf UserDb from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserDb is set, it can
// safely use t.GetUserDb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserDb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Authentication) GetUserDb() string {
	if t == nil || t.UserDb == nil {
		return ""
	}
	return *t.UserDb
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Authentication) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Authentication.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Authentication) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp/host/host-identification YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification struct {
	CircuitId             *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_CircuitId             `path:"circuit-id" module:"nokia-conf"`
	DerivedId             *string                                                                                                        `path:"derived-id" module:"nokia-conf"`
	EncapTagRange         *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagRange         `path:"encap-tag-range" module:"nokia-conf" yangPresence:"true"`
	EncapTagSeparateRange *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange `path:"encap-tag-separate-range" module:"nokia-conf"`
	Mac                   *string                                                                                                        `path:"mac" module:"nokia-conf"`
	RemoteId              *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_RemoteId              `path:"remote-id" module:"nokia-conf"`
	SapId                 *string                                                                                                        `path:"sap-id" module:"nokia-conf"`
	ServiceName           *string                                                                                                        `path:"service-name" module:"nokia-conf"`
	UserName              *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_UserName              `path:"user-name" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification) IsYANGGoStruct() {
}

// GetOrCreateCircuitId retrieves the value of the CircuitId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification) GetOrCreateCircuitId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_CircuitId {
	if t.CircuitId != nil {
		return t.CircuitId
	}
	t.CircuitId = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_CircuitId{}
	return t.CircuitId
}

// GetOrCreateEncapTagRange retrieves the value of the EncapTagRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification) GetOrCreateEncapTagRange() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagRange {
	if t.EncapTagRange != nil {
		return t.EncapTagRange
	}
	t.EncapTagRange = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagRange{}
	return t.EncapTagRange
}

// GetOrCreateEncapTagSeparateRange retrieves the value of the EncapTagSeparateRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification) GetOrCreateEncapTagSeparateRange() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange {
	if t.EncapTagSeparateRange != nil {
		return t.EncapTagSeparateRange
	}
	t.EncapTagSeparateRange = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange{}
	return t.EncapTagSeparateRange
}

// GetOrCreateRemoteId retrieves the value of the RemoteId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification) GetOrCreateRemoteId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_RemoteId {
	if t.RemoteId != nil {
		return t.RemoteId
	}
	t.RemoteId = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_RemoteId{}
	return t.RemoteId
}

// GetOrCreateUserName retrieves the value of the UserName field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification) GetOrCreateUserName() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_UserName {
	if t.UserName != nil {
		return t.UserName
	}
	t.UserName = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_UserName{}
	return t.UserName
}

// GetCircuitId returns the value of the CircuitId struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification. If the receiver or the field CircuitId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification) GetCircuitId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_CircuitId {
	if t != nil && t.CircuitId != nil {
		return t.CircuitId
	}
	return nil
}

// GetEncapTagRange returns the value of the EncapTagRange struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification. If the receiver or the field EncapTagRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification) GetEncapTagRange() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagRange {
	if t != nil && t.EncapTagRange != nil {
		return t.EncapTagRange
	}
	return nil
}

// GetEncapTagSeparateRange returns the value of the EncapTagSeparateRange struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification. If the receiver or the field EncapTagSeparateRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification) GetEncapTagSeparateRange() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange {
	if t != nil && t.EncapTagSeparateRange != nil {
		return t.EncapTagSeparateRange
	}
	return nil
}

// GetRemoteId returns the value of the RemoteId struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification. If the receiver or the field RemoteId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification) GetRemoteId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_RemoteId {
	if t != nil && t.RemoteId != nil {
		return t.RemoteId
	}
	return nil
}

// GetUserName returns the value of the UserName struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification. If the receiver or the field UserName is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification) GetUserName() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_UserName {
	if t != nil && t.UserName != nil {
		return t.UserName
	}
	return nil
}

// GetDerivedId retrieves the value of the leaf DerivedId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DerivedId is set, it can
// safely use t.GetDerivedId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DerivedId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification) GetDerivedId() string {
	if t == nil || t.DerivedId == nil {
		return ""
	}
	return *t.DerivedId
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.CircuitId.PopulateDefaults()
	t.EncapTagRange.PopulateDefaults()
	t.EncapTagSeparateRange.PopulateDefaults()
	t.RemoteId.PopulateDefaults()
	t.UserName.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_CircuitId represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp/host/host-identification/circuit-id YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_CircuitId struct {
	AsciiString *string `path:"ascii-string" module:"nokia-conf"`
	HexString   *string `path:"hex-string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_CircuitId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_CircuitId) IsYANGGoStruct() {
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_CircuitId) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_CircuitId) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_CircuitId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_CircuitId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_CircuitId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_CircuitId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_CircuitId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_CircuitId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_CircuitId.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_CircuitId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagRange represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp/host/host-identification/encap-tag-range YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagRange struct {
	From *string `path:"from" module:"nokia-conf"`
	To   *string `path:"to" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagRange) IsYANGGoStruct() {
}

// GetFrom retrieves the value of the leaf From from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if From is set, it can
// safely use t.GetFrom() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.From == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagRange) GetFrom() string {
	if t == nil || t.From == nil {
		return ""
	}
	return *t.From
}

// GetTo retrieves the value of the leaf To from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if To is set, it can
// safely use t.GetTo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.To == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagRange) GetTo() string {
	if t == nil || t.To == nil {
		return ""
	}
	return *t.To
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagRange.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp/host/host-identification/encap-tag-separate-range YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange struct {
	Inner *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Inner `path:"inner" module:"nokia-conf"`
	Outer *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Outer `path:"outer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange) IsYANGGoStruct() {
}

// GetOrCreateInner retrieves the value of the Inner field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange) GetOrCreateInner() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Inner {
	if t.Inner != nil {
		return t.Inner
	}
	t.Inner = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Inner{}
	return t.Inner
}

// GetOrCreateOuter retrieves the value of the Outer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange) GetOrCreateOuter() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Outer {
	if t.Outer != nil {
		return t.Outer
	}
	t.Outer = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Outer{}
	return t.Outer
}

// GetInner returns the value of the Inner struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange. If the receiver or the field Inner is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange) GetInner() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Inner {
	if t != nil && t.Inner != nil {
		return t.Inner
	}
	return nil
}

// GetOuter returns the value of the Outer struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange. If the receiver or the field Outer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange) GetOuter() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Outer {
	if t != nil && t.Outer != nil {
		return t.Outer
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Inner.PopulateDefaults()
	t.Outer.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Inner represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp/host/host-identification/encap-tag-separate-range/inner YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Inner struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Inner implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Inner) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Inner
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Inner) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Inner
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Inner) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Inner
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Inner) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Inner) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Inner"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Inner) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Inner) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Inner.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Inner) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Outer represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp/host/host-identification/encap-tag-separate-range/outer YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Outer struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Outer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Outer) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Outer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Outer) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Outer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Outer) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Outer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Outer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Outer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Outer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Outer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Outer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Outer.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_EncapTagSeparateRange_Outer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_RemoteId represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp/host/host-identification/remote-id YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_RemoteId struct {
	AsciiString *string `path:"ascii-string" module:"nokia-conf"`
	HexString   *string `path:"hex-string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_RemoteId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_RemoteId) IsYANGGoStruct() {
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_RemoteId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_RemoteId) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_RemoteId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_RemoteId) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_RemoteId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_RemoteId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_RemoteId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_RemoteId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_RemoteId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_RemoteId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_RemoteId.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_RemoteId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_UserName represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp/host/host-identification/user-name YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_UserName struct {
	Format E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_UserName_Format `path:"format" module:"nokia-conf"`
	Name   *string                                                                                                   `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_UserName implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_UserName) IsYANGGoStruct() {
}

// GetFormat retrieves the value of the leaf Format from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_UserName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Format is set, it can
// safely use t.GetFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Format == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_UserName) GetFormat() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_UserName_Format {
	if t == nil || t.Format == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_UserName_Format_full
	}
	return t.Format
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_UserName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_UserName) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_UserName
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_UserName) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Format == 0 {
		t.Format = NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_UserName_Format_full
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_UserName) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_UserName"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_UserName) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_UserName) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_UserName.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_HostIdentification_UserName) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Identification represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp/host/identification YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Identification struct {
	AncpString        *string `path:"ancp-string" module:"nokia-conf"`
	AppProfileString  *string `path:"app-profile-string" module:"nokia-conf"`
	CategoryMapName   *string `path:"category-map-name" module:"nokia-conf"`
	IntDestId         *string `path:"int-dest-id" module:"nokia-conf"`
	OptionNumber      *uint32 `path:"option-number" module:"nokia-conf"`
	SlaProfileString  *string `path:"sla-profile-string" module:"nokia-conf"`
	SpiSharingGroupId *int32  `path:"spi-sharing-group-id" module:"nokia-conf"`
	SubProfileString  *string `path:"sub-profile-string" module:"nokia-conf"`
	SubscriberId      *string `path:"subscriber-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Identification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Identification) IsYANGGoStruct() {
}

// GetAncpString retrieves the value of the leaf AncpString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Identification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AncpString is set, it can
// safely use t.GetAncpString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AncpString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Identification) GetAncpString() string {
	if t == nil || t.AncpString == nil {
		return ""
	}
	return *t.AncpString
}

// GetAppProfileString retrieves the value of the leaf AppProfileString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Identification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfileString is set, it can
// safely use t.GetAppProfileString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfileString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Identification) GetAppProfileString() string {
	if t == nil || t.AppProfileString == nil {
		return ""
	}
	return *t.AppProfileString
}

// GetCategoryMapName retrieves the value of the leaf CategoryMapName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Identification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CategoryMapName is set, it can
// safely use t.GetCategoryMapName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CategoryMapName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Identification) GetCategoryMapName() string {
	if t == nil || t.CategoryMapName == nil {
		return ""
	}
	return *t.CategoryMapName
}

// GetIntDestId retrieves the value of the leaf IntDestId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Identification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IntDestId is set, it can
// safely use t.GetIntDestId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IntDestId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Identification) GetIntDestId() string {
	if t == nil || t.IntDestId == nil {
		return ""
	}
	return *t.IntDestId
}

// GetOptionNumber retrieves the value of the leaf OptionNumber from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Identification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OptionNumber is set, it can
// safely use t.GetOptionNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OptionNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Identification) GetOptionNumber() uint32 {
	if t == nil || t.OptionNumber == nil {
		return 254
	}
	return *t.OptionNumber
}

// GetSlaProfileString retrieves the value of the leaf SlaProfileString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Identification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlaProfileString is set, it can
// safely use t.GetSlaProfileString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlaProfileString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Identification) GetSlaProfileString() string {
	if t == nil || t.SlaProfileString == nil {
		return ""
	}
	return *t.SlaProfileString
}

// GetSpiSharingGroupId retrieves the value of the leaf SpiSharingGroupId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Identification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpiSharingGroupId is set, it can
// safely use t.GetSpiSharingGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpiSharingGroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Identification) GetSpiSharingGroupId() int32 {
	if t == nil || t.SpiSharingGroupId == nil {
		return 0
	}
	return *t.SpiSharingGroupId
}

// GetSubProfileString retrieves the value of the leaf SubProfileString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Identification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubProfileString is set, it can
// safely use t.GetSubProfileString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubProfileString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Identification) GetSubProfileString() string {
	if t == nil || t.SubProfileString == nil {
		return ""
	}
	return *t.SubProfileString
}

// GetSubscriberId retrieves the value of the leaf SubscriberId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Identification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubscriberId is set, it can
// safely use t.GetSubscriberId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubscriberId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Identification) GetSubscriberId() string {
	if t == nil || t.SubscriberId == nil {
		return ""
	}
	return *t.SubscriberId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Identification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Identification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.OptionNumber == nil {
		var v uint32 = 254
		t.OptionNumber = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Identification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Identification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Identification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Identification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Identification.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Identification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4 represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp/host/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4 struct {
	Address     *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address                                                                                                  `path:"address" module:"nokia-conf"`
	IgnoreDfBit *bool                                                                                                                                                                               `path:"ignore-df-bit" module:"nokia-conf"`
	Option      map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option_Number_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option `path:"option" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4) IsYANGGoStruct() {}

// NewOption creates a new entry in the Option list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4) NewOption(Number NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option_Number_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option_Number_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option)
	}

	key := Number

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Option[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Option", key)
	}

	t.Option[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option{
		Number: Number,
	}

	return t.Option[key], nil
}

// RenameOption renames an entry in the list Option within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4) RenameOption(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option_Number_Union) error {
	if _, ok := t.Option[newK]; ok {
		return fmt.Errorf("key %v already exists in Option", newK)
	}

	e, ok := t.Option[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Option", oldK)
	}
	e.Number = newK

	t.Option[newK] = e
	delete(t.Option, oldK)
	return nil
}

// GetOrCreateOption retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4) GetOrCreateOption(Number NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option_Number_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option {

	key := Number

	if v, ok := t.Option[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOption(Number)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOption got unexpected error: %v", err))
	}
	return v
}

// GetOption retrieves the value with the specified key from
// the Option map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4) GetOption(Number NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option_Number_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option {

	if t == nil {
		return nil
	}

	key := Number

	if lm, ok := t.Option[key]; ok {
		return lm
	}
	return nil
}

// DeleteOption deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4) DeleteOption(Number NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option_Number_Union) {
	key := Number

	delete(t.Option, key)
}

// AppendOption appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option struct to the
// list Option of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4) AppendOption(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option) error {
	key := v.Number

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option_Number_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option)
	}

	if _, ok := t.Option[key]; ok {
		return fmt.Errorf("duplicate key for list Option %v", key)
	}

	t.Option[key] = v
	return nil
}

// GetOrCreateAddress retrieves the value of the Address field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4) GetOrCreateAddress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address {
	if t.Address != nil {
		return t.Address
	}
	t.Address = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address{}
	return t.Address
}

// GetAddress returns the value of the Address struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4. If the receiver or the field Address is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4) GetAddress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address {
	if t != nil && t.Address != nil {
		return t.Address
	}
	return nil
}

// GetIgnoreDfBit retrieves the value of the leaf IgnoreDfBit from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreDfBit is set, it can
// safely use t.GetIgnoreDfBit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreDfBit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4) GetIgnoreDfBit() bool {
	if t == nil || t.IgnoreDfBit == nil {
		return false
	}
	return *t.IgnoreDfBit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IgnoreDfBit == nil {
		var v bool = false
		t.IgnoreDfBit = &v
	}
	t.Address.PopulateDefaults()
	for _, e := range t.Option {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp/host/ipv4/address YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address struct {
	GiAddress         E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_GiAddress        `path:"gi-address" module:"nokia-conf"`
	IpAddress         *string                                                                                              `path:"ip-address" module:"nokia-conf"`
	Pool              *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_Pool              `path:"pool" module:"nokia-conf" yangPresence:"true"`
	PrefixLength      *uint32                                                                                              `path:"prefix-length" module:"nokia-conf"`
	UsePoolFromClient *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_UsePoolFromClient `path:"use-pool-from-client" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address) IsYANGGoStruct() {
}

// GetOrCreatePool retrieves the value of the Pool field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address) GetOrCreatePool() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_Pool {
	if t.Pool != nil {
		return t.Pool
	}
	t.Pool = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_Pool{}
	return t.Pool
}

// GetOrCreateUsePoolFromClient retrieves the value of the UsePoolFromClient field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address) GetOrCreateUsePoolFromClient() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_UsePoolFromClient {
	if t.UsePoolFromClient != nil {
		return t.UsePoolFromClient
	}
	t.UsePoolFromClient = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_UsePoolFromClient{}
	return t.UsePoolFromClient
}

// GetPool returns the value of the Pool struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address. If the receiver or the field Pool is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address) GetPool() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_Pool {
	if t != nil && t.Pool != nil {
		return t.Pool
	}
	return nil
}

// GetUsePoolFromClient returns the value of the UsePoolFromClient struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address. If the receiver or the field UsePoolFromClient is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address) GetUsePoolFromClient() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_UsePoolFromClient {
	if t != nil && t.UsePoolFromClient != nil {
		return t.UsePoolFromClient
	}
	return nil
}

// GetGiAddress retrieves the value of the leaf GiAddress from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GiAddress is set, it can
// safely use t.GetGiAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GiAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address) GetGiAddress() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_GiAddress {
	if t == nil || t.GiAddress == 0 {
		return 0
	}
	return t.GiAddress
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 32
	}
	return *t.PrefixLength
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PrefixLength == nil {
		var v uint32 = 32
		t.PrefixLength = &v
	}
	t.Pool.PopulateDefaults()
	t.UsePoolFromClient.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_Pool represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp/host/ipv4/address/pool YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_Pool struct {
	Delimiter *string `path:"delimiter" module:"nokia-conf"`
	Primary   *string `path:"primary" module:"nokia-conf"`
	Secondary *string `path:"secondary" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_Pool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_Pool) IsYANGGoStruct() {
}

// GetDelimiter retrieves the value of the leaf Delimiter from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Delimiter is set, it can
// safely use t.GetDelimiter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Delimiter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_Pool) GetDelimiter() string {
	if t == nil || t.Delimiter == nil {
		return ""
	}
	return *t.Delimiter
}

// GetPrimary retrieves the value of the leaf Primary from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Primary is set, it can
// safely use t.GetPrimary() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Primary == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_Pool) GetPrimary() string {
	if t == nil || t.Primary == nil {
		return ""
	}
	return *t.Primary
}

// GetSecondary retrieves the value of the leaf Secondary from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Secondary is set, it can
// safely use t.GetSecondary() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Secondary == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_Pool) GetSecondary() string {
	if t == nil || t.Secondary == nil {
		return ""
	}
	return *t.Secondary
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_Pool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_Pool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_Pool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_Pool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_Pool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_Pool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_Pool.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_Pool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_UsePoolFromClient represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp/host/ipv4/address/use-pool-from-client YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_UsePoolFromClient struct {
	Delimiter *string `path:"delimiter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_UsePoolFromClient implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_UsePoolFromClient) IsYANGGoStruct() {
}

// GetDelimiter retrieves the value of the leaf Delimiter from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_UsePoolFromClient
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Delimiter is set, it can
// safely use t.GetDelimiter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Delimiter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_UsePoolFromClient) GetDelimiter() string {
	if t == nil || t.Delimiter == nil {
		return ""
	}
	return *t.Delimiter
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_UsePoolFromClient
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_UsePoolFromClient) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_UsePoolFromClient) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_UsePoolFromClient"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_UsePoolFromClient) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_UsePoolFromClient) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_UsePoolFromClient.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Address_UsePoolFromClient) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp/host/ipv4/option YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option struct {
	AsciiString     *string                                                                                            `path:"ascii-string" module:"nokia-conf"`
	Duration        *uint32                                                                                            `path:"duration" module:"nokia-conf"`
	Empty           YANGEmpty                                                                                          `path:"empty" module:"nokia-conf"`
	HexString       *string                                                                                            `path:"hex-string" module:"nokia-conf"`
	Ipv4Address     []string                                                                                           `path:"ipv4-address" module:"nokia-conf"`
	NetbiosNodeType E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option_NetbiosNodeType `path:"netbios-node-type" module:"nokia-conf"`
	Number          NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option_Number_Union      `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option) IsYANGGoStruct() {
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetDuration retrieves the value of the leaf Duration from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Duration is set, it can
// safely use t.GetDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Duration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option) GetDuration() uint32 {
	if t == nil || t.Duration == nil {
		return 0
	}
	return *t.Duration
}

// GetEmpty retrieves the value of the leaf Empty from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Empty is set, it can
// safely use t.GetEmpty() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Empty == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option) GetEmpty() YANGEmpty {
	if t == nil || t.Empty == false {
		return false
	}
	return t.Empty
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option) GetIpv4Address() []string {
	if t == nil || t.Ipv4Address == nil {
		return nil
	}
	return t.Ipv4Address
}

// GetNetbiosNodeType retrieves the value of the leaf NetbiosNodeType from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetbiosNodeType is set, it can
// safely use t.GetNetbiosNodeType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetbiosNodeType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option) GetNetbiosNodeType() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option_NetbiosNodeType {
	if t == nil || t.NetbiosNodeType == 0 {
		return 0
	}
	return t.NetbiosNodeType
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option) GetNumber() NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option_Number_Union {
	if t == nil || t.Number == nil {
		return nil
	}
	return t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"number": t.Number,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv4_Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6 represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp/host/ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6 struct {
	Address                   *string                                                                                                                                                                             `path:"address" module:"nokia-conf"`
	AddressPool               *string                                                                                                                                                                             `path:"address-pool" module:"nokia-conf"`
	DelegatedPrefix           *string                                                                                                                                                                             `path:"delegated-prefix" module:"nokia-conf"`
	DelegatedPrefixLength     *uint32                                                                                                                                                                             `path:"delegated-prefix-length" module:"nokia-conf"`
	DelegatedPrefixPool       *string                                                                                                                                                                             `path:"delegated-prefix-pool" module:"nokia-conf"`
	ForceIpv6Cp               *bool                                                                                                                                                                               `path:"force-ipv6cp" module:"nokia-conf"`
	Option                    map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option_Number_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option `path:"option" module:"nokia-conf"`
	RouterAdvertisementPolicy *string                                                                                                                                                                             `path:"router-advertisement-policy" module:"nokia-conf"`
	SlaacPrefix               *string                                                                                                                                                                             `path:"slaac-prefix" module:"nokia-conf"`
	SlaacPrefixPool           *string                                                                                                                                                                             `path:"slaac-prefix-pool" module:"nokia-conf"`
	Timers                    *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Timers                                                                                                   `path:"timers" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6) IsYANGGoStruct() {}

// NewOption creates a new entry in the Option list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6) NewOption(Number NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option_Number_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option_Number_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option)
	}

	key := Number

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Option[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Option", key)
	}

	t.Option[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option{
		Number: Number,
	}

	return t.Option[key], nil
}

// RenameOption renames an entry in the list Option within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6) RenameOption(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option_Number_Union) error {
	if _, ok := t.Option[newK]; ok {
		return fmt.Errorf("key %v already exists in Option", newK)
	}

	e, ok := t.Option[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Option", oldK)
	}
	e.Number = newK

	t.Option[newK] = e
	delete(t.Option, oldK)
	return nil
}

// GetOrCreateOption retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6) GetOrCreateOption(Number NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option_Number_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option {

	key := Number

	if v, ok := t.Option[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOption(Number)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOption got unexpected error: %v", err))
	}
	return v
}

// GetOption retrieves the value with the specified key from
// the Option map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6) GetOption(Number NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option_Number_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option {

	if t == nil {
		return nil
	}

	key := Number

	if lm, ok := t.Option[key]; ok {
		return lm
	}
	return nil
}

// DeleteOption deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6) DeleteOption(Number NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option_Number_Union) {
	key := Number

	delete(t.Option, key)
}

// AppendOption appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option struct to the
// list Option of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6) AppendOption(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option) error {
	key := v.Number

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option_Number_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option)
	}

	if _, ok := t.Option[key]; ok {
		return fmt.Errorf("duplicate key for list Option %v", key)
	}

	t.Option[key] = v
	return nil
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6) GetOrCreateTimers() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Timers{}
	return t.Timers
}

// GetTimers returns the value of the Timers struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6) GetTimers() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAddressPool retrieves the value of the leaf AddressPool from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AddressPool is set, it can
// safely use t.GetAddressPool() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AddressPool == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6) GetAddressPool() string {
	if t == nil || t.AddressPool == nil {
		return ""
	}
	return *t.AddressPool
}

// GetDelegatedPrefix retrieves the value of the leaf DelegatedPrefix from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DelegatedPrefix is set, it can
// safely use t.GetDelegatedPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DelegatedPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6) GetDelegatedPrefix() string {
	if t == nil || t.DelegatedPrefix == nil {
		return ""
	}
	return *t.DelegatedPrefix
}

// GetDelegatedPrefixLength retrieves the value of the leaf DelegatedPrefixLength from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DelegatedPrefixLength is set, it can
// safely use t.GetDelegatedPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DelegatedPrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6) GetDelegatedPrefixLength() uint32 {
	if t == nil || t.DelegatedPrefixLength == nil {
		return 0
	}
	return *t.DelegatedPrefixLength
}

// GetDelegatedPrefixPool retrieves the value of the leaf DelegatedPrefixPool from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DelegatedPrefixPool is set, it can
// safely use t.GetDelegatedPrefixPool() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DelegatedPrefixPool == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6) GetDelegatedPrefixPool() string {
	if t == nil || t.DelegatedPrefixPool == nil {
		return ""
	}
	return *t.DelegatedPrefixPool
}

// GetForceIpv6Cp retrieves the value of the leaf ForceIpv6Cp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForceIpv6Cp is set, it can
// safely use t.GetForceIpv6Cp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForceIpv6Cp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6) GetForceIpv6Cp() bool {
	if t == nil || t.ForceIpv6Cp == nil {
		return false
	}
	return *t.ForceIpv6Cp
}

// GetRouterAdvertisementPolicy retrieves the value of the leaf RouterAdvertisementPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAdvertisementPolicy is set, it can
// safely use t.GetRouterAdvertisementPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAdvertisementPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6) GetRouterAdvertisementPolicy() string {
	if t == nil || t.RouterAdvertisementPolicy == nil {
		return ""
	}
	return *t.RouterAdvertisementPolicy
}

// GetSlaacPrefix retrieves the value of the leaf SlaacPrefix from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlaacPrefix is set, it can
// safely use t.GetSlaacPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlaacPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6) GetSlaacPrefix() string {
	if t == nil || t.SlaacPrefix == nil {
		return ""
	}
	return *t.SlaacPrefix
}

// GetSlaacPrefixPool retrieves the value of the leaf SlaacPrefixPool from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlaacPrefixPool is set, it can
// safely use t.GetSlaacPrefixPool() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlaacPrefixPool == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6) GetSlaacPrefixPool() string {
	if t == nil || t.SlaacPrefixPool == nil {
		return ""
	}
	return *t.SlaacPrefixPool
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ForceIpv6Cp == nil {
		var v bool = false
		t.ForceIpv6Cp = &v
	}
	t.Timers.PopulateDefaults()
	for _, e := range t.Option {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp/host/ipv6/option YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option struct {
	HexString   *string                                                                                       `path:"hex-string" module:"nokia-conf"`
	Ipv6Address []string                                                                                      `path:"ipv6-address" module:"nokia-conf"`
	Number      NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option_Number_Union `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option) IsYANGGoStruct() {
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option) GetIpv6Address() []string {
	if t == nil || t.Ipv6Address == nil {
		return nil
	}
	return t.Ipv6Address
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option) GetNumber() NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option_Number_Union {
	if t == nil || t.Number == nil {
		return nil
	}
	return t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"number": t.Number,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Timers represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp/host/ipv6/timers YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Timers struct {
	PreferredLifetime NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Timers_PreferredLifetime_Union `path:"preferred-lifetime" module:"nokia-conf"`
	Rebind            *uint32                                                                                                  `path:"rebind" module:"nokia-conf"`
	Renew             *uint32                                                                                                  `path:"renew" module:"nokia-conf"`
	ValidLifetime     NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Timers_ValidLifetime_Union     `path:"valid-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Timers) IsYANGGoStruct() {
}

// GetPreferredLifetime retrieves the value of the leaf PreferredLifetime from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferredLifetime is set, it can
// safely use t.GetPreferredLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferredLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Timers) GetPreferredLifetime() NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Timers_PreferredLifetime_Union {
	if t == nil || t.PreferredLifetime == nil {
		return nil
	}
	return t.PreferredLifetime
}

// GetRebind retrieves the value of the leaf Rebind from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rebind is set, it can
// safely use t.GetRebind() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rebind == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Timers) GetRebind() uint32 {
	if t == nil || t.Rebind == nil {
		return 0
	}
	return *t.Rebind
}

// GetRenew retrieves the value of the leaf Renew from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Renew is set, it can
// safely use t.GetRenew() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Renew == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Timers) GetRenew() uint32 {
	if t == nil || t.Renew == nil {
		return 0
	}
	return *t.Renew
}

// GetValidLifetime retrieves the value of the leaf ValidLifetime from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidLifetime is set, it can
// safely use t.GetValidLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Timers) GetValidLifetime() NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Timers_ValidLifetime_Union {
	if t == nil || t.ValidLifetime == nil {
		return nil
	}
	return t.ValidLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Timers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Timers.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Ipv6_Timers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp/host/l2tp YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp struct {
	Group *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp_Group `path:"group" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp) IsYANGGoStruct() {}

// GetOrCreateGroup retrieves the value of the Group field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp) GetOrCreateGroup() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp_Group {
	if t.Group != nil {
		return t.Group
	}
	t.Group = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp_Group{}
	return t.Group
}

// GetGroup returns the value of the Group struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp. If the receiver or the field Group is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp) GetGroup() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp_Group {
	if t != nil && t.Group != nil {
		return t.Group
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Group.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp_Group represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp/host/l2tp/group YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp_Group struct {
	Name      *string `path:"name" module:"nokia-conf"`
	ServiceId *uint32 `path:"service-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp_Group) IsYANGGoStruct() {
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp_Group) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetServiceId retrieves the value of the leaf ServiceId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceId is set, it can
// safely use t.GetServiceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp_Group) GetServiceId() uint32 {
	if t == nil || t.ServiceId == nil {
		return 0
	}
	return *t.ServiceId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp_Group.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_L2Tp_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_LnsInterface represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp/host/lns-interface YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_LnsInterface struct {
	Name      *string `path:"name" module:"nokia-conf"`
	ServiceId *uint32 `path:"service-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_LnsInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_LnsInterface) IsYANGGoStruct() {
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_LnsInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_LnsInterface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetServiceId retrieves the value of the leaf ServiceId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_LnsInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceId is set, it can
// safely use t.GetServiceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_LnsInterface) GetServiceId() uint32 {
	if t == nil || t.ServiceId == nil {
		return 0
	}
	return *t.ServiceId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_LnsInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_LnsInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_LnsInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_LnsInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_LnsInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_LnsInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_LnsInterface.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_LnsInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MldImport represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp/host/mld-import YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MldImport struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MldImport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MldImport) IsYANGGoStruct() {
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MldImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MldImport) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MldImport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MldImport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MldImport struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MldImport) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicyName == nil {
		return nil, fmt.Errorf("nil value for key PolicyName")
	}

	return map[string]interface{}{
		"policy-name": *t.PolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MldImport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MldImport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MldImport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MldImport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MldImport.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MldImport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp/host/msap-defaults YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults struct {
	GroupInterface *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults_GroupInterface `path:"group-interface" module:"nokia-conf" yangPresence:"true"`
	Policy         *string                                                                                           `path:"policy" module:"nokia-conf"`
	Service        *uint32                                                                                           `path:"service" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults) IsYANGGoStruct() {
}

// GetOrCreateGroupInterface retrieves the value of the GroupInterface field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults) GetOrCreateGroupInterface() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults_GroupInterface {
	if t.GroupInterface != nil {
		return t.GroupInterface
	}
	t.GroupInterface = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults_GroupInterface{}
	return t.GroupInterface
}

// GetGroupInterface returns the value of the GroupInterface struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults. If the receiver or the field GroupInterface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults) GetGroupInterface() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults_GroupInterface {
	if t != nil && t.GroupInterface != nil {
		return t.GroupInterface
	}
	return nil
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// GetService retrieves the value of the leaf Service from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Service is set, it can
// safely use t.GetService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Service == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults) GetService() uint32 {
	if t == nil || t.Service == nil {
		return 0
	}
	return *t.Service
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.GroupInterface.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults_GroupInterface represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp/host/msap-defaults/group-interface YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults_GroupInterface struct {
	Name   *string                                                                                                   `path:"name" module:"nokia-conf"`
	Prefix E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults_GroupInterface_Prefix `path:"prefix" module:"nokia-conf"`
	Suffix E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults_GroupInterface_Suffix `path:"suffix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults_GroupInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults_GroupInterface) IsYANGGoStruct() {
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults_GroupInterface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPrefix retrieves the value of the leaf Prefix from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults_GroupInterface) GetPrefix() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults_GroupInterface_Prefix {
	if t == nil || t.Prefix == 0 {
		return 0
	}
	return t.Prefix
}

// GetSuffix retrieves the value of the leaf Suffix from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Suffix is set, it can
// safely use t.GetSuffix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Suffix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults_GroupInterface) GetSuffix() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults_GroupInterface_Suffix {
	if t == nil || t.Suffix == 0 {
		return 0
	}
	return t.Suffix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults_GroupInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults_GroupInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults_GroupInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults_GroupInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults_GroupInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults_GroupInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults_GroupInterface.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_MsapDefaults_GroupInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Password represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp/host/password YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Password struct {
	Chap   *string   `path:"chap" module:"nokia-conf"`
	Ignore YANGEmpty `path:"ignore" module:"nokia-conf"`
	Pap    *string   `path:"pap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Password implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Password) IsYANGGoStruct() {
}

// GetChap retrieves the value of the leaf Chap from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Password
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Chap is set, it can
// safely use t.GetChap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Chap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Password) GetChap() string {
	if t == nil || t.Chap == nil {
		return ""
	}
	return *t.Chap
}

// GetIgnore retrieves the value of the leaf Ignore from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Password
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ignore is set, it can
// safely use t.GetIgnore() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ignore == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Password) GetIgnore() YANGEmpty {
	if t == nil || t.Ignore == false {
		return false
	}
	return t.Ignore
}

// GetPap retrieves the value of the leaf Pap from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Password
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pap is set, it can
// safely use t.GetPap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Password) GetPap() string {
	if t == nil || t.Pap == nil {
		return ""
	}
	return *t.Pap
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Password
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Password) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Password) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Password"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Password) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Password) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Password.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_Password) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_RadiusAccountingPolicy represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp/host/radius-accounting-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_RadiusAccountingPolicy struct {
	Duplicate *string `path:"duplicate" module:"nokia-conf"`
	Name      *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_RadiusAccountingPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_RadiusAccountingPolicy) IsYANGGoStruct() {
}

// GetDuplicate retrieves the value of the leaf Duplicate from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_RadiusAccountingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Duplicate is set, it can
// safely use t.GetDuplicate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Duplicate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_RadiusAccountingPolicy) GetDuplicate() string {
	if t == nil || t.Duplicate == nil {
		return ""
	}
	return *t.Duplicate
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_RadiusAccountingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_RadiusAccountingPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_RadiusAccountingPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_RadiusAccountingPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_RadiusAccountingPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_RadiusAccountingPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_RadiusAccountingPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_RadiusAccountingPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_RadiusAccountingPolicy.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_RadiusAccountingPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp/host/to-client-options YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions struct {
	Ipv6Option map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option_Number_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option `path:"ipv6-option" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions) IsYANGGoStruct() {
}

// NewIpv6Option creates a new entry in the Ipv6Option list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions) NewIpv6Option(Number NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option_Number_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6Option == nil {
		t.Ipv6Option = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option_Number_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option)
	}

	key := Number

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv6Option[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv6Option", key)
	}

	t.Ipv6Option[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option{
		Number: Number,
	}

	return t.Ipv6Option[key], nil
}

// RenameIpv6Option renames an entry in the list Ipv6Option within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions) RenameIpv6Option(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option_Number_Union) error {
	if _, ok := t.Ipv6Option[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv6Option", newK)
	}

	e, ok := t.Ipv6Option[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv6Option", oldK)
	}
	e.Number = newK

	t.Ipv6Option[newK] = e
	delete(t.Ipv6Option, oldK)
	return nil
}

// GetOrCreateIpv6Option retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions) GetOrCreateIpv6Option(Number NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option_Number_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option {

	key := Number

	if v, ok := t.Ipv6Option[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv6Option(Number)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv6Option got unexpected error: %v", err))
	}
	return v
}

// GetIpv6Option retrieves the value with the specified key from
// the Ipv6Option map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions) GetIpv6Option(Number NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option_Number_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option {

	if t == nil {
		return nil
	}

	key := Number

	if lm, ok := t.Ipv6Option[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv6Option deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions) DeleteIpv6Option(Number NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option_Number_Union) {
	key := Number

	delete(t.Ipv6Option, key)
}

// AppendIpv6Option appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option struct to the
// list Ipv6Option of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions) AppendIpv6Option(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option) error {
	key := v.Number

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6Option == nil {
		t.Ipv6Option = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option_Number_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option)
	}

	if _, ok := t.Ipv6Option[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv6Option %v", key)
	}

	t.Ipv6Option[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Ipv6Option {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp/host/to-client-options/ipv6-option YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option struct {
	AsciiString  *string                                                                                                      `path:"ascii-string" module:"nokia-conf"`
	DomainString *string                                                                                                      `path:"domain-string" module:"nokia-conf"`
	Empty        YANGEmpty                                                                                                    `path:"empty" module:"nokia-conf"`
	HexString    *string                                                                                                      `path:"hex-string" module:"nokia-conf"`
	Ipv6Address  []string                                                                                                     `path:"ipv6-address" module:"nokia-conf"`
	Number       NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option_Number_Union `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option) IsYANGGoStruct() {
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetDomainString retrieves the value of the leaf DomainString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainString is set, it can
// safely use t.GetDomainString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option) GetDomainString() string {
	if t == nil || t.DomainString == nil {
		return ""
	}
	return *t.DomainString
}

// GetEmpty retrieves the value of the leaf Empty from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Empty is set, it can
// safely use t.GetEmpty() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Empty == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option) GetEmpty() YANGEmpty {
	if t == nil || t.Empty == false {
		return false
	}
	return t.Empty
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option) GetIpv6Address() []string {
	if t == nil || t.Ipv6Address == nil {
		return nil
	}
	return t.Ipv6Address
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option) GetNumber() NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option_Number_Union {
	if t == nil || t.Number == nil {
		return nil
	}
	return t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"number": t.Number,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Host_ToClientOptions_Ipv6Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp/mask YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask struct {
	Prefix *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Prefix    `path:"prefix" module:"nokia-conf" yangPresence:"true"`
	Suffix *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Suffix    `path:"suffix" module:"nokia-conf" yangPresence:"true"`
	Type   NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Type_Union `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask) IsYANGGoStruct() {}

// GetOrCreatePrefix retrieves the value of the Prefix field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask) GetOrCreatePrefix() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Prefix {
	if t.Prefix != nil {
		return t.Prefix
	}
	t.Prefix = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Prefix{}
	return t.Prefix
}

// GetOrCreateSuffix retrieves the value of the Suffix field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask) GetOrCreateSuffix() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Suffix {
	if t.Suffix != nil {
		return t.Suffix
	}
	t.Suffix = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Suffix{}
	return t.Suffix
}

// GetPrefix returns the value of the Prefix struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask. If the receiver or the field Prefix is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask) GetPrefix() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Prefix {
	if t != nil && t.Prefix != nil {
		return t.Prefix
	}
	return nil
}

// GetSuffix returns the value of the Suffix struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask. If the receiver or the field Suffix is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask) GetSuffix() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Suffix {
	if t != nil && t.Suffix != nil {
		return t.Suffix
	}
	return nil
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask) GetType() NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Type_Union {
	if t == nil || t.Type == nil {
		return nil
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Prefix.PopulateDefaults()
	t.Suffix.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"type": t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Prefix represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp/mask/prefix YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Prefix struct {
	Length *uint32 `path:"length" module:"nokia-conf"`
	String *string `path:"string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Prefix) IsYANGGoStruct() {
}

// GetLength retrieves the value of the leaf Length from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Length is set, it can
// safely use t.GetLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Length == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Prefix) GetLength() uint32 {
	if t == nil || t.Length == nil {
		return 0
	}
	return *t.Length
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Prefix) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Prefix.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Suffix represents the /nokia-conf/configure/groups/group/subscriber-mgmt/local-user-db/ppp/mask/suffix YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Suffix struct {
	Length *uint32 `path:"length" module:"nokia-conf"`
	String *string `path:"string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Suffix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Suffix) IsYANGGoStruct() {
}

// GetLength retrieves the value of the leaf Length from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Suffix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Length is set, it can
// safely use t.GetLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Length == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Suffix) GetLength() uint32 {
	if t == nil || t.Length == nil {
		return 0
	}
	return *t.Length
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Suffix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Suffix) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Suffix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Suffix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Suffix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Suffix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Suffix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Suffix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Suffix.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_LocalUserDb_Ppp_Mask_Suffix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy represents the /nokia-conf/configure/groups/group/subscriber-mgmt/mld-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy struct {
	Description                *string                                                                     `path:"description" module:"nokia-conf"`
	EgressRateModify           *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_EgressRateModify `path:"egress-rate-modify" module:"nokia-conf"`
	FastLeave                  *bool                                                                       `path:"fast-leave" module:"nokia-conf"`
	ImportPolicy               *string                                                                     `path:"import-policy" module:"nokia-conf"`
	MaximumNumberGroupSources  *uint32                                                                     `path:"maximum-number-group-sources" module:"nokia-conf"`
	MaximumNumberGroups        *uint32                                                                     `path:"maximum-number-groups" module:"nokia-conf"`
	MaximumNumberSources       *uint32                                                                     `path:"maximum-number-sources" module:"nokia-conf"`
	Name                       *string                                                                     `path:"name" module:"nokia-conf"`
	QueryInterval              *uint32                                                                     `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval    *uint32                                                                     `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval      *uint32                                                                     `path:"query-response-interval" module:"nokia-conf"`
	RedirectionPolicy          *string                                                                     `path:"redirection-policy" module:"nokia-conf"`
	Replication                E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Replication     `path:"replication" module:"nokia-conf"`
	RouterAlertCheck           *bool                                                                       `path:"router-alert-check" module:"nokia-conf"`
	Static                     *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static           `path:"static" module:"nokia-conf"`
	UseMulticastDestinationMac *bool                                                                       `path:"use-multicast-destination-mac" module:"nokia-conf"`
	Version                    E_NokiaTypesIgmp_MldVersion                                                 `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy) IsYANGGoStruct() {}

// GetOrCreateEgressRateModify retrieves the value of the EgressRateModify field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy) GetOrCreateEgressRateModify() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_EgressRateModify {
	if t.EgressRateModify != nil {
		return t.EgressRateModify
	}
	t.EgressRateModify = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_EgressRateModify{}
	return t.EgressRateModify
}

// GetOrCreateStatic retrieves the value of the Static field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy) GetOrCreateStatic() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static {
	if t.Static != nil {
		return t.Static
	}
	t.Static = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static{}
	return t.Static
}

// GetEgressRateModify returns the value of the EgressRateModify struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy. If the receiver or the field EgressRateModify is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy) GetEgressRateModify() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_EgressRateModify {
	if t != nil && t.EgressRateModify != nil {
		return t.EgressRateModify
	}
	return nil
}

// GetStatic returns the value of the Static struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy. If the receiver or the field Static is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy) GetStatic() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static {
	if t != nil && t.Static != nil {
		return t.Static
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFastLeave retrieves the value of the leaf FastLeave from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastLeave is set, it can
// safely use t.GetFastLeave() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastLeave == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy) GetFastLeave() bool {
	if t == nil || t.FastLeave == nil {
		return true
	}
	return *t.FastLeave
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetMaximumNumberGroupSources retrieves the value of the leaf MaximumNumberGroupSources from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroupSources is set, it can
// safely use t.GetMaximumNumberGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroupSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy) GetMaximumNumberGroupSources() uint32 {
	if t == nil || t.MaximumNumberGroupSources == nil {
		return 0
	}
	return *t.MaximumNumberGroupSources
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMaximumNumberSources retrieves the value of the leaf MaximumNumberSources from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberSources is set, it can
// safely use t.GetMaximumNumberSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy) GetMaximumNumberSources() uint32 {
	if t == nil || t.MaximumNumberSources == nil {
		return 0
	}
	return *t.MaximumNumberSources
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 0
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 0
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 0
	}
	return *t.QueryResponseInterval
}

// GetRedirectionPolicy retrieves the value of the leaf RedirectionPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedirectionPolicy is set, it can
// safely use t.GetRedirectionPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedirectionPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy) GetRedirectionPolicy() string {
	if t == nil || t.RedirectionPolicy == nil {
		return ""
	}
	return *t.RedirectionPolicy
}

// GetReplication retrieves the value of the leaf Replication from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Replication is set, it can
// safely use t.GetReplication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Replication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy) GetReplication() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Replication {
	if t == nil || t.Replication == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Replication_per_sap
	}
	return t.Replication
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetUseMulticastDestinationMac retrieves the value of the leaf UseMulticastDestinationMac from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseMulticastDestinationMac is set, it can
// safely use t.GetUseMulticastDestinationMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseMulticastDestinationMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy) GetUseMulticastDestinationMac() bool {
	if t == nil || t.UseMulticastDestinationMac == nil {
		return false
	}
	return *t.UseMulticastDestinationMac
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy) GetVersion() E_NokiaTypesIgmp_MldVersion {
	if t == nil || t.Version == 0 {
		return NokiaTypesIgmp_MldVersion_2
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastLeave == nil {
		var v bool = true
		t.FastLeave = &v
	}
	if t.Replication == 0 {
		t.Replication = NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Replication_per_sap
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.UseMulticastDestinationMac == nil {
		var v bool = false
		t.UseMulticastDestinationMac = &v
	}
	if t.Version == 0 {
		t.Version = NokiaTypesIgmp_MldVersion_2
	}
	t.EgressRateModify.PopulateDefaults()
	t.Static.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_EgressRateModify represents the /nokia-conf/configure/groups/group/subscriber-mgmt/mld-policy/egress-rate-modify YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_EgressRateModify struct {
	AggRate   YANGEmpty `path:"agg-rate" module:"nokia-conf"`
	Scheduler *string   `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_EgressRateModify implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_EgressRateModify) IsYANGGoStruct() {}

// GetAggRate retrieves the value of the leaf AggRate from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_EgressRateModify
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AggRate is set, it can
// safely use t.GetAggRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AggRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_EgressRateModify) GetAggRate() YANGEmpty {
	if t == nil || t.AggRate == false {
		return false
	}
	return t.AggRate
}

// GetScheduler retrieves the value of the leaf Scheduler from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_EgressRateModify
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scheduler is set, it can
// safely use t.GetScheduler() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scheduler == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_EgressRateModify) GetScheduler() string {
	if t == nil || t.Scheduler == nil {
		return ""
	}
	return *t.Scheduler
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_EgressRateModify
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_EgressRateModify) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_EgressRateModify) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_EgressRateModify"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_EgressRateModify) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_EgressRateModify) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_EgressRateModify.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_EgressRateModify) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static represents the /nokia-conf/configure/groups/group/subscriber-mgmt/mld-policy/static YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static struct {
	Group map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group `path:"group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static) NewGroup(GroupAddress string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group)
	}

	key := GroupAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group{
		GroupAddress: &GroupAddress,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupAddress = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static) GetOrCreateGroup(GroupAddress string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group {

	key := GroupAddress

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static) GetGroup(GroupAddress string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group {

	if t == nil {
		return nil
	}

	key := GroupAddress

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static) DeleteGroup(GroupAddress string) {
	key := GroupAddress

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group struct to the
// list Group of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static) AppendGroup(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group) error {
	if v.GroupAddress == nil {
		return fmt.Errorf("invalid nil key received for GroupAddress")
	}

	key := *v.GroupAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group represents the /nokia-conf/configure/groups/group/subscriber-mgmt/mld-policy/static/group YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group struct {
	GroupAddress *string                                                                                   `path:"group-address" module:"nokia-conf"`
	Source       map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group_Source `path:"source" module:"nokia-conf"`
	Starg        YANGEmpty                                                                                 `path:"starg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group) IsYANGGoStruct() {}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group) NewSource(SourceAddress string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group) GetSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group_Source struct to the
// list Source of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group) AppendSource(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetStarg retrieves the value of the leaf Starg from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group) GetStarg() YANGEmpty {
	if t == nil || t.Starg == false {
		return false
	}
	return t.Starg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupAddress == nil {
		return nil, fmt.Errorf("nil value for key GroupAddress")
	}

	return map[string]interface{}{
		"group-address": *t.GroupAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group_Source represents the /nokia-conf/configure/groups/group/subscriber-mgmt/mld-policy/static/group/source YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group_Source) IsYANGGoStruct() {
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group_Source.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MldPolicy_Static_Group_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy represents the /nokia-conf/configure/groups/group/subscriber-mgmt/msap-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy struct {
	CpuProtection            *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_CpuProtection            `path:"cpu-protection" module:"nokia-conf"`
	Description              *string                                                                              `path:"description" module:"nokia-conf"`
	DistCpuProtection        *string                                                                              `path:"dist-cpu-protection" module:"nokia-conf"`
	IesVprnOnlySapParameters *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters `path:"ies-vprn-only-sap-parameters" module:"nokia-conf" yangPresence:"true"`
	IgmpHostTracking         *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IgmpHostTracking         `path:"igmp-host-tracking" module:"nokia-conf"`
	LagLinkMapProfile        *int32                                                                               `path:"lag-link-map-profile" module:"nokia-conf"`
	Name                     *string                                                                              `path:"name" module:"nokia-conf"`
	StickyMsaps              *bool                                                                                `path:"sticky-msaps" module:"nokia-conf"`
	StickyMsapsIdleTimeout   *uint32                                                                              `path:"sticky-msaps-idle-timeout" module:"nokia-conf"`
	SubSlaMgmt               *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt               `path:"sub-sla-mgmt" module:"nokia-conf"`
	VplsOnlySapParameters    *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters    `path:"vpls-only-sap-parameters" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy) IsYANGGoStruct() {}

// GetOrCreateCpuProtection retrieves the value of the CpuProtection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy) GetOrCreateCpuProtection() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_CpuProtection {
	if t.CpuProtection != nil {
		return t.CpuProtection
	}
	t.CpuProtection = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_CpuProtection{}
	return t.CpuProtection
}

// GetOrCreateIesVprnOnlySapParameters retrieves the value of the IesVprnOnlySapParameters field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy) GetOrCreateIesVprnOnlySapParameters() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters {
	if t.IesVprnOnlySapParameters != nil {
		return t.IesVprnOnlySapParameters
	}
	t.IesVprnOnlySapParameters = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters{}
	return t.IesVprnOnlySapParameters
}

// GetOrCreateIgmpHostTracking retrieves the value of the IgmpHostTracking field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy) GetOrCreateIgmpHostTracking() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IgmpHostTracking {
	if t.IgmpHostTracking != nil {
		return t.IgmpHostTracking
	}
	t.IgmpHostTracking = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IgmpHostTracking{}
	return t.IgmpHostTracking
}

// GetOrCreateSubSlaMgmt retrieves the value of the SubSlaMgmt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy) GetOrCreateSubSlaMgmt() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt {
	if t.SubSlaMgmt != nil {
		return t.SubSlaMgmt
	}
	t.SubSlaMgmt = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt{}
	return t.SubSlaMgmt
}

// GetOrCreateVplsOnlySapParameters retrieves the value of the VplsOnlySapParameters field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy) GetOrCreateVplsOnlySapParameters() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters {
	if t.VplsOnlySapParameters != nil {
		return t.VplsOnlySapParameters
	}
	t.VplsOnlySapParameters = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters{}
	return t.VplsOnlySapParameters
}

// GetCpuProtection returns the value of the CpuProtection struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy. If the receiver or the field CpuProtection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy) GetCpuProtection() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_CpuProtection {
	if t != nil && t.CpuProtection != nil {
		return t.CpuProtection
	}
	return nil
}

// GetIesVprnOnlySapParameters returns the value of the IesVprnOnlySapParameters struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy. If the receiver or the field IesVprnOnlySapParameters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy) GetIesVprnOnlySapParameters() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters {
	if t != nil && t.IesVprnOnlySapParameters != nil {
		return t.IesVprnOnlySapParameters
	}
	return nil
}

// GetIgmpHostTracking returns the value of the IgmpHostTracking struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy. If the receiver or the field IgmpHostTracking is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy) GetIgmpHostTracking() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IgmpHostTracking {
	if t != nil && t.IgmpHostTracking != nil {
		return t.IgmpHostTracking
	}
	return nil
}

// GetSubSlaMgmt returns the value of the SubSlaMgmt struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy. If the receiver or the field SubSlaMgmt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy) GetSubSlaMgmt() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt {
	if t != nil && t.SubSlaMgmt != nil {
		return t.SubSlaMgmt
	}
	return nil
}

// GetVplsOnlySapParameters returns the value of the VplsOnlySapParameters struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy. If the receiver or the field VplsOnlySapParameters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy) GetVplsOnlySapParameters() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters {
	if t != nil && t.VplsOnlySapParameters != nil {
		return t.VplsOnlySapParameters
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDistCpuProtection retrieves the value of the leaf DistCpuProtection from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DistCpuProtection is set, it can
// safely use t.GetDistCpuProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DistCpuProtection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy) GetDistCpuProtection() string {
	if t == nil || t.DistCpuProtection == nil {
		return ""
	}
	return *t.DistCpuProtection
}

// GetLagLinkMapProfile retrieves the value of the leaf LagLinkMapProfile from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LagLinkMapProfile is set, it can
// safely use t.GetLagLinkMapProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LagLinkMapProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy) GetLagLinkMapProfile() int32 {
	if t == nil || t.LagLinkMapProfile == nil {
		return 0
	}
	return *t.LagLinkMapProfile
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetStickyMsaps retrieves the value of the leaf StickyMsaps from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StickyMsaps is set, it can
// safely use t.GetStickyMsaps() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StickyMsaps == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy) GetStickyMsaps() bool {
	if t == nil || t.StickyMsaps == nil {
		return false
	}
	return *t.StickyMsaps
}

// GetStickyMsapsIdleTimeout retrieves the value of the leaf StickyMsapsIdleTimeout from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StickyMsapsIdleTimeout is set, it can
// safely use t.GetStickyMsapsIdleTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StickyMsapsIdleTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy) GetStickyMsapsIdleTimeout() uint32 {
	if t == nil || t.StickyMsapsIdleTimeout == nil {
		return 0
	}
	return *t.StickyMsapsIdleTimeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.StickyMsaps == nil {
		var v bool = false
		t.StickyMsaps = &v
	}
	t.CpuProtection.PopulateDefaults()
	t.IesVprnOnlySapParameters.PopulateDefaults()
	t.IgmpHostTracking.PopulateDefaults()
	t.SubSlaMgmt.PopulateDefaults()
	t.VplsOnlySapParameters.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_CpuProtection represents the /nokia-conf/configure/groups/group/subscriber-mgmt/msap-policy/cpu-protection YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_CpuProtection struct {
	IpSrcMonitoring YANGEmpty `path:"ip-src-monitoring" module:"nokia-conf"`
	MacMonitoring   YANGEmpty `path:"mac-monitoring" module:"nokia-conf"`
	PolicyId        *uint32   `path:"policy-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_CpuProtection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_CpuProtection) IsYANGGoStruct() {}

// GetIpSrcMonitoring retrieves the value of the leaf IpSrcMonitoring from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpSrcMonitoring is set, it can
// safely use t.GetIpSrcMonitoring() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpSrcMonitoring == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_CpuProtection) GetIpSrcMonitoring() YANGEmpty {
	if t == nil || t.IpSrcMonitoring == false {
		return false
	}
	return t.IpSrcMonitoring
}

// GetMacMonitoring retrieves the value of the leaf MacMonitoring from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacMonitoring is set, it can
// safely use t.GetMacMonitoring() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacMonitoring == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_CpuProtection) GetMacMonitoring() YANGEmpty {
	if t == nil || t.MacMonitoring == false {
		return false
	}
	return t.MacMonitoring
}

// GetPolicyId retrieves the value of the leaf PolicyId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyId is set, it can
// safely use t.GetPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_CpuProtection) GetPolicyId() uint32 {
	if t == nil || t.PolicyId == nil {
		return 0
	}
	return *t.PolicyId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_CpuProtection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_CpuProtection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_CpuProtection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_CpuProtection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_CpuProtection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_CpuProtection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_CpuProtection.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_CpuProtection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters represents the /nokia-conf/configure/groups/group/subscriber-mgmt/msap-policy/ies-vprn-only-sap-parameters YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters struct {
	AntiSpoof E_NokiaTypesServices_AntiSpoofOptionIpMac                                                    `path:"anti-spoof" module:"nokia-conf"`
	Egress    *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Egress  `path:"egress" module:"nokia-conf"`
	Ingress   *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress `path:"ingress" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters) IsYANGGoStruct() {
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Egress{}
	return t.Egress
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress{}
	return t.Ingress
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters) GetEgress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters) GetIngress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetAntiSpoof retrieves the value of the leaf AntiSpoof from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AntiSpoof is set, it can
// safely use t.GetAntiSpoof() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AntiSpoof == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters) GetAntiSpoof() E_NokiaTypesServices_AntiSpoofOptionIpMac {
	if t == nil || t.AntiSpoof == 0 {
		return NokiaTypesServices_AntiSpoofOptionIpMac_source_ip_and_mac_addr
	}
	return t.AntiSpoof
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AntiSpoof == 0 {
		t.AntiSpoof = NokiaTypesServices_AntiSpoofOptionIpMac_source_ip_and_mac_addr
	}
	t.Egress.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Egress represents the /nokia-conf/configure/groups/group/subscriber-mgmt/msap-policy/ies-vprn-only-sap-parameters/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Egress struct {
	Qos *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Egress_Qos `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Egress) IsYANGGoStruct() {
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Egress) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Egress_Qos{}
	return t.Qos
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Egress) GetQos() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Egress.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Egress_Qos represents the /nokia-conf/configure/groups/group/subscriber-mgmt/msap-policy/ies-vprn-only-sap-parameters/egress/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Egress_Qos struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Egress_Qos) IsYANGGoStruct() {
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Egress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Egress_Qos) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Egress_Qos.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress represents the /nokia-conf/configure/groups/group/subscriber-mgmt/msap-policy/ies-vprn-only-sap-parameters/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress struct {
	Qos *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress_Qos `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress) IsYANGGoStruct() {
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress_Qos{}
	return t.Qos
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress) GetQos() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress_Qos represents the /nokia-conf/configure/groups/group/subscriber-mgmt/msap-policy/ies-vprn-only-sap-parameters/ingress/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress_Qos struct {
	PolicyName  *string                                                                                                       `path:"policy-name" module:"nokia-conf"`
	QueuingType E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress_Qos_QueuingType `path:"queuing-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress_Qos) IsYANGGoStruct() {
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress_Qos) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetQueuingType retrieves the value of the leaf QueuingType from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuingType is set, it can
// safely use t.GetQueuingType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuingType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress_Qos) GetQueuingType() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress_Qos_QueuingType {
	if t == nil || t.QueuingType == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress_Qos_QueuingType_shared
	}
	return t.QueuingType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.QueuingType == 0 {
		t.QueuingType = NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress_Qos_QueuingType_shared
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress_Qos.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IesVprnOnlySapParameters_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IgmpHostTracking represents the /nokia-conf/configure/groups/group/subscriber-mgmt/msap-policy/igmp-host-tracking YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IgmpHostTracking struct {
	ExpiryTime                *uint32 `path:"expiry-time" module:"nokia-conf"`
	ImportPolicy              *string `path:"import-policy" module:"nokia-conf"`
	MaximumNumberGroupSources *uint32 `path:"maximum-number-group-sources" module:"nokia-conf"`
	MaximumNumberGroups       *uint32 `path:"maximum-number-groups" module:"nokia-conf"`
	MaximumNumberSources      *uint32 `path:"maximum-number-sources" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IgmpHostTracking implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IgmpHostTracking) IsYANGGoStruct() {
}

// GetExpiryTime retrieves the value of the leaf ExpiryTime from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExpiryTime is set, it can
// safely use t.GetExpiryTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExpiryTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IgmpHostTracking) GetExpiryTime() uint32 {
	if t == nil || t.ExpiryTime == nil {
		return 0
	}
	return *t.ExpiryTime
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IgmpHostTracking) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetMaximumNumberGroupSources retrieves the value of the leaf MaximumNumberGroupSources from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroupSources is set, it can
// safely use t.GetMaximumNumberGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroupSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IgmpHostTracking) GetMaximumNumberGroupSources() uint32 {
	if t == nil || t.MaximumNumberGroupSources == nil {
		return 0
	}
	return *t.MaximumNumberGroupSources
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IgmpHostTracking) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMaximumNumberSources retrieves the value of the leaf MaximumNumberSources from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberSources is set, it can
// safely use t.GetMaximumNumberSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IgmpHostTracking) GetMaximumNumberSources() uint32 {
	if t == nil || t.MaximumNumberSources == nil {
		return 0
	}
	return *t.MaximumNumberSources
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IgmpHostTracking
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IgmpHostTracking) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IgmpHostTracking) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IgmpHostTracking"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IgmpHostTracking) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IgmpHostTracking) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IgmpHostTracking.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_IgmpHostTracking) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt represents the /nokia-conf/configure/groups/group/subscriber-mgmt/msap-policy/sub-sla-mgmt YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt struct {
	Defaults            *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults             `path:"defaults" module:"nokia-conf"`
	SingleSubParameters *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters  `path:"single-sub-parameters" module:"nokia-conf"`
	SubIdentPolicy      *string                                                                                     `path:"sub-ident-policy" module:"nokia-conf"`
	SubscriberLimit     NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SubscriberLimit_Union `path:"subscriber-limit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt) IsYANGGoStruct() {}

// GetOrCreateDefaults retrieves the value of the Defaults field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt) GetOrCreateDefaults() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults {
	if t.Defaults != nil {
		return t.Defaults
	}
	t.Defaults = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults{}
	return t.Defaults
}

// GetOrCreateSingleSubParameters retrieves the value of the SingleSubParameters field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt) GetOrCreateSingleSubParameters() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters {
	if t.SingleSubParameters != nil {
		return t.SingleSubParameters
	}
	t.SingleSubParameters = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters{}
	return t.SingleSubParameters
}

// GetDefaults returns the value of the Defaults struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt. If the receiver or the field Defaults is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt) GetDefaults() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults {
	if t != nil && t.Defaults != nil {
		return t.Defaults
	}
	return nil
}

// GetSingleSubParameters returns the value of the SingleSubParameters struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt. If the receiver or the field SingleSubParameters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt) GetSingleSubParameters() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters {
	if t != nil && t.SingleSubParameters != nil {
		return t.SingleSubParameters
	}
	return nil
}

// GetSubIdentPolicy retrieves the value of the leaf SubIdentPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubIdentPolicy is set, it can
// safely use t.GetSubIdentPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubIdentPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt) GetSubIdentPolicy() string {
	if t == nil || t.SubIdentPolicy == nil {
		return ""
	}
	return *t.SubIdentPolicy
}

// GetSubscriberLimit retrieves the value of the leaf SubscriberLimit from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubscriberLimit is set, it can
// safely use t.GetSubscriberLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubscriberLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt) GetSubscriberLimit() NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SubscriberLimit_Union {
	if t == nil || t.SubscriberLimit == nil {
		return UnionUint32(1)
	}
	return t.SubscriberLimit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SubscriberLimit == nil {
		t.SubscriberLimit = UnionUint32(1)
	}
	t.Defaults.PopulateDefaults()
	t.SingleSubParameters.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt) ΛBelongingModule() string {
	return "nokia-conf"
}
